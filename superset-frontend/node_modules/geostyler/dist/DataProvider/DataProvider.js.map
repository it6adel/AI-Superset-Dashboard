{"version":3,"file":"DataProvider.js","sourceRoot":"","sources":["../../src/DataProvider/DataProvider.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;AAKH;;GAEG;AACH;IAQE,sBAAY,OAAqB;QAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,2EAA2E;gBACzF,yDAAyD,CAAC,CAAC;SAC9D;IACH,CAAC;IAED;;;;;;OAMG;IACH,iCAAU,GAAV,UAAW,SAAc,EAAE,MAAc;QACvC,IAAM,cAAc,GAAe,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAClE,OAAO,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,wCAAiB,GAAjB,UAAkB,MAAc;QAC9B,IAAI,IAAI,CAAC;QACT,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACzB,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,KAAK,MAAM,CAAC,WAAW,EAAE;gBACpD,IAAI,GAAgB,MAAM,CAAC,QAAQ,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAMD,sBAAW,iCAAO;QAJlB;;;WAGG;aACH;YACE,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QAED;;;aAGK;aACL,UAAmB,KAAmB;YACpC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxB,CAAC;;;OARA;IAUH,mBAAC;AAAD,CAAC,AA3DD,IA2DC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport ParserDesc from './ParserDesc';\nimport { DataParser, Data } from 'geostyler-data';\n\n/**\n * DataProvider acting as translator between input data and the internal data representation.\n */\nclass DataProvider {\n\n  /**\n   * The parser descriptions\n   * @type {ParserDesc[]}\n   */\n  private _parsers: ParserDesc[];\n\n  constructor(parsers: ParserDesc[]) {\n    this._parsers = parsers;\n\n    if (this._parsers.length === 0) {\n      throw new Error('The DataProvider was instantiated with an empty \"parsers\" configuration. ' +\n        'The data import will not work - was this intentionally?');\n    }\n  }\n\n  /**\n   * Imports the given data and transforms it into the internal data structure. Therefore an appropriate parser is\n   * detected by the given format.\n   *\n   * @param inputData\n   * @param format\n   */\n  importData(inputData: any, format: string): Promise<Data> {\n    const parserInstance: DataParser = this.getMatchingParser(format);\n    return parserInstance.readData(inputData);\n  }\n\n  /**\n   * Returns the correct parser for the given format (or undefined).\n   */\n  getMatchingParser(format: string): any {\n    let prsr;\n    this.parsers.forEach(parser => {\n      if (parser.format.toLowerCase === format.toLowerCase) {\n        prsr = <DataParser> parser.instance;\n      }\n    });\n\n    return prsr;\n  }\n\n  /**\n   * Getter parsers\n   * @return {ParserDesc[]}\n   */\n  public get parsers(): ParserDesc[] {\n    return this._parsers;\n  }\n\n  /**\n     * Setter parsers\n     * @param {ParserDesc[]} value\n     */\n  public set parsers(value: ParserDesc[]) {\n    this._parsers = value;\n  }\n\n}\n\nexport default DataProvider;\n"]}