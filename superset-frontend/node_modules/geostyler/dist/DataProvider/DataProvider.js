"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * DataProvider acting as translator between input data and the internal data representation.
 */
var DataProvider = /** @class */ (function () {
    function DataProvider(parsers) {
        this._parsers = parsers;
        if (this._parsers.length === 0) {
            throw new Error('The DataProvider was instantiated with an empty "parsers" configuration. ' +
                'The data import will not work - was this intentionally?');
        }
    }
    /**
     * Imports the given data and transforms it into the internal data structure. Therefore an appropriate parser is
     * detected by the given format.
     *
     * @param inputData
     * @param format
     */
    DataProvider.prototype.importData = function (inputData, format) {
        var parserInstance = this.getMatchingParser(format);
        return parserInstance.readData(inputData);
    };
    /**
     * Returns the correct parser for the given format (or undefined).
     */
    DataProvider.prototype.getMatchingParser = function (format) {
        var prsr;
        this.parsers.forEach(function (parser) {
            if (parser.format.toLowerCase === format.toLowerCase) {
                prsr = parser.instance;
            }
        });
        return prsr;
    };
    Object.defineProperty(DataProvider.prototype, "parsers", {
        /**
         * Getter parsers
         * @return {ParserDesc[]}
         */
        get: function () {
            return this._parsers;
        },
        /**
           * Setter parsers
           * @param {ParserDesc[]} value
           */
        set: function (value) {
            this._parsers = value;
        },
        enumerable: false,
        configurable: true
    });
    return DataProvider;
}());
exports.default = DataProvider;
//# sourceMappingURL=DataProvider.js.map