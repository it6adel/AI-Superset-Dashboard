{"version":3,"file":"RuleGeneratorUtil.js","sourceRoot":"","sources":["../../src/Util/RuleGeneratorUtil.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;AAGH,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAY/B,oEAA8C;AAC9C,uCAImB;AAiBnB;;GAEG;AACH;IAAA;IAkLA,CAAC;IAhLQ,mCAAiB,GAAxB,UAAyB,IAAgB,EAAE,aAAqB;;QAC9D,IAAM,cAAc,GAAU,EAAE,CAAC;QACjC,IAAM,QAAQ,GAAc,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,eAAe,0CAAE,QAAQ,CAAC;QAC5D,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAgB;;gBAChC,IAAM,KAAK,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,0CAAG,aAAa,CAAC,CAAC;gBACnD,IAAI,KAAK,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;oBAC5C,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC5B;YACH,CAAC,CAAC,CAAC;YACH,OAAO,cAAc,CAAC;SACvB;QACD,OAAO,cAAc,CAAC;IACxB,CAAC;IAEM,yCAAuB,GAA9B,UAA+B,IAAgB;;QAC7C,IAAM,wBAAwB,GAC1B,MAAA,MAAA,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,eAAe,0CAAE,QAAQ,0CAAG,CAAC,CAAC,0CAAE,QAAQ,0CAAE,IAAI,CAAC;QAEzD,QAAQ,wBAAwB,EAAE;YAChC,KAAK,OAAO,CAAC;YACb,KAAK,YAAY;gBACf,OAAO,MAAM,CAAC;YAChB,KAAK,YAAY,CAAC;YAClB,KAAK,iBAAiB;gBACpB,OAAO,MAAM,CAAC;YAChB,KAAK,SAAS,CAAC;YACf,KAAK,cAAc;gBACjB,OAAO,MAAM,CAAC;YAChB;gBACE,OAAO,MAAM,CAAC;SACjB;IACH,CAAC;IAEM,gCAAc,GAArB,UAAsB,MAAgB,EAAE,aAAqB,EAAE,UAAqC;QAArC,2BAAA,EAAA,kBAAqC;QAClG,IAAI;YACF,OAAO,IAAA,iBAAW,EAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;SACnE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAEM,+BAAa,GAApB,UAAqB,MAA4B;;QAE7C,IAAA,IAAI,GAQF,MAAM,KARJ,EACJ,kBAAkB,GAOhB,MAAM,mBAPU,EAClB,aAAa,GAMX,MAAM,cANK,EACL,WAAW,GAKjB,MAAM,OALW,EACnB,UAAU,GAIR,MAAM,WAJE,EACV,cAAc,GAGZ,MAAM,eAHM,EACd,aAAa,GAEX,MAAM,cAFK,EACb,oBAAoB,GAClB,MAAM,qBADY,CACX;QACX,IAAI,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAEzC,IAAI,MAAM,GAAG,iBAAiB,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;QAEtF,IAAI,KAAK,GAAW,EAAE,CAAC;QACvB,IAAI,kBAAkB,KAAK,SAAS,EAAE;YACpC,IAAM,cAAc,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAChF,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAChE,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,UAAC,aAAa,EAAE,KAAa;gBACtD,IAAM,MAAM,GAAW,CAAC,IAAI,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;gBAC5D,IAAM,UAAU,GAAe,wBAAc,CAAC,kBAAkB,CAAC,cAAc,EAAE;oBAC/E,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;oBACpB,aAAa,eAAA;iBACd,CAAC,CAAC;gBACH,OAAO;oBACL,IAAI,EAAE,aAAa;oBACnB,MAAM,QAAA;oBACN,WAAW,EAAE,CAAC,UAAU,CAAC;iBAC1B,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,kBAAkB,KAAK,UAAU,EAAE;YAC5C,IAAI,CAAC,oBAAoB,EAAE;gBACzB,oBAAoB;aACrB;iBAAM;gBACL,IAAM,QAAQ,GAAU,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,eAAe,0CAAE,QAAQ,CAAC;gBACxD,IAAM,MAAM,GAAG,QAAQ;oBACrB,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAgB,YAAK,OAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,0CAAG,aAAa,CAAC,CAAA,EAAA,CAAC;oBAC1E,CAAC,CAAC,EAAE,CAAC;gBACP,IAAI,QAAM,GAAe,EAAE,CAAC;gBAE5B,QAAQ,oBAAoB,EAAE;oBAC5B,KAAK,eAAe;wBAClB,QAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;wBACjE,MAAM;oBACR,KAAK,UAAU;wBACb,QAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;wBACjE,MAAM;oBACR,KAAK,aAAa;wBAChB,QAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;wBACjE,MAAM;oBACR,KAAK,QAAQ;wBACX,QAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;wBACjE,aAAa,GAAG,QAAM,CAAC,MAAM,CAAC;wBAC9B,MAAM,GAAG,iBAAiB,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;wBAClF,MAAM;oBACR;wBACE,MAAM;iBACT;gBAED,KAAK,GAAG,QAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAa;oBACtC,IAAM,MAAM,GAAG,KAAK,KAAK,QAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC3C,IAAM,MAAM,GAAW;wBACrB,IAAI;wBACJ,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC/B,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;qBAC/C,CAAC;oBACF,IAAM,UAAU,GAAe,wBAAc,CAAC,kBAAkB,CAAC,cAAc,EAAE;wBAC/E,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;wBACpB,aAAa,eAAA;qBACd,CAAC,CAAC;oBACH,OAAO;wBACL,IAAI,EAAE,UAAG,aAAa,cAAI,KAAK,CAAC,CAAC,CAAC,gBAAM,KAAK,CAAC,CAAC,CAAC,CAAE;wBAClD,MAAM,QAAA;wBACN,WAAW,EAAE,CAAC,UAAU,CAAC;qBAC1B,CAAC;gBACJ,CAAC,CAAC,CAAC;aACJ;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAyBD;;;;;;;;;;OAUG;IACI,2BAAS,GAAhB,UAAiB,MAAgB,EAAE,eAAuB,EAAE,IAAiC;QAAjC,qBAAA,EAAA,UAAiC;QAC3F,IAAM,MAAM,GAAG,IAAA,kBAAY,EAAC,MAAM,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;QAC3D,OAAO,iBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACI,gCAAc,GAArB,UAAsB,MAAgB;QACpC,IAAM,MAAM,GAAG,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC5C,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACxC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAlDD;;;;;OAKG;IACI,mDAAiC,GAAG,UAAC,MAAgB;QAC1D,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,KAAa,IAAK,OAAA,0BAAmB,KAAK,eAAK,KAAK,MAAG,EAArC,CAAqC,CAAC,CAAC;QACvF,IAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,KAAa,EAAE,KAAa;YACnD,IAAM,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAClD,OAAO,UAAG,KAAK,WAAQ,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,IAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QACrE,OAAO;YACL,eAAe,EAAE,eAAe;YAChC,cAAc,EAAE,cAAc;YAC9B,gBAAgB,EAAE,WAAW;YAC7B,KAAK,EAAE,SAAS;SACjB,CAAC;IACJ,CAAC,CAAC;IA+BJ,wBAAC;CAAA,AAlLD,IAkLC;AAED,kBAAe,iBAAiB,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as CSS from 'csstype';\nconst Color = require('color');\nimport { VectorData } from 'geostyler-data';\nimport {\n  LevelOfMeasurement\n} from 'src/Component/RuleGenerator/RuleGenerator';\nimport {\n  Rule,\n  Filter,\n  SymbolizerKind,\n  Symbolizer,\n  WellKnownName\n} from 'geostyler-style';\nimport SymbolizerUtil from './SymbolizerUtil';\nimport {\n  scale as chromaScale,\n  limits as chromaLimits,\n  InterpolationMode\n} from 'chroma-js';\nimport { ClassificationMethod } from 'src/Component/RuleGenerator/ClassificationCombo/ClassificationCombo';\n\nimport { Feature, GeoJsonGeometryTypes } from 'geojson';\n\nexport interface RuleGenerationParams {\n  data: VectorData;\n  levelOfMeasurement: LevelOfMeasurement;\n  numberOfRules: number;\n  attributeName: string;\n  colors: string[];\n  colorSpace?: InterpolationMode;\n  symbolizerKind: SymbolizerKind;\n  wellKnownName?: WellKnownName;\n  classificationMethod?: ClassificationMethod;\n}\n\n/**\n * @class RuleUtil\n */\nclass RuleGeneratorUtil {\n\n  static getDistinctValues(data: VectorData, attributeName: string): any[] {\n    const distinctValues: any[] = [];\n    const features: Feature[] = data?.exampleFeatures?.features;\n    if (features) {\n      features.forEach((feature: Feature) => {\n        const value = feature?.properties?.[attributeName];\n        if (value && !distinctValues.includes(value)) {\n          distinctValues.push(value);\n        }\n      });\n      return distinctValues;\n    }\n    return distinctValues;\n  }\n\n  static guessSymbolizerFromData(data: VectorData): SymbolizerKind {\n    const firstFeatureGeometryType: GeoJsonGeometryTypes\n      = data?.exampleFeatures?.features?.[0]?.geometry?.type;\n\n    switch (firstFeatureGeometryType) {\n      case 'Point':\n      case 'MultiPoint':\n        return 'Mark';\n      case 'LineString':\n      case 'MultiLineString':\n        return 'Line';\n      case 'Polygon':\n      case 'MultiPolygon':\n        return 'Fill';\n      default:\n        return 'Mark';\n    }\n  }\n\n  static generateColors(colors: string[], numberOfRules: number, colorSpace: InterpolationMode = 'hsl'): string[] {\n    try {\n      return chromaScale(colors).mode(colorSpace).colors(numberOfRules);\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  static generateRules(params: RuleGenerationParams): Rule[] {\n    const {\n      data,\n      levelOfMeasurement,\n      attributeName,\n      colors: inputColors,\n      colorSpace,\n      symbolizerKind,\n      wellKnownName,\n      classificationMethod\n    } = params;\n    let numberOfRules = params.numberOfRules;\n\n    let colors = RuleGeneratorUtil.generateColors(inputColors, numberOfRules, colorSpace);\n\n    let rules: Rule[] = [];\n    if (levelOfMeasurement === 'nominal') {\n      const distinctValues = RuleGeneratorUtil.getDistinctValues(data, attributeName);\n      distinctValues.splice(numberOfRules, distinctValues.length - 2);\n      rules = distinctValues.map((distinctValue, index: number) => {\n        const filter: Filter = ['==', attributeName, distinctValue];\n        const symbolizer: Symbolizer = SymbolizerUtil.generateSymbolizer(symbolizerKind, {\n          color: colors[index],\n          wellKnownName\n        });\n        return {\n          name: distinctValue,\n          filter,\n          symbolizers: [symbolizer]\n        };\n      });\n    } else if (levelOfMeasurement === 'cardinal') {\n      if (!classificationMethod) {\n        // TODO Add feedback\n      } else {\n        const features: any[] = data?.exampleFeatures?.features;\n        const values = features\n          ? features.map((feature: Feature) => feature?.properties?.[attributeName])\n          : [];\n        let ranges: number[][] = [];\n\n        switch (classificationMethod) {\n          case 'equalInterval':\n            ranges = RuleGeneratorUtil.getRanges(values, numberOfRules, 'e');\n            break;\n          case 'quantile':\n            ranges = RuleGeneratorUtil.getRanges(values, numberOfRules, 'q');\n            break;\n          case 'logarithmic':\n            ranges = RuleGeneratorUtil.getRanges(values, numberOfRules, 'l');\n            break;\n          case 'kmeans':\n            ranges = RuleGeneratorUtil.getRanges(values, numberOfRules, 'k');\n            numberOfRules = ranges.length;\n            colors = RuleGeneratorUtil.generateColors(inputColors, numberOfRules, colorSpace);\n            break;\n          default:\n            break;\n        }\n\n        rules = ranges.map((range, index: number) => {\n          const isLast = index === ranges.length - 1;\n          const filter: Filter = [\n            '&&',\n            ['>=', attributeName, range[0]],\n            [isLast ? '<=' : '<', attributeName, range[1]],\n          ];\n          const symbolizer: Symbolizer = SymbolizerUtil.generateSymbolizer(symbolizerKind, {\n            color: colors[index],\n            wellKnownName\n          });\n          return {\n            name: `${attributeName} ${range[0]} - ${range[1]}`,\n            filter,\n            symbolizers: [symbolizer]\n          };\n        });\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Generates a style object (CSS) from an array of color strings.\n   *\n   * @param {string[]} colors An array of color strings.\n   * @return {Object} An style object (CSS).\n   */\n  static generateBackgroundStyleFromColors = (colors: string[]): CSS.Properties => {\n    const gradients = colors.map((color: string) => `linear-gradient(${color}, ${color})`);\n    const backgroundImage = gradients.join(',');\n    const size = colors.map((color: string, index: number) => {\n      const width = (index + 1) * (100 / colors.length);\n      return `${width}% 100%`;\n    });\n    const backgroundSize = size.join(',');\n    const textColor = Color(colors[0]).isLight() ? '#000000' : '#FFFFFF';\n    return {\n      backgroundImage: backgroundImage,\n      backgroundSize: backgroundSize,\n      backgroundRepeat: 'no-repeat',\n      color: textColor\n    };\n  };\n\n  /**\n   * Get Ranges for quantile spread statistic.\n   *\n   * @param {number[]} series The data values.\n   * @param {number} numberOfClasses The number of classes to generate.\n   * @param {'e'|'q'|'l'|'k'} mode The mode in which the ranges should be generated:\n   *  - e: equidistant\n   *  - q: quantile\n   *  - l: logarihtmic\n   *  - k: k-means\n   */\n  static getRanges(series: number[], numberOfClasses: number, mode: 'e' | 'q' | 'l' | 'k' = 'e') {\n    const bounds = chromaLimits(series, mode, numberOfClasses);\n    return RuleGeneratorUtil.boundsToRanges(bounds);\n  }\n\n  /**\n   * Inspired by GeoStats.js: http://www.intermezzo-coop.eu/mapping/geostats/\n   *\n   * @param {number[]} bounds An array of class boundary values.\n   */\n  static boundsToRanges(bounds: number[]): number[][] {\n    const ranges = [];\n    for (let i = 0; i < (bounds.length - 1); i++) {\n      ranges[i] = [bounds[i], bounds[i + 1]];\n    }\n    return ranges;\n  }\n\n}\n\nexport default RuleGeneratorUtil;\n"]}