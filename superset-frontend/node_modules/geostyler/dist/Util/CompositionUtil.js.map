{"version":3,"file":"CompositionUtil.js","sourceRoot":"","sources":["../../src/Util/CompositionUtil.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAE/B,mDAA8B;AAsB9B;;;;;;;GAOG;AACH;IAAA;IA8EA,CAAC;IA5EC;;;;;;;;OAQG;IACI,iCAAiB,GAAxB,UAAyB,OAA+B;QAEpD,IAAA,WAAW,GAQT,OAAO,YARE,EACX,IAAI,GAOF,OAAO,KAPL,EACJ,QAAQ,GAMN,OAAO,SAND,EACR,SAAS,GAKP,OAAO,UALA,EACT,YAAY,GAIV,OAAO,aAJG,EACZ,cAAc,GAGZ,OAAO,eAHK,EACd,QAAQ,GAEN,OAAO,SAFD,EACR,YAAY,GACV,OAAO,aADG,CACF;QAEZ,IAAM,gBAAgB,GAAG,IAAA,aAAI,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QACjD,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC/D,IAAM,iBAAiB,GAAG,IAAA,aAAI,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAExD,IAAM,aAAa,GAAiC;YAClD,QAAQ,UAAA;YACR,QAAQ,UAAA;YACR,SAAS,WAAA;YACT,YAAY,cAAA;YACZ,YAAY,cAAA;SACmB,CAAC;QAElC,IAAI,gBAAgB,KAAK,SAAS,EAAE;YAClC,IAAI,gBAAgB,KAAK,KAAK,EAAE;gBAC9B,aAAa,CAAC,SAAS,GAAG,gBAAgB,CAAC;gBAC3C,OAAO,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;aACxD;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;SACF;QAED,IAAI,iBAAiB,KAAK,SAAS,EAAE;YACnC,IAAI,iBAAiB,KAAK,KAAK,EAAE;gBAC/B,aAAa,CAAC,SAAS,GAAG,iBAAiB,CAAC;gBAC5C,OAAO,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;aACxD;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;SACF;QAED,aAAa,CAAC,SAAS,GAAG,cAAc,CAAC;QACzC,OAAO,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IACzD,CAAC;IAED;;;;OAIG;IACI,gCAAgB,GAAvB,UAAwB,OAAqC;;QAEzD,IAAA,SAAS,GAMP,OAAO,UANA,EACT,QAAQ,GAKN,OAAO,SALD,EACR,QAAQ,GAIN,OAAO,SAJD,EACR,SAAS,GAGP,OAAO,UAHA,EACT,YAAY,GAEV,OAAO,aAFG,EACZ,YAAY,GACV,OAAO,aADG,CACF;QAEZ,IAAI,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,EAAE,EAAE;YACrD,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,YAAG,GAAC,QAAQ,IAAG,SAAS,EAAE,GAAC,YAAY,IAAG,QAAQ,EAAE,eAAY,eAAA,MAAE,CAAC,CAAC;SACzG;QACD,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,YAAG,GAAC,QAAQ,IAAG,SAAS,EAAE,WAAQ,GAAE,QAAQ,EAAE,eAAY,eAAA,MAAE,CAAC,CAAC;IACpG,CAAC;IAEH,sBAAC;AAAD,CAAC,AA9ED,IA8EC;AAED,kBAAe,eAAe,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\nimport { Compositions } from '../context/CompositionContext/CompositionContext';\nimport _get from 'lodash/get';\n\nexport interface CompositionUtilOptions {\n  composition: Compositions;\n  path: string;\n  propName: string;\n  propValue: any;\n  defaultValue?: any;\n  defaultElement: React.ReactElement;\n  onChange: (...args: any[]) => void;\n  onChangeName?: string;\n}\n\ninterface CompositionUtilInjectOptions {\n  component: React.ReactElement;\n  onChange: (...args: unknown[]) => void;\n  propName: string;\n  propValue: any;\n  defaultValue?: any;\n  onChangeName?: string;\n}\n\n/**\n * Utility functions for the composition context.\n *\n * In order to allow replacement and disablement of certain components\n * we use the CompositionContext. These functions contain the logic for\n * handling which components should be replaced/disabled within a\n * customisable component.\n */\nclass CompositionUtil {\n\n  /**\n   * Main function for handling compositions.\n   *\n   * Takes the composition context, the component to be checked, etc. and\n   * either replaces, disables or returns the original component. Will also\n   * inject the required functions and properties for the replaced components.\n   *\n   * @param options CompositionUtilOptions\n   */\n  static handleComposition(options: CompositionUtilOptions): React.ReactElement {\n    const {\n      composition,\n      path,\n      propName,\n      propValue,\n      defaultValue,\n      defaultElement,\n      onChange,\n      onChangeName\n    } = options;\n\n    const compositionValue = _get(composition, path);\n    const globalPath = path.split('.')[path.split('.').length - 1];\n    const globalComposition = _get(composition, globalPath);\n\n    const injectOptions: CompositionUtilInjectOptions = {\n      onChange,\n      propName,\n      propValue,\n      defaultValue,\n      onChangeName\n    } as CompositionUtilInjectOptions;\n\n    if (compositionValue !== undefined) {\n      if (compositionValue !== false) {\n        injectOptions.component = compositionValue;\n        return CompositionUtil.injectProperties(injectOptions);\n      } else {\n        return null;\n      }\n    }\n\n    if (globalComposition !== undefined) {\n      if (globalComposition !== false) {\n        injectOptions.component = globalComposition;\n        return CompositionUtil.injectProperties(injectOptions);\n      } else {\n        return null;\n      }\n    }\n\n    injectOptions.component = defaultElement;\n    return CompositionUtil.injectProperties(injectOptions);\n  }\n\n  /**\n   * Injects the value and onChange properties to a given component.\n   *\n   * @param options CompositionUtilInjectOptions\n   */\n  static injectProperties(options: CompositionUtilInjectOptions): React.ReactElement {\n    const {\n      component,\n      onChange,\n      propName,\n      propValue,\n      defaultValue,\n      onChangeName,\n    } = options;\n\n    if (onChangeName !== undefined && onChangeName !== '') {\n      return (React.cloneElement(component, {[propName]: propValue, [onChangeName]: onChange, defaultValue}));\n    }\n    return (React.cloneElement(component, {[propName]: propValue, onChange: onChange, defaultValue}));\n  }\n\n}\n\nexport default CompositionUtil;\n"]}