{"version":3,"file":"GeometryUtil.js","sourceRoot":"","sources":["../../src/Util/GeometryUtil.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;AAGH,wDAAwC;AACxC,kEAAkD;AAClD,4DAA4C;AAG5C;;GAEG;AACH;IAAA;IA4CA,CAAC;IA1CQ,mCAAsB,GAAG,UAAC,KAAY,EAAE,UAA0B;QACvE,IAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACtB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;gBACjC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBACpC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI;YACnB,QAAQ,IAAI,EAAE;gBACZ,KAAK,MAAM,CAAC;gBACZ,KAAK,MAAM,CAAC;gBACZ,KAAK,MAAM;oBACT,OAAO,CAAC,IAAI,eAAW,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;yBAC3C,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;gBACxC,KAAK,MAAM;oBACT,OAAO,CAAC,IAAI,iBAAa,CAAC,CAAC;4BACzB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;4BACxC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;4BACvC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;4BACtC,CAAC,kBAAkB,EAAE,iBAAiB,CAAC;4BACvC,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;yBACzC,CAAC,CAAC,CAAC;yBACD,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;gBACxC,KAAK,MAAM;oBACT,OAAO,CAAC,IAAI,oBAAgB,CAAC;wBAC3B,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;wBACvC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;wBACvC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;wBACvC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;wBACtC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;wBACtC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;wBACtC,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;qBACtC,CAAC,CAAC;yBACA,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;gBACxC;oBACE,OAAO,CAAC,IAAI,eAAW,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;yBAC3C,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;aACzC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IACJ,mBAAC;CAAA,AA5CD,IA4CC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { Style } from 'geostyler-style';\nimport OlGeomPoint from 'ol/geom/Point';\nimport OlGeomLineString from 'ol/geom/LineString';\nimport OlGeomPolygon from 'ol/geom/Polygon';\nimport { ProjectionLike } from 'ol/proj';\n\n/**\n * @class GeometryUtil\n */\nclass GeometryUtil {\n\n  static getSampleGeomFromStyle = (style: Style, projection: ProjectionLike) => {\n    const kinds: string[] = [];\n    style.rules.forEach(rule => {\n      rule.symbolizers.forEach(symbolizer => {\n        if (!kinds.includes(symbolizer.kind)) {\n          kinds.push(symbolizer.kind);\n        }\n      });\n    });\n    return kinds.map(kind => {\n      switch (kind) {\n        case 'Mark':\n        case 'Icon':\n        case 'Text':\n          return (new OlGeomPoint([7.10066, 50.735851]))\n            .transform('EPSG:4326', projection);\n        case 'Fill':\n          return (new OlGeomPolygon([[\n            [7.1031761169433585, 50.734268655851345],\n            [7.109270095825195, 50.734268655851345],\n            [7.109270095825195, 50.73824770380063],\n            [7.1031761169433585, 50.73824770380063],\n            [7.1031761169433585, 50.734268655851345]\n          ]]))\n            .transform('EPSG:4326', projection);\n        case 'Line':\n          return (new OlGeomLineString([\n            [7.062578201293945, 50.721786104206004],\n            [7.077512741088867, 50.729610159968296],\n            [7.082319259643555, 50.732435192351126],\n            [7.097940444946289, 50.73748722929948],\n            [7.106866836547852, 50.73775882875318],\n            [7.117509841918945, 50.73889952925885],\n            [7.129182815551758, 50.7504679214779]\n          ]))\n            .transform('EPSG:4326', projection);\n        default:\n          return (new OlGeomPoint([7.10066, 50.735851]))\n            .transform('EPSG:4326', projection);\n      }\n    });\n  };\n}\n\nexport default GeometryUtil;\n"]}