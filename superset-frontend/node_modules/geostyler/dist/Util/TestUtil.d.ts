import * as React from 'react';
import { Style, Filter } from 'geostyler-style';
import { VectorData } from 'geostyler-data';
import { IconLibrary } from '../Component/Symbolizer/IconSelector/IconSelector';
/**
 * A set of some useful static helper methods.
 *
 * @class
 */
export declare class TestUtil {
    /**
     * Mounts the given component.
     *
     * @param {Component} Component The Component to render.
     * @param {Object} props The props to be used.
     * @param {Object} options The options to be set.
     */
    static mountComponent: (Component: any, props?: any, options?: any) => import("enzyme").ReactWrapper<any, Readonly<{}>, React.Component<{}, {}, any>>;
    /**
     * Shallow rendering for the given component.
     * Useful for testing components as a unit, and to ensure that your tests
     * aren't indirectly asserting on behavior of child components.
     *
     * @param {Component} Component The Component to render.
     * @param {Object} props The props to be used.
     * @param {Object} options The options to be set.
     */
    static shallowRenderComponent: (Component: any, props?: any, options?: any) => import("enzyme").ShallowWrapper<any, Readonly<{}>, React.Component<{}, {}, any>>;
    /**
     * Shallow rendering for the given component.
     * Useful for testing components as a unit, and to ensure that your tests
     * aren't indirectly asserting on behavior of child components.
     * This function wraps ConfigProvider around component.
     *
     * @param {Component} Component The Component to render.
     * @param {Object} props The props to be used.
     * @param {Object} options The options to be set.
     */
    static shallowRenderComponentWithLocale: (Component: any, props?: any, options?: any) => import("enzyme").ShallowWrapper<any, Readonly<{}>, React.Component<{}, {}, any>>;
    /**
     *
     */
    static getDummyGsData: () => VectorData;
    static getDummyGsIconLibraries: () => IconLibrary[];
    static getDummyGsFilter: () => Filter;
    static getMarkStyle: () => Style;
    /**
     * Returns a simple line symbolizer object.
     *
     * @returns {Style}
     */
    static getLineStyle: () => Style;
    /**
     * Returns a simple polygon style object.
     *
     * @returns {Style} The polygon style object
     */
    static getPolygonStyle: () => Style;
    /**
     * Returns a simple labeled point style object.
     *
     * @returns {Style} The labeled style object
     */
    static getLabeledPointStyle: () => Style;
    /**
     * Returns a style object containing two rules.
     *
     * @returns {Style} The style object with two rules
     */
    static getTwoRulesStyle: () => Style;
    static getComplexGsDummyData: () => VectorData;
}
export default TestUtil;
