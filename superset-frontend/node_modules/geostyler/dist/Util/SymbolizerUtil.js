"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @class SymbolizerUtil
 */
var SymbolizerUtil = /** @class */ (function () {
    function SymbolizerUtil() {
    }
    /**
     * Generates a symbolizer (with kind Mark with wellknownName Circle if none provided).
     * @param {SymbolizerKind} kind An optional SymbolizerKind
     * @param {object} values Optional values
     */
    SymbolizerUtil.generateSymbolizer = function (kind, values) {
        switch (kind) {
            case 'Mark':
                return __assign(__assign({}, SymbolizerUtil.markSymbolizer), values);
            case 'Icon':
                return __assign(__assign({}, SymbolizerUtil.iconSymbolizer), values);
            case 'Fill':
                return __assign(__assign({}, SymbolizerUtil.fillSymbolizer), values);
            case 'Line':
                return __assign(__assign({}, SymbolizerUtil.lineSymbolizer), values);
            case 'Text':
                return __assign(__assign({}, SymbolizerUtil.textSymbolizer), values);
            case 'Raster':
                return __assign(__assign({}, SymbolizerUtil.rasterSymbolizer), values);
            default:
                return __assign(__assign({}, SymbolizerUtil.defaultSymbolizer), values);
        }
    };
    SymbolizerUtil.markSymbolizer = {
        kind: 'Mark',
        wellKnownName: 'circle',
        color: '#0E1058'
    };
    SymbolizerUtil.iconSymbolizer = {
        kind: 'Icon',
        image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Parking_icon.svg/128px-Parking_icon.svg.png'
    };
    SymbolizerUtil.fillSymbolizer = {
        kind: 'Fill',
        color: '#0E1058'
    };
    SymbolizerUtil.lineSymbolizer = {
        kind: 'Line',
        color: '#0E1058',
        width: 3
    };
    SymbolizerUtil.textSymbolizer = {
        kind: 'Text',
        label: 'Your Label',
        size: 12
    };
    SymbolizerUtil.rasterSymbolizer = {
        kind: 'Raster'
    };
    SymbolizerUtil.defaultSymbolizer = SymbolizerUtil.markSymbolizer;
    return SymbolizerUtil;
}());
exports.default = SymbolizerUtil;
//# sourceMappingURL=SymbolizerUtil.js.map