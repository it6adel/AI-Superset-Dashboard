import * as React from 'react';
import { Compositions } from '../context/CompositionContext/CompositionContext';
export interface CompositionUtilOptions {
    composition: Compositions;
    path: string;
    propName: string;
    propValue: any;
    defaultValue?: any;
    defaultElement: React.ReactElement;
    onChange: (...args: any[]) => void;
    onChangeName?: string;
}
interface CompositionUtilInjectOptions {
    component: React.ReactElement;
    onChange: (...args: unknown[]) => void;
    propName: string;
    propValue: any;
    defaultValue?: any;
    onChangeName?: string;
}
/**
 * Utility functions for the composition context.
 *
 * In order to allow replacement and disablement of certain components
 * we use the CompositionContext. These functions contain the logic for
 * handling which components should be replaced/disabled within a
 * customisable component.
 */
declare class CompositionUtil {
    /**
     * Main function for handling compositions.
     *
     * Takes the composition context, the component to be checked, etc. and
     * either replaces, disables or returns the original component. Will also
     * inject the required functions and properties for the replaced components.
     *
     * @param options CompositionUtilOptions
     */
    static handleComposition(options: CompositionUtilOptions): React.ReactElement;
    /**
     * Injects the value and onChange properties to a given component.
     *
     * @param options CompositionUtilInjectOptions
     */
    static injectProperties(options: CompositionUtilInjectOptions): React.ReactElement;
}
export default CompositionUtil;
