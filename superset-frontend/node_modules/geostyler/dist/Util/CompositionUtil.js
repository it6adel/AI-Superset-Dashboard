"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var get_1 = __importDefault(require("lodash/get"));
/**
 * Utility functions for the composition context.
 *
 * In order to allow replacement and disablement of certain components
 * we use the CompositionContext. These functions contain the logic for
 * handling which components should be replaced/disabled within a
 * customisable component.
 */
var CompositionUtil = /** @class */ (function () {
    function CompositionUtil() {
    }
    /**
     * Main function for handling compositions.
     *
     * Takes the composition context, the component to be checked, etc. and
     * either replaces, disables or returns the original component. Will also
     * inject the required functions and properties for the replaced components.
     *
     * @param options CompositionUtilOptions
     */
    CompositionUtil.handleComposition = function (options) {
        var composition = options.composition, path = options.path, propName = options.propName, propValue = options.propValue, defaultValue = options.defaultValue, defaultElement = options.defaultElement, onChange = options.onChange, onChangeName = options.onChangeName;
        var compositionValue = (0, get_1.default)(composition, path);
        var globalPath = path.split('.')[path.split('.').length - 1];
        var globalComposition = (0, get_1.default)(composition, globalPath);
        var injectOptions = {
            onChange: onChange,
            propName: propName,
            propValue: propValue,
            defaultValue: defaultValue,
            onChangeName: onChangeName
        };
        if (compositionValue !== undefined) {
            if (compositionValue !== false) {
                injectOptions.component = compositionValue;
                return CompositionUtil.injectProperties(injectOptions);
            }
            else {
                return null;
            }
        }
        if (globalComposition !== undefined) {
            if (globalComposition !== false) {
                injectOptions.component = globalComposition;
                return CompositionUtil.injectProperties(injectOptions);
            }
            else {
                return null;
            }
        }
        injectOptions.component = defaultElement;
        return CompositionUtil.injectProperties(injectOptions);
    };
    /**
     * Injects the value and onChange properties to a given component.
     *
     * @param options CompositionUtilInjectOptions
     */
    CompositionUtil.injectProperties = function (options) {
        var _a, _b;
        var component = options.component, onChange = options.onChange, propName = options.propName, propValue = options.propValue, defaultValue = options.defaultValue, onChangeName = options.onChangeName;
        if (onChangeName !== undefined && onChangeName !== '') {
            return (React.cloneElement(component, (_a = {}, _a[propName] = propValue, _a[onChangeName] = onChange, _a.defaultValue = defaultValue, _a)));
        }
        return (React.cloneElement(component, (_b = {}, _b[propName] = propValue, _b.onChange = onChange, _b.defaultValue = defaultValue, _b)));
    };
    return CompositionUtil;
}());
exports.default = CompositionUtil;
//# sourceMappingURL=CompositionUtil.js.map