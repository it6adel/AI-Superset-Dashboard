{"version":3,"file":"HTTPUtil.js","sourceRoot":"","sources":["../../src/Util/HTTPUtil.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,+EAAuD;AAWvD;;;;;GAKG;AACH;IAAA;IAgDA,CAAC;IA9CC;;;;;;;;;;;;;;;;OAgBG;IACU,aAAI,GAAjB,UAAkB,aAA0B;;;;gBAExC,GAAG,GAMD,aAAa,IANZ,EACH,KAKE,aAAa,OALJ,EAAX,MAAM,mBAAG,EAAE,KAAA,EACX,KAIE,aAAa,kBAJO,EAAtB,iBAAiB,mBAAG,EAAE,KAAA,EACtB,KAGE,aAAa,uBAHY,EAA3B,sBAAsB,mBAAG,EAAE,KAAA,EAC3B,KAEE,aAAa,sBAFa,EAA5B,qBAAqB,mBAAG,IAAI,KAAA,EAC5B,KACE,aAAa,OADF,EAAb,MAAM,mBAAG,IAAI,KAAA,CACG;gBACZ,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;gBAC9B,IAAI,MAAM,EAAE;oBACV,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;iBAClE;gBACD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS;oBAC9C,IAAM,WAAW,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;oBACjD,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC;gBAEG,OAAO,cACX,MAAM,EAAE,MAAM,EACd,WAAW,EAAE,qBAAqB,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EAC9D,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,2BAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EACnD,OAAO,SAAA,IACJ,sBAAsB,CAC1B,CAAC;gBAEF,sBAAO,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,EAAC;;;KAC5B;IAEH,eAAC;AAAD,CAAC,AAhDD,IAgDC;AAED,kBAAe,QAAQ,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport URLSearchParams from '@ungap/url-search-params';\n\nexport type PostOptions = {\n  url: string;\n  params: any;\n  additionalHeaders?: any;\n  additionalFetchOptions?: any;\n  sameOriginCredentials?: boolean;\n  asForm?: boolean;\n};\n\n/**\n * A Helper class which simplifies some complex request setups as like fetch\n * with POST and Content-Type 'application/x-www-form-urlencoded'.\n *\n * @class HTTPUtil\n */\nclass HTTPUtil {\n\n  /**\n   * A method that performs a fetch request with some predefined configs.\n   *\n   * @param {Object} Options The options object to configure the post request.\n   *  It can contain these keys:\n   *    {String} url The url we want to send the post to.\n   *    {Object} params The post params we want to send.\n   *      Default is {}.\n   *    {Object} additionalHeaders An object with additional headers as kvp.\n   *      Default is {}.\n   *    {Object} additionalFetchOptions An object containing additional options\n   *      for the fetch API. Compare https://mdn.io/fetch Default is {}.\n   *    {Boolean} sameOriginCredentials A flag to control whether the credentials\n   *      option to 'same-origin' will be set or left undefined. Default is true.\n   *    {Boolean} asForm A flag to set the Content-Type header to\n   *      'application/x-www-form-urlencoded'. Default is true.\n   */\n  static async post(optionsObject: PostOptions) {\n    const {\n      url,\n      params = {},\n      additionalHeaders = {},\n      additionalFetchOptions = {},\n      sameOriginCredentials = true,\n      asForm = true\n    } = optionsObject;\n    const headers = new Headers();\n    if (asForm) {\n      headers.set('Content-Type', 'application/x-www-form-urlencoded');\n    }\n    Object.keys(additionalHeaders).forEach(headerKey => {\n      const headerValue = additionalHeaders[headerKey];\n      headers.set(headerKey, headerValue);\n    });\n\n    const options = {\n      method: 'POST',\n      credentials: sameOriginCredentials ? 'same-origin' : undefined,\n      body: asForm ? new URLSearchParams(params) : params,\n      headers,\n      ...additionalFetchOptions\n    };\n\n    return fetch(url, options);\n  }\n\n}\n\nexport default HTTPUtil;\n"]}