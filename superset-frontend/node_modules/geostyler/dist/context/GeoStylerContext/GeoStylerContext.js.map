{"version":3,"file":"GeoStylerContext.js","sourceRoot":"","sources":["../../../src/context/GeoStylerContext/GeoStylerContext.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,iCAAmC;AACnC,6CAA0C;AA2IzC,CAAC;AAEW,QAAA,gBAAgB,GAAG,eAAK,CAAC,aAAa,CAA4B,EAAE,CAAC,CAAC;AAE5E,IAAM,mBAAmB,GAAG;IACjC,IAAM,GAAG,GAAG,IAAA,kBAAU,EAAC,wBAAgB,CAAC,CAAC;IACzC,OAAO,IAAA,kBAAS,EAAC,GAAG,CAAC,CAAC;AACxB,CAAC,CAAC;AAHW,QAAA,mBAAmB,uBAG9B;AAEK,IAAM,uBAAuB,GAAG,UACrC,GAAM,EACN,QAAc;IAEd,IAAM,GAAG,GAAG,IAAA,kBAAU,EAAC,wBAAgB,CAAC,CAAC;IAEzC,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;QAC7C,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,IAAA,kBAAS,EAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC;AAVW,QAAA,uBAAuB,2BAUlC;AAEK,IAAM,kBAAkB,GAAG,UAAkC,GAAM;IACxE,IAAM,GAAG,GAAG,IAAA,kBAAU,EAAC,wBAAgB,CAAC,CAAC;IACzC,OAAO,IAAA,kBAAS,EAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC;AAHW,QAAA,kBAAkB,sBAG7B;AAEK,IAAM,iCAAiC,GAAG;IAC/C,IAAM,GAAG,GAAG,IAAA,kBAAU,EAAC,wBAAgB,CAAC,CAAC;IACzC,OAAO,IAAA,kBAAS,EAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;AAC9C,CAAC,CAAC;AAHW,QAAA,iCAAiC,qCAG5C","sourcesContent":["import { UnsupportedProperties } from 'geostyler-style';\nimport { cloneDeep } from 'lodash';\nimport React, { useContext } from 'react';\nimport { ComparisonFilterProps } from '../../Component/Filter/ComparisonFilter/ComparisonFilter';\nimport { ColorFieldProps } from '../../Component/Symbolizer/Field/ColorField/ColorField';\nimport { LineDashFieldProps } from '../../Component/Symbolizer/Field/LineDashField/LineDashField';\nimport { OpacityFieldProps } from '../../Component/Symbolizer/Field/OpacityField/OpacityField';\nimport { ImageFieldProps } from '../../Component/Symbolizer/Field/ImageField/ImageField';\nimport { WidthFieldProps } from '../../Component/Symbolizer/Field/WidthField/WidthField';\nimport { SizeFieldProps } from '../../Component/Symbolizer/Field/SizeField/SizeField';\nimport { GeoStylerLocale } from '../../locale/locale';\nimport { OffsetFieldProps } from '../../Component/Symbolizer/Field/OffsetField/OffsetField';\nimport { RotateFieldProps } from '../../Component/Symbolizer/Field/RotateField/RotateField';\nimport { LineCapFieldProps } from '../../Component/Symbolizer/Field/LineCapField/LineCapField';\nimport { LineJoinFieldProps } from '../../Component/Symbolizer/Field/LineJoinField/LineJoinField';\nimport { WellKnownNameFieldProps } from '../../Component/Symbolizer/Field/WellKnownNameField/WellKnownNameField';\nimport { RadiusFieldProps } from '../../Component/Symbolizer/Field/RadiusField/RadiusField';\nimport { FontPickerProps } from '../../Component/Symbolizer/Field/FontPicker/FontPicker';\nimport {\n  ContrastEnhancementFieldProps\n} from '../../Component/Symbolizer/Field/ContrastEnhancementField/ContrastEnhancementField';\nimport { GammaFieldProps } from '../../Component/Symbolizer/Field/GammaField/GammaField';\nimport { IconLibrary } from '../../Component/Symbolizer/IconSelector/IconSelector';\nimport { RendererProps } from '../../Component/Renderer/Renderer/Renderer';\n\nexport type UnsupportedPropertiesContextOptions = {\n  hideUnsupported?: boolean;\n  locale?: GeoStylerLocale['UnsupportedPropertiesUtil'];\n};\n\nexport type UnsupportedPropertiesContextType = {\n  unsupportedProperties: UnsupportedProperties;\n  options?: UnsupportedPropertiesContextOptions;\n};\n\nexport type InputConfig<T> = {\n  visibility?: boolean;\n  default?: T;\n};\n\nexport type CompositionContext = {\n  FillEditor?: {\n    visibility?: boolean;\n    fillColorField?: InputConfig<ColorFieldProps['color']>;\n    fillOpacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    opacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    outlineOpacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    outlineColorField?: InputConfig<ColorFieldProps['color']>;\n    outlineDasharrayField?: InputConfig<LineDashFieldProps['dashArray']>;\n    outlineWidthField?: InputConfig<WidthFieldProps['width']>;\n  };\n  IconEditor?: {\n    visibility: boolean;\n    imageField: InputConfig<ImageFieldProps['value']>;\n    sizeField: InputConfig<SizeFieldProps['size']>;\n    offsetXField?: InputConfig<OffsetFieldProps['offset']>;\n    offsetYField?: InputConfig<OffsetFieldProps['offset']>;\n    rotateField?: InputConfig<RotateFieldProps['rotate']>;\n    opacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    iconLibraries?: IconLibrary[];\n  };\n  LineEditor?: {\n    visibility?: boolean;\n    colorField?: InputConfig<ColorFieldProps['color']>;\n    widthField?: InputConfig<WidthFieldProps['width']>;\n    perpendicularOffsetField?: InputConfig<OffsetFieldProps['offset']>;\n    opacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    lineDashField?: InputConfig<LineDashFieldProps['dashArray']>;\n    capField?: InputConfig<LineCapFieldProps['cap']>;\n    joinField?: InputConfig<LineJoinFieldProps['join']>;\n  };\n  MarkEditor?: {\n    visibility?: boolean;\n    wellKnownNameField?: InputConfig<WellKnownNameFieldProps['wellKnownName']>;\n  };\n  WellKnownNameEditor?: {\n    visibility?: boolean;\n    radiusField?: InputConfig<RadiusFieldProps['radius']>;\n    offsetXField?: InputConfig<OffsetFieldProps['offset']>;\n    offsetYField?: InputConfig<OffsetFieldProps['offset']>;\n    fillColorField?: InputConfig<ColorFieldProps['color']>;\n    opacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    fillOpacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    strokeColorField?: InputConfig<ColorFieldProps['color']>;\n    strokeWidthField?: InputConfig<WidthFieldProps['width']>;\n    strokeOpacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    rotateField?: InputConfig<RotateFieldProps['rotate']>;\n  };\n  TextEditor?: {\n    visibility?: boolean;\n    templateField?: InputConfig<string>;\n    colorField?: InputConfig<ColorFieldProps['color']>;\n    fontField?: InputConfig<FontPickerProps['font']>;\n    opacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    sizeField?: InputConfig<SizeFieldProps['size']>;\n    offsetXField?: InputConfig<OffsetFieldProps['offset']>;\n    offsetYField?: InputConfig<OffsetFieldProps['offset']>;\n    rotateField?: InputConfig<RotateFieldProps['rotate']>;\n    haloColorField?: InputConfig<ColorFieldProps['color']>;\n    haloWidthField?: InputConfig<WidthFieldProps['width']>;\n  };\n  RasterEditor?: {\n    visibility?: boolean;\n    opacityField?: InputConfig<OpacityFieldProps['opacity']>;\n    contrastEnhancementField?: InputConfig<ContrastEnhancementFieldProps['contrastEnhancement']>;\n    gammaValueField?: InputConfig<GammaFieldProps['gamma']>;\n  };\n  RasterChannelEditor?: {\n    visibility?: boolean;\n  };\n  ColorMapEditor?: {\n    visibility?: boolean;\n  };\n  ComparisonFilter?: Partial<ComparisonFilterProps>;\n  Renderer?: Partial<Omit<RendererProps, 'onClick'>>;\n  Rules?: {\n    enableClassification?: boolean;\n  };\n  Rule?: {\n    amount?: {\n      visibility?: boolean;\n    };\n    duplicate?: {\n      visibility?: boolean;\n    };\n    maxScale?: {\n      visibility?: boolean;\n    };\n    minScale?: {\n      visibility?: boolean;\n    };\n    name?: {\n      visibility?: boolean;\n    };\n  };\n};\n\nexport interface GeoStylerContextInterface {\n  composition?: CompositionContext;\n  locale?: GeoStylerLocale;\n  unsupportedProperties?: UnsupportedPropertiesContextType;\n};\n\nexport const GeoStylerContext = React.createContext<GeoStylerContextInterface>({});\n\nexport const useGeoStylerContext = (): any => {\n  const ctx = useContext(GeoStylerContext);\n  return cloneDeep(ctx);\n};\n\nexport const useGeoStylerComposition = <T extends keyof CompositionContext>(\n  key: T,\n  fallback?: any\n): CompositionContext[T] => {\n  const ctx = useContext(GeoStylerContext);\n\n  if (!ctx.composition || !ctx.composition[key]) {\n    return fallback;\n  }\n  return cloneDeep(ctx.composition[key]);\n};\n\nexport const useGeoStylerLocale = <T extends keyof GeoStylerLocale>(key: T): GeoStylerLocale[T] => {\n  const ctx = useContext(GeoStylerContext);\n  return cloneDeep(ctx.locale[key]);\n};\n\nexport const useGeoStylerUnsupportedProperties = (): any => {\n  const ctx = useContext(GeoStylerContext);\n  return cloneDeep(ctx.unsupportedProperties);\n};\n"]}