"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2022-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserFeedback = void 0;
var antd_1 = require("antd");
var react_1 = __importDefault(require("react"));
var en_US_1 = __importDefault(require("../../locale/en_US"));
/**
 * Checkbox field for a boolean filter value.
 */
var ParserFeedback = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.ParserFeedback : _b, feedback = _a.feedback;
    if (!feedback || Object.keys(feedback).length < 1) {
        return null;
    }
    var errors = feedback.errors, warnings = feedback.warnings, unsupportedProperties = feedback.unsupportedProperties;
    var warningAlerts = warnings === null || warnings === void 0 ? void 0 : warnings.map(function (warning, index) { return (react_1.default.createElement(antd_1.Alert, { showIcon: true, key: "warning-".concat(index), type: 'warning', message: warning })); });
    var errorAlerts = errors === null || errors === void 0 ? void 0 : errors.map(function (error, index) { return (react_1.default.createElement(antd_1.Alert, { showIcon: true, key: "error-".concat(index), type: 'error', message: error.message })); });
    var strings = [];
    var getTextualRepresentation = function (value) {
        var text;
        if (typeof value === 'string' || value instanceof String) {
            if (value === 'none') {
                text = locale.notSupported;
            }
            else if (value === 'partial') {
                text = locale.partiallySupported;
            }
        }
        else if (value.support) {
            if (value.support === 'none') {
                text = "".concat(locale.notSupported, ": ").concat(value.info);
            }
            else if (value.support === 'partial') {
                text = "".concat(locale.partiallySupported, ": ").concat(value.info);
            }
        }
        return text;
    };
    var prepareUnsupportedProperties = function (obj, prefix) {
        if (prefix === void 0) { prefix = ''; }
        Object.keys(obj)
            .forEach(function (key) {
            var value = obj[key];
            if (typeof value === 'string' || value instanceof String || value.support) {
                strings.push("".concat(prefix).concat(key, " ").concat(getTextualRepresentation(value)));
            }
            else {
                prepareUnsupportedProperties(value, "".concat(key, "."));
            }
        });
    };
    if (unsupportedProperties) {
        prepareUnsupportedProperties(unsupportedProperties);
    }
    var unsupportedPropertiesAlerts = strings === null || strings === void 0 ? void 0 : strings.map(function (unsupportedProperty, index) { return (react_1.default.createElement(antd_1.Alert, { showIcon: true, key: "unsupportedProperty-".concat(index), type: 'warning', message: unsupportedProperty })); });
    return (react_1.default.createElement("div", { className: "gs-parser-feedback" },
        react_1.default.createElement("div", { className: 'error-alerts' }, errorAlerts),
        react_1.default.createElement("div", { className: 'warning-alerts' },
            warningAlerts,
            unsupportedPropertiesAlerts)));
};
exports.ParserFeedback = ParserFeedback;
exports.default = exports.ParserFeedback;
//# sourceMappingURL=ParserFeedback.js.map