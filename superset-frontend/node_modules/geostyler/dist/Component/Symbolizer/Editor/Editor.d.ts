import React from 'react';
import { Symbolizer } from 'geostyler-style';
import './Editor.css';
import 'ol/ol.css';
import { Data } from 'geostyler-data';
import { IconEditorProps } from '../IconEditor/IconEditor';
import { IconLibrary } from '../IconSelector/IconSelector';
import { GeoStylerLocale } from '../../../locale/locale';
interface EditorDefaultProps {
    locale: GeoStylerLocale['SymbolizerEditor'];
}
export interface EditorProps extends Partial<EditorDefaultProps> {
    symbolizer: Symbolizer;
    internalDataDef?: Data;
    iconEditorProps?: Partial<IconEditorProps>;
    onSymbolizerChange?: (symbolizer: Symbolizer) => void;
    iconLibraries?: IconLibrary[];
    colorRamps?: {
        [name: string]: string[];
    };
}
export declare const Editor: React.FC<EditorProps>;
declare const _default: {
    new (props: (EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<EditorProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
