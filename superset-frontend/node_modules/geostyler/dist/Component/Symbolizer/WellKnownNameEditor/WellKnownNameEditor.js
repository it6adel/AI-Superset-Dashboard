"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WellKnownNameEditor = void 0;
var React = __importStar(require("react"));
var LocaleWrapper_1 = require("../../LocaleWrapper/LocaleWrapper");
var ColorField_1 = __importDefault(require("../Field/ColorField/ColorField"));
var OpacityField_1 = __importDefault(require("../Field/OpacityField/OpacityField"));
var RadiusField_1 = __importDefault(require("../Field/RadiusField/RadiusField"));
var WidthField_1 = __importDefault(require("../Field/WidthField/WidthField"));
var RotateField_1 = __importDefault(require("../Field/RotateField/RotateField"));
var CompositionContext_1 = require("../../../context/CompositionContext/CompositionContext");
var CompositionUtil_1 = __importDefault(require("../../../Util/CompositionUtil"));
var withDefaultsContext_1 = __importDefault(require("../../../hoc/withDefaultsContext"));
var en_US_1 = __importDefault(require("../../../locale/en_US"));
var antd_1 = require("antd");
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var OffsetField_1 = __importDefault(require("../Field/OffsetField/OffsetField"));
var COMPONENTNAME = 'WellKnownNameEditor';
var WellKnownNameEditor = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.WellKnownNameEditor : _b, symbolizer = _a.symbolizer, onSymbolizerChange = _a.onSymbolizerChange, defaultValues = _a.defaultValues;
    var onRadiusChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.radius = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onOffsetXChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        var newOffset = [value, (symbolizerClone.offset ? symbolizerClone.offset[1] : 0)];
        symbolizerClone.offset = newOffset;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onOffsetYChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        var newOffset = [(symbolizerClone.offset ? symbolizerClone.offset[0] : 0), value];
        symbolizerClone.offset = newOffset;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onColorChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.color = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onOpacityChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.opacity = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onFillOpacityChange = function (newFillOpacity) {
        if (onSymbolizerChange) {
            onSymbolizerChange(__assign(__assign({}, symbolizer), { fillOpacity: newFillOpacity }));
        }
    };
    var onStrokeColorChange = function (value) {
        var cloneSymbolizer = (0, cloneDeep_1.default)(symbolizer);
        cloneSymbolizer.strokeColor = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(cloneSymbolizer);
        }
    };
    var onStrokeWidthChange = function (value) {
        var cloneSymbolizer = (0, cloneDeep_1.default)(symbolizer);
        cloneSymbolizer.strokeWidth = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(cloneSymbolizer);
        }
    };
    var onStrokeOpacityChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.strokeOpacity = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onRotateChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.rotate = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    /**
     * Wraps a Form Item around a given element and adds its locale
     * to the From Item label.
     */
    var wrapFormItem = function (label, element) {
        return element == null ? null : (React.createElement(antd_1.Form.Item, { label: label }, element));
    };
    var color = symbolizer.color, fillOpacity = symbolizer.fillOpacity, opacity = symbolizer.opacity, radius = symbolizer.radius, rotate = symbolizer.rotate, strokeColor = symbolizer.strokeColor, strokeOpacity = symbolizer.strokeOpacity, strokeWidth = symbolizer.strokeWidth, offset = symbolizer.offset;
    return (React.createElement(CompositionContext_1.CompositionContext.Consumer, null, function (composition) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return (React.createElement("div", null,
            wrapFormItem(locale.radiusLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.radiusField',
                onChange: onRadiusChange,
                propName: 'radius',
                propValue: radius,
                defaultValue: (_a = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _a === void 0 ? void 0 : _a.defaultRadius,
                defaultElement: React.createElement(RadiusField_1.default, null)
            })),
            wrapFormItem(locale.offsetXLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.offsetXField',
                onChange: onOffsetXChange,
                propName: 'offset',
                propValue: offset === null || offset === void 0 ? void 0 : offset[0],
                defaultValue: (_b = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _b === void 0 ? void 0 : _b.defaultOffsetX,
                defaultElement: React.createElement(OffsetField_1.default, null)
            })),
            wrapFormItem(locale.offsetYLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.offsetYField',
                onChange: onOffsetYChange,
                propName: 'offset',
                propValue: offset === null || offset === void 0 ? void 0 : offset[1],
                defaultValue: (_c = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _c === void 0 ? void 0 : _c.defaultOffsetY,
                defaultElement: React.createElement(OffsetField_1.default, null)
            })),
            wrapFormItem(locale.fillColorLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.fillColorField',
                onChange: onColorChange,
                propName: 'color',
                propValue: color,
                defaultValue: (_d = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _d === void 0 ? void 0 : _d.defaultColor,
                defaultElement: React.createElement(ColorField_1.default, null)
            })),
            wrapFormItem(locale.opacityLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.opacityField',
                onChange: onOpacityChange,
                propName: 'opacity',
                propValue: opacity,
                defaultValue: (_e = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _e === void 0 ? void 0 : _e.defaultOpacity,
                defaultElement: React.createElement(OpacityField_1.default, null)
            })),
            wrapFormItem(locale.fillOpacityLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.fillOpacityField',
                onChange: onFillOpacityChange,
                propName: 'opacity',
                propValue: fillOpacity,
                defaultValue: (_f = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _f === void 0 ? void 0 : _f.defaultFillOpacity,
                defaultElement: React.createElement(OpacityField_1.default, null)
            })),
            wrapFormItem(locale.strokeColorLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.strokeColorField',
                onChange: onStrokeColorChange,
                propName: 'color',
                propValue: strokeColor,
                defaultValue: (_g = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _g === void 0 ? void 0 : _g.defaultStrokeColor,
                defaultElement: React.createElement(ColorField_1.default, null)
            })),
            wrapFormItem(locale.strokeWidthLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.strokeWidthField',
                onChange: onStrokeWidthChange,
                propName: 'width',
                propValue: strokeWidth,
                defaultValue: (_h = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _h === void 0 ? void 0 : _h.defaultStrokeWidth,
                defaultElement: React.createElement(WidthField_1.default, null)
            })),
            wrapFormItem(locale.strokeOpacityLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.strokeOpacityField',
                onChange: onStrokeOpacityChange,
                propName: 'opacity',
                propValue: strokeOpacity,
                defaultValue: (_j = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _j === void 0 ? void 0 : _j.defaultStrokeOpacity,
                defaultElement: React.createElement(OpacityField_1.default, null)
            })),
            wrapFormItem(locale.rotateLabel, CompositionUtil_1.default.handleComposition({
                composition: composition,
                path: 'WellKnownNameEditor.rotateField',
                onChange: onRotateChange,
                propName: 'rotate',
                propValue: rotate,
                defaultValue: (_k = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.WellKnownNameEditor) === null || _k === void 0 ? void 0 : _k.defaultRotate,
                defaultElement: React.createElement(RotateField_1.default, null)
            }))));
    }));
};
exports.WellKnownNameEditor = WellKnownNameEditor;
exports.default = (0, withDefaultsContext_1.default)((0, LocaleWrapper_1.localize)(exports.WellKnownNameEditor, COMPONENTNAME));
//# sourceMappingURL=WellKnownNameEditor.js.map