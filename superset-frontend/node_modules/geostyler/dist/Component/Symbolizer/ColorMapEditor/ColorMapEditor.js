"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorMapEditor = void 0;
var react_1 = __importStar(require("react"));
var antd_1 = require("antd");
var LocaleWrapper_1 = require("../../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../../locale/en_US"));
var ExtendedField_1 = __importDefault(require("../Field/ExtendedField/ExtendedField"));
var ColorMapTypeField_1 = __importDefault(require("../Field/ColorMapTypeField/ColorMapTypeField"));
var ColorField_1 = __importDefault(require("../Field/ColorField/ColorField"));
var OffsetField_1 = __importDefault(require("../Field/OffsetField/OffsetField"));
var OpacityField_1 = __importDefault(require("../Field/OpacityField/OpacityField"));
var RasterUtil_1 = __importDefault(require("../../../Util/RasterUtil"));
var ColorRampCombo_1 = __importDefault(require("../../RuleGenerator/ColorRampCombo/ColorRampCombo"));
var RuleGeneratorUtil_1 = __importDefault(require("../../../Util/RuleGeneratorUtil"));
var chroma_js_1 = require("chroma-js");
require("./ColorMapEditor.css");
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var COMPONENTNAME = 'ColorMapEditor';
var ColorMapEditor = function (_a) {
    var _b;
    var _c = _a.locale, locale = _c === void 0 ? en_US_1.default.ColorMapEditor : _c, _d = _a.colorRamps, colorRamps = _d === void 0 ? __assign({ GeoStyler: ['#E7000E', '#F48E00', '#FFED00', '#00943D', '#272C82', '#611E82'], GreenRed: ['#00FF00', '#FF0000'] }, chroma_js_1.brewer) : _d, colorMap = _a.colorMap, onChange = _a.onChange;
    var _e = (0, react_1.useState)(Object.keys(colorRamps)[0]), colorRamp = _e[0], setColorRamp = _e[1];
    var updateColorMap = function (prop, value) {
        var newColorMap;
        if (colorMap) {
            newColorMap = (0, cloneDeep_1.default)(colorMap);
        }
        else {
            newColorMap = {
                type: 'ramp'
            };
        }
        newColorMap[prop] = value;
        if (onChange) {
            onChange(newColorMap);
        }
    };
    var onExtendedChange = function (extended) {
        updateColorMap('extended', extended);
    };
    var onTypeChange = function (type) {
        updateColorMap('type', type);
    };
    /**
     * Creates the number of default ColorMapEntries according to specified
     * number of classes. Table will be updated accordingly.
     *
     */
    var onNrOfClassesChange = function (value) {
        var cmEntries = colorMap === null || colorMap === void 0 ? void 0 : colorMap.colorMapEntries;
        var newCmEntries = cmEntries ? (0, cloneDeep_1.default)(cmEntries) : [];
        if (value > newCmEntries.length) {
            while (newCmEntries.length < value) {
                newCmEntries.push(RasterUtil_1.default.generateColorMapEntry());
            }
        }
        else {
            while (newCmEntries.length > value) {
                newCmEntries.pop();
            }
        }
        applyColors(colorRamp, newCmEntries);
        updateColorMap('colorMapEntries', newCmEntries);
    };
    var onColorRampChange = function (newColorRamp) {
        var cmEntries = colorMap === null || colorMap === void 0 ? void 0 : colorMap.colorMapEntries;
        var newCmEntries = applyColors(newColorRamp, (0, cloneDeep_1.default)(cmEntries));
        updateColorMap('colorMapEntries', newCmEntries);
        setColorRamp(newColorRamp);
    };
    /**
     * Applies the colors of the selected colorRamp to the colorMapEntries.
     * Important: This method modifies the array of colorMapEntries 'cmEntries'.
     *
     * @return {ColorMapEntry[]} cmEntries, the modified array of colorMapEntries.
     */
    var applyColors = function (newColorRamp, cmEntries) {
        if (cmEntries === void 0) { cmEntries = []; }
        var ramp = colorRamps[newColorRamp] ?
            colorRamps[newColorRamp] : colorRamps[Object.keys(colorRamps)[0]];
        var colors = RuleGeneratorUtil_1.default.generateColors(ramp, cmEntries.length);
        cmEntries.forEach(function (entry, idx) {
            entry.color = colors[idx];
        });
        return cmEntries;
    };
    /**
     * Updates property 'key' with 'value' of colorMapEntry at position 'index'.
     * Creates a new colorMapEntry if it did not exist yet.
     */
    var setValueForColorMapEntry = function (idx, key, value) {
        var cmEntries = colorMap === null || colorMap === void 0 ? void 0 : colorMap.colorMapEntries;
        var newCmEntries;
        if (cmEntries) {
            newCmEntries = (0, cloneDeep_1.default)(cmEntries);
            newCmEntries[idx][key] = value;
        }
        else {
            newCmEntries = [{}];
            newCmEntries[0][key] = value;
        }
        updateColorMap('colorMapEntries', newCmEntries);
    };
    var colorMapRecords = (_b = colorMap === null || colorMap === void 0 ? void 0 : colorMap.colorMapEntries) === null || _b === void 0 ? void 0 : _b.map(function (entry, index) {
        return __assign({ key: index }, entry);
    });
    /**
     * Renderer method for the label column.
     */
    var labelRenderer = function (text, record) {
        var input = (react_1.default.createElement(antd_1.Input, { className: "gs-colormap-label-input", value: record.label, onChange: function (event) {
                var target = event.target;
                setValueForColorMapEntry(record.key, 'label', target.value);
            } }));
        return (react_1.default.createElement(antd_1.Popover, { content: record.label, title: locale.labelLabel }, input));
    };
    /**
     * Renderer method for the color column.
     */
    var colorRenderer = function (text, record) {
        var input = (react_1.default.createElement(ColorField_1.default, { color: record.color, onChange: function (color) {
                setValueForColorMapEntry(record.key, 'color', color);
            } }));
        return input;
    };
    /**
     * Renderer method for the quantity column.
     */
    var quantityRenderer = function (text, record) {
        var input = (react_1.default.createElement(OffsetField_1.default, { className: "gs-colormap-quantity-input", offset: record.quantity, onChange: function (value) {
                setValueForColorMapEntry(record.key, 'quantity', value);
            } }));
        return input;
    };
    /**
     * Renderer method for the opacity column.
     */
    var opacityRenderer = function (text, record) {
        var input = (react_1.default.createElement(OpacityField_1.default, { className: "gs-colormap-opacity-input", opacity: record.opacity, onChange: function (opacity) {
                setValueForColorMapEntry(record.key, 'opacity', opacity);
            } }));
        return input;
    };
    var columns = [{
            title: locale.colorLabel,
            dataIndex: 'color',
            render: colorRenderer
        }, {
            title: locale.quantityLabel,
            dataIndex: 'quantity',
            render: quantityRenderer
        }, {
            title: locale.labelLabel,
            dataIndex: 'label',
            render: labelRenderer
        }, {
            title: locale.opacityLabel,
            dataIndex: 'opacity',
            render: opacityRenderer
        }];
    // make sure colorMapEntries does exist
    var colorMapEntries = colorMap === null || colorMap === void 0 ? void 0 : colorMap.colorMapEntries;
    if (!colorMapEntries) {
        colorMapEntries = [];
    }
    var nrOfClasses = colorMapEntries.length;
    return (react_1.default.createElement("div", { className: "gs-colormap-symbolizer-editor" },
        react_1.default.createElement("div", { className: "gs-colormap-header-row" },
            react_1.default.createElement(antd_1.Form.Item, null,
                react_1.default.createElement("span", null, locale.titleLabel)),
            react_1.default.createElement(antd_1.Form.Item, { label: locale.typeLabel },
                react_1.default.createElement(ColorMapTypeField_1.default, { colorMapType: colorMap === null || colorMap === void 0 ? void 0 : colorMap.type, onChange: onTypeChange })),
            react_1.default.createElement(antd_1.Form.Item, { label: locale.nrOfClassesLabel },
                react_1.default.createElement(antd_1.InputNumber, { className: "number-of-classes-field", min: 0, max: 255, value: nrOfClasses, onChange: onNrOfClassesChange })),
            react_1.default.createElement(antd_1.Form.Item, { label: locale.colorRampLabel },
                react_1.default.createElement(ColorRampCombo_1.default, { onChange: onColorRampChange, colorRamp: colorRamp, colorRamps: colorRamps })),
            react_1.default.createElement(antd_1.Form.Item, { label: locale.extendedLabel },
                react_1.default.createElement(ExtendedField_1.default, { extended: colorMap === null || colorMap === void 0 ? void 0 : colorMap.extended, onChange: onExtendedChange }))),
        react_1.default.createElement(antd_1.Table, { className: "gs-colormap-table", columns: columns, dataSource: colorMapRecords, pagination: {
                position: ['bottomCenter']
            }, size: "small" })));
};
exports.ColorMapEditor = ColorMapEditor;
exports.default = (0, LocaleWrapper_1.localize)(exports.ColorMapEditor, COMPONENTNAME);
//# sourceMappingURL=ColorMapEditor.js.map