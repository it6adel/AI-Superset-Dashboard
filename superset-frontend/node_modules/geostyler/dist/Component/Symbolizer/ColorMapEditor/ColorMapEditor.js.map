{"version":3,"file":"ColorMapEditor.js","sourceRoot":"","sources":["../../../../src/Component/Symbolizer/ColorMapEditor/ColorMapEditor.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { useState } from 'react';\nimport {\n  Form,\n  Table,\n  Input,\n  Popover,\n  InputNumber\n} from 'antd';\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../locale/en_US';\nimport { ColorMap, ColorMapType, ColorMapEntry } from 'geostyler-style';\nimport ExtendedField from '../Field/ExtendedField/ExtendedField';\nimport ColorMapTypeField from '../Field/ColorMapTypeField/ColorMapTypeField';\nimport ColorField from '../Field/ColorField/ColorField';\nimport OffsetField from '../Field/OffsetField/OffsetField';\nimport OpacityField from '../Field/OpacityField/OpacityField';\nimport RasterUtil from '../../../Util/RasterUtil';\nimport ColorRampCombo from '../../RuleGenerator/ColorRampCombo/ColorRampCombo';\nimport RuleGeneratorUtil from '../../../Util/RuleGeneratorUtil';\nimport { brewer } from 'chroma-js';\n\nimport './ColorMapEditor.less';\n\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { GeoStylerLocale } from '../../../locale/locale';\n\nexport interface ColorMapEntryRecord extends ColorMapEntry {\n  key: number;\n}\n\ninterface ColorMapEditorDefaultProps {\n  locale: GeoStylerLocale['ColorMapEditor'];\n  colorRamps: {\n    [name: string]: string[];\n  };\n}\n\n// non default props\nexport interface ColorMapEditorProps extends Partial<ColorMapEditorDefaultProps> {\n  colorMap?: ColorMap;\n  onChange?: (colorMap: ColorMap) => void;\n}\n\nconst COMPONENTNAME = 'ColorMapEditor';\n\nexport const ColorMapEditor: React.FC<ColorMapEditorProps> = ({\n  locale = en_US.ColorMapEditor,\n  colorRamps = {\n    GeoStyler: ['#E7000E', '#F48E00', '#FFED00', '#00943D', '#272C82', '#611E82'],\n    GreenRed: ['#00FF00', '#FF0000'],\n    ...brewer\n  },\n  colorMap,\n  onChange\n}) => {\n\n  const [colorRamp, setColorRamp] = useState<string>(Object.keys(colorRamps)[0]);\n\n  const updateColorMap = (prop: string, value: any) => {\n    let newColorMap: ColorMap;\n    if (colorMap) {\n      newColorMap = _cloneDeep(colorMap);\n    } else {\n      newColorMap = {\n        type: 'ramp'\n      };\n    }\n    newColorMap[prop] = value;\n    if (onChange) {\n      onChange(newColorMap);\n    }\n  };\n\n  const onExtendedChange = (extended: boolean) => {\n    updateColorMap('extended', extended);\n  };\n\n  const onTypeChange = (type: ColorMapType) => {\n    updateColorMap('type', type);\n  };\n\n  /**\n   * Creates the number of default ColorMapEntries according to specified\n   * number of classes. Table will be updated accordingly.\n   *\n   */\n  const onNrOfClassesChange = (value: number) => {\n    const cmEntries = colorMap?.colorMapEntries;\n    const newCmEntries: ColorMapEntry[] = cmEntries ? _cloneDeep(cmEntries) : [];\n\n    if (value > newCmEntries.length) {\n      while (newCmEntries.length < value) {\n        newCmEntries.push(RasterUtil.generateColorMapEntry());\n      }\n    } else {\n      while (newCmEntries.length > value) {\n        newCmEntries.pop();\n      }\n    }\n    applyColors(colorRamp, newCmEntries);\n    updateColorMap('colorMapEntries', newCmEntries);\n  };\n\n  const onColorRampChange = (newColorRamp: string) => {\n    const cmEntries = colorMap?.colorMapEntries;\n    const newCmEntries = applyColors(newColorRamp, _cloneDeep(cmEntries));\n    updateColorMap('colorMapEntries', newCmEntries);\n    setColorRamp(newColorRamp);\n  };\n\n  /**\n   * Applies the colors of the selected colorRamp to the colorMapEntries.\n   * Important: This method modifies the array of colorMapEntries 'cmEntries'.\n   *\n   * @return {ColorMapEntry[]} cmEntries, the modified array of colorMapEntries.\n   */\n  const applyColors = (newColorRamp: string, cmEntries: ColorMapEntry[] = []): ColorMapEntry[] => {\n    const ramp = colorRamps[newColorRamp] ?\n      colorRamps[newColorRamp] : colorRamps[Object.keys(colorRamps)[0]];\n    const colors = RuleGeneratorUtil.generateColors(ramp, cmEntries.length);\n    cmEntries.forEach((entry: ColorMapEntry, idx: number) => {\n      entry.color = colors[idx];\n    });\n    return cmEntries;\n  };\n\n  /**\n   * Updates property 'key' with 'value' of colorMapEntry at position 'index'.\n   * Creates a new colorMapEntry if it did not exist yet.\n   */\n  const setValueForColorMapEntry = (idx: number, key: string, value: any) => {\n    const cmEntries = colorMap?.colorMapEntries;\n    let newCmEntries: ColorMapEntry[];\n    if (cmEntries) {\n      newCmEntries = _cloneDeep(cmEntries);\n      newCmEntries[idx][key] = value;\n    } else {\n      newCmEntries = [{}] as ColorMapEntry[];\n      newCmEntries[0][key] = value;\n    }\n    updateColorMap('colorMapEntries', newCmEntries);\n  };\n\n  const colorMapRecords = colorMap?.colorMapEntries?.map((entry: ColorMapEntry, index: number): ColorMapEntryRecord => {\n    return {\n      key: index,\n      ...entry\n    };\n  });\n\n  /**\n   * Renderer method for the label column.\n   */\n  const labelRenderer = (text: string, record: ColorMapEntryRecord) => {\n    const input = (\n      <Input\n        className=\"gs-colormap-label-input\"\n        value={record.label as string}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n          const target = event.target;\n          setValueForColorMapEntry(record.key, 'label', target.value);\n        }}\n      />);\n    return (\n      <Popover\n        content={record.label as string}\n        title={locale.labelLabel}\n      >\n        {input}\n      </Popover>\n    );\n  };\n\n  /**\n   * Renderer method for the color column.\n   */\n  const colorRenderer = (text: string, record: ColorMapEntryRecord) => {\n    const input = (\n      <ColorField\n        color={record.color as string}\n        onChange={(color: string) => {\n          setValueForColorMapEntry(record.key, 'color', color);\n        }}\n      />\n    );\n    return input;\n  };\n\n  /**\n   * Renderer method for the quantity column.\n   */\n  const quantityRenderer = (text: string, record: ColorMapEntryRecord) => {\n    const input = (\n      <OffsetField\n        className=\"gs-colormap-quantity-input\"\n        offset={record.quantity as number}\n        onChange={value => {\n          setValueForColorMapEntry(record.key, 'quantity', value);\n        }}\n      />\n    );\n    return input;\n  };\n\n  /**\n   * Renderer method for the opacity column.\n   */\n  const opacityRenderer = (text: string, record: ColorMapEntryRecord) => {\n    const input = (\n      <OpacityField\n        className=\"gs-colormap-opacity-input\"\n        opacity={record.opacity as number}\n        onChange={(opacity: any) => {\n          setValueForColorMapEntry(record.key, 'opacity', opacity as number);\n        }}\n      />\n    );\n    return input;\n  };\n\n  const columns: any = [{\n    title: locale.colorLabel,\n    dataIndex: 'color',\n    render: colorRenderer\n  }, {\n    title: locale.quantityLabel,\n    dataIndex: 'quantity',\n    render: quantityRenderer\n  }, {\n    title: locale.labelLabel,\n    dataIndex: 'label',\n    render: labelRenderer\n  }, {\n    title: locale.opacityLabel,\n    dataIndex: 'opacity',\n    render: opacityRenderer\n  }];\n\n  // make sure colorMapEntries does exist\n  let colorMapEntries: ColorMapEntry[] = colorMap?.colorMapEntries;\n  if (!colorMapEntries) {\n    colorMapEntries = [];\n  }\n  const nrOfClasses = colorMapEntries.length;\n\n  return (\n    <div className=\"gs-colormap-symbolizer-editor\" >\n      <div className=\"gs-colormap-header-row\">\n        <Form.Item\n        >\n          <span>{locale.titleLabel}</span>\n        </Form.Item>\n        <Form.Item\n          label={locale.typeLabel}\n        >\n          <ColorMapTypeField\n            colorMapType={colorMap?.type}\n            onChange={onTypeChange}\n          />\n        </Form.Item>\n        <Form.Item\n          label={locale.nrOfClassesLabel}\n        >\n          <InputNumber\n            className=\"number-of-classes-field\"\n            min={0}\n            max={255}\n            value={nrOfClasses}\n            onChange={onNrOfClassesChange}\n          />\n        </Form.Item>\n        <Form.Item\n          label={locale.colorRampLabel}\n        >\n          <ColorRampCombo\n            onChange={onColorRampChange}\n            colorRamp={colorRamp}\n            colorRamps={colorRamps}\n          />\n        </Form.Item>\n        <Form.Item\n          label={locale.extendedLabel}\n        >\n          <ExtendedField\n            extended={colorMap?.extended as boolean}\n            onChange={onExtendedChange}\n          />\n        </Form.Item>\n      </div>\n      <Table\n        className=\"gs-colormap-table\"\n        columns={columns}\n        dataSource={colorMapRecords}\n        pagination={{\n          position: ['bottomCenter']\n        }}\n        size=\"small\"\n      />\n    </div>\n  );\n};\n\nexport default localize(ColorMapEditor, COMPONENTNAME);\n"]}