{"version":3,"file":"BulkEditModals.js","sourceRoot":"","sources":["../../../../src/Component/Symbolizer/BulkEditModals/BulkEditModals.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { useState } from 'react';\n\nimport {\n  Modal, ModalProps\n} from 'antd';\n\nimport {\n  Style as GsStyle,\n  Rule as GsRule,\n  WellKnownName,\n  SymbolizerKind\n} from 'geostyler-style';\n\nimport ColorField from '../../Symbolizer/Field/ColorField/ColorField';\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../locale/en_US';\nimport RadiusField from '../../Symbolizer/Field/RadiusField/RadiusField';\nimport OpacityField from '../../Symbolizer/Field/OpacityField/OpacityField';\nimport { WellKnownNameField } from '../Field/WellKnownNameField/WellKnownNameField';\nimport KindField from '../Field/KindField/KindField';\nimport ImageField from '../Field/ImageField/ImageField';\nimport IconSelector, { IconLibrary } from '../IconSelector/IconSelector';\n\nimport './BulkEditModals.less';\nimport { GeoStylerLocale } from '../../../locale/locale';\n\n// default props\ninterface BulkEditModalsDefaultProps {\n  colorModalVisible: boolean;\n  sizeModalVisible: boolean;\n  opacityModalVisible: boolean;\n  symbolModalVisible: boolean;\n  style: GsStyle;\n  locale: GeoStylerLocale['BulkEditModals'];\n  selectedRowKeys: number[];\n  modalsClosed: ModalProps['onCancel'];\n}\n\n// non default props\nexport interface BulkEditModalsProps extends Partial<BulkEditModalsDefaultProps> {\n  updateMultiColors?: (x: string) => void;\n  updateMultiSizes?: (x: number|string) => void;\n  updateMultiOpacities?: (x: number|string) => void;\n  updateMultiSymbols?: (symbol: WellKnownName | string, kind: SymbolizerKind) => void;\n  iconLibraries?: IconLibrary[];\n}\n\nconst COMPONENTNAME = 'BulkEditModals';\n\nexport const BulkEditModals: React.FC<BulkEditModalsProps> = ({\n  style = {\n    name: 'My Style',\n    rules: []\n  },\n  colorModalVisible = false,\n  sizeModalVisible = false,\n  opacityModalVisible = false,\n  symbolModalVisible = false,\n  locale = en_US.BulkEditModals,\n  selectedRowKeys = [],\n  modalsClosed = (): any => undefined,\n  updateMultiColors,\n  updateMultiSizes,\n  updateMultiOpacities,\n  updateMultiSymbols,\n  iconLibraries\n}) => {\n\n  const [kind, setKind] = useState<SymbolizerKind>('Mark');\n\n  let rules: GsRule[] = [];\n  let color = '#000000';\n  let size = 5;\n  let opacity = 1;\n  let symbol: WellKnownName = 'circle';\n\n  if (style) {\n    rules = style.rules;\n    const selectedRules = rules.filter((rule: GsRule, index: number) => {\n      return selectedRowKeys.includes(index);\n    });\n    const firstRule = selectedRules.find(rule => rule.symbolizers && rule.symbolizers.length > 0);\n\n    if (firstRule && firstRule.symbolizers && firstRule.symbolizers[0]) {\n      const sym: any = firstRule.symbolizers[0];\n      if (sym.color) {\n        color = sym.color;\n      }\n      if (sym.radius) {\n        size = sym.radius;\n      }\n      if (sym.opacity) {\n        opacity = sym.opacity;\n      }\n      if (sym.kind && sym.kind === 'Mark' && sym.wellKnownName) {\n        symbol = sym.wellKnownName;\n      }\n\n      if (sym.kind && sym.kind === 'Icon' && sym.image) {\n        symbol = sym.image;\n      }\n    }\n  }\n\n  return (\n    <div className=\"gs-style\" >\n      <Modal\n        title={locale.colorLabel}\n        visible={colorModalVisible}\n        wrapClassName=\"gs-modal-color\"\n        footer={null}\n        onCancel={modalsClosed}\n      >\n        {locale.colorLabel}\n        <ColorField\n          color={color}\n          onChange={updateMultiColors}\n        />\n      </Modal>\n      <Modal\n        title={locale.radiusLabel}\n        visible={sizeModalVisible}\n        wrapClassName=\"gs-modal-size\"\n        footer={null}\n        onCancel={modalsClosed}\n      >\n        {locale.radiusLabel}\n        <RadiusField\n          radius={size}\n          onChange={updateMultiSizes}\n        />\n      </Modal>\n      <Modal\n        title={locale.opacityLabel}\n        visible={opacityModalVisible}\n        wrapClassName=\"gs-modal-opacity\"\n        footer={null}\n        onCancel={modalsClosed}\n      >\n        {locale.opacityLabel}\n        <OpacityField\n          opacity={opacity}\n          onChange={updateMultiOpacities}\n        />\n      </Modal>\n      <Modal\n        title={locale.symbolLabel}\n        visible={symbolModalVisible}\n        wrapClassName=\"gs-modal-opacity\"\n        footer={null}\n        onCancel={modalsClosed}\n      >\n        <KindField\n          symbolizerKinds={['Mark', 'Icon']}\n          kind={kind}\n          onChange={setKind}\n        />\n        {\n          kind === 'Mark' ? (\n            <WellKnownNameField\n              wellKnownName={symbol}\n              onChange={(val: string) => {\n                updateMultiSymbols(val, kind);\n              }}\n            />\n          ) : (\n            <div>\n              {locale.imageFieldLabel}\n              <ImageField\n                value={symbol}\n                onChange={(val: string) => {\n                  updateMultiSymbols(val, kind);\n                }}\n              />\n              {\n                !iconLibraries ? null : (\n                  <div className=\"gs-bulk-edit-modals-icon-selector\">\n                    <IconSelector\n                      iconLibraries={iconLibraries}\n                      onIconSelect={(val: string) => {\n                        updateMultiSymbols(val, kind);\n                      }}\n                      selectedIconSrc={symbol}\n                    />\n                  </div>)\n              }\n            </div>\n          )\n        }\n      </Modal>\n    </div>\n  );\n};\n\nexport default localize(BulkEditModals, COMPONENTNAME);\n"]}