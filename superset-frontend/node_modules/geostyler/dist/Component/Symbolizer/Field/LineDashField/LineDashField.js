"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineDashField = void 0;
var React = __importStar(require("react"));
var antd_1 = require("antd");
var icons_1 = require("@ant-design/icons");
require("./LineDashField.css");
/**
 * LineDashField to edit dashes for LineSymbolizers
 */
var LineDashField = function (_a) {
    var onChange = _a.onChange, _b = _a.dashArray, dashArray = _b === void 0 ? [] : _b;
    var onAddDash = function () {
        // add a new dash (UI)
        var newDashArray = __spreadArray([], dashArray, true);
        newDashArray.push(1);
        if (onChange) {
            onChange(newDashArray);
        }
    };
    var onRemoveDash = function () {
        // remove last dash (UI)
        var newDashArray = __spreadArray([], dashArray, true);
        newDashArray.splice(newDashArray.length - 1, 1);
        if (onChange) {
            onChange(newDashArray);
        }
    };
    return (React.createElement("div", { className: "editor-field linedash-field" },
        dashArray.map(function (dash, idx) { return React.createElement(antd_1.InputNumber, { key: idx, value: dash, min: 1, step: 1, style: { width: 55 }, onChange: function (value) {
                // replace current dash value
                var newDashArray = __spreadArray([], dashArray, true);
                newDashArray[idx] = value;
                if (onChange) {
                    onChange(newDashArray);
                }
            } }); }),
        React.createElement(antd_1.Button, { className: "gs-add-dash-button", icon: React.createElement(icons_1.PlusOutlined, null), onClick: onAddDash }),
        React.createElement(antd_1.Button, { className: "gs-rm-dash-button", icon: React.createElement(icons_1.MinusOutlined, null), onClick: onRemoveDash })));
};
exports.LineDashField = LineDashField;
exports.default = exports.LineDashField;
//# sourceMappingURL=LineDashField.js.map