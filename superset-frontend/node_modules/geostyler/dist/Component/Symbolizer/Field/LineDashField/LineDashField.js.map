{"version":3,"file":"LineDashField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/LineDashField/LineDashField.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAE/B,6BAEc;AAEd,2CAAgE;AAEhE,gCAA8B;AAY9B;;GAEG;AACI,IAAM,aAAa,GAAiC,UAAC,EAG3D;QAFC,QAAQ,cAAA,EACR,iBAAc,EAAd,SAAS,mBAAG,EAAE,KAAA;IAGd,IAAM,SAAS,GAAG;QAChB,sBAAsB;QACtB,IAAI,YAAY,qBAAO,SAAS,OAAC,CAAC;QAClC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,YAAY,CAAC,CAAC;SACxB;IACH,CAAC,CAAC;IAEF,IAAM,YAAY,GAAG;QACnB,wBAAwB;QACxB,IAAI,YAAY,qBAAO,SAAS,OAAC,CAAC;QAClC,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAChD,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,YAAY,CAAC,CAAC;SACxB;IACH,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAC,6BAA6B;QAExC,SAAS,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,GAAG,IAAK,OAAA,oBAAC,kBAAW,IACvC,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,IAAI,EACX,GAAG,EAAE,CAAC,EACN,IAAI,EAAE,CAAC,EACP,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EACpB,QAAQ,EAAE,UAAC,KAAa;gBACtB,6BAA6B;gBAC7B,IAAI,YAAY,qBAAO,SAAS,OAAC,CAAC;gBAClC,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAC1B,IAAI,QAAQ,EAAE;oBACZ,QAAQ,CAAC,YAAY,CAAC,CAAC;iBACxB;YACH,CAAC,GACD,EAd2B,CAc3B,CAAC;QAEL,oBAAC,aAAM,IACL,SAAS,EAAC,oBAAoB,EAC9B,IAAI,EAAE,oBAAC,oBAAY,OAAG,EACtB,OAAO,EAAE,SAAS,GAClB;QACF,oBAAC,aAAM,IACL,SAAS,EAAC,mBAAmB,EAC7B,IAAI,EAAE,oBAAC,qBAAa,OAAG,EACvB,OAAO,EAAE,YAAY,GACrB,CACE,CACP,CAAC;AACJ,CAAC,CAAC;AAtDW,QAAA,aAAa,iBAsDxB;AAEF,kBAAe,qBAAa,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport {\n  InputNumber, Button\n} from 'antd';\n\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\n\nimport './LineDashField.less';\n\n// default props\ninterface LineDashFieldDefaultProps {\n  dashArray: number[];\n}\n\n// non default props\nexport interface LineDashFieldProps extends Partial<LineDashFieldDefaultProps> {\n  onChange?: (dashArray: number[]) => void;\n}\n\n/**\n * LineDashField to edit dashes for LineSymbolizers\n */\nexport const LineDashField: React.FC<LineDashFieldProps> = ({\n  onChange,\n  dashArray = []\n}) => {\n\n  const onAddDash = () => {\n    // add a new dash (UI)\n    let newDashArray = [...dashArray];\n    newDashArray.push(1);\n    if (onChange) {\n      onChange(newDashArray);\n    }\n  };\n\n  const onRemoveDash = () => {\n    // remove last dash (UI)\n    let newDashArray = [...dashArray];\n    newDashArray.splice(newDashArray.length - 1, 1);\n    if (onChange) {\n      onChange(newDashArray);\n    }\n  };\n\n  return (\n    <div className=\"editor-field linedash-field\">\n      {\n        dashArray.map((dash, idx) => <InputNumber\n          key={idx}\n          value={dash}\n          min={1}\n          step={1}\n          style={{ width: 55 }}\n          onChange={(value: number) => {\n            // replace current dash value\n            let newDashArray = [...dashArray];\n            newDashArray[idx] = value;\n            if (onChange) {\n              onChange(newDashArray);\n            }\n          }}\n        />)\n      }\n      <Button\n        className=\"gs-add-dash-button\"\n        icon={<PlusOutlined />}\n        onClick={onAddDash}\n      />\n      <Button\n        className=\"gs-rm-dash-button\"\n        icon={<MinusOutlined />}\n        onClick={onRemoveDash}\n      />\n    </div>\n  );\n};\n\nexport default LineDashField;\n"]}