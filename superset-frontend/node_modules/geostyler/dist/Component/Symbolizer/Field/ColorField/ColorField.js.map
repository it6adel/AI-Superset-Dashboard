{"version":3,"file":"ColorField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/ColorField/ColorField.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAC/B,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B,2CAGqB;AAErB,6BAGc;AAEd,6BAA2B;AAE3B,sEAAgE;AAChE,mEAA6C;AAE7C,2CAAkD;AAclD;;GAEG;AACI,IAAM,UAAU,GAA8B,UAAC,EAKrD;QAJC,QAAQ,cAAA,EACR,cAAyB,EAAzB,MAAM,mBAAG,eAAK,CAAC,UAAU,KAAA,EACzB,KAAK,WAAA,EACL,YAAY,kBAAA;IAGN,IAAA,KAA8C,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,EAA3E,kBAAkB,QAAA,EAAE,qBAAqB,QAAkC,CAAC;IAEnF,IAAM,mBAAmB,GAAG;QAC1B,qBAAqB,CAAC,CAAC,kBAAkB,CAAC,CAAC;IAC7C,CAAC,CAAC;IAEF,IAAM,gBAAgB,GAAG,UAAC,WAAwB;QAChD,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAC3B;IACH,CAAC,CAAC;IAEF,IAAI,SAAS,CAAC;IAEd,IAAI,CAAC,KAAK,IAAI,CAAC,YAAY,EAAE;QAC3B,SAAS,GAAG,SAAS,CAAC;KACvB;SAAM;QACL,IAAI;YACF,SAAS,GAAG,KAAK,CAAC,KAAK,IAAI,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,CAAC;SACxE;QAAC,OAAO,KAAK,EAAE;YACd,SAAS,GAAG,SAAS,CAAC;SACvB;KACF;IAED,OAAO,CACL,6BAAK,SAAS,EAAC,0BAA0B;QACvC,6BAAK,SAAS,EAAC,uBAAuB;YACpC,oBAAC,aAAM,IACL,SAAS,EAAC,eAAe,EACzB,KAAK,EAAE;oBACL,eAAe,EAAE,KAAK,IAAI,YAAY;oBACtC,KAAK,EAAE,SAAS;iBACjB,EACD,OAAO,EAAE,mBAAmB,IAE3B,kBAAkB,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAC7E;YACT,oBAAC,cAAO,IAAC,KAAK,EAAE,MAAM,CAAC,SAAS;gBAC9B,oBAAC,aAAM,IACL,SAAS,EAAC,aAAa,EACvB,IAAI,EAAE,oBAAC,qBAAa,OAAG,EACvB,OAAO,EAAE,UAAC,CAAC;wBACT,IAAI,QAAQ,EAAE;4BACZ,QAAQ,CAAC,SAAS,CAAC,CAAC;yBACrB;wBACD,qBAAqB,CAAC,KAAK,CAAC,CAAC;oBAC/B,CAAC,GACD,CACM;YAER,kBAAkB,CAAC,CAAC;gBAClB;oBACE,oBAAC,0BAAY,IACX,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,IAAI,EAClB,gBAAgB,EAAE,gBAAgB,GAClC,CACD,CAAC,CAAC,CAAC,IAAI,CAEV,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AArEW,QAAA,UAAU,cAqErB;AAEF,kBAAe,IAAA,wBAAQ,EAAC,kBAAU,EAAE,YAAY,CAAC,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\nconst Color = require('color');\n\nimport {\n  SketchPicker,\n  ColorResult\n} from 'react-color';\n\nimport {\n  Button,\n  Tooltip\n} from 'antd';\n\nimport './ColorField.less';\n\nimport { localize } from '../../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../../locale/en_US';\nimport { GeoStylerLocale } from '../../../../locale/locale';\nimport { CloseOutlined } from '@ant-design/icons';\n\n// default props\ninterface ColorFieldDefaultProps {\n  locale: GeoStylerLocale['ColorField'];\n}\n\n// non default props\nexport interface ColorFieldProps extends Partial<ColorFieldDefaultProps> {\n  onChange?: (color: string) => void;\n  color?: string;\n  defaultValue?: string;\n}\n\n/**\n * ColorField\n */\nexport const ColorField: React.FC<ColorFieldProps> = ({\n  onChange,\n  locale = en_US.ColorField,\n  color,\n  defaultValue\n}) => {\n\n  const [colorPickerVisible, setColorPickerVisible] = React.useState<boolean>(false);\n\n  const onColorPreviewClick = () => {\n    setColorPickerVisible(!colorPickerVisible);\n  };\n\n  const onChangeComplete = (colorResult: ColorResult) => {\n    if (onChange) {\n      onChange(colorResult.hex);\n    }\n  };\n\n  let textColor;\n\n  if (!color && !defaultValue) {\n    textColor = '#000000';\n  } else {\n    try {\n      textColor = Color(color || defaultValue).negate().grayscale().string();\n    } catch (error) {\n      textColor = '#000000';\n    }\n  }\n\n  return (\n    <div className=\"editor-field color-field\">\n      <div className=\"color-preview-wrapper\">\n        <Button\n          className=\"color-preview\"\n          style={{\n            backgroundColor: color || defaultValue,\n            color: textColor\n          }}\n          onClick={onColorPreviewClick}\n        >\n          {colorPickerVisible ? locale.closeText : color ? locale.editText : locale.chooseText}\n        </Button>\n        <Tooltip title={locale.clearText}>\n          <Button\n            className='color-clear'\n            icon={<CloseOutlined />}\n            onClick={(e) => {\n              if (onChange) {\n                onChange(undefined);\n              }\n              setColorPickerVisible(false);\n            }}\n          />\n        </Tooltip>\n        {\n          colorPickerVisible ?\n            <>\n              <SketchPicker\n                color={color}\n                disableAlpha={true}\n                onChangeComplete={onChangeComplete}\n              />\n            </> : null\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default localize(ColorField, 'ColorField');\n"]}