{"version":3,"file":"RgbChannelField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/RgbChannelField/RgbChannelField.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport {\n  Form\n} from 'antd';\n\nimport { localize } from '../../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../../locale/en_US';\nimport SourceChannelNameField from '../SourceChannelNameField/SourceChannelNameField';\nimport { ChannelSelection, RGBChannel } from 'geostyler-style';\n\nimport _get from 'lodash/get';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { GeoStylerLocale } from '../../../../locale/locale';\n\n// default props\ninterface RgbChannelFieldDefaultProps {\n  locale: GeoStylerLocale['RgbChannelField'];\n}\n\n// non default props\nexport interface RgbChannelFieldProps extends Partial<RgbChannelFieldDefaultProps> {\n  sourceChannelNames?: string[];\n  onChange?: (channelSelection: ChannelSelection) => void;\n  channelSelection?: ChannelSelection;\n}\n\n/**\n * RgbChannelField to map different bands to rgb\n */\nexport const RgbChannelField: React.FC<RgbChannelFieldProps> = ({\n  sourceChannelNames,\n  onChange,\n  channelSelection,\n  locale = en_US.RgbChannelField\n}) => {\n\n  const onRedChannelChange = (red: string) => {\n    let rgb: RGBChannel;\n    if (!channelSelection || (channelSelection && channelSelection.hasOwnProperty('grayChannel'))) {\n      rgb = {\n        redChannel: {\n          sourceChannelName: red\n        }\n      } as RGBChannel;\n    } else {\n      rgb = _cloneDeep(channelSelection as RGBChannel);\n      rgb.redChannel = {\n        sourceChannelName: red\n      };\n    }\n    if (onChange) {\n      onChange(rgb);\n    }\n  };\n\n  const onGreenChannelChange = (green: string) => {\n    let rgb: RGBChannel;\n    if (!channelSelection || (channelSelection && channelSelection.hasOwnProperty('grayChannel'))) {\n      rgb = {\n        greenChannel: {\n          sourceChannelName: green\n        }\n      } as RGBChannel;\n    } else {\n      rgb = _cloneDeep(channelSelection as RGBChannel);\n      rgb.greenChannel = {\n        sourceChannelName: green\n      };\n    }\n    if (onChange) {\n      onChange(rgb);\n    }\n  };\n\n  const onBlueChannelChange = (blue: string) => {\n    let rgb: RGBChannel;\n    if (!channelSelection || (channelSelection && channelSelection.hasOwnProperty('grayChannel'))) {\n      rgb = {\n        blueChannel: {\n          sourceChannelName: blue\n        }\n      } as RGBChannel;\n    } else {\n      rgb = _cloneDeep(channelSelection as RGBChannel);\n      rgb.blueChannel = {\n        sourceChannelName: blue\n      };\n    }\n    if (onChange) {\n      onChange(rgb);\n    }\n  };\n\n  return (\n    <div>\n      <Form.Item\n        label={locale.redLabel}\n      >\n        <SourceChannelNameField\n          sourceChannelNames={sourceChannelNames}\n          onChange={onRedChannelChange}\n          sourceChannelName={_get(channelSelection, 'redChannel.sourceChannelName')}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.greenLabel}\n      >\n        <SourceChannelNameField\n          sourceChannelNames={sourceChannelNames}\n          onChange={onGreenChannelChange}\n          sourceChannelName={_get(channelSelection, 'greenChannel.sourceChannelName')}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.blueLabel}\n      >\n        <SourceChannelNameField\n          sourceChannelNames={sourceChannelNames}\n          onChange={onBlueChannelChange}\n          sourceChannelName={_get(channelSelection, 'blueChannel.sourceChannelName')}\n        />\n      </Form.Item>\n    </div>\n  );\n};\n\nexport default localize(RgbChannelField, 'RgbChannelField');\n"]}