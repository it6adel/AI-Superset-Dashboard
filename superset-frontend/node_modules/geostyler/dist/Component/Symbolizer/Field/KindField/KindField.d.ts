import * as React from 'react';
import { SymbolizerKind } from 'geostyler-style';
import { GeoStylerLocale } from '../../../../locale/locale';
interface KindFieldDefaultProps {
    kind: SymbolizerKind;
    symbolizerKinds: SymbolizerKind[];
    locale: GeoStylerLocale['KindField'];
}
export interface KindFieldProps extends Partial<KindFieldDefaultProps> {
    onChange?: (kind: SymbolizerKind) => void;
}
/**
 * KindField
 */
export declare const KindField: React.FC<KindFieldProps>;
declare const _default: {
    new (props: (KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<KindFieldProps & import("../../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
