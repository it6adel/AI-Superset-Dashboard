{"version":3,"file":"GraphicTypeField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/GraphicTypeField/GraphicTypeField.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAC/B,6BAA8B;AAI9B,sEAAgE;AAChE,mEAA6C;AAE7C,mDAA8B;AAG9B,IAAM,MAAM,GAAG,aAAM,CAAC,MAAM,CAAC;AAyB7B,gEAAgE;AACzD,IAAM,gBAAgB,GAAoC,UAAC,EAOjE;IANC,IAAA,QAAQ,cAAA,EACR,WAAW,iBAAA,EACX,cAA+B,EAA/B,MAAM,mBAAG,eAAK,CAAC,gBAAgB,KAAA,EAC/B,oBAA+B,EAA/B,YAAY,mBAAG,CAAC,MAAM,EAAE,MAAM,CAAC,KAAA,EAC/B,iBAAgB,EAAhB,SAAS,mBAAG,IAAI,KAAA,EACb,gBAAgB,cAN6C,kEAOjE,CADoB;IAGnB;;;;;OAKG;IACH,IAAM,oBAAoB,GAAG,UAAC,CAAyB;QACrD,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,IAAiB;YACzC,IAAM,GAAG,GAAG,IAAA,aAAI,EAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC;YAClC,OAAO,CACL,oBAAC,MAAM,IACL,GAAG,EAAE,IAAI,EACT,KAAK,EAAE,IAAI,IAEV,GAAG,CACG,CACV,CAAC;QACJ,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,CACL,oBAAC,aAAM,aACL,SAAS,EAAC,gCAAgC,EAC1C,KAAK,EAAE,WAAW,EAClB,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,SAAS,IACjB,gBAAgB,GAEnB,oBAAoB,CAAC,MAAM,CAAC,CACtB,CACV,CAAC;AACJ,CAAC,CAAC;AAxCW,QAAA,gBAAgB,oBAwC3B;AAEF,kBAAe,IAAA,wBAAQ,EAAC,wBAAgB,EAAE,kBAAkB,CAAC,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\nimport { Select } from 'antd';\n\nimport { GraphicType } from 'geostyler-style';\n\nimport { localize } from '../../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../../locale/en_US';\n\nimport _get from 'lodash/get';\nimport { GeoStylerLocale } from '../../../../locale/locale';\n\nconst Option = Select.Option;\n\ninterface GraphicTypeFieldLocale {\n  /** Rendered Text for Mark Option */\n  Mark: string;\n  /** Rendered Text for Icon Option */\n  Icon: string;\n}\n\nexport interface GraphicTypeFieldDefaultProps {\n  /** List of selectable GraphicTypes for Select */\n  graphicTypes: GraphicType[];\n  /** Language package */\n  locale: GeoStylerLocale['GraphicTypeField'];\n  /** If true GraphicTypeField can be cleared  */\n  clearable: boolean;\n}\n\nexport interface GraphicTypeFieldProps extends Partial<GraphicTypeFieldDefaultProps> {\n  /** Currently selected GraphicType */\n  graphicType?: GraphicType;\n  /** Callback when selection changes */\n  onChange?: (type: GraphicType) => void;\n}\n\n/** GraphicTypeField to select between different GraphicTypes */\nexport const GraphicTypeField: React.FC<GraphicTypeFieldProps> = ({\n  onChange,\n  graphicType,\n  locale = en_US.GraphicTypeField,\n  graphicTypes = ['Mark', 'Icon'],\n  clearable = true,\n  ...passThroughProps\n}) => {\n\n  /**\n   * Iterates over props.graphicTypes and returns an Option according to GraphicType\n   *\n   * @param {GraphicTypeFieldLocale} l Language package used for the displayed text of an Option\n   * @return {React.ReactNode[]} List of Options\n   */\n  const getTypeSelectOptions = (l: GraphicTypeFieldLocale): React.ReactNode[] => {\n    return (graphicTypes.map((type: GraphicType) => {\n      const loc = _get(l, type) || type;\n      return (\n        <Option\n          key={type}\n          value={type}\n        >\n          {loc}\n        </Option>\n      );\n    }));\n  };\n\n  return (\n    <Select\n      className=\"editor-field graphictype-field\"\n      value={graphicType}\n      onChange={onChange}\n      allowClear={clearable}\n      {...passThroughProps}\n    >\n      {getTypeSelectOptions(locale)}\n    </Select>\n  );\n};\n\nexport default localize(GraphicTypeField, 'GraphicTypeField');\n"]}