{"version":3,"file":"ColorMapTypeField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/ColorMapTypeField/ColorMapTypeField.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAE/B,6BAEc;AAGd,sEAAgE;AAChE,mEAA6C;AAG7C,mDAA8B;AAsB9B;;GAEG;AACI,IAAM,iBAAiB,GAAqC,UAAC,EAKnE;QAJC,2BAAqD,EAArD,mBAAmB,mBAAG,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,KAAA,EACrD,cAAgC,EAAhC,MAAM,mBAAG,eAAK,CAAC,iBAAiB,KAAA,EAChC,QAAQ,cAAA,EACR,YAAY,kBAAA;IAGZ,IAAM,OAAO,GAAG,mBAAmB,CAAC,GAAG,CAAC,UAAC,EAAgB,IAAK,OAAA,CAC5D,oBAAC,YAAK,CAAC,MAAM,IACX,GAAG,EAAE,EAAE,EACP,KAAK,EAAE,EAAE,IACT,IAAA,aAAI,EAAC,MAAM,EAAE,UAAG,EAAE,iBAAc,CAAC,CAAgB,CACpD,EAL6D,CAK7D,CAAC,CAAC;IAEH,IAAM,oBAAoB,GAAG,UAAC,KAAuB;QACnD,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACtC,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,UAAU,CAAC,CAAC;SACtB;IACH,CAAC,CAAC;IAEF,IAAM,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACrE,OAAO,CACL,oBAAC,YAAK,CAAC,KAAK,IACV,SAAS,EAAC,sBAAsB,EAChC,YAAY,EAAE,OAAO,EACrB,WAAW,EAAC,OAAO,EACnB,QAAQ,EAAE,oBAAoB,EAC9B,IAAI,EAAC,OAAO,IAEX,OAAO,CACI,CACf,CAAC;AACJ,CAAC,CAAC;AAjCW,QAAA,iBAAiB,qBAiC5B;AAEF,kBAAe,IAAA,wBAAQ,EAAC,yBAAiB,EAAE,mBAAmB,CAAC,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport {\n  Radio\n} from 'antd';\n\nimport { ColorMapType } from 'geostyler-style';\nimport { localize } from '../../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../../locale/en_US';\nimport { RadioChangeEvent } from 'antd/lib/radio';\n\nimport _get from 'lodash/get';\nimport { GeoStylerLocale } from '../../../../locale/locale';\n\n// i18n\nexport interface ColorMapTypeFieldLocale {\n  rampMapTypeLabel: string;\n  intervalsMapTypeLabel: string;\n  valuesMapTypeLabel: string;\n}\n\n// default props\ninterface ColorMapTypeFieldDefaultProps {\n  colorMapTypeOptions: ColorMapType[];\n  locale: GeoStylerLocale['ColorMapTypeField'];\n}\n\n// non default props\nexport interface ColorMapTypeFieldProps extends Partial<ColorMapTypeFieldDefaultProps> {\n  onChange?: (colorMapType: ColorMapType) => void;\n  colorMapType?: ColorMapType;\n}\n\n/**\n * ColorMapTypeField to select between different colormap options\n */\nexport const ColorMapTypeField: React.FC<ColorMapTypeFieldProps> = ({\n  colorMapTypeOptions = ['ramp', 'intervals', 'values'],\n  locale = en_US.ColorMapTypeField,\n  onChange,\n  colorMapType\n}) => {\n\n  const options = colorMapTypeOptions.map((mT: ColorMapType) => (\n    <Radio.Button\n      key={mT}\n      value={mT}\n    >{_get(locale, `${mT}MapTypeLabel`)}</Radio.Button>\n  ));\n\n  const onColorMapTypeChange = (event: RadioChangeEvent) => {\n    const newMapType = event.target.value;\n    if (onChange) {\n      onChange(newMapType);\n    }\n  };\n\n  const mapType = colorMapType ? colorMapType : colorMapTypeOptions[0];\n  return (\n    <Radio.Group\n      className=\"color-map-type-field\"\n      defaultValue={mapType}\n      buttonStyle=\"solid\"\n      onChange={onColorMapTypeChange}\n      size=\"small\"\n    >\n      {options}\n    </Radio.Group>\n  );\n};\n\nexport default localize(ColorMapTypeField, 'ColorMapTypeField');\n"]}