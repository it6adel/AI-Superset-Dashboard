{"version":3,"file":"GrayChannelField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/GrayChannelField/GrayChannelField.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAE/B,6BAEc;AAEd,sEAAgE;AAChE,mEAA6C;AAC7C,4GAAsF;AAGtF,mDAA8B;AAC9B,+DAA0C;AAe1C;;GAEG;AACI,IAAM,gBAAgB,GAAoC,UAAC,EAKjE;QAJC,QAAQ,cAAA,EACR,gBAAgB,sBAAA,EAChB,kBAAkB,wBAAA,EAClB,cAA+B,EAA/B,MAAM,mBAAG,eAAK,CAAC,gBAAgB,KAAA;IAG/B,IAAM,mBAAmB,GAAG,UAAC,KAAa;QACxC,IAAM,IAAI,GAAG,KAAK,CAAC;QACnB,IAAI,mBAAgC,CAAC;QACrC,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;YACtE,mBAAmB,GAAG,IAAA,mBAAU,EAAC,gBAAgB,CAAgB,CAAC;YAClE,mBAAmB,CAAC,WAAW,CAAC,iBAAiB,GAAG,IAAI,CAAC;SAC1D;aAAM;YACL,mBAAmB,GAAG;gBACpB,WAAW,EAAE;oBACX,iBAAiB,EAAE,IAAI;iBACxB;aACF,CAAC;SACH;QACD,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,mBAAmB,CAAC,CAAC;SAC/B;IACH,CAAC,CAAC;IAEF,OAAO,CACL;QACE,oBAAC,WAAI,CAAC,IAAI,IACR,KAAK,EAAE,MAAM,CAAC,SAAS;YAEvB,oBAAC,gCAAsB,IACrB,kBAAkB,EAAE,kBAAkB,EACtC,QAAQ,EAAE,mBAAmB,EAC7B,iBAAiB,EAAE,IAAA,aAAI,EAAC,gBAAgB,EAAE,+BAA+B,CAAC,GAC1E,CACQ,CACR,CACP,CAAC;AACJ,CAAC,CAAC;AAtCW,QAAA,gBAAgB,oBAsC3B;AAEF,kBAAe,IAAA,wBAAQ,EAAC,wBAAgB,EAAE,kBAAkB,CAAC,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport {\n  Form\n} from 'antd';\n\nimport { localize } from '../../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../../locale/en_US';\nimport SourceChannelNameField from '../SourceChannelNameField/SourceChannelNameField';\nimport { ChannelSelection, GrayChannel } from 'geostyler-style';\n\nimport _get from 'lodash/get';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { GeoStylerLocale } from '../../../../locale/locale';\n\n// default props\ninterface GrayChannelFieldDefaultProps {\n  locale: GeoStylerLocale['GrayChannelField'];\n}\n\n// non default props\nexport interface GrayChannelFieldProps extends Partial<GrayChannelFieldDefaultProps> {\n  sourceChannelNames?: string[];\n  onChange?: (channelSelection: ChannelSelection) => void;\n  channelSelection?: ChannelSelection;\n}\n\n/**\n * GrayChannelField to map a band to grayscale\n */\nexport const GrayChannelField: React.FC<GrayChannelFieldProps> = ({\n  onChange,\n  channelSelection,\n  sourceChannelNames,\n  locale = en_US.GrayChannelField\n}) => {\n\n  const onGrayChannelChange = (value: string) => {\n    const gray = value;\n    let newChannelSelection: GrayChannel;\n    if (channelSelection && channelSelection.hasOwnProperty('grayChannel')) {\n      newChannelSelection = _cloneDeep(channelSelection) as GrayChannel;\n      newChannelSelection.grayChannel.sourceChannelName = gray;\n    } else {\n      newChannelSelection = {\n        grayChannel: {\n          sourceChannelName: gray\n        }\n      };\n    }\n    if (onChange) {\n      onChange(newChannelSelection);\n    }\n  };\n\n  return (\n    <div>\n      <Form.Item\n        label={locale.grayLabel}\n      >\n        <SourceChannelNameField\n          sourceChannelNames={sourceChannelNames}\n          onChange={onGrayChannelChange}\n          sourceChannelName={_get(channelSelection, 'grayChannel.sourceChannelName')}\n        />\n      </Form.Item>\n    </div>\n  );\n};\n\nexport default localize(GrayChannelField, 'GrayChannelField');\n"]}