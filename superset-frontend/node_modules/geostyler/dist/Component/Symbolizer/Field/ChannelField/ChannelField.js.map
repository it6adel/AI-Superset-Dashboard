{"version":3,"file":"ChannelField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/ChannelField/ChannelField.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport {\n  Channel,\n  ContrastEnhancement\n} from 'geostyler-style';\nimport SourceChannelNameField from '../SourceChannelNameField/SourceChannelNameField';\nimport { Form } from 'antd';\nimport { localize } from '../../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../../locale/en_US';\nimport ContrastEnhancementField from '../ContrastEnhancementField/ContrastEnhancementField';\nimport GammaField from '../GammaField/GammaField';\n\nimport _get from 'lodash/get';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { GeoStylerLocale } from '../../../../locale/locale';\n\n// default props\ninterface ChannelFieldDefaultProps {\n  locale: GeoStylerLocale['ChannelField'];\n  contrastEnhancementTypes: ContrastEnhancement['enhancementType'][];\n}\n\n// non default props\nexport interface ChannelFieldProps extends Partial<ChannelFieldDefaultProps> {\n  onChange?: (channel: Channel) => void;\n  sourceChannelNames?: string[];\n  channel?: Channel;\n}\n\n/**\n * ChannelField to select different Channel options\n */\nexport const ChannelField: React.FC<ChannelFieldProps> = ({\n  onChange,\n  locale = en_US.ChannelField,\n  sourceChannelNames,\n  contrastEnhancementTypes = ['histogram', 'normalize'],\n  channel\n}) => {\n\n  const updateChannel = (key: string, value: any) => {\n    let newChannel: Channel;\n    if (channel) {\n      newChannel = _cloneDeep(channel);\n    } else {\n      newChannel = {};\n    }\n    newChannel[key] = value;\n\n    if (onChange) {\n      onChange(newChannel);\n    }\n  };\n\n  const onSourceChannelNameChange = (name: string) => {\n    updateChannel('sourceChannelName', name);\n  };\n\n  const onContrastEnhancementChange = (type: ContrastEnhancement['enhancementType']) => {\n    const contrastEnhancement = channel?.contrastEnhancement;\n    let newContrastEnhancement: ContrastEnhancement;\n    if (contrastEnhancement) {\n      newContrastEnhancement = _cloneDeep(contrastEnhancement);\n    } else {\n      newContrastEnhancement = {};\n    }\n    newContrastEnhancement.enhancementType = type;\n    updateChannel('contrastEnhancement', newContrastEnhancement);\n  };\n\n  const onGammaChange = (gammaValue: number|string) => {\n    const contrastEnhancement = channel?.contrastEnhancement;\n    let newContrastEnhancement: ContrastEnhancement;\n    if (contrastEnhancement) {\n      newContrastEnhancement = _cloneDeep(contrastEnhancement);\n    } else {\n      newContrastEnhancement = {};\n    }\n    newContrastEnhancement.gammaValue = gammaValue as number;\n    updateChannel('contrastEnhancement', newContrastEnhancement);\n  };\n\n  const sourceChannelName = _get(channel, 'sourceChannelName');\n  const contrastEnhancementType = _get(channel, 'contrastEnhancement.enhancementType');\n  const gamma = _get(channel, 'contrastEnhancement.gammaValue');\n\n  return (\n    <div>\n      <Form.Item\n        label={locale.sourceChannelNameLabel}\n      >\n        <SourceChannelNameField\n          onChange={onSourceChannelNameChange}\n          sourceChannelName={sourceChannelName as string}\n          sourceChannelNames={sourceChannelNames}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.contrastEnhancementTypeLabel}\n      >\n        <ContrastEnhancementField\n          contrastEnhancement={contrastEnhancementType}\n          contrastEnhancementOptions={contrastEnhancementTypes}\n          onChange={onContrastEnhancementChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.gammaValueLabel}\n      >\n        <GammaField\n          gamma={gamma as any}\n          onChange={onGammaChange}\n        />\n      </Form.Item>\n    </div>\n  );\n};\n\nexport default localize(ChannelField, 'ChannelField');\n"]}