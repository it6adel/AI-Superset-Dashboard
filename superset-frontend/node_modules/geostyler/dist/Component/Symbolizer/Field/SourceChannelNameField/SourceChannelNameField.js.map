{"version":3,"file":"SourceChannelNameField.js","sourceRoot":"","sources":["../../../../../src/Component/Symbolizer/Field/SourceChannelNameField/SourceChannelNameField.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAE/B,6BAGc;AACd,IAAM,MAAM,GAAG,aAAM,CAAC,MAAM,CAAC;AAc7B;;GAEG;AACI,IAAM,sBAAsB,GAA0C,UAAC,EAK7E;QAJC,kBAAkB,wBAAA,EAClB,QAAQ,cAAA,EACR,iBAAiB,uBAAA,EACjB,mBAA4B,EAA5B,WAAW,mBAAG,cAAc,KAAA;IAG5B,IAAM,iCAAiC,GAAG;QACxC,OAAO,kBAAkB,CAAC,GAAG,CAAC,UAAA,IAAI;YAChC,OAAO,CACL,oBAAC,MAAM,IACL,GAAG,EAAE,IAAI,EACT,KAAK,EAAE,IAAI,IAEV,IAAI,CACE,CACV,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,CACL,iCAEI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnD,CACE,oBAAC,aAAM,IACL,SAAS,EAAC,sCAAsC,EAChD,KAAK,EAAE,iBAAiB,EACxB,QAAQ,EAAE,QAAQ,IAEjB,iCAAiC,EAAE,CAC7B,CACV,CAAC,CAAC,CAAC,CACF,oBAAC,YAAK,IACJ,SAAS,EAAC,sCAAsC,EAChD,YAAY,EAAE,iBAAiB,EAC/B,KAAK,EAAE,iBAAiB,EACxB,WAAW,EAAE,WAAW,EACxB,QAAQ,EAAE,UAAC,GAAQ;YACjB,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC5B;QACH,CAAC,GACD,CACH,CAED,CACP,CAAC;AACJ,CAAC,CAAC;AAhDW,QAAA,sBAAsB,0BAgDjC;AAEF,kBAAe,8BAAsB,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport {\n  Input,\n  Select\n} from 'antd';\nconst Option = Select.Option;\n\n// default props\ninterface SourceChannelNameFieldDefaultProps {\n  placeholder: string;\n}\n\n// non default props\nexport interface SourceChannelNameFieldProps extends Partial<SourceChannelNameFieldDefaultProps> {\n  sourceChannelNames?: string[];\n  onChange?: (sourceChannelName: string) => void;\n  sourceChannelName?: string;\n}\n\n/**\n * SourceChannelNameField to select between different source channel options\n */\nexport const SourceChannelNameField: React.FC<SourceChannelNameFieldProps> = ({\n  sourceChannelNames,\n  onChange,\n  sourceChannelName,\n  placeholder = 'Name of band'\n}) => {\n\n  const getSourceChannelNameSelectOptions = () => {\n    return sourceChannelNames.map(name => {\n      return (\n        <Option\n          key={name}\n          value={name}\n        >\n          {name}\n        </Option>\n      );\n    });\n  };\n\n  return (\n    <div>\n      {\n        sourceChannelNames && sourceChannelNames.length > 0 ?\n          (\n            <Select\n              className=\"editor-field sourceChannelName-field\"\n              value={sourceChannelName}\n              onChange={onChange}\n            >\n              {getSourceChannelNameSelectOptions()}\n            </Select>\n          ) : (\n            <Input\n              className=\"editor-field sourceChannelName-field\"\n              defaultValue={sourceChannelName}\n              value={sourceChannelName}\n              placeholder={placeholder}\n              onChange={(evt: any) => {\n                if (onChange) {\n                  onChange(evt.target.value);\n                }\n              }}\n            />\n          )\n      }\n    </div>\n  );\n};\n\nexport default SourceChannelNameField;\n"]}