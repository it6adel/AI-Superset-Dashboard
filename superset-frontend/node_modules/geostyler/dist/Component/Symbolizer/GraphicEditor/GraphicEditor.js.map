{"version":3,"file":"GraphicEditor.js","sourceRoot":"","sources":["../../../../src/Component/Symbolizer/GraphicEditor/GraphicEditor.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAO/B,wEAAkD;AAClD,wEAAuE;AACvE,gGAAqG;AACrG,gFAA0D;AAE1D,6BAA4B;AAwB5B,gEAAgE;AACzD,IAAM,aAAa,GAAiC,UAAC,EAQ3D;QAPC,6BAAsC,EAAtC,qBAAqB,mBAAG,cAAc,KAAA,EACtC,OAAO,aAAA,EACP,WAAW,iBAAA,EACX,eAAe,qBAAA,EACf,qBAAqB,2BAAA,EACrB,eAAe,qBAAA,EACf,aAAa,mBAAA;IAGb,IAAI,aAA8B,CAAC;IACnC,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,MAAK,MAAM,EAAE;QAC5B,IAAI,WAAW,GAAmB,OAAyB,CAAC;QAC5D,aAAa,GAAG,oBAAC,oBAAU,IACzB,UAAU,EAAE,WAAW,EACvB,kBAAkB,EAAE,eAAe,GACnC,CAAC;KACJ;SAAM,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,MAAK,MAAM,EAAE;QACnC,aAAa,GAAI,oBAAC,oBAAU,aAC1B,UAAU,EAAE,OAAO,EACnB,kBAAkB,EAAE,eAAe,EACnC,aAAa,EAAE,aAAa,IACxB,eAAe,EACnB,CAAC;KACJ;IAED;;;;;OAKG;IACH,IAAM,mBAAmB,GAAG,UAAC,cAA2B;QACtD,IAAI,eAAe,EAAE;YACnB,IAAI,cAAc,KAAK,MAAM,EAAE;gBAC7B,eAAe,CAAC,wBAAc,CAAC,kBAAkB,CAAC,MAAM,CAAmB,CAAC,CAAC;aAC9E;iBAAM,IAAI,cAAc,KAAK,MAAM,EAAE;gBACpC,eAAe,CAAC,wBAAc,CAAC,kBAAkB,CAAC,MAAM,CAAmB,CAAC,CAAC;aAC9E;iBAAM;gBACL,eAAe,CAAC,SAAS,CAAC,CAAC;aAC5B;SACF;IACH,CAAC,CAAC;IAEF,OAAO,CACL;QACE,oBAAC,WAAI,CAAC,IAAI,IACR,KAAK,EAAE,qBAAqB;YAE5B,oBAAC,0BAAgB,aACf,WAAW,EAAE,WAAW,EACxB,QAAQ,EAAE,mBAAmB,IACzB,qBAAqB,EACzB,CACQ;QACX,aAAa,CACV,CACP,CAAC;AACJ,CAAC,CAAC;AA1DW,QAAA,aAAa,iBA0DxB;AAEF,kBAAe,qBAAa,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\nimport {\n  PointSymbolizer,\n  GraphicType,\n  MarkSymbolizer,\n  IconSymbolizer\n} from 'geostyler-style';\nimport MarkEditor from '../MarkEditor/MarkEditor';\nimport IconEditor, { IconEditorProps } from '../IconEditor/IconEditor';\nimport GraphicTypeField, { GraphicTypeFieldProps } from '../Field/GraphicTypeField/GraphicTypeField';\nimport SymbolizerUtil from '../../../Util/SymbolizerUtil';\nimport { IconLibrary } from '../IconSelector/IconSelector';\nimport { Form } from 'antd';\n\nimport _get from 'lodash/get';\n\nexport interface GraphicEditorDefaultProps {\n  /** Label being used on TypeField */\n  graphicTypeFieldLabel: string;\n}\n\n// non default props\nexport interface GraphicEditorProps extends Partial<GraphicEditorDefaultProps> {\n  /** PointSymbolizer that is being used as graphic */\n  graphic: PointSymbolizer;\n  /** Currently selected GraphicType */\n  graphicType: GraphicType;\n  /** Gets called when changing a graphic */\n  onGraphicChange?: (graphic: PointSymbolizer) => void;\n  /** Default GraphicTypeFieldProps */\n  graphicTypeFieldProps?: GraphicTypeFieldProps;\n  /** Default IconEditorProps */\n  iconEditorProps?: Partial<IconEditorProps>;\n  iconLibraries?: IconLibrary[];\n}\n\n/** GraphicEditor to select between different graphic options */\nexport const GraphicEditor: React.FC<GraphicEditorProps> = ({\n  graphicTypeFieldLabel = 'Graphic-Type',\n  graphic,\n  graphicType,\n  onGraphicChange,\n  graphicTypeFieldProps,\n  iconEditorProps,\n  iconLibraries\n}) => {\n\n  let graphicsField: React.ReactNode;\n  if (graphic?.kind === 'Mark') {\n    let markGraphic: MarkSymbolizer = graphic as MarkSymbolizer;\n    graphicsField = <MarkEditor\n      symbolizer={markGraphic}\n      onSymbolizerChange={onGraphicChange}\n    />;\n  } else if (graphic?.kind === 'Icon') {\n    graphicsField =  <IconEditor\n      symbolizer={graphic}\n      onSymbolizerChange={onGraphicChange}\n      iconLibraries={iconLibraries}\n      {...iconEditorProps}\n    />;\n  }\n\n  /**\n   * If GraphicType changed, call props.onGraphicChange with default PointSymbolizers.\n   * If GraphicType was unselected, call props.onGraphicChange with undefined to reset values.\n   *\n   * @param newGraphicType currently selected GraphicType\n   */\n  const onGraphicTypeChange = (newGraphicType: GraphicType): void => {\n    if (onGraphicChange) {\n      if (newGraphicType === 'Mark') {\n        onGraphicChange(SymbolizerUtil.generateSymbolizer('Mark') as MarkSymbolizer);\n      } else if (newGraphicType === 'Icon') {\n        onGraphicChange(SymbolizerUtil.generateSymbolizer('Icon') as IconSymbolizer);\n      } else {\n        onGraphicChange(undefined);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Form.Item\n        label={graphicTypeFieldLabel}\n      >\n        <GraphicTypeField\n          graphicType={graphicType}\n          onChange={onGraphicTypeChange}\n          {...graphicTypeFieldProps}\n        />\n      </Form.Item>\n      {graphicsField}\n    </div>\n  );\n};\n\nexport default GraphicEditor;\n"]}