{"version":3,"file":"IconSelector.js","sourceRoot":"","sources":["../../../../src/Component/Symbolizer/IconSelector/IconSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { useEffect, useState } from 'react';\n\nimport {\n  Avatar,\n  Card,\n  Select\n} from 'antd';\nconst Option = Select.Option;\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../locale/en_US';\n\nimport './IconSelector.less';\n\nimport _isEqual from 'lodash/isEqual';\nimport { GeoStylerLocale } from '../../../locale/locale';\n\n// default props\nexport interface IconSelectorDefaultProps {\n  locale: GeoStylerLocale['IconSelector'];\n}\n\nexport type IconLibrary = {\n  name: string;\n  icons: {\n    src: string;\n    caption: string;\n  }[];\n};\n\ntype SelectedIcon = {\n  libIndex: number;\n  iconIndex: number;\n};\n\n// non default props\nexport interface IconSelectorProps extends Partial<IconSelectorDefaultProps> {\n  iconLibraries: IconLibrary[];\n  selectedIconSrc?: string;\n  onIconSelect?: (iconSrc: string) => void;\n}\nconst COMPONENTNAME = 'IconSelector';\n\nexport const IconSelector: React.FC<IconSelectorProps> = ({\n  locale = en_US.IconSelector,\n  iconLibraries,\n  selectedIconSrc,\n  onIconSelect\n}) => {\n\n  const [selectedLibIndex, setSelectedLibIndex] = useState<number>();\n  const [selectedIcon, setSelectedIcon] = useState<SelectedIcon>();\n\n  const getSelectedIconFromSrc = (src: string, newIconLibraries: IconLibrary[]): SelectedIcon => {\n    let libIndex: number;\n    let iconIndex: number;\n    let found: boolean = false;\n\n    for (let i = 0; i < newIconLibraries.length; i++) {\n      const lib = newIconLibraries[i];\n      if (found) {\n        break;\n      }\n      for (let j = 0; j < lib.icons.length; j++) {\n        const icon = lib.icons[j];\n        if (icon.src === src) {\n          libIndex = i;\n          iconIndex = j;\n          found = true;\n          break;\n        }\n      }\n    }\n\n    return {\n      libIndex,\n      iconIndex\n    };\n  };\n\n  useEffect(() => {\n    let selection: any = {};\n    if (selectedIconSrc) {\n      selection = getSelectedIconFromSrc(selectedIconSrc, iconLibraries);\n    }\n    setSelectedLibIndex(selection.libIndex);\n    setSelectedIcon(selection);\n  }, [selectedIconSrc, iconLibraries]);\n\n\n  const libChange = (newLibIndex: number) => {\n    setSelectedLibIndex(newLibIndex);\n  };\n\n  const getGallery = (icon: any, index: number): React.ReactNode => {\n    let gridClassName = 'gs-icon-selector-grid';\n    if (selectedIcon && selectedIcon.libIndex === selectedLibIndex && selectedIcon.iconIndex === index) {\n      gridClassName += ' gs-icon-selector-grid-selected';\n    }\n    return (\n      <Card.Grid\n        key={index.toString()}\n        className={gridClassName}\n        // @ts-ignore\n        onClick={() => {\n          if (onIconSelect) {\n            onIconSelect(icon.src);\n          }\n        }}\n      >\n        <Avatar\n          className=\"gs-icon-selector-grid-avatar\"\n          size=\"default\"\n          src={icon.src}\n          alt={icon.caption}\n          shape=\"square\"\n        />\n        <Card.Meta\n          className=\"gs-icon-selector-grid-description\"\n          description={icon.caption}\n        />\n      </Card.Grid>\n    );\n  };\n\n  return (\n    <div className=\"gs-icon-selector\">\n      <div className=\"gs-lib-row\">\n        <span className=\"gs-label\">{`${locale.librarySelectLabel}:`}</span>\n        <Select\n          className=\"gs-select\"\n          allowClear={false}\n          defaultValue={selectedLibIndex}\n          onChange={libChange}\n        >\n          {\n            iconLibraries.map((lib: IconLibrary, index: number) => {\n              return (\n                <Option value={index} key={index.toString()}>{lib.name}</Option>\n              );\n            })\n          }\n        </Select>\n      </div>\n      <Card className=\"gs-icon-selector-card\">\n        {\n          iconLibraries[selectedLibIndex]?.icons?.map((icon: any, index: number) => {\n            return getGallery(icon, index);\n          })\n        }\n      </Card>\n    </div>\n  );\n};\n\nexport default localize(IconSelector, COMPONENTNAME);\n"]}