{"version":3,"file":"RasterEditor.js","sourceRoot":"","sources":["../../../../src/Component/Symbolizer/RasterEditor/RasterEditor.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { useContext, useState } from 'react';\n\nimport {\n  Symbolizer,\n  RasterSymbolizer,\n  ChannelSelection,\n  ContrastEnhancement,\n  ColorMap\n} from 'geostyler-style';\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../locale/en_US';\nimport { Form } from 'antd';\nimport OpacityField from '../Field/OpacityField/OpacityField';\nimport RasterChannelEditor from '../RasterChannelEditor/RasterChannelEditor';\nimport { Data } from 'geostyler-data';\nimport ContrastEnhancementField from '../Field/ContrastEnhancementField/ContrastEnhancementField';\nimport GammaField from '../Field/GammaField/GammaField';\nimport DataUtil from '../../../Util/DataUtil';\nimport ColorMapEditor from '../ColorMapEditor/ColorMapEditor';\nimport { CompositionContext, Compositions } from '../../../context/CompositionContext/CompositionContext';\nimport CompositionUtil from '../../../Util/CompositionUtil';\nimport withDefaultsContext from '../../../hoc/withDefaultsContext';\nimport { DefaultValues } from '../../../context/DefaultValueContext/DefaultValueContext';\n\nimport './RasterEditor.less';\n\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _get from 'lodash/get';\nimport { GeoStylerLocale } from '../../../locale/locale';\nimport {\n  UnsupportedPropertiesContext\n} from '../../../context/UnsupportedPropertiesContext/UnsupportedPropertiesContext';\nimport UnsupportedPropertiesUtil from '../../../Util/UnsupportedPropertiesUtil';\n\n// default props\ninterface RasterEditorDefaultProps {\n  locale: GeoStylerLocale['RasterEditor'];\n}\n\n// non default props\nexport interface RasterEditorProps extends Partial<RasterEditorDefaultProps> {\n  contrastEnhancementTypes?: ContrastEnhancement['enhancementType'][];\n  symbolizer: RasterSymbolizer;\n  onSymbolizerChange?: (changedSymb: Symbolizer) => void;\n  internalDataDef?: Data;\n  colorRamps?: {\n    [name: string]: string[];\n  };\n  defaultValues?: DefaultValues;\n}\n\ntype ShowDisplay = 'symbolizer' | 'colorMap' | 'contrastEnhancement';\nexport interface RasterEditorState {\n  showDisplay: ShowDisplay;\n}\nconst COMPONENTNAME = 'RasterEditor';\n\nexport const RasterEditor: React.FC<RasterEditorProps> = ({\n  locale = en_US.RasterEditor,\n  contrastEnhancementTypes,\n  symbolizer,\n  onSymbolizerChange,\n  internalDataDef,\n  colorRamps,\n  defaultValues\n}) => {\n\n  const {\n    unsupportedProperties,\n    options\n  } = useContext(UnsupportedPropertiesContext);\n\n  const [showDisplay, setShowDisplay] = useState('symbolizer');\n\n  const onOpacityChange = (value: number) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.opacity = value;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onChannelEditorChange = (value: ChannelSelection) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.channelSelection = value;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onContrastEnhancementChange = (value: ContrastEnhancement['enhancementType']) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    if (symbolizerClone.contrastEnhancement) {\n      symbolizerClone.contrastEnhancement.enhancementType = value;\n    } else {\n      symbolizerClone.contrastEnhancement = {\n        enhancementType: value\n      };\n    }\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onGammaValueChange = (value: ContrastEnhancement['gammaValue']) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    if (symbolizerClone.contrastEnhancement) {\n      symbolizerClone.contrastEnhancement.gammaValue = value;\n    } else {\n      symbolizerClone.contrastEnhancement = {\n        gammaValue: value\n      };\n    }\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onColorMapChange = (value: ColorMap) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.colorMap = value;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const {\n    opacity,\n    contrastEnhancement,\n    colorMap,\n    channelSelection\n  } = symbolizer;\n\n  let sourceChannelNames: string[];\n  if (internalDataDef && DataUtil.isRaster(internalDataDef)) {\n    sourceChannelNames = Object.keys(internalDataDef.rasterBandInfo);\n  }\n\n  const toggleViewButtonLayout = {\n    wrapperCol: {span: 24}\n  };\n\n  const getSupportProps = (propName: keyof RasterSymbolizer) => {\n    return UnsupportedPropertiesUtil.getSupportProps<RasterSymbolizer>({\n      propName,\n      symbolizerName: 'RasterSymbolizer',\n      unsupportedProperties,\n      ...options\n    });\n  };\n\n  return (\n    <CompositionContext.Consumer>\n      {(composition: Compositions) => (\n        <div className=\"gs-raster-symbolizer-editor\" >\n          {\n            showDisplay !== 'symbolizer' ? null : ([\n              <Form.Item\n                key='opacity'\n                label={locale.opacityLabel}\n                {...getSupportProps('opacity')}\n              >\n                {\n                  CompositionUtil.handleComposition({\n                    composition,\n                    path: 'RasterEditor.opacityField',\n                    onChange: onOpacityChange,\n                    propName: 'opacity',\n                    propValue: opacity,\n                    defaultValue: defaultValues?.RasterEditor?.defaultOpacity,\n                    defaultElement: <OpacityField />\n                  })\n                }\n              </Form.Item>,\n              <Form.Item\n                key='contrastEnhancement'\n                label={locale.contrastEnhancementLabel}\n                {...getSupportProps('contrastEnhancement')}\n              >\n                {\n                  CompositionUtil.handleComposition({\n                    composition,\n                    path: 'RasterEditor.contrastEnhancementField',\n                    onChange: onContrastEnhancementChange,\n                    propName: 'contrastEnhancement',\n                    propValue: _get(contrastEnhancement, 'enhancementType'),\n                    defaultElement: <ContrastEnhancementField />\n                  })\n                }\n              </Form.Item>,\n              <Form.Item\n                key='gamma'\n                label={locale.gammaValueLabel}\n                {...getSupportProps('contrastEnhancement')}\n              >\n                {\n                  CompositionUtil.handleComposition({\n                    composition,\n                    path: 'RasterEditor.gammaValueField',\n                    onChange: onGammaValueChange,\n                    propName: 'gamma',\n                    propValue: _get(contrastEnhancement, 'gammaValue'),\n                    defaultValue: defaultValues?.RasterEditor?.defaultGammaValue,\n                    defaultElement: <GammaField />\n                  })\n                }\n              </Form.Item>,\n              <Form.Item\n                className=\"gs-raster-editor-view-toggle\"\n                key=\"toggleColorMap\"\n                {...toggleViewButtonLayout}\n              >\n                <a onClick={() => setShowDisplay('colorMap')}>{`${locale.colorMapLabel} >>`}</a>\n              </Form.Item>,\n              <Form.Item\n                className=\"gs-raster-editor-view-toggle\"\n                key=\"toggleContrastEnhancement\"\n                {...toggleViewButtonLayout}\n              >\n                <a onClick={() => setShowDisplay('contrastEnhancement')}>\n                  {`${locale.channelSelectionLabel} >>`}\n                </a>\n              </Form.Item>\n            ])\n          }\n          {\n            showDisplay !== 'contrastEnhancement' ? null : ([\n              CompositionUtil.handleComposition({\n                composition,\n                path: 'RasterEditor.rasterChannelField',\n                onChange: onChannelEditorChange,\n                propName: 'channelSelection',\n                propValue: channelSelection,\n                defaultElement: (\n                  <RasterChannelEditor\n                    sourceChannelNames={sourceChannelNames}\n                    contrastEnhancementTypes={contrastEnhancementTypes}\n                  />\n                )\n              }),\n              <Form.Item\n                key=\"toggleSymbolizer\"\n                {...toggleViewButtonLayout}\n              >\n                <a onClick={() => setShowDisplay('symbolizer')}>{`<< ${locale.symbolizerLabel}`}</a>\n              </Form.Item>\n            ])\n          }\n          {\n            showDisplay !== 'colorMap' ? null : ([\n              CompositionUtil.handleComposition({\n                composition,\n                path: 'RasterEditor.colorMapField',\n                onChange: onColorMapChange,\n                propName: 'colorMap',\n                propValue: colorMap,\n                defaultElement: (\n                  <ColorMapEditor\n                    colorRamps={colorRamps}\n                  />\n                )\n              }),\n              <Form.Item\n                key=\"toggleSymbolizer\"\n                {...toggleViewButtonLayout}\n              >\n                <a onClick={() => setShowDisplay('symbolizer')}>{`<< ${locale.symbolizerLabel}`}</a>\n              </Form.Item>\n            ])\n          }\n        </div>\n      )}\n    </CompositionContext.Consumer>\n  );\n};\n\nexport default withDefaultsContext(localize(RasterEditor, COMPONENTNAME));\n"]}