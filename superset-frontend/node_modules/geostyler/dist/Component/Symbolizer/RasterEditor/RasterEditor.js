"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RasterEditor = void 0;
var react_1 = __importStar(require("react"));
var LocaleWrapper_1 = require("../../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../../locale/en_US"));
var antd_1 = require("antd");
var OpacityField_1 = __importDefault(require("../Field/OpacityField/OpacityField"));
var RasterChannelEditor_1 = __importDefault(require("../RasterChannelEditor/RasterChannelEditor"));
var ContrastEnhancementField_1 = __importDefault(require("../Field/ContrastEnhancementField/ContrastEnhancementField"));
var GammaField_1 = __importDefault(require("../Field/GammaField/GammaField"));
var DataUtil_1 = __importDefault(require("../../../Util/DataUtil"));
var ColorMapEditor_1 = __importDefault(require("../ColorMapEditor/ColorMapEditor"));
var CompositionContext_1 = require("../../../context/CompositionContext/CompositionContext");
var CompositionUtil_1 = __importDefault(require("../../../Util/CompositionUtil"));
var withDefaultsContext_1 = __importDefault(require("../../../hoc/withDefaultsContext"));
require("./RasterEditor.css");
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var get_1 = __importDefault(require("lodash/get"));
var UnsupportedPropertiesContext_1 = require("../../../context/UnsupportedPropertiesContext/UnsupportedPropertiesContext");
var UnsupportedPropertiesUtil_1 = __importDefault(require("../../../Util/UnsupportedPropertiesUtil"));
var COMPONENTNAME = 'RasterEditor';
var RasterEditor = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.RasterEditor : _b, contrastEnhancementTypes = _a.contrastEnhancementTypes, symbolizer = _a.symbolizer, onSymbolizerChange = _a.onSymbolizerChange, internalDataDef = _a.internalDataDef, colorRamps = _a.colorRamps, defaultValues = _a.defaultValues;
    var _c = (0, react_1.useContext)(UnsupportedPropertiesContext_1.UnsupportedPropertiesContext), unsupportedProperties = _c.unsupportedProperties, options = _c.options;
    var _d = (0, react_1.useState)('symbolizer'), showDisplay = _d[0], setShowDisplay = _d[1];
    var onOpacityChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.opacity = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onChannelEditorChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.channelSelection = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onContrastEnhancementChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        if (symbolizerClone.contrastEnhancement) {
            symbolizerClone.contrastEnhancement.enhancementType = value;
        }
        else {
            symbolizerClone.contrastEnhancement = {
                enhancementType: value
            };
        }
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onGammaValueChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        if (symbolizerClone.contrastEnhancement) {
            symbolizerClone.contrastEnhancement.gammaValue = value;
        }
        else {
            symbolizerClone.contrastEnhancement = {
                gammaValue: value
            };
        }
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onColorMapChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.colorMap = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var opacity = symbolizer.opacity, contrastEnhancement = symbolizer.contrastEnhancement, colorMap = symbolizer.colorMap, channelSelection = symbolizer.channelSelection;
    var sourceChannelNames;
    if (internalDataDef && DataUtil_1.default.isRaster(internalDataDef)) {
        sourceChannelNames = Object.keys(internalDataDef.rasterBandInfo);
    }
    var toggleViewButtonLayout = {
        wrapperCol: { span: 24 }
    };
    var getSupportProps = function (propName) {
        return UnsupportedPropertiesUtil_1.default.getSupportProps(__assign({ propName: propName, symbolizerName: 'RasterSymbolizer', unsupportedProperties: unsupportedProperties }, options));
    };
    return (react_1.default.createElement(CompositionContext_1.CompositionContext.Consumer, null, function (composition) {
        var _a, _b;
        return (react_1.default.createElement("div", { className: "gs-raster-symbolizer-editor" },
            showDisplay !== 'symbolizer' ? null : ([
                react_1.default.createElement(antd_1.Form.Item, __assign({ key: 'opacity', label: locale.opacityLabel }, getSupportProps('opacity')), CompositionUtil_1.default.handleComposition({
                    composition: composition,
                    path: 'RasterEditor.opacityField',
                    onChange: onOpacityChange,
                    propName: 'opacity',
                    propValue: opacity,
                    defaultValue: (_a = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.RasterEditor) === null || _a === void 0 ? void 0 : _a.defaultOpacity,
                    defaultElement: react_1.default.createElement(OpacityField_1.default, null)
                })),
                react_1.default.createElement(antd_1.Form.Item, __assign({ key: 'contrastEnhancement', label: locale.contrastEnhancementLabel }, getSupportProps('contrastEnhancement')), CompositionUtil_1.default.handleComposition({
                    composition: composition,
                    path: 'RasterEditor.contrastEnhancementField',
                    onChange: onContrastEnhancementChange,
                    propName: 'contrastEnhancement',
                    propValue: (0, get_1.default)(contrastEnhancement, 'enhancementType'),
                    defaultElement: react_1.default.createElement(ContrastEnhancementField_1.default, null)
                })),
                react_1.default.createElement(antd_1.Form.Item, __assign({ key: 'gamma', label: locale.gammaValueLabel }, getSupportProps('contrastEnhancement')), CompositionUtil_1.default.handleComposition({
                    composition: composition,
                    path: 'RasterEditor.gammaValueField',
                    onChange: onGammaValueChange,
                    propName: 'gamma',
                    propValue: (0, get_1.default)(contrastEnhancement, 'gammaValue'),
                    defaultValue: (_b = defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.RasterEditor) === null || _b === void 0 ? void 0 : _b.defaultGammaValue,
                    defaultElement: react_1.default.createElement(GammaField_1.default, null)
                })),
                react_1.default.createElement(antd_1.Form.Item, __assign({ className: "gs-raster-editor-view-toggle", key: "toggleColorMap" }, toggleViewButtonLayout),
                    react_1.default.createElement("a", { onClick: function () { return setShowDisplay('colorMap'); } }, "".concat(locale.colorMapLabel, " >>"))),
                react_1.default.createElement(antd_1.Form.Item, __assign({ className: "gs-raster-editor-view-toggle", key: "toggleContrastEnhancement" }, toggleViewButtonLayout),
                    react_1.default.createElement("a", { onClick: function () { return setShowDisplay('contrastEnhancement'); } }, "".concat(locale.channelSelectionLabel, " >>")))
            ]),
            showDisplay !== 'contrastEnhancement' ? null : ([
                CompositionUtil_1.default.handleComposition({
                    composition: composition,
                    path: 'RasterEditor.rasterChannelField',
                    onChange: onChannelEditorChange,
                    propName: 'channelSelection',
                    propValue: channelSelection,
                    defaultElement: (react_1.default.createElement(RasterChannelEditor_1.default, { sourceChannelNames: sourceChannelNames, contrastEnhancementTypes: contrastEnhancementTypes }))
                }),
                react_1.default.createElement(antd_1.Form.Item, __assign({ key: "toggleSymbolizer" }, toggleViewButtonLayout),
                    react_1.default.createElement("a", { onClick: function () { return setShowDisplay('symbolizer'); } }, "<< ".concat(locale.symbolizerLabel)))
            ]),
            showDisplay !== 'colorMap' ? null : ([
                CompositionUtil_1.default.handleComposition({
                    composition: composition,
                    path: 'RasterEditor.colorMapField',
                    onChange: onColorMapChange,
                    propName: 'colorMap',
                    propValue: colorMap,
                    defaultElement: (react_1.default.createElement(ColorMapEditor_1.default, { colorRamps: colorRamps }))
                }),
                react_1.default.createElement(antd_1.Form.Item, __assign({ key: "toggleSymbolizer" }, toggleViewButtonLayout),
                    react_1.default.createElement("a", { onClick: function () { return setShowDisplay('symbolizer'); } }, "<< ".concat(locale.symbolizerLabel)))
            ])));
    }));
};
exports.RasterEditor = RasterEditor;
exports.default = (0, withDefaultsContext_1.default)((0, LocaleWrapper_1.localize)(exports.RasterEditor, COMPONENTNAME));
//# sourceMappingURL=RasterEditor.js.map