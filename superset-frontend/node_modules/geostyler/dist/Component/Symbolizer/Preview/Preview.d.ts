import * as React from 'react';
import OlGeomPoint from 'ol/geom/Point';
import OlGeomLineString from 'ol/geom/LineString';
import OlGeomPolygon from 'ol/geom/Polygon';
import { Symbolizer } from 'geostyler-style';
import './Preview.css';
import 'ol/ol.css';
import { VectorData } from 'geostyler-data';
import { IconEditorProps } from '../IconEditor/IconEditor';
import { GeoStylerLocale } from '../../../locale/locale';
export interface PreviewDefaultProps {
    hideEditButton: boolean;
    projection: string;
    dataProjection: string;
    showOsmBackground: boolean;
    mapHeight: number;
    locale: GeoStylerLocale['Preview'];
}
export interface PreviewProps extends Partial<PreviewDefaultProps> {
    internalDataDef?: VectorData;
    symbolizers: Symbolizer[];
    iconEditorProps?: Partial<IconEditorProps>;
    onSymbolizersChange?: (symbolizers: Symbolizer[]) => void;
    onAddSymbolizer?: () => void;
    onRemoveSymbolizer?: (symbolizer: Symbolizer, key: number) => void;
    onMapDidMount?: (map: any) => void;
    map?: any;
    layers?: any[];
    controls?: any[];
    interactions?: any[];
    colorRamps?: {
        [name: string]: string[];
    };
}
interface PreviewState {
    symbolizers: Symbolizer[];
    editorVisible: boolean;
    mapTargetId: string;
    editorId: string;
}
/**
 * Symbolizer preview UI.
 * @deprecated This component is deprecated and will be removed with v10.
 */
export declare class Preview extends React.Component<PreviewProps, PreviewState> {
    static componentName: string;
    static defaultProps: PreviewDefaultProps;
    /** reference to the underlying OpenLayers map */
    map: any;
    /** reference to the vector layer for the passed features  */
    dataLayer: any;
    /** reference to the editButton */
    _editButton: any;
    constructor(props: PreviewProps);
    static getDerivedStateFromProps(nextProps: PreviewProps): Partial<PreviewState>;
    shouldComponentUpdate(nextProps: PreviewProps, nextState: PreviewState): boolean;
    componentDidUpdate(prevProps: PreviewProps, prevState: PreviewState): void;
    updateFeatures(): void;
    componentDidMount(): void;
    getSampleGeomFromSymbolizer: () => OlGeomPoint | OlGeomPolygon | OlGeomLineString;
    /**
     *
     */
    onEditButtonClicked: () => void;
    /**
     * Transforms the incoming symbolizers to an OpenLayers style object the
     * GeoStyler parser and applies it to the vector features on the map.
     *
     * @param {Symbolizer[]} symbolizers The symbolizers holding the style to apply
     */
    applySymbolizersToMapFeatures: (symbolizers: Symbolizer[]) => Promise<import("ol/style/Style").default | import("ol/style/Style").default[] | import("geostyler-openlayers-parser").OlParserStyleFct>;
    render(): JSX.Element;
}
declare const _default: {
    new (props: (PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<PreviewProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
