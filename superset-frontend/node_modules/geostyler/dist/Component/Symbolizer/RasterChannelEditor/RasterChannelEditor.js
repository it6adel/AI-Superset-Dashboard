"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RasterChannelEditor = void 0;
var react_1 = __importStar(require("react"));
var antd_1 = require("antd");
var Option = antd_1.Select.Option;
var TabPane = antd_1.Tabs.TabPane;
var LocaleWrapper_1 = require("../../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../../locale/en_US"));
var geostyler_style_1 = require("geostyler-style");
var ChannelField_1 = __importDefault(require("../Field/ChannelField/ChannelField"));
var get_1 = __importDefault(require("lodash/get"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var COMPONENTNAME = 'RasterChannelEditor';
/**
 * RasterChannelEditor to map bands to rgb or grayscale
 */
var RasterChannelEditor = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.RasterChannelEditor : _b, sourceChannelNames = _a.sourceChannelNames, onChange = _a.onChange, channelSelection = _a.channelSelection, contrastEnhancementTypes = _a.contrastEnhancementTypes;
    var defaultRgbOrGray = !channelSelection ? 'rgb' : (0, geostyler_style_1.isGrayChannel)(channelSelection) ? 'gray' : 'rgb';
    var _c = (0, react_1.useState)(defaultRgbOrGray), rgbOrGray = _c[0], setRgbOrGray = _c[1];
    var defaultSelectedTab = !channelSelection ? 'red' : (0, geostyler_style_1.isGrayChannel)(channelSelection) ? 'gray' : 'red';
    var _d = (0, react_1.useState)(defaultSelectedTab), selectedTab = _d[0], setSelectedTab = _d[1];
    var onSelectionChange = function (selection) {
        setRgbOrGray(selection);
    };
    var getTabLabel = function (band) {
        var label = (0, get_1.default)(locale, "".concat(band, "BandLabel")) ? (0, get_1.default)(locale, "".concat(band, "BandLabel")) : band;
        return label;
    };
    /**
     * Updates ChannelField. Removes old props if channel type changes
     * from GrayChannel to RGBChannel or vice versa.
     */
    var onChannelFieldChange = function (name, channel) {
        var newChannelSelection;
        if (!channelSelection
            || ((0, geostyler_style_1.isGrayChannel)(channelSelection) && name !== 'gray')
            || ((0, geostyler_style_1.isRgbChannel)(channelSelection) && name === 'gray')) {
            newChannelSelection = {};
            newChannelSelection["".concat(name, "Channel")] = channel;
        }
        else {
            newChannelSelection = (0, cloneDeep_1.default)(channelSelection);
            newChannelSelection["".concat(name, "Channel")] = channel;
        }
        if (onChange) {
            onChange(newChannelSelection);
        }
    };
    var onTabChange = function (key) {
        setSelectedTab(key);
    };
    var redChannel;
    if (channelSelection && (0, geostyler_style_1.isRgbChannel)(channelSelection) && channelSelection.redChannel) {
        redChannel = channelSelection.redChannel;
    }
    var greenChannel;
    if (channelSelection && (0, geostyler_style_1.isRgbChannel)(channelSelection) && channelSelection.greenChannel) {
        greenChannel = channelSelection.greenChannel;
    }
    var blueChannel;
    if (channelSelection && (0, geostyler_style_1.isRgbChannel)(channelSelection) && channelSelection.blueChannel) {
        blueChannel = channelSelection.blueChannel;
    }
    var grayChannel;
    if (channelSelection && (0, geostyler_style_1.isGrayChannel)(channelSelection) && channelSelection.grayChannel) {
        grayChannel = channelSelection.grayChannel;
    }
    return (react_1.default.createElement("div", null,
        react_1.default.createElement(antd_1.Form.Item, null,
            react_1.default.createElement("span", null, locale.titleLabel)),
        react_1.default.createElement(antd_1.Form.Item, { label: locale.channelSelectionLabel },
            react_1.default.createElement(antd_1.Select, { className: "editor-field rgb-or-gray-field", allowClear: true, value: rgbOrGray, onChange: onSelectionChange },
                react_1.default.createElement(Option, { key: "rgb", value: "rgb" }, locale.channelSelectionRgbLabel),
                react_1.default.createElement(Option, { key: "gray", value: "gray" }, locale.channelSelectionGrayLabel))),
        !rgbOrGray ? null :
            (react_1.default.createElement(antd_1.Tabs, { onChange: onTabChange, type: "card", activeKey: selectedTab }, rgbOrGray === 'rgb' ? ([
                react_1.default.createElement(TabPane, { tab: getTabLabel('red'), key: "red" },
                    react_1.default.createElement(ChannelField_1.default, { channel: redChannel, contrastEnhancementTypes: contrastEnhancementTypes, onChange: function (channel) {
                            onChannelFieldChange('red', channel);
                        }, sourceChannelNames: sourceChannelNames })),
                react_1.default.createElement(TabPane, { tab: getTabLabel('green'), key: "green" },
                    react_1.default.createElement(ChannelField_1.default, { channel: greenChannel, contrastEnhancementTypes: contrastEnhancementTypes, onChange: function (channel) {
                            onChannelFieldChange('green', channel);
                        }, sourceChannelNames: sourceChannelNames })),
                react_1.default.createElement(TabPane, { tab: getTabLabel('blue'), key: "blue" },
                    react_1.default.createElement(ChannelField_1.default, { channel: blueChannel, contrastEnhancementTypes: contrastEnhancementTypes, onChange: function (channel) {
                            onChannelFieldChange('blue', channel);
                        }, sourceChannelNames: sourceChannelNames }))
            ]) : (react_1.default.createElement(TabPane, { tab: getTabLabel('gray'), key: "gray" },
                react_1.default.createElement(ChannelField_1.default, { channel: grayChannel, contrastEnhancementTypes: contrastEnhancementTypes, onChange: function (channel) {
                        onChannelFieldChange('gray', channel);
                    }, sourceChannelNames: sourceChannelNames })))))));
};
exports.RasterChannelEditor = RasterChannelEditor;
exports.default = (0, LocaleWrapper_1.localize)(exports.RasterChannelEditor, COMPONENTNAME);
//# sourceMappingURL=RasterChannelEditor.js.map