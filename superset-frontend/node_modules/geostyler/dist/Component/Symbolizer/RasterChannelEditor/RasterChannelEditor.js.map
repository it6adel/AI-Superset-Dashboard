{"version":3,"file":"RasterChannelEditor.js","sourceRoot":"","sources":["../../../../src/Component/Symbolizer/RasterChannelEditor/RasterChannelEditor.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { useState } from 'react';\n\nimport {\n  Form,\n  Select,\n  Tabs\n} from 'antd';\nconst Option = Select.Option;\nconst TabPane = Tabs.TabPane;\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../locale/en_US';\nimport {\n  ChannelSelection,\n  Channel,\n  ContrastEnhancement,\n  isGrayChannel,\n  isRgbChannel\n} from 'geostyler-style';\nimport ChannelField from '../Field/ChannelField/ChannelField';\n\nimport _get from 'lodash/get';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { GeoStylerLocale } from '../../../locale/locale';\n\n// default props\ninterface RasterChannelEditorDefaultProps {\n  locale: GeoStylerLocale['RasterChannelEditor'];\n}\n\n// non default props\nexport interface RasterChannelEditorProps extends Partial<RasterChannelEditorDefaultProps> {\n  sourceChannelNames?: string[];\n  onChange?: (channelSelection: ChannelSelection) => void;\n  channelSelection?: ChannelSelection;\n  contrastEnhancementTypes?: ContrastEnhancement['enhancementType'][];\n}\n\nconst COMPONENTNAME = 'RasterChannelEditor';\n\n/**\n * RasterChannelEditor to map bands to rgb or grayscale\n */\nexport const RasterChannelEditor: React.FC<RasterChannelEditorProps> = ({\n  locale = en_US.RasterChannelEditor,\n  sourceChannelNames,\n  onChange,\n  channelSelection,\n  contrastEnhancementTypes\n}) => {\n\n  const defaultRgbOrGray = !channelSelection ? 'rgb' : isGrayChannel(channelSelection) ? 'gray' : 'rgb';\n  const [rgbOrGray, setRgbOrGray] = useState(defaultRgbOrGray);\n  const defaultSelectedTab = !channelSelection ? 'red' : isGrayChannel(channelSelection) ? 'gray' : 'red';\n  const [selectedTab, setSelectedTab] = useState<'red' | 'green' | 'blue' | 'gray'>(defaultSelectedTab);\n\n  const onSelectionChange = (selection: 'rgb'|'gray') => {\n    setRgbOrGray(selection);\n  };\n\n  const getTabLabel = (band: 'red' | 'green' | 'blue' | 'gray'): string => {\n    let label = _get(locale, `${band}BandLabel`) ? _get(locale, `${band}BandLabel`) : band;\n    return label;\n  };\n\n  /**\n   * Updates ChannelField. Removes old props if channel type changes\n   * from GrayChannel to RGBChannel or vice versa.\n   */\n  const onChannelFieldChange = (name: string, channel: Channel) => {\n    let newChannelSelection: ChannelSelection;\n\n    if (!channelSelection\n      || (isGrayChannel(channelSelection) && name !== 'gray')\n      || (isRgbChannel(channelSelection) && name === 'gray')) {\n      newChannelSelection = {} as ChannelSelection;\n      newChannelSelection[`${name}Channel`] = channel;\n    } else {\n      newChannelSelection = _cloneDeep(channelSelection);\n      newChannelSelection[`${name}Channel`] = channel;\n    }\n\n    if (onChange) {\n      onChange(newChannelSelection);\n    }\n  };\n\n  const onTabChange = (key: string) => {\n    setSelectedTab(key as 'red' | 'green' | 'blue' | 'gray');\n  };\n\n  let redChannel: Channel;\n  if (channelSelection && isRgbChannel(channelSelection) && channelSelection.redChannel) {\n    redChannel = channelSelection.redChannel;\n  }\n  let greenChannel: Channel;\n  if (channelSelection && isRgbChannel(channelSelection) && channelSelection.greenChannel) {\n    greenChannel = channelSelection.greenChannel;\n  }\n  let blueChannel: Channel;\n  if (channelSelection && isRgbChannel(channelSelection) && channelSelection.blueChannel) {\n    blueChannel = channelSelection.blueChannel;\n  }\n  let grayChannel: Channel;\n  if (channelSelection && isGrayChannel(channelSelection) && channelSelection.grayChannel) {\n    grayChannel = channelSelection.grayChannel;\n  }\n\n  return (\n    <div>\n      <Form.Item\n      >\n        <span>{locale.titleLabel}</span>\n      </Form.Item>\n      <Form.Item\n        label={locale.channelSelectionLabel}\n      >\n        <Select\n          className=\"editor-field rgb-or-gray-field\"\n          allowClear={true}\n          value={rgbOrGray as 'rgb' | 'gray'}\n          onChange={onSelectionChange}\n        >\n          <Option\n            key=\"rgb\"\n            value=\"rgb\"\n          >{locale.channelSelectionRgbLabel}</Option>\n          <Option\n            key=\"gray\"\n            value=\"gray\"\n          >{locale.channelSelectionGrayLabel}</Option>\n        </Select>\n      </Form.Item>\n      { !rgbOrGray ? null :\n        (\n          <Tabs onChange={onTabChange} type=\"card\" activeKey={selectedTab}>\n            {\n              rgbOrGray === 'rgb' ? ([\n                <TabPane tab={getTabLabel('red')} key=\"red\">\n                  <ChannelField\n                    channel={redChannel}\n                    contrastEnhancementTypes={contrastEnhancementTypes}\n                    onChange={(channel: Channel) => {\n                      onChannelFieldChange('red', channel);\n                    }}\n                    sourceChannelNames={sourceChannelNames}\n                  />\n                </TabPane>,\n                <TabPane tab={getTabLabel('green')} key=\"green\">\n                  <ChannelField\n                    channel={greenChannel}\n                    contrastEnhancementTypes={contrastEnhancementTypes}\n                    onChange={(channel: Channel) => {\n                      onChannelFieldChange('green', channel);\n                    }}\n                    sourceChannelNames={sourceChannelNames}\n                  />\n                </TabPane>,\n                <TabPane tab={getTabLabel('blue')} key=\"blue\">\n                  <ChannelField\n                    channel={blueChannel}\n                    contrastEnhancementTypes={contrastEnhancementTypes}\n                    onChange={(channel: Channel) => {\n                      onChannelFieldChange('blue', channel);\n                    }}\n                    sourceChannelNames={sourceChannelNames}\n                  />\n                </TabPane>]\n              ) : (\n                <TabPane tab={getTabLabel('gray')} key=\"gray\">\n                  <ChannelField\n                    channel={grayChannel}\n                    contrastEnhancementTypes={contrastEnhancementTypes}\n                    onChange={(channel: Channel) => {\n                      onChannelFieldChange('gray', channel);\n                    }}\n                    sourceChannelNames={sourceChannelNames}\n                  />\n                </TabPane>\n              )\n            }\n          </Tabs>\n        )\n      }\n    </div>\n  );\n};\n\nexport default localize(RasterChannelEditor, COMPONENTNAME);\n"]}