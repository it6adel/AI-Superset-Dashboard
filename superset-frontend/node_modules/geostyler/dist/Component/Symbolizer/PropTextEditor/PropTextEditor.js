"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropTextEditor = void 0;
var React = __importStar(require("react"));
var ColorField_1 = __importDefault(require("../Field/ColorField/ColorField"));
var OpacityField_1 = __importDefault(require("../Field/OpacityField/OpacityField"));
var WidthField_1 = __importDefault(require("../Field/WidthField/WidthField"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var FontPicker_1 = __importDefault(require("../Field/FontPicker/FontPicker"));
var OffsetField_1 = __importDefault(require("../Field/OffsetField/OffsetField"));
var AttributeCombo_1 = __importDefault(require("../../Filter/AttributeCombo/AttributeCombo"));
require("./PropTextEditor.css");
var LocaleWrapper_1 = require("../../LocaleWrapper/LocaleWrapper");
var RotateField_1 = __importDefault(require("../Field/RotateField/RotateField"));
var en_US_1 = __importDefault(require("../../../locale/en_US"));
var antd_1 = require("antd");
var COMPONENTNAME = 'PropTextEditor';
/**
 * The PropTextEditor class. Allows to edit text styles solely based on a
 * feature property. The entered word will be understood as the property name
 * of a feature. No static text is allowed.
 */
var PropTextEditor = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.PropTextEditor : _b, symbolizer = _a.symbolizer, internalDataDef = _a.internalDataDef, onSymbolizerChange = _a.onSymbolizerChange;
    var formatLabel = function (label) {
        var regExp = /\{\{(.*)\}\}/g;
        return label.replace(regExp, '$1');
    };
    var onLabelChange = function (newAttrName) {
        // add the removed curly braces to newAttrName
        // so it will be recognized as a placeholder for a featureProp
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.label = "{{".concat(newAttrName, "}}");
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onColorChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.color = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onFontChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.font = value.length > 0 ? value : undefined;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onOpacityChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.opacity = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onSizeChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.size = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onOffsetXChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        var newOffset = [
            value,
            (symbolizerClone.offset ? symbolizerClone.offset[1] : 0)
        ];
        symbolizerClone.offset = newOffset;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onOffsetYChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        var newOffset = [
            (symbolizerClone.offset ? symbolizerClone.offset[0] : 0),
            value
        ];
        symbolizerClone.offset = newOffset;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onRotateChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.rotate = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onHaloColorChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.haloColor = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var onHaloWidthChange = function (value) {
        var symbolizerClone = (0, cloneDeep_1.default)(symbolizer);
        symbolizerClone.haloWidth = value;
        if (onSymbolizerChange) {
            onSymbolizerChange(symbolizerClone);
        }
    };
    var clondeSymbolizer = (0, cloneDeep_1.default)(symbolizer);
    var opacity = clondeSymbolizer.opacity, color = clondeSymbolizer.color, font = clondeSymbolizer.font, offset = clondeSymbolizer.offset, size = clondeSymbolizer.size, rotate = clondeSymbolizer.rotate, haloColor = clondeSymbolizer.haloColor, haloWidth = clondeSymbolizer.haloWidth;
    // split the current offset
    var offsetX;
    var offsetY;
    if (offset) {
        offsetX = offset[0];
        offsetY = offset[1];
    }
    return (React.createElement("div", { className: "gs-text-symbolizer-prop-editor" },
        React.createElement(antd_1.Form.Item, { label: locale.propFieldLabel },
            React.createElement(AttributeCombo_1.default, { value: symbolizer.label ? formatLabel(symbolizer.label) : undefined, internalDataDef: internalDataDef, onAttributeChange: onLabelChange })),
        React.createElement(antd_1.Form.Item, { label: locale.colorLabel },
            React.createElement(ColorField_1.default, { color: color, onChange: onColorChange })),
        React.createElement(antd_1.Form.Item, { label: locale.fontLabel },
            React.createElement(FontPicker_1.default, { font: font, onChange: onFontChange })),
        React.createElement(antd_1.Form.Item, { label: locale.opacityLabel },
            React.createElement(OpacityField_1.default, { opacity: opacity, onChange: onOpacityChange })),
        React.createElement(antd_1.Form.Item, { label: locale.sizeLabel },
            React.createElement(WidthField_1.default, { width: size, onChange: onSizeChange })),
        React.createElement(antd_1.Form.Item, { label: locale.offsetXLabel },
            React.createElement(OffsetField_1.default, { offset: offsetX, onChange: onOffsetXChange })),
        React.createElement(antd_1.Form.Item, { label: locale.offsetYLabel },
            React.createElement(OffsetField_1.default, { offset: offsetY, onChange: onOffsetYChange })),
        React.createElement(antd_1.Form.Item, { label: locale.rotateLabel },
            React.createElement(RotateField_1.default, { rotate: rotate, onChange: onRotateChange })),
        React.createElement(antd_1.Form.Item, { label: locale.haloColorLabel },
            React.createElement(ColorField_1.default, { color: haloColor, onChange: onHaloColorChange })),
        React.createElement(antd_1.Form.Item, { label: locale.haloWidthLabel },
            React.createElement(WidthField_1.default, { width: haloWidth, onChange: onHaloWidthChange }))));
};
exports.PropTextEditor = PropTextEditor;
exports.default = (0, LocaleWrapper_1.localize)(exports.PropTextEditor, COMPONENTNAME);
//# sourceMappingURL=PropTextEditor.js.map