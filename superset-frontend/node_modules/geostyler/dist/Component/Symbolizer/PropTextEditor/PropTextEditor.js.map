{"version":3,"file":"PropTextEditor.js","sourceRoot":"","sources":["../../../../src/Component/Symbolizer/PropTextEditor/PropTextEditor.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport {\n  Symbolizer,\n  TextSymbolizer\n} from 'geostyler-style';\n\nimport ColorField from '../Field/ColorField/ColorField';\nimport OpacityField from '../Field/OpacityField/OpacityField';\nimport WidthField from '../Field/WidthField/WidthField';\n\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport FontPicker from '../Field/FontPicker/FontPicker';\nimport OffsetField from '../Field/OffsetField/OffsetField';\nimport AttributeCombo from '../../Filter/AttributeCombo/AttributeCombo';\nimport { Data } from 'geostyler-data';\n\nimport './PropTextEditor.less';\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport RotateField from '../Field/RotateField/RotateField';\nimport en_US from '../../../locale/en_US';\nimport { GeoStylerLocale } from '../../../locale/locale';\nimport { Form } from 'antd';\n\ninterface PropTextEditorDefaultProps {\n  locale: GeoStylerLocale['PropTextEditor'];\n}\n\n// non default props\nexport interface PropTextEditorProps extends Partial<PropTextEditorDefaultProps> {\n  symbolizer: TextSymbolizer;\n  internalDataDef?: Data;\n  onSymbolizerChange?: (changedSymb: Symbolizer) => void;\n}\n\nconst COMPONENTNAME = 'PropTextEditor';\n\n/**\n * The PropTextEditor class. Allows to edit text styles solely based on a\n * feature property. The entered word will be understood as the property name\n * of a feature. No static text is allowed.\n */\nexport const PropTextEditor: React.FC<PropTextEditorProps> = ({\n  locale = en_US.PropTextEditor,\n  symbolizer,\n  internalDataDef,\n  onSymbolizerChange\n}) => {\n\n  const formatLabel = (label: string): string => {\n    const regExp: RegExp = /\\{\\{(.*)\\}\\}/g;\n    return label.replace(regExp, '$1');\n  };\n\n  const onLabelChange = (newAttrName: string) => {\n    // add the removed curly braces to newAttrName\n    // so it will be recognized as a placeholder for a featureProp\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.label = `{{${newAttrName}}}`;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onColorChange = (value: string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.color = value;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onFontChange = (value: string[]) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.font = value.length > 0 ? value : undefined;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onOpacityChange = (value: number|string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.opacity = value as number;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onSizeChange = (value: number|string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.size = value as number;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onOffsetXChange = (value: number|string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    let newOffset: [number, number] = [\n      value as number,\n      (symbolizerClone.offset ? symbolizerClone.offset[1] : 0) as number\n    ];\n    symbolizerClone.offset = newOffset;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onOffsetYChange = (value: number|string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    let newOffset: [number, number] = [\n      (symbolizerClone.offset ? symbolizerClone.offset[0] : 0) as number,\n      value as number\n    ];\n    symbolizerClone.offset = newOffset;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onRotateChange = (value: number|string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.rotate = value as number;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onHaloColorChange = (value: string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.haloColor = value;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n\n  const onHaloWidthChange = (value: number|string) => {\n    const symbolizerClone = _cloneDeep(symbolizer);\n    symbolizerClone.haloWidth = value as number;\n    if (onSymbolizerChange) {\n      onSymbolizerChange(symbolizerClone);\n    }\n  };\n  const clondeSymbolizer = _cloneDeep(symbolizer);\n\n  const {\n    opacity,\n    color,\n    font,\n    offset,\n    size,\n    rotate,\n    haloColor,\n    haloWidth\n  } = clondeSymbolizer;\n\n  // split the current offset\n  let offsetX;\n  let offsetY;\n  if (offset) {\n    offsetX = offset[0];\n    offsetY = offset[1];\n  }\n\n  return (\n    <div className=\"gs-text-symbolizer-prop-editor\" >\n      <Form.Item\n        label={locale.propFieldLabel}\n      >\n        <AttributeCombo\n          value={symbolizer.label ? formatLabel(symbolizer.label as string) : undefined}\n          internalDataDef={internalDataDef}\n          onAttributeChange={onLabelChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.colorLabel}\n      >\n        <ColorField\n          color={color as string}\n          onChange={onColorChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.fontLabel}\n      >\n        <FontPicker\n          font={font as string[]}\n          onChange={onFontChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.opacityLabel}\n      >\n        <OpacityField\n          opacity={opacity as number}\n          onChange={onOpacityChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.sizeLabel}\n      >\n        <WidthField\n          width={size as number}\n          onChange={onSizeChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.offsetXLabel}\n      >\n        <OffsetField\n          offset={offsetX as number}\n          onChange={onOffsetXChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.offsetYLabel}\n      >\n        <OffsetField\n          offset={offsetY as number}\n          onChange={onOffsetYChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.rotateLabel}\n      >\n        <RotateField\n          rotate={rotate as number}\n          onChange={onRotateChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.haloColorLabel}\n      >\n        <ColorField\n          color={haloColor as string}\n          onChange={onHaloColorChange}\n        />\n      </Form.Item>\n      <Form.Item\n        label={locale.haloWidthLabel}\n      >\n        <WidthField\n          width={haloWidth as number}\n          onChange={onHaloWidthChange}\n        />\n      </Form.Item>\n    </div>\n  );\n};\n\nexport default localize(PropTextEditor, COMPONENTNAME);\n"]}