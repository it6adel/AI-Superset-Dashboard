{"version":3,"file":"SLDRenderer.js","sourceRoot":"","sources":["../../../../src/Component/Renderer/SLDRenderer/SLDRenderer.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nimport React, { useCallback, useEffect, useRef, useState }  from 'react';\nimport SldStyleParser from 'geostyler-sld-parser';\nimport _isEqual from 'lodash/isEqual';\n\nimport './SLDRenderer.less';\nimport { Style, Symbolizer } from 'geostyler-style';\nimport HTTPUtil from '../../../Util/HTTPUtil';\nimport loading from './LoadingIcon';\n\ninterface SLDRendererDefaultProps {\n  requestDelay: number;\n  width: number;\n  height: number;\n}\n\nexport interface SLDRendererAdditonalProps extends Partial<SLDRendererDefaultProps> {\n  wmsBaseUrl: string;\n  layer: string;\n  rasterLayer?: string;\n  additionalHeaders?: any;\n  wmsParams?: any;\n}\n\n// non default props\nexport interface SLDRendererProps extends Partial<SLDRendererAdditonalProps> {\n  onClick?: (symbolizers: Symbolizer[], event: any) => void;\n  symbolizers: Symbolizer[];\n}\n\nconst styleParser = new SldStyleParser();\n\n/**\n * Symbolizer Renderer UI.\n */\nexport const SLDRenderer: React.FC<SLDRendererProps> = ({\n  requestDelay = 500,\n  width = 150,\n  height = 100,\n  wmsBaseUrl,\n  layer,\n  rasterLayer,\n  additionalHeaders,\n  wmsParams,\n  onClick,\n  symbolizers\n}) => {\n\n  const [alt, setAlt] = useState<string>();\n  const [legendDataUrl, setLegendDataUrl] = useState<string>();\n  const requestTimeout = useRef<any>();\n\n  /**\n   * The function that sets the legends graphic for the symbolizers\n   *\n   * @param {Symbolizer[]} newSymbolizers The passed symbolizer\n   */\n  const setLegendGraphicUrlForRule = useCallback((newSymbolizers: Symbolizer[]) => {\n\n    setLegendDataUrl(loading);\n\n    if (requestTimeout) {\n      clearTimeout(requestTimeout.current);\n    }\n\n    requestTimeout.current = setTimeout(async() => {\n      const style: Style = {\n        name: 'sld-renderer-style',\n        rules: [{\n          name: '',\n          symbolizers: newSymbolizers\n        }]\n      };\n      let lyr: string;\n      // As soon as a symbolizer is of type raster symbolizer,\n      // we will only create a legendGraphic for raster layers\n      // as wms cannot return a mixed legendGraphic\n      // TODO\n      if (newSymbolizers.some((symbolizer: Symbolizer) => symbolizer.kind === 'Raster')) {\n        lyr = rasterLayer || layer;\n      } else {\n        lyr = layer;\n      }\n      const {\n        output: sld,\n        errors = []\n      } = await styleParser.writeStyle(style);\n      const params = {\n        'SERVICE': 'WMS',\n        'VERSION': '1.3.0',\n        'REQUEST': 'GetLegendGraphic',\n        'FORMAT': 'image/png',\n        'TRANSPARENT': 'true',\n        'LAYER': lyr,\n        'SLD_BODY': sld,\n        'WIDTH': width,\n        'HEIGHT': height,\n        ...wmsParams\n      };\n      try {\n        const response = await HTTPUtil.post({\n          url: wmsBaseUrl,\n          params: params,\n          additionalHeaders: additionalHeaders\n        });\n        if (response && response.ok) {\n          response.blob().then((blob: Blob) => {\n            setLegendDataUrl(window.URL.createObjectURL(blob));\n          });\n        }\n      } catch (error: any) {\n        errors.push(error);\n      }\n      if (errors.length > 0) {\n        setAlt(errors[0]?.message);\n      }\n    }, requestDelay);\n  }, [\n    additionalHeaders,\n    height,\n    layer,\n    rasterLayer,\n    requestDelay,\n    width,\n    wmsBaseUrl,\n    wmsParams\n  ]);\n\n  useEffect(() => {\n    setLegendGraphicUrlForRule(symbolizers);\n  }, [symbolizers, setLegendGraphicUrlForRule]);\n\n  return (\n    <div\n      onClick={(event) => {\n        if (onClick) {\n          onClick(symbolizers, event);\n        }\n      }}\n      className=\"gs-symbolizer-sldrenderer\"\n    >\n      <img\n        width={width}\n        height={height}\n        src={legendDataUrl}\n        alt={alt}\n      />\n    </div>\n  );\n\n};\n\nexport default SLDRenderer;\n"]}