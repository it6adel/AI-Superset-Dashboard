"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeEditor = exports.COMPONENTNAME = void 0;
var react_1 = __importStar(require("react"));
var react_2 = __importStar(require("@monaco-editor/react"));
require("blob");
var file_saver_1 = require("file-saver");
require("./CodeEditor.css");
var antd_1 = require("antd");
var Option = antd_1.Select.Option;
var schema_json_1 = __importDefault(require("geostyler-style/schema.json"));
var isEqual_1 = __importDefault(require("lodash/isEqual"));
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../locale/en_US"));
var SLDUnitsSelect_1 = require("../Symbolizer/SLDUnitsSelect/SLDUnitsSelect");
var UsePrevious_1 = require("../../hook/UsePrevious");
var ParserFeedback_1 = __importDefault(require("../ParserFeedback/ParserFeedback"));
var icons_1 = require("@ant-design/icons");
var MODELPATH = 'geostyler.json'; // associate with our model
var SCHEMAURI = schema_json_1.default.$id;
exports.COMPONENTNAME = 'CodeEditor';
var CodeEditor = function (_a) {
    var defaultParser = _a.defaultParser, _b = _a.delay, delay = _b === void 0 ? 500 : _b, _c = _a.locale, locale = _c === void 0 ? en_US_1.default.CodeEditor : _c, _d = _a.onStyleChange, onStyleChange = _d === void 0 ? function () { return undefined; } : _d, _e = _a.parsers, parsers = _e === void 0 ? [] : _e, _f = _a.showCopyButton, showCopyButton = _f === void 0 ? false : _f, _g = _a.showSaveButton, showSaveButton = _g === void 0 ? false : _g, style = _a.style;
    var editTimeout = (0, react_1.useRef)();
    var _h = (0, react_1.useState)(defaultParser), activeParser = _h[0], setActiveParser = _h[1];
    var _j = (0, react_1.useState)(false), isSldParser = _j[0], setIsSldParser = _j[1];
    var _k = (0, react_1.useState)(''), value = _k[0], setValue = _k[1];
    var _l = (0, react_1.useState)(), writeStyleResult = _l[0], setWriteStyleResult = _l[1];
    var _m = (0, react_1.useState)(), readStyleResult = _m[0], setReadStyleResult = _m[1];
    var _o = (0, react_1.useState)(false), showFeedback = _o[0], setShowFeedback = _o[1];
    var _p = (0, react_1.useState)(false), hasError = _p[0], setHasError = _p[1];
    var previousStyle = (0, UsePrevious_1.usePrevious)(style);
    var previouseParser = (0, UsePrevious_1.usePrevious)(activeParser);
    var monaco = (0, react_2.useMonaco)();
    (0, react_1.useEffect)(function () {
        if (writeStyleResult === null || writeStyleResult === void 0 ? void 0 : writeStyleResult.output) {
            setValue(writeStyleResult.output);
        }
    }, [writeStyleResult]);
    (0, react_1.useEffect)(function () {
        if (monaco) {
            monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
                validate: true,
                schemas: [{
                        uri: SCHEMAURI,
                        fileMatch: [MODELPATH],
                        schema: schema_json_1.default
                    }]
            });
        }
    }, [monaco]);
    var updateValueFromStyle = (0, react_1.useCallback)(function (s) {
        setHasError(false);
        setWriteStyleResult(undefined);
        (new Promise(function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!activeParser) return [3 /*break*/, 2];
                        _a = setWriteStyleResult;
                        return [4 /*yield*/, activeParser.writeStyle(s)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]);
                        return [3 /*break*/, 3];
                    case 2:
                        setValue(JSON.stringify(s, null, 2));
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); })).catch(function (err) {
            setWriteStyleResult({
                errors: [err.message]
            });
        });
    }, [activeParser]);
    (0, react_1.useEffect)(function () {
        if (!(0, isEqual_1.default)(previousStyle, style) || !(0, isEqual_1.default)(previouseParser, activeParser)) {
            updateValueFromStyle(style);
        }
    }, [activeParser, style, updateValueFromStyle, previousStyle, previouseParser]);
    (0, react_1.useEffect)(function () {
        setIsSldParser(activeParser === null || activeParser === void 0 ? void 0 : activeParser.title.includes('SLD'));
    }, [activeParser]);
    if (hasError) {
        return (react_1.default.createElement("h1", null, "An error occurred in the CodeEditor UI."));
    }
    var onChange = function (v) { return __awaiter(void 0, void 0, void 0, function () {
        var parsedStyle, result, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    setValue(v);
                    setReadStyleResult(undefined);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 5, , 6]);
                    parsedStyle = void 0;
                    if (!activeParser) return [3 /*break*/, 3];
                    return [4 /*yield*/, activeParser.readStyle(v)];
                case 2:
                    result = _a.sent();
                    setReadStyleResult(result);
                    onStyleChange(result.output);
                    return [3 /*break*/, 4];
                case 3:
                    parsedStyle = JSON.parse(v);
                    onStyleChange(parsedStyle);
                    _a.label = 4;
                case 4: return [3 /*break*/, 6];
                case 5:
                    err_1 = _a.sent();
                    setReadStyleResult({
                        errors: [err_1 === null || err_1 === void 0 ? void 0 : err_1.message]
                    });
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    }); };
    var onParserSelect = function (selection) {
        var parser = parsers.find(function (p) { return p.title === selection; });
        setActiveParser(parser);
    };
    var onUnitSelect = function (selection) {
        if (activeParser) {
            var parser = activeParser;
            parser.symbolizerUnits = selection;
            updateValueFromStyle(style);
        }
    };
    var handleOnChange = function (v) {
        clearTimeout(editTimeout.current);
        editTimeout.current = window.setTimeout(function () {
            onChange(v);
        }, delay);
    };
    var parserOptions = [
        react_1.default.createElement(Option, { key: "GeoStyler Style", value: "GeoStyler Style" }, "Geostyler Style")
    ];
    var additionalOptions = parsers.map(function (parser) {
        var title = parser.title;
        return react_1.default.createElement(Option, { key: title, value: title }, title);
    });
    parserOptions = __spreadArray(__spreadArray([], parserOptions, true), additionalOptions, true);
    var onDownloadButtonClick = function () {
        if (style) {
            var fileName = style.name;
            var type = 'application/json;charset=utf-8';
            if (isSldParser) {
                type = 'text/xml;charset=utf-8';
                fileName += '.sld';
            }
            var blob = new Blob([value], { type: type });
            (0, file_saver_1.saveAs)(blob, fileName);
        }
    };
    /**
     * Copies the a value to the clipboard.
     * Credits: https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f
     *
     * @param {string} str The string to copy to the clipboard.
     */
    var copyToClipboard = function (str) {
        var el = document.createElement('textarea');
        el.value = str;
        el.setAttribute('readonly', '');
        el.style.position = 'absolute';
        el.style.left = '-9999px';
        document.body.appendChild(el);
        var selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
        antd_1.message.info(locale.styleCopied);
        if (selected) {
            document.getSelection().removeAllRanges();
            document.getSelection().addRange(selected);
        }
    };
    var onCopyButtonClick = function () {
        copyToClipboard(value);
    };
    var toggleFeedback = function () {
        setShowFeedback(!showFeedback);
    };
    var parserHasUnitSelect = isSldParser && activeParser && activeParser.sldVersion !== '1.0.0';
    var writeStyleHasFeedback = (writeStyleResult === null || writeStyleResult === void 0 ? void 0 : writeStyleResult.errors) ||
        (writeStyleResult === null || writeStyleResult === void 0 ? void 0 : writeStyleResult.warnings) ||
        (writeStyleResult === null || writeStyleResult === void 0 ? void 0 : writeStyleResult.unsupportedProperties);
    var readStyleHasFeedback = (readStyleResult === null || readStyleResult === void 0 ? void 0 : readStyleResult.errors) ||
        (readStyleResult === null || readStyleResult === void 0 ? void 0 : readStyleResult.warnings) ||
        (readStyleResult === null || readStyleResult === void 0 ? void 0 : readStyleResult.unsupportedProperties);
    var hasAlerts = (writeStyleResult === null || writeStyleResult === void 0 ? void 0 : writeStyleResult.errors) || (readStyleResult === null || readStyleResult === void 0 ? void 0 : readStyleResult.errors);
    var hasWarnings = readStyleHasFeedback || writeStyleHasFeedback && (!hasAlerts);
    var alertExtraClass = showFeedback ? 'feedback-visible' : 'feedback-hidden';
    return (react_1.default.createElement("div", { className: "gs-code-editor" },
        react_1.default.createElement("div", { className: "gs-code-editor-toolbar" },
            locale.formatSelectLabel,
            ": ",
            react_1.default.createElement(antd_1.Select, { className: "gs-code-editor-format-select", onSelect: onParserSelect, value: activeParser ? activeParser.title : 'GeoStyler Style' }, parserOptions),
            parserHasUnitSelect &&
                react_1.default.createElement(SLDUnitsSelect_1.SLDUnitsSelect, { changeHandler: onUnitSelect })),
        react_1.default.createElement(react_2.default, { className: "gs-code-editor-monaco", value: value, path: isSldParser ? undefined : MODELPATH, language: isSldParser ? 'xml' : 'json', onChange: handleOnChange }),
        react_1.default.createElement("div", { className: "gs-code-editor-feedback ".concat(alertExtraClass) },
            (writeStyleHasFeedback) &&
                react_1.default.createElement("div", { className: 'write-feedback' },
                    react_1.default.createElement("span", null, "".concat(locale.writeFeedback, " ").concat(activeParser === null || activeParser === void 0 ? void 0 : activeParser.title)),
                    react_1.default.createElement(ParserFeedback_1.default, { feedback: writeStyleResult })),
            (readStyleHasFeedback) &&
                react_1.default.createElement("div", { className: 'read-feedback' },
                    react_1.default.createElement("span", null, "".concat(locale.readFeedback, " ").concat(activeParser === null || activeParser === void 0 ? void 0 : activeParser.title)),
                    react_1.default.createElement(ParserFeedback_1.default, { feedback: readStyleResult }))),
        react_1.default.createElement("div", { className: "gs-code-editor-bottombar" },
            react_1.default.createElement("div", { className: 'left-items' },
                hasAlerts && react_1.default.createElement(icons_1.WarningTwoTone, { twoToneColor: "#ff4d4f", onClick: toggleFeedback }),
                hasWarnings && react_1.default.createElement(icons_1.ExclamationCircleTwoTone, { twoToneColor: "#faad14", onClick: toggleFeedback })),
            react_1.default.createElement("div", { className: 'center-items' },
                showCopyButton &&
                    react_1.default.createElement(antd_1.Button, { className: "gs-code-editor-copy-button", type: "primary", onClick: onCopyButtonClick }, locale.copyButtonLabel),
                showSaveButton &&
                    react_1.default.createElement(antd_1.Button, { className: "gs-code-editor-download-button", type: "primary", onClick: onDownloadButtonClick }, locale.downloadButtonLabel)),
            react_1.default.createElement("div", { className: 'right-items' }))));
};
exports.CodeEditor = CodeEditor;
exports.default = (0, LocaleWrapper_1.localize)(exports.CodeEditor, exports.COMPONENTNAME);
//# sourceMappingURL=CodeEditor.js.map