"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewMap = void 0;
var react_1 = __importStar(require("react"));
var Map_1 = __importDefault(require("ol/Map"));
var Vector_1 = __importDefault(require("ol/layer/Vector"));
var Vector_2 = __importDefault(require("ol/source/Vector"));
var GeoJSON_1 = __importDefault(require("ol/format/GeoJSON"));
var Feature_1 = __importDefault(require("ol/Feature"));
var Tile_1 = __importDefault(require("ol/layer/Tile"));
var OSM_1 = __importDefault(require("ol/source/OSM"));
var extent_1 = require("ol/extent");
var geostyler_openlayers_parser_1 = __importDefault(require("geostyler-openlayers-parser"));
var GeometryUtil_1 = __importDefault(require("../../Util/GeometryUtil"));
require("./PreviewMap.css");
/**
 * Style preview UI.
 */
var PreviewMap = function (_a) {
    var _b = _a.dataProjection, dataProjection = _b === void 0 ? 'EPSG:4326' : _b, _c = _a.mapHeight, mapHeight = _c === void 0 ? 267 : _c, data = _a.data, style = _a.style, mapProp = _a.map, onMapDidMount = _a.onMapDidMount;
    var containerRef = (0, react_1.useRef)();
    /** the vector layer for the passed features */
    var dataLayerRef = (0, react_1.useRef)(new Vector_1.default({
        source: new Vector_2.default()
    }));
    /** the underlying OpenLayers map */
    var mapRef = (0, react_1.useRef)(mapProp ||
        new Map_1.default({
            controls: [],
            layers: [
                new Tile_1.default({
                    source: new OSM_1.default()
                }),
                dataLayerRef.current
            ]
        }));
    /**
     * Fits the preview extend to the data when the dataLayer changes.
     */
    var zoomToData = function () {
        var map = mapRef.current;
        var dataLayer = dataLayerRef.current;
        var extent = dataLayer.getSource().getExtent();
        if (extent && !(0, extent_1.isEmpty)(extent)) {
            map.getView().fit(extent, { maxZoom: 10 });
        }
    };
    /**
     * Add the dataLayer to the map.
     */
    var addDataLayer = function () {
        var map = mapRef.current;
        var dataLayer = dataLayerRef.current;
        if (!map.getAllLayers().some(function (layer) { return layer === dataLayer; })) {
            map.addLayer(dataLayer);
        }
    };
    /**
     * Add the containing exampleFeatures if the passed data changes.
     */
    (0, react_1.useEffect)(function () {
        var map = mapRef.current;
        var dataLayer = dataLayerRef.current;
        if (dataLayer && (data === null || data === void 0 ? void 0 : data.exampleFeatures) && map) {
            dataLayer.getSource().clear();
            var format = new GeoJSON_1.default({
                dataProjection: dataProjection,
                featureProjection: map.getView().getProjection()
            });
            var olFeatures = format.readFeatures(data.exampleFeatures);
            dataLayer.getSource().addFeatures(olFeatures);
            zoomToData();
        }
    }, [data, dataProjection]);
    /**
     * Update the layerStyle if the passed style changes.
     */
    (0, react_1.useEffect)(function () {
        var dataLayer = dataLayerRef.current;
        var styleParser = new geostyler_openlayers_parser_1.default();
        styleParser.writeStyle(style)
            .then(function (_a) {
            var olStyles = _a.output;
            dataLayer.setStyle(olStyles);
        });
    }, [style]);
    /**
     * If no data is provided create sample geometries based on the passed style.
     */
    (0, react_1.useEffect)(function () {
        var map = mapRef.current;
        var dataLayer = dataLayerRef.current;
        if (!data && dataLayer && map && style) {
            var geoms = GeometryUtil_1.default.getSampleGeomFromStyle(style, map.getView().getProjection());
            geoms.forEach(function (geometry) {
                var feature = new Feature_1.default({ geometry: geometry });
                dataLayer.getSource().addFeature(feature);
            });
            zoomToData();
        }
    }, [style, data]);
    // Set the map if a mapProp is passed
    (0, react_1.useEffect)(function () {
        if (mapProp) {
            // use passed in OL map and bind it to this preview DIV
            mapRef.current = mapProp;
        }
    }, [mapProp]);
    /**
     * Set the target of the map if the ref is defined.
     */
    (0, react_1.useEffect)(function () {
        var map = mapRef.current;
        if (containerRef) {
            map.setTarget(containerRef.current);
            map.updateSize();
            addDataLayer();
            zoomToData();
        }
    }, []);
    /**
     * Call the `onMapDidMount` callback if defined.
     */
    (0, react_1.useEffect)(function () {
        if (containerRef) {
            if (onMapDidMount) {
                onMapDidMount(mapRef.current);
            }
        }
    }, [onMapDidMount]);
    return (react_1.default.createElement("div", { ref: containerRef, className: "gs-symbolizer-previewmap map", id: "map_".concat(Math.floor((1 + Math.random()) * 0x10000)), style: {
            height: mapHeight
        } }));
};
exports.PreviewMap = PreviewMap;
exports.default = exports.PreviewMap;
//# sourceMappingURL=PreviewMap.js.map