import React from 'react';
import { Rule as GsRule } from 'geostyler-style';
import { Data } from 'geostyler-data';
import './RuleTable.css';
import { OlRendererProps } from '../Renderer/OlRenderer/OlRenderer';
import { TableProps } from 'antd/lib/table';
import { SLDRendererAdditonalProps } from '../Renderer/SLDRenderer/SLDRenderer';
import { ComparisonFilterProps } from '../Filter/ComparisonFilter/ComparisonFilter';
import { IconLibrary } from '../Symbolizer/IconSelector/IconSelector';
import { GeoStylerLocale } from '../../locale/locale';
export interface RuleTableLocale {
    symbolizersColumnTitle: string;
    nameColumnTitle: string;
    filterColumnTitle: string;
    minScaleColumnTitle: string;
    maxScaleColumnTitle: string;
    amountColumnTitle: string;
    duplicatesColumnTitle: string;
    filterConfirm?: string;
    filterReset?: string;
    emptyText?: string;
}
export interface RuleRecord extends GsRule {
    key: number;
    amount?: number;
    duplicates?: number;
    maxScale?: number;
    minScale?: number;
}
interface RuleTableDefaultProps extends Partial<TableProps<RuleRecord>> {
    /** Locale object containing translated text snippets */
    locale: GeoStylerLocale['RuleTable'];
    /** The renderer to use */
    rendererType: 'SLD' | 'OpenLayers';
    /** Display the number of features that match a rule */
    showAmountColumn: boolean;
    /** Display the number of features that match more than one rule */
    showDuplicatesColumn: boolean;
}
export interface RuleTableProps extends Partial<RuleTableDefaultProps> {
    /** Reference to internal data object (holding schema and example features) */
    data?: Data;
    /** List of rules to display in rule table */
    rules: GsRule[];
    /** Properties of the SLD renderer */
    sldRendererProps?: SLDRendererAdditonalProps;
    /** Properties of the OpenLayers renderer */
    oLRendererProps?: Partial<OlRendererProps>;
    /** The footer of the rule table */
    footer?: (currentPageData?: any) => React.ReactNode;
    /** The callback function that is triggered when the rules change */
    onRulesChange?: (rules: GsRule[]) => void;
    /** The callback function that is triggered when the selection changes */
    onSelectionChange?: (selectedRowKeys: string[], selectedRows: any[]) => void;
    /** Properties that will be passed to the Comparison Filters */
    filterUiProps?: Partial<ComparisonFilterProps>;
    /** List of supported icons ordered as library */
    iconLibraries?: IconLibrary[];
    /** Object containing predefined color ramps */
    colorRamps?: {
        [name: string]: string[];
    };
}
export declare const RuleTable: React.FC<RuleTableProps>;
declare const _default: {
    new (props: (RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<RuleTableProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
