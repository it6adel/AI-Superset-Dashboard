"use strict";
/* eslint-disable camelcase */
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleTable = void 0;
var react_1 = __importStar(require("react"));
var geostyler_cql_parser_1 = require("geostyler-cql-parser");
var get_1 = __importDefault(require("lodash/get"));
var set_1 = __importDefault(require("lodash/set"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var antd_1 = require("antd");
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../locale/en_US"));
require("./RuleTable.css");
var FilterEditorWindow_1 = __importDefault(require("../Filter/FilterEditorWindow/FilterEditorWindow"));
var SymbolizerEditorWindow_1 = __importDefault(require("../Symbolizer/SymbolizerEditorWindow/SymbolizerEditorWindow"));
var FilterUtil_1 = __importDefault(require("../../Util/FilterUtil"));
var DataUtil_1 = __importDefault(require("../../Util/DataUtil"));
var RuleReorderButtons_1 = __importDefault(require("./RuleReorderButtons/RuleReorderButtons"));
var icons_1 = require("@ant-design/icons");
var Renderer_1 = __importDefault(require("../Renderer/Renderer/Renderer"));
var COMPONENTNAME = 'RuleTable';
// export class RuleTable extends React.Component<RuleTableProps, RuleTableState> {
var RuleTable = function (_a) {
    var _b;
    var _c = _a.locale, locale = _c === void 0 ? en_US_1.default.RuleTable : _c, _d = _a.rendererType, rendererType = _d === void 0 ? 'OpenLayers' : _d, _e = _a.showAmountColumn, showAmountColumn = _e === void 0 ? true : _e, _f = _a.showDuplicatesColumn, showDuplicatesColumn = _f === void 0 ? true : _f, dataProp = _a.data, rulesProp = _a.rules, onRulesChange = _a.onRulesChange, filterUiProps = _a.filterUiProps, iconLibraries = _a.iconLibraries, colorRamps = _a.colorRamps, sldRendererProps = _a.sldRendererProps, oLRendererProps = _a.oLRendererProps, restProps = __rest(_a, ["locale", "rendererType", "showAmountColumn", "showDuplicatesColumn", "data", "rules", "onRulesChange", "filterUiProps", "iconLibraries", "colorRamps", "sldRendererProps", "oLRendererProps"]);
    var _g = (0, react_1.useState)(), ruleEditIndex = _g[0], setRuleEditIndex = _g[1];
    var _h = (0, react_1.useState)(), symbolizerEditorVisible = _h[0], setSymbolizerEditorVisible = _h[1];
    var _j = (0, react_1.useState)(), symbolizerEditorPosition = _j[0], setSymbolizerEditorPosition = _j[1];
    var _k = (0, react_1.useState)(), filterEditorVisible = _k[0], setFilterEditorVisible = _k[1];
    var _l = (0, react_1.useState)(), filterEditorPosition = _l[0], setFilterEditorPosition = _l[1];
    var _m = (0, react_1.useState)(), hasError = _m[0], setHasError = _m[1];
    var _o = (0, react_1.useState)(), data = _o[0], setData = _o[1];
    var _p = (0, react_1.useState)(), rules = _p[0], setRules = _p[1];
    var _q = (0, react_1.useState)(), counts = _q[0], setCounts = _q[1];
    var _r = (0, react_1.useState)(), duplicates = _r[0], setDuplicates = _r[1];
    /**
     * The Parser to read and write CQL Filter
     *
     */
    var cqlParser = (0, react_1.useRef)(new geostyler_cql_parser_1.CqlParser()).current;
    (0, react_1.useEffect)(function () {
        var countsAndDuplicates = {};
        try {
            if (dataProp && DataUtil_1.default.isVector(dataProp)) {
                countsAndDuplicates = FilterUtil_1.default.calculateCountAndDuplicates(rulesProp, dataProp);
            }
            else {
                countsAndDuplicates = {};
            }
        }
        catch (e) {
            setHasError(true);
            // make sure to update state when checks/calculation fails
        }
        setData(dataProp);
        setRules(rulesProp);
        setCounts(countsAndDuplicates === null || countsAndDuplicates === void 0 ? void 0 : countsAndDuplicates.counts);
        setDuplicates(countsAndDuplicates === null || countsAndDuplicates === void 0 ? void 0 : countsAndDuplicates.duplicates);
    }, [rulesProp, dataProp]);
    var ruleRecords = rules === null || rules === void 0 ? void 0 : rules.map(function (rule, index) {
        return __assign({ key: index }, rule);
    });
    var onSymbolizerClick = function (record, newSymbolizerEditorPosition) {
        setRuleEditIndex(record.key);
        setSymbolizerEditorVisible(true);
        setSymbolizerEditorPosition(newSymbolizerEditorPosition);
        setFilterEditorVisible(false);
    };
    var symbolizerRenderer = function (text, record) {
        var onSymbolizerRendererClick = function (symbolizers, event) {
            var filterPosition = event.target.getBoundingClientRect();
            onSymbolizerClick(record, filterPosition);
        };
        return (react_1.default.createElement(Renderer_1.default, __assign({ rendererType: rendererType, data: data, symbolizers: record.symbolizers, onClick: onSymbolizerRendererClick }, sldRendererProps, oLRendererProps)));
    };
    // TODO: Refactor to stand alone component
    var nameRenderer = function (text, record) {
        return (react_1.default.createElement(antd_1.Popover, { content: record.name, title: locale.nameColumnTitle },
            react_1.default.createElement(antd_1.Input, { value: record.name, name: "name-renderer", onChange: function (event) {
                    var target = event.target;
                    setValueForRule(record.key, 'name', target.value);
                } })));
    };
    // TODO: Refactor to stand alone component
    var filterRenderer = function (text, record) {
        var cql = cqlParser.write(record.filter);
        var filterCell;
        var inputSearch = (react_1.default.createElement(antd_1.Input.Search, { className: "gs-rule-table-filter-cell", name: "filter-renderer", value: cql, onChange: function () {
                // TODO The CQL representation is currently not editable
                // const value = event.target.value;
                // try {
                //   const newFilter = FilterUtil.readFromCql(value);
                //   this.setValueForRule(record.key, 'filter', newFilter);
                // } catch (error) {
                //   // TODO Feedback
                // }
            }, enterButton: react_1.default.createElement(icons_1.EditOutlined, null), onSearch: function (value, event) {
                var filterPosition = event.target.getBoundingClientRect();
                onFilterEditClick(record.key, filterPosition);
            } }));
        if (cql && cql.length > 0) {
            filterCell = (react_1.default.createElement(antd_1.Popover, { content: cql, title: locale.filterColumnTitle }, inputSearch));
        }
        else {
            filterCell = inputSearch;
        }
        return filterCell;
    };
    var onFilterEditClick = function (newRuleEditIndex, newFilterEditorPosition) {
        setRuleEditIndex(newRuleEditIndex);
        setFilterEditorPosition(newFilterEditorPosition);
        setSymbolizerEditorVisible(false);
        setFilterEditorVisible(true);
    };
    // TODO: Refactor to stand alone component
    var minScaleRenderer = function (text, record) {
        var minScaleDenominator = (0, get_1.default)(record, 'scaleDenominator.min');
        var value = minScaleDenominator ? parseFloat(minScaleDenominator) : undefined;
        return (react_1.default.createElement(antd_1.InputNumber, { className: "scale-denominator min-scale-denominator", name: "min-scale-renderer", value: value, min: 0, formatter: function (val) { return val ? "1:".concat(val) : ''; }, parser: function (val) { return parseFloat(val.replace('1:', '')); }, onChange: function (newValue) {
                setValueForRule(record.key, 'scaleDenominator.min', newValue);
            } }));
    };
    // TODO: Refactor to stand alone component
    var maxScaleRenderer = function (text, record) {
        var maxScaleDenominator = (0, get_1.default)(record, 'scaleDenominator.max');
        var value = maxScaleDenominator ? parseFloat(maxScaleDenominator) : undefined;
        return (react_1.default.createElement(antd_1.InputNumber, { className: "scale-denominator max-scale-denominator", name: "max-scale-renderer", value: value, min: 0, formatter: function (val) { return val ? "1:".concat(val) : ''; }, parser: function (val) { return parseFloat(val.replace('1:', '')); }, onChange: function (newValue) {
                setValueForRule(record.key, 'scaleDenominator.max', newValue);
            } }));
    };
    // TODO: Refactor to stand alone component
    var amountRenderer = function (text, record) {
        var amount = '-';
        var filter = record.filter;
        if (data && filter) {
            try {
                amount = counts[record === null || record === void 0 ? void 0 : record.key] || 0;
            }
            catch (error) {
                amount = '-';
            }
        }
        else if (data && DataUtil_1.default.isVector(data)) {
            amount = data.exampleFeatures.features.length;
        }
        return (react_1.default.createElement("div", { className: "ant-input gs-rule-table-numeric-cell amount-renderer" }, amount));
    };
    // TODO: Refactor to stand alone component
    var duplicatesRenderer = function (text, record) {
        var calculatedDuplicates = '-';
        if (data && rules) {
            try {
                calculatedDuplicates = duplicates[record.key];
            }
            catch (error) {
                calculatedDuplicates = '-';
            }
        }
        return (react_1.default.createElement("div", { className: "ant-input gs-rule-table-numeric-cell duplicates-renderer" }, calculatedDuplicates));
    };
    var ruleReorderRenderer = function (record) {
        return (react_1.default.createElement(RuleReorderButtons_1.default, { ruleIndex: record.key, rules: rules, onRulesMove: onRulesChange }));
    };
    var onSymbolizersChange = function (symbolizers) {
        setValueForRule(ruleEditIndex, 'symbolizers', symbolizers);
    };
    var onFilterChange = function (filter) {
        setValueForRule(ruleEditIndex, 'filter', filter);
    };
    var setValueForRule = function (ruleIndex, key, value) {
        var rulesClone = (0, cloneDeep_1.default)(rules);
        (0, set_1.default)(rulesClone[ruleIndex], key, value);
        if (onRulesChange) {
            onRulesChange(rulesClone);
        }
    };
    var onSymbolizerEditorWindowClose = function () {
        setSymbolizerEditorVisible(false);
    };
    var onFilterEditorWindowClose = function () {
        setFilterEditorVisible(false);
    };
    var columns = [{
            dataIndex: '',
            width: 70,
            render: ruleReorderRenderer
        },
        {
            title: (react_1.default.createElement(antd_1.Tooltip, { title: locale.symbolizersColumnTitle },
                react_1.default.createElement(icons_1.BgColorsOutlined, null))),
            dataIndex: 'symbolizers',
            render: symbolizerRenderer
        }, {
            title: locale.nameColumnTitle,
            dataIndex: 'name',
            render: nameRenderer
        }, {
            title: locale.filterColumnTitle,
            dataIndex: 'filter',
            render: filterRenderer
        }, {
            title: locale.minScaleColumnTitle,
            dataIndex: 'minScale',
            render: minScaleRenderer
        }, {
            title: locale.maxScaleColumnTitle,
            dataIndex: 'maxScale',
            render: maxScaleRenderer
        }];
    if (showAmountColumn) {
        columns.push({
            title: (react_1.default.createElement(antd_1.Tooltip, { title: locale.amountColumnTitle }, "\u03A3")),
            dataIndex: 'amount',
            render: amountRenderer
        });
    }
    if (showDuplicatesColumn) {
        columns.push({
            title: (react_1.default.createElement(antd_1.Tooltip, { title: locale.duplicatesColumnTitle },
                react_1.default.createElement(icons_1.BlockOutlined, null))),
            dataIndex: 'duplicates',
            render: duplicatesRenderer
        });
    }
    ;
    if (hasError) {
        return react_1.default.createElement("h1", null, "An error occurred in the RuleTable UI.");
    }
    return (react_1.default.createElement("div", { className: "gs-rule-table" },
        react_1.default.createElement(antd_1.Table, __assign({ columns: columns, dataSource: ruleRecords, pagination: false }, restProps)),
        !symbolizerEditorVisible ? null :
            react_1.default.createElement(SymbolizerEditorWindow_1.default, { x: symbolizerEditorPosition
                    ? symbolizerEditorPosition.x + symbolizerEditorPosition.width
                    : undefined, y: symbolizerEditorPosition ? symbolizerEditorPosition.y : undefined, onClose: onSymbolizerEditorWindowClose, internalDataDef: data, symbolizers: (_b = rules[ruleEditIndex]) === null || _b === void 0 ? void 0 : _b.symbolizers, onSymbolizersChange: onSymbolizersChange, iconLibraries: iconLibraries, colorRamps: colorRamps }),
        !filterEditorVisible ? null :
            react_1.default.createElement(FilterEditorWindow_1.default, { x: filterEditorPosition ? filterEditorPosition.x : undefined, y: filterEditorPosition
                    ? filterEditorPosition.y + filterEditorPosition.height
                    : undefined, onClose: onFilterEditorWindowClose, filter: rules[ruleEditIndex].filter, onFilterChange: onFilterChange, filterUiProps: filterUiProps, internalDataDef: data && DataUtil_1.default.isVector(data) ? data : undefined })));
};
exports.RuleTable = RuleTable;
exports.default = (0, LocaleWrapper_1.localize)(exports.RuleTable, COMPONENTNAME);
//# sourceMappingURL=RuleTable.js.map