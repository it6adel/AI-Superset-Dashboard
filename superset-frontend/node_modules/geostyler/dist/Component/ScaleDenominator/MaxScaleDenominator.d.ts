import * as React from 'react';
import { FormItemProps } from 'antd';
import './MaxScaleDenominator.css';
import { Expression } from 'geostyler-style';
import { GeoStylerLocale } from '../../locale/locale';
interface MaxScaleDenominatorDefaultProps extends Partial<FormItemProps> {
    /** The placeholder text to display if no value is set */
    placeholder: string;
    /** Locale object containing translated text snippets */
    locale: GeoStylerLocale['ScaleDenominator'];
}
export interface MaxScaleDenominatorProps extends Partial<MaxScaleDenominatorDefaultProps> {
    /** The maxScaleDenominator value */
    value?: Expression<number>;
    /** The callback function that is triggered when the state changes */
    onChange?: (newMinScale: number) => void;
}
/**
 * Input field for the maximum scale of a rule.
 */
export declare const MaxScaleDenominator: React.FC<MaxScaleDenominatorProps>;
declare const _default: {
    new (props: (MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<MaxScaleDenominatorProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
