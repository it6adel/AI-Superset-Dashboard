{"version":3,"file":"Symbolizers.js","sourceRoot":"","sources":["../../../src/Component/Symbolizers/Symbolizers.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2021-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { useState } from 'react';\n\nimport {\n  Symbolizer as GsSymbolizer\n} from 'geostyler-style';\n\nimport { closestCenter, DndContext } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\n\nimport { localize } from '../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../locale/en_US';\n\nimport './Symbolizers.less';\nimport { Button, Card, Divider } from 'antd';\n\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _uniqueId from 'lodash/uniqueId';\nimport _merge from 'lodash/merge';\nimport SymbolizerCard from '../SymbolizerCard/SymbolizerCard';\nimport { PlusOutlined } from '@ant-design/icons';\nimport SymbolizerUtil from '../../Util/SymbolizerUtil';\nimport { GeoStylerLocale } from '../../locale/locale';\nimport { SortableItem } from '../SortableItem/SortableItem';\nimport { useDragDropSensors } from '../../hook/UseDragDropSensors';\nimport { RemovableItem } from '../RemovableItem/RemovableItem';\nimport { Data } from 'geostyler-data';\n\n// default props\ninterface SymbolizersDefaultProps {\n  /** Locale object containing translated text snippets */\n  locale: GeoStylerLocale['Symbolizers'];\n  /** The callback function that is triggered when the symbolizers change. */\n  onSymbolizersChange: (symbolizers: GsSymbolizer[]) => void;\n  /** The callback function that is triggered when a symbolizer was clicked. */\n  onEditSymbolizerClick: (symbolizerId: number) => void;\n}\n\n// non default props\nexport interface SymbolizersProps extends Partial<SymbolizersDefaultProps> {\n  /** List of symbolizers to display */\n  symbolizers: GsSymbolizer[];\n  /** Reference to internal data object (holding schema and example features). */\n  data?: Data;\n}\n\nexport const Symbolizers: React.FC<SymbolizersProps> = ({\n  locale = en_US.Symbolizers,\n  symbolizers,\n  onSymbolizersChange = () => {},\n  onEditSymbolizerClick = () => {},\n  data\n}) => {\n\n  const [showAll, setShowAll] = useState(false);\n\n  const toggleShowAll = () => {\n    setShowAll(!showAll);\n  };\n\n  const removeSymbolizer = (symbolizerIdx: number) => {\n    const symbolizersClone = _cloneDeep(symbolizers);\n    symbolizersClone.splice(symbolizerIdx, 1);\n    onSymbolizersChange(symbolizersClone);\n  };\n\n  const onAddSymbolizerClick = () => {\n    const symbolizersClone = _cloneDeep(symbolizers);\n    symbolizersClone.push(SymbolizerUtil.defaultSymbolizer);\n    onSymbolizersChange(symbolizersClone);\n  };\n\n  const symbolizerCards = symbolizers.map((symbolizer: GsSymbolizer, idx: number) => {\n    return (\n      <SymbolizerCard\n        key={_uniqueId('symbolizer')}\n        symbolizer={symbolizer}\n        onSymbolizerClick={() => {\n          onEditSymbolizerClick(idx);\n        }}\n        data={data}\n      />\n    );\n  });\n\n  const removableSymbolizerCards = symbolizerCards.map((symbolizerCard, idx) => {\n    const key = _uniqueId('symbolizer');\n\n    return (\n      <RemovableItem\n        key={key}\n        onRemoveClick={() => {\n          removeSymbolizer(idx);\n        }}\n      >\n        { symbolizerCard }\n      </RemovableItem>\n    );\n  });\n\n  const sortableAndRemovableSymbolizerCards = removableSymbolizerCards.map((symbolizerCard, idx) => {\n    const key = _uniqueId('symbolizer');\n    // id must be truthy, so we have to increment the index by 1\n    const id = idx + 1;\n\n    return (\n      <SortableItem\n        key={key}\n        id={id}\n      >\n        { symbolizerCard }\n      </SortableItem>\n    );\n  });\n\n  const onDragEnd = (evt: any) => {\n    const { active, over } = evt;\n    if (active.id !== over.id) {\n      const newOrder = arrayMove([...symbolizers], active.id - 1, over.id - 1);\n      onSymbolizersChange(newOrder);\n    }\n  };\n\n  const sensors = useDragDropSensors();\n\n  return (\n    <div className='gs-symbolizers'>\n      <div className='gs-symbolizers-header'>\n        <h2>{locale.symbolizersTitle}</h2>\n      </div>\n      <Divider />\n      <div className='gs-symbolizers-content'>\n        <div className={`${showAll ? 'gs-symbolizers-grid' : 'gs-symbolizers-list'}`}>\n          {\n            showAll && (\n              <DndContext\n                onDragEnd={onDragEnd}\n                sensors={sensors}\n                collisionDetection={closestCenter}\n              >\n                <SortableContext\n                  items={symbolizers.map((s, idx) => idx + 1)}\n                >\n                  { sortableAndRemovableSymbolizerCards }\n                  <div>\n                    <Card\n                      className='gs-symbolizer-card gs-add-button'\n                      hoverable={true}\n                      onClick={onAddSymbolizerClick}\n                    >\n                      <PlusOutlined />\n                    </Card>\n                  </div>\n                </SortableContext>\n              </DndContext>\n            )\n          }\n          {\n            !showAll && (\n              <DndContext\n                onDragEnd={onDragEnd}\n                sensors={sensors}\n                collisionDetection={closestCenter}\n              >\n                <SortableContext\n                  items={symbolizers.map((s, idx) => idx + 1)}\n                >\n                  { sortableAndRemovableSymbolizerCards }\n                </SortableContext>\n              </DndContext>\n            )\n          }\n        </div>\n        {\n          !showAll && (\n            <div className='gs-symbolizer-card'>\n              <Card\n                className='gs-symbolizer-card gs-add-button'\n                hoverable={true}\n                onClick={onAddSymbolizerClick}\n              >\n                <PlusOutlined />\n              </Card>\n            </div>\n          )\n        }\n      </div>\n      <div className='gs-symbolizers-footer'>\n        <Button\n          type=\"link\"\n          onClick={toggleShowAll}\n        >{showAll ? locale.hide : locale.showAll}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default localize(Symbolizers, 'Symbolizers');\n"]}