{"version":3,"file":"DataLoader.js","sourceRoot":"","sources":["../../../../src/Component/DataInput/DataLoader/DataLoader.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport { Select, Modal } from 'antd';\nimport { UploadRequestOption } from 'rc-upload/lib/interface';\n\nconst Option = Select.Option;\n\nimport {\n  VectorData,\n  DataParser,\n  Data\n} from 'geostyler-data';\n\nimport { ReadParams } from 'geostyler-wfs-parser';\n\nimport UploadButton, { UploadButtonProps } from '../../UploadButton/UploadButton';\nimport WfsParserInput from '../WfsParserInput/WfsParserInput';\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport { GeoStylerLocale } from '../../../locale/locale';\nimport en_US from '../../../locale/en_US';\n\n\n// default props\ninterface DataLoaderDefaultProps {\n  /** The callback method that is triggered when the state changes */\n  onDataRead: (data: VectorData) => void;\n  /** Locale object containing translated text snippets */\n  locale: GeoStylerLocale['DataLoader'];\n}\n\n// non default props\nexport interface DataLoaderProps extends Partial<DataLoaderDefaultProps> {\n  /** List of data parsers to use */\n  parsers: DataParser[];\n  /** Properties that get passed to the UploadButton. */\n  uploadButtonProps?: UploadButtonProps;\n}\n\nexport const DataLoader: React.FC<DataLoaderProps> = ({\n  parsers,\n  locale = en_US.DataLoader,\n  uploadButtonProps,\n  onDataRead = () => {\n    return;\n  }\n}) => {\n\n  const [modalVisible, setModalVisible] = React.useState<boolean>(false);\n  const [activeParser, setActitveParser] = React.useState<DataParser>();\n\n  const parseGeoJsonUploadData = (uploadObject: UploadRequestOption<any>) => {\n    if (!activeParser) {\n      return;\n    }\n    const file = uploadObject.file as File;\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = () => {\n      const fileContent = reader.result.toString();\n\n      // TODO: Remove JSON.parse when type of readData is more precise\n      activeParser.readData(JSON.parse(fileContent))\n        .then(data => {\n          onDataRead(data as VectorData);\n          uploadObject.onSuccess(data);\n        })\n        .catch((e) => {\n          uploadObject.onError(e, 'Upload failed. Invalid Data.');\n        });\n    };\n  };\n\n  const parseShapefileUploadData = (uploadObject: UploadRequestOption<any>) => {\n    if (!activeParser) {\n      return;\n    }\n    const file = uploadObject.file as File;\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onload = () => {\n      activeParser.readData(reader.result)\n        .then(data => {\n          onDataRead(data as VectorData);\n          uploadObject.onSuccess(data);\n        })\n        .catch((e) => {\n          uploadObject.onError(e, 'Upload failed. Invalid Data.');\n        });\n    };\n  };\n\n  const parseWfsData = (wfsReadParams: ReadParams) => {\n    if (!activeParser) {\n      return;\n    }\n    // The dataProjection of the Preview\n    activeParser.readData({\n      ...wfsReadParams,\n      srsName: 'EPSG:4326'\n    })\n      .then((data: Data) => {\n        onDataRead(data as VectorData);\n        setModalVisible(false);\n      });\n  };\n\n  const parserOptions = parsers.map((parser: any) =>\n    <Option key={parser.title} value={parser.title}>{parser.title}</Option>\n  );\n\n  const onSelect = (selection: string) => {\n    const newActiveParser = parsers.find(parser => parser.title === selection);\n    if (newActiveParser) {\n      setActitveParser(newActiveParser);\n      setModalVisible(newActiveParser.title === 'WFS Data Parser');\n    }\n  };\n\n  const closeModal = () => {\n    setModalVisible(false);\n  };\n\n  const getInputFromParser = () => {\n    if (activeParser) {\n      switch (activeParser.title) {\n        case 'GeoJSON Data Parser':\n          return (\n            <UploadButton\n              customRequest={parseGeoJsonUploadData}\n              {...uploadButtonProps}\n            />\n          );\n        case 'Shapefile Data Parser':\n          return (\n            <UploadButton\n              customRequest={parseShapefileUploadData}\n              {...uploadButtonProps}\n            />\n          );\n        case 'WFS Data Parser':\n          return (\n            <Modal\n              className=\"wfs-parser-modal\"\n              title={activeParser.title}\n              visible={modalVisible}\n              onCancel={closeModal}\n              onOk={closeModal}\n            >\n              <WfsParserInput\n                onClick={parseWfsData}\n              />\n            </Modal>\n          );\n        default:\n          return (\n            <UploadButton\n              customRequest={parseGeoJsonUploadData}\n            />\n          );\n      }\n    }\n    return null;\n  };\n\n  return (\n    <div className={activeParser ? 'gs-dataloader-right' : ''}>\n      {locale.label}\n      <Select\n        style={{ width: 300 }}\n        onSelect={onSelect}\n      >\n        {parserOptions}\n      </Select>\n      {getInputFromParser()}\n    </div>\n  );\n};\n\nexport default localize(DataLoader, 'DataLoader');\n"]}