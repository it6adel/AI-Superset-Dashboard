"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLoader = void 0;
var React = __importStar(require("react"));
var antd_1 = require("antd");
var Option = antd_1.Select.Option;
var UploadButton_1 = __importDefault(require("../../UploadButton/UploadButton"));
var WfsParserInput_1 = __importDefault(require("../WfsParserInput/WfsParserInput"));
var LocaleWrapper_1 = require("../../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../../locale/en_US"));
var DataLoader = function (_a) {
    var parsers = _a.parsers, _b = _a.locale, locale = _b === void 0 ? en_US_1.default.DataLoader : _b, uploadButtonProps = _a.uploadButtonProps, _c = _a.onDataRead, onDataRead = _c === void 0 ? function () {
        return;
    } : _c;
    var _d = React.useState(false), modalVisible = _d[0], setModalVisible = _d[1];
    var _e = React.useState(), activeParser = _e[0], setActitveParser = _e[1];
    var parseGeoJsonUploadData = function (uploadObject) {
        if (!activeParser) {
            return;
        }
        var file = uploadObject.file;
        var reader = new FileReader();
        reader.readAsText(file);
        reader.onload = function () {
            var fileContent = reader.result.toString();
            // TODO: Remove JSON.parse when type of readData is more precise
            activeParser.readData(JSON.parse(fileContent))
                .then(function (data) {
                onDataRead(data);
                uploadObject.onSuccess(data);
            })
                .catch(function (e) {
                uploadObject.onError(e, 'Upload failed. Invalid Data.');
            });
        };
    };
    var parseShapefileUploadData = function (uploadObject) {
        if (!activeParser) {
            return;
        }
        var file = uploadObject.file;
        var reader = new FileReader();
        reader.readAsArrayBuffer(file);
        reader.onload = function () {
            activeParser.readData(reader.result)
                .then(function (data) {
                onDataRead(data);
                uploadObject.onSuccess(data);
            })
                .catch(function (e) {
                uploadObject.onError(e, 'Upload failed. Invalid Data.');
            });
        };
    };
    var parseWfsData = function (wfsReadParams) {
        if (!activeParser) {
            return;
        }
        // The dataProjection of the Preview
        activeParser.readData(__assign(__assign({}, wfsReadParams), { srsName: 'EPSG:4326' }))
            .then(function (data) {
            onDataRead(data);
            setModalVisible(false);
        });
    };
    var parserOptions = parsers.map(function (parser) {
        return React.createElement(Option, { key: parser.title, value: parser.title }, parser.title);
    });
    var onSelect = function (selection) {
        var newActiveParser = parsers.find(function (parser) { return parser.title === selection; });
        if (newActiveParser) {
            setActitveParser(newActiveParser);
            setModalVisible(newActiveParser.title === 'WFS Data Parser');
        }
    };
    var closeModal = function () {
        setModalVisible(false);
    };
    var getInputFromParser = function () {
        if (activeParser) {
            switch (activeParser.title) {
                case 'GeoJSON Data Parser':
                    return (React.createElement(UploadButton_1.default, __assign({ customRequest: parseGeoJsonUploadData }, uploadButtonProps)));
                case 'Shapefile Data Parser':
                    return (React.createElement(UploadButton_1.default, __assign({ customRequest: parseShapefileUploadData }, uploadButtonProps)));
                case 'WFS Data Parser':
                    return (React.createElement(antd_1.Modal, { className: "wfs-parser-modal", title: activeParser.title, visible: modalVisible, onCancel: closeModal, onOk: closeModal },
                        React.createElement(WfsParserInput_1.default, { onClick: parseWfsData })));
                default:
                    return (React.createElement(UploadButton_1.default, { customRequest: parseGeoJsonUploadData }));
            }
        }
        return null;
    };
    return (React.createElement("div", { className: activeParser ? 'gs-dataloader-right' : '' },
        locale.label,
        React.createElement(antd_1.Select, { style: { width: 300 }, onSelect: onSelect }, parserOptions),
        getInputFromParser()));
};
exports.DataLoader = DataLoader;
exports.default = (0, LocaleWrapper_1.localize)(exports.DataLoader, 'DataLoader');
//# sourceMappingURL=DataLoader.js.map