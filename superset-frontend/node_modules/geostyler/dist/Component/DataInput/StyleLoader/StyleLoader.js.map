{"version":3,"file":"StyleLoader.js","sourceRoot":"","sources":["../../../../src/Component/DataInput/StyleLoader/StyleLoader.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2CAA+B;AAE/B,6BAA8B;AAE9B,IAAM,MAAM,GAAG,aAAM,CAAC,MAAM,CAAC;AAO7B,iFAA2D;AAE3D,mEAA6D;AAC7D,gEAA0C;AAC1C,oEAA8C;AAkBvC,IAAM,WAAW,GAA+B,UAAC,EAMvD;QALC,OAAO,aAAA,EACP,cAA0B,EAA1B,MAAM,mBAAG,eAAK,CAAC,WAAW,KAAA,EAC1B,mBAEC,EAFD,WAAW,mBAAG;QACZ,OAAO;IACT,CAAC,KAAA;IAGK,IAAA,KAAkC,KAAK,CAAC,QAAQ,EAAe,EAA9D,YAAY,QAAA,EAAE,eAAe,QAAiC,CAAC;IAEtE,IAAM,UAAU,GAAG,UAAM,YAAsC;;;;;oBAC7D,IAAI,CAAC,YAAY,EAAE;wBACjB,sBAAO,SAAS,EAAC;qBAClB;oBACK,IAAI,GAAG,YAAY,CAAC,IAAY,CAAC;;;;oBAGvB,qBAAM,kBAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAA;;oBAA3C,WAAW,GAAG,SAA6B,CAAC;;;;oBAE5C,YAAY,CAAC,OAAO,CAAC,OAAK,CAAC,CAAC;oBAC5B,sBAAO,OAAK,EAAC;wBAMX,qBAAM,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,EAAA;;oBAHvC,KAGF,SAAyC,EAFnC,KAAK,YAAA,EACb,MAAM,YAAA;oBAER,WAAW,CAAC,KAAK,CAAC,CAAC;oBACnB,IAAI,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,IAAG,CAAC,EAAE;wBACtB,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;qBACtC;yBAAM;wBACL,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;qBAC/B;;;;SACF,CAAC;IAEF,IAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,MAAW;QAC5C,OAAA,oBAAC,MAAM,IAAC,GAAG,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,IAAG,MAAM,CAAC,KAAK,CAAU;IAAvE,CAAuE,CACxE,CAAC;IAEF,IAAM,QAAQ,GAAG,UAAC,SAAiB;QACjC,IAAM,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,KAAK,SAAS,EAA1B,CAA0B,CAAC,CAAC;QAC3E,IAAI,eAAe,EAAE;YACnB,eAAe,CAAC,eAAe,CAAC,CAAC;SAClC;IACH,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE;QACtD,MAAM,CAAC,KAAK;QACb,oBAAC,aAAM,IACL,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EACrB,QAAQ,EAAE,QAAQ,IAEjB,aAAa,CACP;QAEP,YAAY,CAAC,CAAC;YACZ,oBAAC,sBAAY,IACX,aAAa,EAAE,UAAU,GACzB,CAAC,CAAC,CAAC,IAAI,CAET,CACP,CAAC;AACJ,CAAC,CAAC;AA/DW,QAAA,WAAW,eA+DtB;AAEF,kBAAe,IAAA,wBAAQ,EAAC,mBAAW,EAAE,aAAa,CAAC,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as React from 'react';\n\nimport { Select } from 'antd';\nimport { UploadRequestOption } from 'rc-upload/lib/interface';\nconst Option = Select.Option;\n\nimport {\n  Style,\n  StyleParser\n} from 'geostyler-style';\n\nimport UploadButton from '../../UploadButton/UploadButton';\n\nimport { localize } from '../../LocaleWrapper/LocaleWrapper';\nimport en_US from '../../../locale/en_US';\nimport FileUtil from '../../../Util/FileUtil';\nimport { GeoStylerLocale } from '../../../locale/locale';\n\n// default props\ninterface StyleLoaderDefaultProps {\n  /** The callback method that is triggered when the state changes */\n  onStyleRead: (style: Style) => void;\n  /** Locale object containing translated text snippets */\n  locale: GeoStylerLocale['StyleLoader'];\n}\n\n// non default props\nexport interface StyleLoaderProps extends Partial<StyleLoaderDefaultProps> {\n  /** List of data parsers to use */\n  parsers: StyleParser[];\n}\n\n\nexport const StyleLoader: React.FC<StyleLoaderProps> = ({\n  parsers,\n  locale = en_US.StyleLoader,\n  onStyleRead = () => {\n    return;\n  }\n}) => {\n\n  const [activeParser, setActiveParser] = React.useState<StyleParser>();\n\n  const parseStyle = async(uploadObject: UploadRequestOption<any>) => {\n    if (!activeParser) {\n      return undefined;\n    }\n    const file = uploadObject.file as File;\n    let fileContent;\n    try {\n      fileContent = await FileUtil.readFile(file);\n    } catch (error: any) {\n      uploadObject.onError(error);\n      return error;\n    }\n\n    const {\n      output: style,\n      errors\n    } = await activeParser.readStyle(fileContent);\n    onStyleRead(style);\n    if (errors?.length > 0) {\n      errors.forEach(uploadObject.onError);\n    } else {\n      uploadObject.onSuccess(style);\n    }\n  };\n\n  const parserOptions = parsers.map((parser: any) =>\n    <Option key={parser.title} value={parser.title}>{parser.title}</Option>\n  );\n\n  const onSelect = (selection: string) => {\n    const newActiveParser = parsers.find(parser => parser.title === selection);\n    if (newActiveParser) {\n      setActiveParser(newActiveParser);\n    }\n  };\n\n  return (\n    <div className={activeParser ? 'gs-dataloader-right' : ''}>\n      {locale.label}\n      <Select\n        style={{ width: 300 }}\n        onSelect={onSelect}\n      >\n        {parserOptions}\n      </Select>\n      {\n        activeParser ?\n          <UploadButton\n            customRequest={parseStyle}\n          /> : null\n      }\n    </div>\n  );\n};\n\nexport default localize(StyleLoader, 'StyleLoader');\n"]}