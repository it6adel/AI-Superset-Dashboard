{"version":3,"file":"Selectable.js","sourceRoot":"","sources":["../../../src/Component/Selectable/Selectable.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,6CAAmD;AACnD,6BAA2B;AAC3B,mFAA6D;AActD,IAAM,UAAU,GAA8B,UAAC,EAIrD;QAHC,SAAS,eAAA,EACT,iBAAiB,uBAAA,EACjB,QAAQ,cAAA;IAGF,IAAA,KAAoC,IAAA,gBAAQ,EAAW,SAAS,IAAI,EAAE,CAAC,EAAtE,aAAa,QAAA,EAAE,gBAAgB,QAAuC,CAAC;IAE9E,IAAM,WAAW,GAAG,UAAC,cAAsB;QACzC,IAAM,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC1D,IAAI,gBAAgB,CAAC;QACrB,IAAI,WAAW,GAAG,CAAC,CAAC,EAAE;YACpB,gBAAgB,qBAAO,aAAa,OAAC,CAAC;YACtC,gBAAgB,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;SACzC;aAAM;YACL,gBAAgB,mCAAO,aAAa,UAAE,cAAc,SAAC,CAAC;SACvD;QACD,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QACnC,IAAI,iBAAiB,EAAE;YACrB,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;SACrC;IACH,CAAC,CAAC;IAEF,IAAM,UAAU,GAAG,UAAC,GAAW;QAC7B,OAAO,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC;IAEF,OAAO,CACL,uCACE,SAAS,EAAC,eAAe,IAGvB,eAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAC,KAAgB,EAAE,GAAW;QACzD,OAAO,CACL,8BAAC,wBAAc,IACb,GAAG,EAAE,GAAG,EACR,WAAW,EAAE;gBACX,WAAW,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,EACD,QAAQ,EAAE,UAAU,CAAC,GAAG,CAAC,IAExB,KAAK,CACS,CAClB,CAAC;IACJ,CAAC,CAAC,CAEA,CACP,CAAC;AACJ,CAAC,CAAC;AAhDW,QAAA,UAAU,cAgDrB;AAEF,kBAAe,kBAAU,CAAC","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2021-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { ReactNode, useState } from 'react';\nimport './Selectable.less';\nimport SelectableItem from './SelectableItem/SelectableItem';\n\n// default props\nexport interface SelectableDefaultProps extends React.PropsWithChildren {\n}\n\n// non default props\nexport interface SelectableProps extends Partial<SelectableDefaultProps> {\n  /** The ids of the selected items. */\n  selection?: number[];\n  /** The change event that is triggered, when the selection changes. */\n  onSelectionChange?: (selectedIdxs: number[]) => void;\n}\n\nexport const Selectable: React.FC<SelectableProps> = ({\n  selection,\n  onSelectionChange,\n  children\n}) => {\n\n  const [selectedItems, setSelectedItems] = useState<number[]>(selection || []);\n\n  const onItemClick = (clickedItemIdx: number) => {\n    const existingIdx = selectedItems.indexOf(clickedItemIdx);\n    let newSelectedItems;\n    if (existingIdx > -1) {\n      newSelectedItems = [...selectedItems];\n      newSelectedItems.splice(existingIdx, 1);\n    } else {\n      newSelectedItems = [...selectedItems, clickedItemIdx];\n    }\n    setSelectedItems(newSelectedItems);\n    if (onSelectionChange) {\n      onSelectionChange(newSelectedItems);\n    }\n  };\n\n  const isSelected = (idx: number) => {\n    return selectedItems.includes(idx);\n  };\n\n  return (\n    <div\n      className='gs-selectable'\n    >\n      {\n        React.Children.map(children, (child: ReactNode, idx: number) => {\n          return (\n            <SelectableItem\n              key={idx}\n              onItemClick={() => {\n                onItemClick(idx);\n              }}\n              selected={isSelected(idx)}\n            >\n              {child}\n            </SelectableItem>\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default Selectable;\n"]}