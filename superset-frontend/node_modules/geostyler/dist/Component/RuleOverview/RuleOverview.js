"use strict";
/* eslint-disable camelcase */
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2021-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleOverview = void 0;
var react_1 = __importDefault(require("react"));
require("./RuleOverview.css");
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
var RuleFieldContainer_1 = __importDefault(require("../RuleFieldContainer/RuleFieldContainer"));
var antd_1 = require("antd");
var Symbolizers_1 = __importDefault(require("../Symbolizers/Symbolizers"));
var CardViewUtil_1 = __importDefault(require("../../Util/CardViewUtil"));
var FilterOverview_1 = __importDefault(require("../FilterOverview/FilterOverview"));
var en_US_1 = __importDefault(require("../../locale/en_US"));
var RuleOverview = function (_a) {
    var _b, _c;
    var rule = _a.rule, data = _a.data, _d = _a.onRuleChange, onRuleChange = _d === void 0 ? function () { } : _d, _e = _a.onChangeView, onChangeView = _e === void 0 ? function () { } : _e, _f = _a.locale, locale = _f === void 0 ? en_US_1.default.RuleOverview : _f;
    var onNameChange = function (name) {
        var newRule = __assign(__assign({}, rule), { name: name });
        onRuleChange(newRule);
    };
    var onMinScaleChange = function (minScale) {
        var newRule = __assign({}, rule);
        if (!newRule.scaleDenominator) {
            newRule.scaleDenominator = {};
        }
        newRule.scaleDenominator.min = minScale;
        onRuleChange(newRule);
    };
    var onMaxScaleChange = function (maxScale) {
        var newRule = __assign({}, rule);
        if (!newRule.scaleDenominator) {
            newRule.scaleDenominator = {};
        }
        newRule.scaleDenominator.max = maxScale;
        onRuleChange(newRule);
    };
    var onSymbolizersChange = function (symbolizers) {
        var newRule = __assign(__assign({}, rule), { symbolizers: symbolizers });
        onRuleChange(newRule);
    };
    var onEditSymbolizerClick = function (symbolizerId) {
        onChangeView(CardViewUtil_1.default.SYMBOLIZERVIEW, [symbolizerId]);
    };
    var onEditFilterClick = function () {
        onChangeView(CardViewUtil_1.default.FILTEREDITVIEW, []);
    };
    return (react_1.default.createElement("div", { className: 'gs-rule-overview' },
        react_1.default.createElement("h2", null, locale.ruleTitle),
        react_1.default.createElement(antd_1.Divider, null),
        react_1.default.createElement(RuleFieldContainer_1.default, { name: rule.name, minScale: (_b = rule.scaleDenominator) === null || _b === void 0 ? void 0 : _b.min, maxScale: (_c = rule.scaleDenominator) === null || _c === void 0 ? void 0 : _c.max, onNameChange: onNameChange, onMinScaleChange: onMinScaleChange, onMaxScaleChange: onMaxScaleChange, symbolizers: rule.symbolizers, data: data }),
        react_1.default.createElement(Symbolizers_1.default, { symbolizers: rule.symbolizers, onEditSymbolizerClick: onEditSymbolizerClick, onSymbolizersChange: onSymbolizersChange, data: data }),
        react_1.default.createElement(FilterOverview_1.default, { filter: rule.filter, onEditFilterClick: onEditFilterClick })));
};
exports.RuleOverview = RuleOverview;
exports.default = (0, LocaleWrapper_1.localize)(exports.RuleOverview, 'RuleOverview');
//# sourceMappingURL=RuleOverview.js.map