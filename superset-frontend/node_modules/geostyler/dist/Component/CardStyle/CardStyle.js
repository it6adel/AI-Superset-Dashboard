"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardStyle = void 0;
var react_1 = __importStar(require("react"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var geostyler_style_1 = require("geostyler-style");
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../locale/en_US"));
require("./CardStyle.css");
var Breadcrumb_1 = __importDefault(require("../Breadcrumb/Breadcrumb"));
var StyleOverview_1 = __importDefault(require("../StyleOverview/StyleOverview"));
var RuleOverview_1 = __importDefault(require("../RuleOverview/RuleOverview"));
var CardViewUtil_1 = __importDefault(require("../../Util/CardViewUtil"));
var Editor_1 = __importDefault(require("../Symbolizer/Editor/Editor"));
var FilterTree_1 = __importDefault(require("../Filter/FilterTree/FilterTree"));
var RuleGenerator_1 = __importDefault(require("../RuleGenerator/RuleGenerator"));
var BulkEditor_1 = __importDefault(require("../BulkEditor/BulkEditor"));
var IconSelector_1 = __importDefault(require("../Symbolizer/IconSelector/IconSelector"));
var Renderer_1 = __importDefault(require("../Renderer/Renderer/Renderer"));
var STYLEVIEW = CardViewUtil_1.default.STYLEVIEW;
var RULEVIEW = CardViewUtil_1.default.RULEVIEW;
var CLASSIFICATIONVIEW = CardViewUtil_1.default.CLASSIFICATIONVIEW;
var MULTIEDITVIEW = CardViewUtil_1.default.MULTIEDITVIEW;
var SYMBOLIZERVIEW = CardViewUtil_1.default.SYMBOLIZERVIEW;
var FILTEREDITVIEW = CardViewUtil_1.default.FILTEREDITVIEW;
var ICONLIBRARIESVIEW = CardViewUtil_1.default.ICONLIBRARIESVIEW;
var CardStyle = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.CardStyle : _b, _c = _a.style, style = _c === void 0 ? { name: 'My Style', rules: [] } : _c, data = _a.data, onStyleChange = _a.onStyleChange, iconLibraries = _a.iconLibraries;
    var defaultCrumb = { view: STYLEVIEW, title: locale.styleTitle, indices: [] };
    var defaultView = {
        view: STYLEVIEW,
        props: [],
        path: [defaultCrumb]
    };
    var _d = (0, react_1.useState)(defaultView), currentView = _d[0], setCurrentView = _d[1];
    var getPathForView = function (viewName, indices) {
        var _a, _b, _c, _d;
        switch (viewName) {
            case STYLEVIEW:
                return [{ view: STYLEVIEW, title: locale.styleTitle, indices: [] }];
            case RULEVIEW:
                return [
                    { view: STYLEVIEW, title: locale.styleTitle, indices: [] },
                    { view: RULEVIEW, title: (_a = style.rules[indices[0]]) === null || _a === void 0 ? void 0 : _a.name, indices: __spreadArray([], indices, true) }
                ];
            case CLASSIFICATIONVIEW:
                return [
                    { view: STYLEVIEW, title: locale.styleTitle, indices: [] },
                    { view: CLASSIFICATIONVIEW, title: locale.classificationTitle, indices: [] }
                ];
            case MULTIEDITVIEW:
                return [
                    { view: STYLEVIEW, title: locale.styleTitle, indices: [] },
                    { view: MULTIEDITVIEW, title: locale.multiEditTitle, indices: __spreadArray([], indices, true) }
                ];
            case SYMBOLIZERVIEW:
                return [
                    { view: STYLEVIEW, title: locale.styleTitle, indices: [] },
                    { view: RULEVIEW, title: (_b = style.rules[indices[0]]) === null || _b === void 0 ? void 0 : _b.name, indices: [indices[0]] },
                    { view: SYMBOLIZERVIEW, title: locale.symbolizerTitle, indices: __spreadArray([], indices, true) }
                ];
            case FILTEREDITVIEW:
                return [
                    { view: STYLEVIEW, title: locale.styleTitle, indices: [] },
                    { view: RULEVIEW, title: (_c = style.rules[indices[0]]) === null || _c === void 0 ? void 0 : _c.name, indices: [indices[0]] },
                    { view: FILTEREDITVIEW, title: locale.filterTitle, indices: __spreadArray([], indices, true) },
                ];
            case ICONLIBRARIESVIEW:
                return [
                    { view: STYLEVIEW, title: locale.styleTitle, indices: [] },
                    { view: RULEVIEW, title: (_d = style.rules[indices[0]]) === null || _d === void 0 ? void 0 : _d.name, indices: [indices[0]] },
                    { view: SYMBOLIZERVIEW, title: locale.symbolizerTitle, indices: __spreadArray([], indices, true) },
                    { view: SYMBOLIZERVIEW, title: locale.iconLibrariesTitle, indices: __spreadArray([], indices, true) }
                ];
            default:
                return [];
        }
    };
    var changeView = function (viewName, indices) {
        var view = { view: viewName, props: indices, path: [] };
        view.path = getPathForView(viewName, indices);
        setCurrentView(view);
    };
    /**
     * Update the title for all path elements with view RULEVIEW.
     *
     * @param ruleName The new name of the rule that should be used as title.
     * @param path The path list to search for RULEVIEWs.
     * @returns The path list with updated titles.
     */
    var updateRuleNameForPath = function (ruleName, path) {
        return path.map(function (pathItem) {
            if (pathItem.view === RULEVIEW) {
                pathItem.title = ruleName;
            }
            return pathItem;
        });
    };
    var onRuleChange = function (newRule) {
        var styleClone = (0, cloneDeep_1.default)(style);
        var ruleIdx = currentView.path[currentView.path.length - 1].indices[0];
        styleClone.rules[ruleIdx] = newRule;
        var pathClone = (0, cloneDeep_1.default)(currentView.path);
        var newCurrentViewPath = updateRuleNameForPath(newRule.name, pathClone);
        setCurrentView(__assign(__assign({}, currentView), { path: newCurrentViewPath }));
        if (onStyleChange) {
            onStyleChange(styleClone);
        }
    };
    var onRulesChange = function (rules) {
        var styleClone = (0, cloneDeep_1.default)(style);
        styleClone.rules = rules;
        if (onStyleChange) {
            onStyleChange(styleClone);
            changeView(STYLEVIEW, currentView.path[0].indices);
        }
    };
    var onSymbolizerChange = function (symbolizer) {
        var styleClone = (0, cloneDeep_1.default)(style);
        var ruleIdx = currentView.path[currentView.path.length - 1].indices[0];
        var symbolizerIdx = currentView.path[currentView.path.length - 1].indices[1];
        styleClone.rules[ruleIdx].symbolizers[symbolizerIdx] = symbolizer;
        if (onStyleChange) {
            onStyleChange(styleClone);
        }
    };
    var onFilterChange = function (filter) {
        var styleClone = (0, cloneDeep_1.default)(style);
        var ruleIdx = currentView.path[currentView.path.length - 1].indices[0];
        styleClone.rules[ruleIdx].filter = filter;
        if (onStyleChange) {
            onStyleChange(styleClone);
        }
    };
    var onBulkEditorChange = function (prop, val) {
        var styleClone = (0, cloneDeep_1.default)(style);
        var selectedRuleIds = currentView.path[currentView.path.length - 1].indices;
        styleClone.rules
            .filter(function (rule, idx) {
            return selectedRuleIds.includes(idx);
        })
            .forEach(function (rule) {
            rule.symbolizers.forEach(function (sym) {
                sym[prop] = val;
                if (prop === 'image' && sym.wellKnownName) {
                    delete sym.wellKnownName;
                    sym.kind = 'Icon';
                }
                if (prop === 'wellKnownName' && sym.image) {
                    delete sym.image;
                }
            });
        });
        if (onStyleChange) {
            onStyleChange(styleClone);
        }
    };
    var onIconSelect = function (iconSrc) {
        var styleClone = (0, cloneDeep_1.default)(style);
        var ruleIdx = currentView.path[currentView.path.length - 1].indices[0];
        var symbolizerIdx = currentView.path[currentView.path.length - 1].indices[1];
        var symbolizer = styleClone.rules[ruleIdx].symbolizers[symbolizerIdx];
        if ((0, geostyler_style_1.isIconSymbolizer)(symbolizer)) {
            symbolizer.image = iconSrc;
        }
        if (onStyleChange) {
            onStyleChange(styleClone);
        }
    };
    /**
     * Get the image url for the currently selected symbolizer.
     */
    var getSelectedIconSrc = function () {
        var symbolizer = style
            .rules[currentView.path[currentView.path.length - 1].indices[0]]
            .symbolizers[currentView.path[currentView.path.length - 1].indices[1]];
        if ((0, geostyler_style_1.isIconSymbolizer)(symbolizer)) {
            if (typeof symbolizer.image === 'string') {
                return symbolizer.image;
            }
        }
        return '';
    };
    var onRuleChangeView = function (viewName, indices) {
        var newIndices = __spreadArray([currentView.path[currentView.path.length - 1].indices[0]], indices, true);
        changeView(viewName, newIndices);
    };
    var onIconEditorChangeView = function () {
        var newIndices = __spreadArray([], currentView.path[currentView.path.length - 1].indices, true);
        changeView(ICONLIBRARIESVIEW, newIndices);
    };
    return (react_1.default.createElement("div", { className: 'gs-card-style' },
        react_1.default.createElement(Breadcrumb_1.default, { crumbs: currentView.path, onClick: changeView }),
        currentView.view === STYLEVIEW && (react_1.default.createElement(StyleOverview_1.default, { style: style, data: data, onStyleChange: onStyleChange, onChangeView: changeView })),
        currentView.view === RULEVIEW && (react_1.default.createElement(RuleOverview_1.default, { rule: style.rules[currentView.path[currentView.path.length - 1].indices[0]], data: data, onRuleChange: onRuleChange, onChangeView: onRuleChangeView })),
        currentView.view === SYMBOLIZERVIEW && (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(Renderer_1.default, { symbolizers: [
                    style
                        .rules[currentView.path[currentView.path.length - 1].indices[0]]
                        .symbolizers[currentView.path[currentView.path.length - 1].indices[1]]
                ], data: data }),
            react_1.default.createElement(Editor_1.default, { symbolizer: style
                    .rules[currentView.path[currentView.path.length - 1].indices[0]]
                    .symbolizers[currentView.path[currentView.path.length - 1].indices[1]], onSymbolizerChange: onSymbolizerChange, internalDataDef: data, iconEditorProps: {
                    imageFieldProps: {
                        windowless: true,
                        onIconLibrariesClick: onIconEditorChangeView
                    }
                }, iconLibraries: iconLibraries }))),
        currentView.view === FILTEREDITVIEW && (react_1.default.createElement(FilterTree_1.default, { filter: style
                .rules[currentView.path[currentView.path.length - 1].indices[0]]
                .filter, onFilterChange: onFilterChange, internalDataDef: data })),
        currentView.view === CLASSIFICATIONVIEW && (react_1.default.createElement(RuleGenerator_1.default, { internalDataDef: data, onRulesChange: onRulesChange })),
        currentView.view === MULTIEDITVIEW && (react_1.default.createElement(BulkEditor_1.default, { onStylePropChange: onBulkEditorChange })),
        currentView.view === ICONLIBRARIESVIEW && (react_1.default.createElement(IconSelector_1.default, { iconLibraries: iconLibraries, onIconSelect: onIconSelect, selectedIconSrc: getSelectedIconSrc() }))));
};
exports.CardStyle = CardStyle;
exports.default = (0, LocaleWrapper_1.localize)(exports.CardStyle, 'CardStyle');
//# sourceMappingURL=CardStyle.js.map