import React from 'react';
import { InterpolationMode } from 'chroma-js';
import { Style as GsStyle } from 'geostyler-style';
import { Data } from 'geostyler-data';
import { RuleProps } from '../Rule/Rule';
import { NameFieldProps } from '../NameField/NameField';
import { ComparisonFilterProps } from '../Filter/ComparisonFilter/ComparisonFilter';
import { RuleTableProps } from '../RuleTable/RuleTable';
import { SLDRendererAdditonalProps } from '../Renderer/SLDRenderer/SLDRenderer';
import { IconLibrary } from '../Symbolizer/IconSelector/IconSelector';
import './Style.css';
import { GeoStylerLocale } from '../../locale/locale';
export interface StyleLocale {
    addRuleBtnText: string;
    cloneRulesBtnText: string;
    removeRulesBtnText: string;
    nameFieldLabel?: string;
    nameFieldPlaceholder?: string;
    colorLabel: string;
    radiusLabel: string;
    opacityLabel: string;
    symbolLabel: string;
    multiEditLabel: string;
    ruleGeneratorWindowBtnText: string;
}
interface StyleDefaultProps {
    /** The geoStylerStyle object */
    style: GsStyle;
    /** Locale object containing translated text snippets */
    locale: GeoStylerLocale['Style'];
    /** Use compact layout */
    compact: boolean;
    /** Enable classification */
    enableClassification: boolean;
}
export interface StyleProps extends Partial<StyleDefaultProps> {
    /** Reference to internal data object (holding schema and example features) */
    data?: Data;
    /** The callback function that is triggered when the state changes */
    onStyleChange?: (style: GsStyle) => void;
    /** The data projection of example features */
    dataProjection?: string;
    /** Properties of the filter components */
    filterUiProps?: Partial<ComparisonFilterProps>;
    /** Properties of the rule name field */
    ruleNameProps?: Partial<NameFieldProps>;
    /** Properties of the Rule component */
    ruleProps?: Partial<RuleProps>;
    /** Properties of the RuleTable component */
    ruleTableProps?: Partial<RuleTableProps>;
    /** The renderer to use */
    ruleRendererType?: 'SLD' | 'OpenLayers';
    /** Properties of the SLD renderer */
    sldRendererProps?: SLDRendererAdditonalProps;
    /** List of supported icons ordered as library */
    iconLibraries?: IconLibrary[];
    /** Display the number of features that match a rule */
    showAmountColumn?: boolean;
    /** Display the number of features that match more than one rule */
    showDuplicatesColumn?: boolean;
    /** Object containing the predefined color ramps */
    colorRamps?: {
        [name: string]: string[];
    };
    /** Use Brewer color ramps */
    useBrewerColorRamps?: boolean;
    /** List of supported color spaces */
    colorSpaces?: (InterpolationMode)[];
}
export declare const Style: React.FC<StyleProps>;
declare const _default: {
    new (props: (StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<StyleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
