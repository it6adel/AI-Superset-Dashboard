"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Style = void 0;
var react_1 = __importStar(require("react"));
var get_1 = __importDefault(require("lodash/get"));
var isEqual_1 = __importDefault(require("lodash/isEqual"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var antd_1 = require("antd");
var Rule_1 = __importDefault(require("../Rule/Rule"));
var NameField_1 = __importDefault(require("../NameField/NameField"));
var BulkEditModals_1 = __importDefault(require("../Symbolizer/BulkEditModals/BulkEditModals"));
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
var SymbolizerUtil_1 = __importDefault(require("../../Util/SymbolizerUtil"));
var RuleTable_1 = __importDefault(require("../RuleTable/RuleTable"));
var RuleGeneratorWindow_1 = __importDefault(require("../RuleGenerator/RuleGeneratorWindow"));
require("./Style.css");
var icons_1 = require("@ant-design/icons");
var en_US_1 = __importDefault(require("../../locale/en_US"));
var COMPONENTNAME = 'Style';
var Style = function (_a) {
    var _b = _a.compact, compact = _b === void 0 ? false : _b, _c = _a.locale, locale = _c === void 0 ? en_US_1.default.Style : _c, _d = _a.style, styleProp = _d === void 0 ? {
        name: 'My Style',
        rules: []
    } : _d, data = _a.data, onStyleChange = _a.onStyleChange, dataProjection = _a.dataProjection, filterUiProps = _a.filterUiProps, ruleNameProps = _a.ruleNameProps, ruleProps = _a.ruleProps, ruleTableProps = _a.ruleTableProps, ruleRendererType = _a.ruleRendererType, sldRendererProps = _a.sldRendererProps, iconLibraries = _a.iconLibraries, showAmountColumn = _a.showAmountColumn, showDuplicatesColumn = _a.showDuplicatesColumn, colorRamps = _a.colorRamps, useBrewerColorRamps = _a.useBrewerColorRamps, colorSpaces = _a.colorSpaces, _e = _a.enableClassification, enableClassification = _e === void 0 ? true : _e;
    var _f = (0, react_1.useState)(styleProp), style = _f[0], setStyle = _f[1];
    var _g = (0, react_1.useState)([]), selectedRowKeys = _g[0], setSelectedRowKeys = _g[1];
    var _h = (0, react_1.useState)(false), colorModalVisible = _h[0], setColorModalVisible = _h[1];
    var _j = (0, react_1.useState)(false), sizeModalVisible = _j[0], setSizeModalVisible = _j[1];
    var _k = (0, react_1.useState)(false), opacityModalVisible = _k[0], setOpacityModalVisible = _k[1];
    var _l = (0, react_1.useState)(false), symbolModalVisible = _l[0], setSymbolModalVisible = _l[1];
    var _m = (0, react_1.useState)(false), ruleGeneratorWindowVisible = _m[0], setRuleGeneratorWindowVisible = _m[1];
    (0, react_1.useEffect)(function () {
        setStyle(styleProp);
    }, [styleProp]);
    var onNameChange = function (name) {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        clonedStyle.name = name;
        if (onStyleChange) {
            onStyleChange(clonedStyle);
        }
        setStyle(clonedStyle);
    };
    var onRuleChange = function (rule, ruleBefore) {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        var ruleIdxToReplace = clonedStyle.rules.findIndex(function (r) {
            return (0, isEqual_1.default)(r, ruleBefore);
        });
        if (ruleIdxToReplace > -1) {
            clonedStyle.rules[ruleIdxToReplace] = rule;
            if (onStyleChange) {
                onStyleChange(clonedStyle);
            }
            setStyle(clonedStyle);
        }
    };
    var onRulesChange = function (newRules) {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        clonedStyle.rules = newRules;
        if (onStyleChange) {
            onStyleChange(clonedStyle);
        }
        setStyle(clonedStyle);
    };
    var addRule = function () {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        // TODO We need to ensure that rule names are unique
        var randomId = Math.floor(Math.random() * 10000);
        var symbolizerKind = (0, get_1.default)(clonedStyle, 'rules[0].symbolizers[0].kind');
        var newRule = {
            name: 'rule_' + randomId,
            symbolizers: [SymbolizerUtil_1.default.generateSymbolizer(symbolizerKind)]
        };
        clonedStyle.rules = __spreadArray(__spreadArray([], clonedStyle.rules, true), [newRule], false);
        if (onStyleChange) {
            onStyleChange(clonedStyle);
        }
        setSelectedRowKeys([]);
        setStyle(clonedStyle);
    };
    var cloneRules = function () {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        // create rules to clone
        var newRules = [];
        clonedStyle.rules.forEach(function (rule, index) {
            if (selectedRowKeys.includes(index)) {
                var ruleClone = (0, cloneDeep_1.default)(rule);
                // TODO We need to ensure that rule names are unique
                var randomId = Math.floor(Math.random() * 10000);
                ruleClone.name = 'rule_' + randomId;
                newRules.push(ruleClone);
            }
        });
        // apply cloned rules to existing ones
        clonedStyle.rules = __spreadArray(__spreadArray([], clonedStyle.rules, true), newRules, true);
        if (onStyleChange) {
            onStyleChange(clonedStyle);
        }
        setStyle(clonedStyle);
    };
    var removeRules = function () {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        var newRules = clonedStyle.rules.filter(function (rule, index) {
            return !selectedRowKeys.includes(index);
        });
        clonedStyle.rules = newRules;
        if (onStyleChange) {
            onStyleChange(clonedStyle);
        }
        setSelectedRowKeys([]);
        setStyle(clonedStyle);
    };
    var removeRule = function (rule) {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        var newRules = clonedStyle.rules.filter(function (r) { return r.name !== rule.name; });
        clonedStyle.rules = newRules;
        if (onStyleChange) {
            onStyleChange(clonedStyle);
        }
        setStyle(clonedStyle);
    };
    var onRulesSelectionChange = function (newSelectedRowKeys) {
        setSelectedRowKeys(newSelectedRowKeys);
    };
    var onTableMenuClick = function (param) {
        switch (param.key) {
            case 'addRule':
                addRule();
                break;
            case 'cloneRules':
                cloneRules();
                break;
            case 'removeRule':
                removeRules();
                break;
            case 'color':
                setColorModalVisible(true);
                break;
            case 'size':
                setSizeModalVisible(true);
                break;
            case 'opacity':
                setOpacityModalVisible(true);
                break;
            case 'symbol':
                setSymbolModalVisible(true);
                break;
            default:
        }
    };
    var updateAllSelected = function (updates) {
        var clonedStyle = (0, cloneDeep_1.default)(style);
        var selectedRules = clonedStyle.rules.filter(function (rule, index) {
            return selectedRowKeys.includes(index);
        });
        selectedRules.forEach(function (rule) {
            rule.symbolizers.forEach(function (sym) {
                updates.forEach(function (upd) {
                    var property = upd.property;
                    var value = upd.value;
                    sym[property] = value;
                    if (property === 'kind' && value === 'Icon' && sym.wellKnownName) {
                        delete sym.wellKnownName;
                    }
                    if (property === 'kind' && value === 'Mark' && sym.image) {
                        delete sym.image;
                    }
                });
            });
        });
        if (onStyleChange) {
            onStyleChange(clonedStyle);
        }
        setStyle(clonedStyle);
    };
    var updateMultiColors = function (color) {
        updateAllSelected([{ value: color, property: 'color' }]);
    };
    var updateMultiSizes = function (size) {
        updateAllSelected([{ value: size, property: 'radius' }]);
    };
    var updateMultiOpacities = function (opacity) {
        updateAllSelected([{ value: opacity, property: 'opacity' }]);
    };
    var updateMultiSymbols = function (symbol, kind) {
        if (kind === 'Mark') {
            updateAllSelected([
                { value: symbol, property: 'wellKnownName' },
                { value: kind, property: 'kind' }
            ]);
        }
        else {
            updateAllSelected([
                { value: symbol, property: 'image' },
                { value: kind, property: 'kind' }
            ]);
        }
    };
    var showRuleGeneratorWindow = function () {
        setRuleGeneratorWindowVisible(true);
    };
    var onRuleGeneratorWindowClose = function () {
        setRuleGeneratorWindowVisible(false);
    };
    var onModalsClosed = function () {
        setColorModalVisible(false);
        setSizeModalVisible(false);
        setOpacityModalVisible(false);
        setSymbolModalVisible(false);
    };
    /**
     * Checks if a specific menu item of multi-edit menu should be disabled.
     *
     * @param name Name of menu item
     * @param rowKeys array of selected rowkeys
     * @return boolean true if menu item should be disabled, otherwise false
     */
    var disableMenu = function (name, rowKeys) {
        var isValid = true;
        switch (name) {
            case 'size':
                rowKeys.forEach(function (key) {
                    var symbolizers = style.rules[key].symbolizers;
                    symbolizers.forEach(function (symbolizer) {
                        var kind = symbolizer.kind;
                        if (kind === 'Fill' || kind === 'Text' || kind === 'Line') {
                            isValid = false;
                        }
                    });
                });
                return !isValid;
            case 'symbol':
                rowKeys.forEach(function (key) {
                    var symbolizers = style.rules[key].symbolizers;
                    symbolizers.forEach(function (symbolizer) {
                        var kind = symbolizer.kind;
                        if (kind !== 'Mark' && kind !== 'Icon') {
                            isValid = false;
                        }
                    });
                });
                return !isValid;
            case 'color':
                rowKeys.forEach(function (key) {
                    var symbolizers = style.rules[key].symbolizers;
                    symbolizers.forEach(function (symbolizer) {
                        var kind = symbolizer.kind;
                        if (kind === 'Icon') {
                            isValid = false;
                        }
                    });
                });
                return !isValid;
            default:
                return !isValid;
        }
    };
    // TODO: move to separated component
    var createFooter = function () {
        var allowRemove = selectedRowKeys.length > 0 && selectedRowKeys.length < style.rules.length;
        var allowClone = selectedRowKeys.length > 0;
        var items = [{
                key: 'addRule',
                label: locale.addRuleBtnText,
                icon: react_1.default.createElement(icons_1.PlusOutlined, null)
            }, {
                key: 'cloneRules',
                label: locale.cloneRulesBtnText,
                disabled: !allowClone,
                icon: react_1.default.createElement(icons_1.CopyOutlined, null)
            }, {
                key: 'removeRule',
                label: locale.removeRulesBtnText,
                disabled: !allowRemove,
                icon: react_1.default.createElement(icons_1.MinusOutlined, null)
            }, {
                key: 'multi-edit',
                label: react_1.default.createElement("span", null,
                    react_1.default.createElement(icons_1.MenuUnfoldOutlined, null),
                    react_1.default.createElement("span", null, locale.multiEditLabel)),
                disabled: selectedRowKeys.length <= 1,
                children: [{
                        key: 'color',
                        label: locale.colorLabel,
                        disabled: disableMenu('color', selectedRowKeys)
                    }, {
                        key: 'size',
                        label: locale.radiusLabel,
                        disabled: disableMenu('size', selectedRowKeys)
                    }, {
                        key: 'symbol',
                        label: locale.symbolLabel,
                        disabled: disableMenu('symbol', selectedRowKeys)
                    }]
            }];
        return (react_1.default.createElement(antd_1.Menu, { mode: "horizontal", onClick: onTableMenuClick, selectable: false, items: items }));
    };
    var rules = (style === null || style === void 0 ? void 0 : style.rules) || [];
    return (react_1.default.createElement("div", { className: "gs-style" },
        react_1.default.createElement("div", { className: "gs-style-name-classification-row" },
            react_1.default.createElement(antd_1.Form.Item, { label: locale.nameFieldLabel },
                react_1.default.createElement(NameField_1.default, { value: style.name, onChange: onNameChange, placeholder: locale.nameFieldPlaceholder })),
            // TODO: Rule GeneratorWindow should only be available if data is VectorData
            enableClassification ?
                react_1.default.createElement(antd_1.Button, { className: "gs-style-rulegenerator", onClick: showRuleGeneratorWindow, disabled: !data }, locale.ruleGeneratorWindowBtnText) : null),
        (!ruleGeneratorWindowVisible) ? null :
            react_1.default.createElement(RuleGeneratorWindow_1.default, { y: 0, internalDataDef: data, onClose: onRuleGeneratorWindowClose, onRulesChange: onRulesChange, colorRamps: colorRamps, useBrewerColorRamps: useBrewerColorRamps, colorSpaces: colorSpaces }),
        compact
            ? react_1.default.createElement(RuleTable_1.default, __assign({ rules: rules, onRulesChange: onRulesChange, rowSelection: {
                    selectedRowKeys: selectedRowKeys,
                    onChange: onRulesSelectionChange
                }, rendererType: ruleRendererType, sldRendererProps: sldRendererProps, filterUiProps: filterUiProps, data: data, footer: createFooter, iconLibraries: iconLibraries, showAmountColumn: showAmountColumn, showDuplicatesColumn: showDuplicatesColumn, colorRamps: colorRamps }, ruleTableProps))
            : rules.map(function (rule, idx) { return react_1.default.createElement(Rule_1.default, { key: 'rule_' + idx, rule: rule, onRemove: removeRule, internalDataDef: data, onRuleChange: onRuleChange, dataProjection: dataProjection, filterUiProps: filterUiProps, ruleNameProps: ruleNameProps, rendererType: ruleRendererType, sldRendererProps: sldRendererProps, iconLibraries: iconLibraries, colorRamps: colorRamps }); }),
        compact ? null :
            react_1.default.createElement(antd_1.Button, { style: { 'marginBottom': '20px', 'marginTop': '20px' }, icon: react_1.default.createElement(icons_1.PlusOutlined, null), size: "large", onClick: addRule }, locale.addRuleBtnText),
        react_1.default.createElement(BulkEditModals_1.default, { colorModalVisible: colorModalVisible, sizeModalVisible: sizeModalVisible, opacityModalVisible: opacityModalVisible, symbolModalVisible: symbolModalVisible, selectedRowKeys: selectedRowKeys, updateMultiColors: updateMultiColors, updateMultiSizes: updateMultiSizes, updateMultiOpacities: updateMultiOpacities, updateMultiSymbols: updateMultiSymbols, style: style, iconLibraries: iconLibraries, modalsClosed: onModalsClosed })));
};
exports.Style = Style;
exports.default = (0, LocaleWrapper_1.localize)(exports.Style, COMPONENTNAME);
//# sourceMappingURL=Style.js.map