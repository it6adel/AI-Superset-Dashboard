"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoolFilterField = void 0;
var React = __importStar(require("react"));
var antd_1 = require("antd");
var LocaleWrapper_1 = require("../../LocaleWrapper/LocaleWrapper");
var en_US_1 = __importDefault(require("../../../locale/en_US"));
/**
 * Checkbox field for a boolean filter value.
 */
var BoolFilterField = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.BoolFilterField : _b, _c = _a.value, value = _c === void 0 ? false : _c, onValueChange = _a.onValueChange, size = _a.size;
    /**
     * Extracts the boolean value out of the CheckboxChangeEvent of 'onChange'
     * and passes it to the passed in 'onValueChange' handler.
     */
    var onChange = function (e) {
        if (onValueChange) {
            onValueChange(e.target.checked);
        }
    };
    var className = 'gs-bool-filter-field';
    if (size === 'small') {
        // TODO: make use of this for the checkbox
        className += ' ant-input-sm';
    }
    return (React.createElement("div", { className: className },
        React.createElement(antd_1.Form.Item, { label: locale.label, colon: false },
            React.createElement(antd_1.Checkbox, { checked: value === true, onChange: onChange }))));
};
exports.BoolFilterField = BoolFilterField;
exports.default = (0, LocaleWrapper_1.localize)(exports.BoolFilterField, 'BoolFilterField');
//# sourceMappingURL=BoolFilterField.js.map