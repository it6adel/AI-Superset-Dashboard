"use strict";
/* eslint-disable @typescript-eslint/member-ordering */
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComparisonFilter = exports.ComparisonFilterDefaultValidator = void 0;
var React = __importStar(require("react"));
var AttributeCombo_1 = __importDefault(require("../AttributeCombo/AttributeCombo"));
var OperatorCombo_1 = __importDefault(require("../OperatorCombo/OperatorCombo"));
var TextFilterField_1 = __importDefault(require("../TextFilterField/TextFilterField"));
var NumberFilterField_1 = __importDefault(require("../NumberFilterField/NumberFilterField"));
require("./ComparisonFilter.css");
var BoolFilterField_1 = __importDefault(require("../BoolFilterField/BoolFilterField"));
var get_1 = __importDefault(require("lodash/get"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var isString_1 = __importDefault(require("lodash/isString"));
var ComparisonFilterDefaultValidator = function (newValue, internalDataDef, selectedAttribute) {
    var isValid = true;
    var errorMsg = '';
    // read out attribute type
    var attrType = (0, get_1.default)(internalDataDef, "schema.properties[".concat(selectedAttribute, "].type"));
    switch (attrType) {
        case 'number':
            // detect min / max from schema
            var minVal = (0, get_1.default)(internalDataDef, "schema.properties[".concat(selectedAttribute, "].minimum"));
            var maxVal = (0, get_1.default)(internalDataDef, "schema.properties[".concat(selectedAttribute, "].maximum"));
            if (!isNaN(minVal) && !isNaN(maxVal)) {
                if (typeof newValue !== 'number') {
                    isValid = false;
                    errorMsg = 'Please enter a number';
                }
                else if (newValue < minVal) {
                    isValid = false;
                    errorMsg = 'Minimum Value is ' + minVal;
                }
                else if (newValue > maxVal) {
                    isValid = false;
                    errorMsg = 'Maximum Value is ' + maxVal;
                }
            }
            break;
        default:
            break;
    }
    return {
        isValid: isValid,
        errorMsg: errorMsg
    };
};
exports.ComparisonFilterDefaultValidator = ComparisonFilterDefaultValidator;
var operatorsMap = {
    'string': ['==', '*=', '!='],
    'number': ['==', '!=', '<', '<=', '>', '>=', '<=x<='],
    'boolean': ['==', '!=']
};
/**
 * UI for a ComparisonFilter consisting of
 *
 *   - A combo to select the attribute
 *   - A combo to select the operator
 *   - An input field for the value
 */
var ComparisonFilter = function (_a) {
    var _b, _c;
    var _d = _a.attributeNameFilter, attributeNameFilter = _d === void 0 ? function () { return true; } : _d, _e = _a.attributeNameMappingFunction, attributeNameMappingFunction = _e === void 0 ? function (n) { return n; } : _e, _f = _a.filter, filter = _f === void 0 ? ['==', '', null] : _f, _g = _a.hideAttributeType, hideAttributeType = _g === void 0 ? false : _g, internalDataDef = _a.internalDataDef, _h = _a.microUI, microUI = _h === void 0 ? false : _h, onFilterChange = _a.onFilterChange, operatorLabel = _a.operatorLabel, _j = _a.operatorNameMappingFunction, operatorNameMappingFunction = _j === void 0 ? function (n) { return n; } : _j, operatorPlaceholderString = _a.operatorPlaceholderString, _k = _a.operatorTitleMappingFunction, operatorTitleMappingFunction = _k === void 0 ? function (t) { return t; } : _k, operatorValidationHelpString = _a.operatorValidationHelpString, _l = _a.showOperatorTitles, showOperatorTitles = _l === void 0 ? true : _l, _m = _a.validators, validators = _m === void 0 ? {
        attribute: function (attributeName) { return !(0, isEmpty_1.default)(attributeName); },
        operator: function (operatorName) { return !(0, isEmpty_1.default)(operatorName); },
        value: exports.ComparisonFilterDefaultValidator
    } : _m;
    /**
     * Handler function, which is executed, when to underlying filter attribute changes.
     *
     * Changes the input field for the filter value and stores the appropriate attribute name as member.
     */
    var onAttributeChange = function (newAttrName) {
        var newFilter = (0, cloneDeep_1.default)(filter);
        newFilter[1] = newAttrName;
        if (onFilterChange) {
            onFilterChange(newFilter);
        }
    };
    /**
     * Handler function, which is executed, when to underlying filter operator changes.
     *
     * Stores the appropriate operator as member.
     */
    var onOperatorChange = function (newOperator) {
        var newFilter = (0, cloneDeep_1.default)(filter);
        newFilter[0] = newOperator;
        if (newOperator !== '<=x<=' && newFilter.length > 3) {
            newFilter.splice(3, 1);
        }
        if (newOperator === '<=x<=' && !newFilter[3]) {
            newFilter[3] = 0;
        }
        if (onFilterChange) {
            onFilterChange(newFilter);
        }
    };
    /**
     * Handler function, which is executed, when to underlying filter value changes.
     *
     * Stores the appropriate filter value as member.
     */
    var onValueChange = function (newValue, filterIndex) {
        if (filterIndex === void 0) { filterIndex = 2; }
        var newFilter = (0, cloneDeep_1.default)(filter);
        newFilter[filterIndex] = newValue;
        if (onFilterChange) {
            onFilterChange(newFilter);
        }
    };
    // TODO: implement strategy to handle FunctionFilter
    var attribute = (0, isString_1.default)(filter[1]) ? filter[1] : undefined;
    var attributeType = attribute ? (_c = (_b = internalDataDef === null || internalDataDef === void 0 ? void 0 : internalDataDef.schema) === null || _b === void 0 ? void 0 : _b.properties[attribute]) === null || _c === void 0 ? void 0 : _c.type : undefined;
    var operator = filter[0];
    var value = filter[2];
    var valueValidation = validators.value(value, internalDataDef, attribute);
    var valueValidationHelpString = valueValidation.errorMsg;
    var allowedOperators = attributeType ? operatorsMap[attributeType] : undefined;
    var isNumberBetweenComparison = operator === '<=x<=';
    var isNumberComparison = attributeType === 'number';
    var isBooleanComparison = attributeType === 'boolean';
    var isTextComparison = !isNumberBetweenComparison && !isNumberComparison && !isBooleanComparison;
    var hasFilter = filter && Array.isArray(filter);
    var validateStatus = {
        attribute: hasFilter && validators.attribute(attribute) ? 'success' : 'error',
        operator: hasFilter && validators.operator(operator) ? 'success' : 'error',
        value: hasFilter && valueValidation.isValid ? 'success' : 'error'
    };
    function getAttributeCombo(filterIndex) {
        if (filterIndex === void 0) { filterIndex = 1; }
        var size = microUI ? 'small' : undefined;
        var val;
        if (filter) {
            val = filter[filterIndex];
        }
        return React.createElement(AttributeCombo_1.default, { size: size, value: val, internalDataDef: internalDataDef, onAttributeChange: onAttributeChange, attributeNameFilter: attributeNameFilter, attributeNameMappingFunction: attributeNameMappingFunction, validateStatus: validateStatus.attribute, hideAttributeType: hideAttributeType });
    }
    function getNumberField(filterIndex) {
        if (filterIndex === void 0) { filterIndex = 2; }
        var size = microUI ? 'small' : undefined;
        var val;
        if (filter) {
            val = filter[filterIndex];
        }
        return React.createElement(NumberFilterField_1.default, { size: size, value: val, onValueChange: function (newValue) { return onValueChange(newValue, filterIndex); }, validateStatus: validateStatus.value, help: valueValidationHelpString });
    }
    function getTextField(filterIndex) {
        if (filterIndex === void 0) { filterIndex = 2; }
        var size = microUI ? 'small' : undefined;
        var val;
        if (filter) {
            val = filter[filterIndex];
        }
        return React.createElement(TextFilterField_1.default, { size: size, value: val, internalDataDef: internalDataDef, selectedAttribute: attribute, onValueChange: onValueChange, validateStatus: validateStatus.value, help: valueValidationHelpString });
    }
    function getOperatorCombo(filterIndex) {
        if (filterIndex === void 0) { filterIndex = 0; }
        var size = microUI ? 'small' : undefined;
        var val;
        if (filter) {
            val = filter[filterIndex];
        }
        return React.createElement(OperatorCombo_1.default, { size: size, value: val, onOperatorChange: onOperatorChange, operators: allowedOperators, operatorNameMappingFunction: operatorNameMappingFunction, placeholder: operatorPlaceholderString, label: operatorLabel, validateStatus: validateStatus.operator, help: operatorValidationHelpString, operatorTitleMappingFunction: operatorTitleMappingFunction, showTitles: showOperatorTitles });
    }
    function getBooleanField(filterIndex) {
        if (filterIndex === void 0) { filterIndex = 2; }
        var size = microUI ? 'small' : undefined;
        var val;
        if (filter) {
            val = filter[filterIndex];
        }
        return React.createElement(BoolFilterField_1.default, { size: size, value: val, onValueChange: onValueChange });
    }
    var className = 'gs-comparison-filter-ui';
    if (microUI) {
        className += ' micro';
    }
    if (isNumberBetweenComparison) {
        return (React.createElement("div", { className: className },
            getAttributeCombo(),
            getNumberField(2),
            getOperatorCombo(),
            getNumberField(3)));
    }
    if (isNumberComparison) {
        return (React.createElement("div", { className: className },
            getAttributeCombo(),
            getOperatorCombo(),
            getNumberField()));
    }
    if (isBooleanComparison) {
        return (React.createElement("div", { className: className },
            getAttributeCombo(),
            getOperatorCombo(),
            getBooleanField()));
    }
    if (isTextComparison) {
        return (React.createElement("div", { className: className },
            getAttributeCombo(),
            getOperatorCombo(),
            getTextField()));
    }
    return (React.createElement("div", { className: className }, "Could not create ComparisonFilter."));
};
exports.ComparisonFilter = ComparisonFilter;
exports.default = exports.ComparisonFilter;
//# sourceMappingURL=ComparisonFilter.js.map