import * as React from 'react';
import { VectorData } from 'geostyler-data';
import './FilterEditorWindow.css';
import { Filter } from 'geostyler-style';
import { ComparisonFilterProps } from '../ComparisonFilter/ComparisonFilter';
import { GeoStylerLocale } from '../../../locale/locale';
export interface FilterEditorWindowDefaultProps {
    /** Locale object containing translated text snippets */
    locale: GeoStylerLocale['FilterEditorWindow'];
}
export interface FilterEditorWindowProps extends Partial<FilterEditorWindowDefaultProps> {
    /** The filter to edit */
    filter?: Filter;
    /** Layer metadata in the GeoStyler VectorData format */
    internalDataDef?: VectorData;
    /** Pixel ordinate of the x-axis */
    x?: number;
    /** Pixel ordinate of the y-axis */
    y?: number;
    /** The callback method that is triggered when the filter window closes */
    onClose?: () => void;
    /** The callback method that is triggered when the state changes */
    onFilterChange?: (filter: Filter) => void;
    /** Properties that will be passed to the comparison filters */
    filterUiProps?: Partial<ComparisonFilterProps>;
}
/**
 * Filter Editor Window UI.
 */
export declare const FilterEditorWindow: React.FC<FilterEditorWindowProps>;
declare const _default: {
    new (props: (FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<FilterEditorWindowProps & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
