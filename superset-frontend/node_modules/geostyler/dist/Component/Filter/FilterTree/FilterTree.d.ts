import * as React from 'react';
import { TreeProps } from 'antd';
import { Filter } from 'geostyler-style';
import './FilterTree.css';
import { Data as Data } from 'geostyler-data';
import { ComparisonFilterProps } from '../ComparisonFilter/ComparisonFilter';
import { GeoStylerLocale } from '../../../locale/locale';
export interface FilterTreeDefaultProps {
    /** The filter to edit */
    filter: Filter;
    /** Locale object containing translated text snippets */
    locale: GeoStylerLocale['FilterTree'];
}
export interface FilterTreeProps extends Partial<FilterTreeDefaultProps> {
    /** Reference to internal data object (holding schema and example features) */
    internalDataDef?: Data;
    /** Callback function for onFilterChange */
    onFilterChange?: ((compFilter: Filter) => void);
    /** Properties that will be passed to the Comparison Filters */
    filterUiProps?: Partial<ComparisonFilterProps>;
}
/**
 * UI for a ComparisonFilter consisting of
 *
 *   - A combo to select the attribute
 *   - A combo to select the operator
 *   - An input field for the value
 */
export declare const FilterTree: React.FC<FilterTreeProps & Partial<TreeProps>>;
declare const _default: {
    new (props: (FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<FilterTreeProps & Partial<TreeProps<import("antd").TreeDataNode>> & import("../../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
