import * as React from 'react';
import { Rule as GsRule, Symbolizer as GsSymbolizer, Filter as GsFilter, ScaleDenominator as GsScaleDenominator } from 'geostyler-style';
import { Data as GsData } from 'geostyler-data';
import { NameFieldProps } from '../NameField/NameField';
import { ComparisonFilterProps } from '../Filter/ComparisonFilter/ComparisonFilter';
import { IconLibrary } from '../Symbolizer/IconSelector/IconSelector';
import './Rule.css';
import { GeoStylerLocale } from '../../locale/locale';
import { SLDRendererAdditonalProps } from '../Renderer/SLDRenderer/SLDRenderer';
import { OlRendererProps } from '../Renderer/OlRenderer/OlRenderer';
interface RuleDefaultProps {
    /** Optional Rule object holding initial values for the component */
    rule: GsRule;
    /** The data projection of example features */
    dataProjection: string;
    /** The renderer to use */
    rendererType: 'SLD' | 'OpenLayers';
    /** Properties of the SLD renderer */
    sldRendererProps?: SLDRendererAdditonalProps;
    /** Properties of the OpenLayers renderer */
    oLRendererProps?: Partial<OlRendererProps>;
    /** Locale object containing translated text snippets */
    locale: GeoStylerLocale['Rule'];
}
export interface RuleProps extends Partial<RuleDefaultProps> {
    /** Reference to internal data object (holding schema and example features) */
    internalDataDef?: GsData | null;
    /** Callback for a changed Rule */
    onRuleChange?: (rule: GsRule, ruleBefore?: GsRule) => void;
    /** Callback for onClick of the RemoveButton */
    onRemove?: (rule: GsRule) => void;
    /** Callback for onClick of the AddSymbolizerButton */
    onAddSymbolizer?: (rule: GsRule) => void;
    /** Callback for onClick of the RemoveSymbolizerButton */
    onRemoveSymbolizer?: (rule: GsRule, symbolizer: GsSymbolizer, key: number) => void;
    /** Callback for onClick of the Renderer */
    onRendererClick?: (symbolizers: GsSymbolizer[], rule: GsRule) => void;
    /** Properties that will be passed to the Comparison Filters */
    filterUiProps?: Partial<ComparisonFilterProps>;
    /** Properties that will be passed to the RuleNameField */
    ruleNameProps?: Partial<NameFieldProps>;
    /** Properties that will be passed to the IconSymbolizer */
    iconLibraries?: IconLibrary[];
    /** Properties that will be passed to the RasterSymbolizer */
    colorRamps?: {
        [name: string]: string[];
    };
}
interface RuleState {
    editorVisible: boolean;
    rule: GsRule;
    symbolizerEditorVisible: boolean;
    storedFilter: GsFilter;
    storedScaleDenominator: GsScaleDenominator;
    scaleFieldChecked?: boolean;
    filterFieldChecked?: boolean;
}
/**
 * UI container representing a Rule
 * @deprecated This component is deprecated and will be removed with v10.
 */
export declare class Rule extends React.Component<RuleProps, RuleState> {
    static componentName: string;
    static defaultProps: RuleDefaultProps;
    constructor(props: RuleProps);
    static getDerivedStateFromProps(nextProps: RuleProps): Partial<RuleState>;
    shouldComponentUpdate(nextProps: RuleProps, nextState: RuleState): boolean;
    /**
     * Handles changing rule name
     */
    onNameChange: (name: string) => void;
    /**
     * Handles changing rule name
     */
    onScaleDenominatorChange: (scaleDenominator: any) => void;
    /**
     * Handles changing rule filter
     */
    onFilterChange: (filter: GsFilter) => void;
    /**
     * Handles changing rule symbolizer
     */
    onSymbolizersChange: (symbolizers: GsSymbolizer[]) => void;
    onScaleCheckChange: (e: any) => void;
    onFilterCheckChange: (e: any) => void;
    onRendererClick: () => void;
    onEditorWindowClose: () => void;
    onRemoveButtonClick: () => void;
    render(): JSX.Element;
}
declare const _default: {
    new (props: (RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<RuleProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
