"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
var React = __importStar(require("react"));
var antd_1 = require("antd");
var icons_1 = require("@ant-design/icons");
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
var NameField_1 = __importDefault(require("../NameField/NameField"));
var ScaleDenominator_1 = __importDefault(require("../ScaleDenominator/ScaleDenominator"));
var FieldSet_1 = __importDefault(require("../FieldSet/FieldSet"));
var FilterTree_1 = __importDefault(require("../Filter/FilterTree/FilterTree"));
var SymbolizerEditorWindow_1 = __importDefault(require("../Symbolizer/SymbolizerEditorWindow/SymbolizerEditorWindow"));
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var isEqual_1 = __importDefault(require("lodash/isEqual"));
require("./Rule.css");
var en_US_1 = __importDefault(require("../../locale/en_US"));
var Renderer_1 = __importDefault(require("../Renderer/Renderer/Renderer"));
/**
 * UI container representing a Rule
 * @deprecated This component is deprecated and will be removed with v10.
 */
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Handles changing rule name
         */
        _this.onNameChange = function (name) {
            var rule = (0, cloneDeep_1.default)(_this.state.rule);
            rule.name = name;
            if (_this.props.onRuleChange) {
                _this.props.onRuleChange(rule, _this.state.rule);
            }
            _this.setState({ rule: rule });
        };
        /**
         * Handles changing rule name
         */
        _this.onScaleDenominatorChange = function (scaleDenominator) {
            var rule = (0, cloneDeep_1.default)(_this.state.rule);
            rule.scaleDenominator = scaleDenominator;
            if (_this.props.onRuleChange) {
                _this.props.onRuleChange(rule, _this.state.rule);
            }
            _this.setState({ rule: rule });
        };
        /**
         * Handles changing rule filter
         */
        _this.onFilterChange = function (filter) {
            var rule = (0, cloneDeep_1.default)(_this.state.rule);
            rule.filter = filter;
            if (_this.props.onRuleChange) {
                _this.props.onRuleChange(rule, _this.state.rule);
            }
            _this.setState({ rule: rule });
        };
        /**
         * Handles changing rule symbolizer
         */
        _this.onSymbolizersChange = function (symbolizers) {
            var rule = (0, cloneDeep_1.default)(_this.state.rule);
            rule.symbolizers = symbolizers;
            if (_this.props.onRuleChange) {
                _this.props.onRuleChange(rule, _this.state.rule);
            }
            _this.setState({ rule: rule });
        };
        _this.onScaleCheckChange = function (e) {
            var checked = e.target.checked;
            var rule = (0, cloneDeep_1.default)(_this.state.rule);
            if (checked) {
                rule.scaleDenominator = _this.state.storedScaleDenominator;
            }
            else {
                _this.setState({
                    storedScaleDenominator: rule.scaleDenominator
                });
                rule.scaleDenominator = undefined;
            }
            if (_this.props.onRuleChange) {
                _this.props.onRuleChange(rule, _this.state.rule);
            }
            _this.setState({ rule: rule, scaleFieldChecked: checked });
        };
        _this.onFilterCheckChange = function (e) {
            var checked = e.target.checked;
            var rule = (0, cloneDeep_1.default)(_this.state.rule);
            if (checked) {
                rule.filter = _this.state.storedFilter;
            }
            else {
                _this.setState({
                    storedFilter: rule.filter
                });
                rule.filter = undefined;
            }
            if (_this.props.onRuleChange) {
                _this.props.onRuleChange(rule, _this.state.rule);
            }
            _this.setState({ rule: rule, filterFieldChecked: checked });
        };
        _this.onRendererClick = function () {
            var editorVisible = _this.state.editorVisible;
            _this.setState({
                editorVisible: !editorVisible
            });
        };
        _this.onEditorWindowClose = function () {
            _this.setState({
                editorVisible: false
            });
        };
        _this.onRemoveButtonClick = function () {
            var onRemove = _this.props.onRemove;
            var rule = _this.state.rule;
            if (onRemove && rule) {
                onRemove(rule);
            }
        };
        _this.state = {
            editorVisible: false,
            rule: Rule.defaultProps.rule,
            symbolizerEditorVisible: false,
            storedFilter: ['==', '', ''],
            storedScaleDenominator: {}
        };
        return _this;
    }
    Rule.getDerivedStateFromProps = function (nextProps) {
        var rule = nextProps.rule || Rule.defaultProps.rule;
        return {
            rule: rule,
            filterFieldChecked: rule.filter ?
                true : false,
            scaleFieldChecked: rule.scaleDenominator ?
                true : false,
            symbolizerEditorVisible: false
        };
    };
    Rule.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var diffProps = !(0, isEqual_1.default)(this.props, nextProps);
        var diffState = !(0, isEqual_1.default)(this.state, nextState);
        return diffProps || diffState;
    };
    Rule.prototype.render = function () {
        var _a = this.props, internalDataDef = _a.internalDataDef, oLRendererProps = _a.oLRendererProps, sldRendererProps = _a.sldRendererProps, locale = _a.locale, iconLibraries = _a.iconLibraries, colorRamps = _a.colorRamps;
        var _b = this.state, editorVisible = _b.editorVisible, rule = _b.rule, scaleFieldChecked = _b.scaleFieldChecked, filterFieldChecked = _b.filterFieldChecked;
        // cast the current filter object to pass over to ComparisonFilterUi
        var cmpFilter = rule.filter;
        // cast to GeoStyler compliant data model
        var gsData = internalDataDef;
        return (React.createElement("div", { className: "gs-rule" },
            React.createElement("div", { className: "gs-rule-fields" },
                React.createElement("div", { className: "gs-rule-left-fields" },
                    locale.nameFieldLabel,
                    React.createElement(NameField_1.default, __assign({ value: rule.name, onChange: this.onNameChange, placeholder: locale.nameFieldPlaceholder }, this.props.ruleNameProps)),
                    React.createElement(Renderer_1.default, __assign({ symbolizers: rule.symbolizers, onClick: this.onRendererClick }, sldRendererProps, oLRendererProps)),
                    !editorVisible ? null :
                        React.createElement(SymbolizerEditorWindow_1.default, { onClose: this.onEditorWindowClose, symbolizers: rule.symbolizers, onSymbolizersChange: this.onSymbolizersChange, iconLibraries: iconLibraries, colorRamps: colorRamps })),
                React.createElement("div", { className: "gs-rule-right-fields" },
                    React.createElement(FieldSet_1.default, { title: locale.scaleFieldTitle, onCheckChange: this.onScaleCheckChange, checked: scaleFieldChecked },
                        React.createElement(ScaleDenominator_1.default, { scaleDenominator: rule.scaleDenominator, onChange: this.onScaleDenominatorChange })),
                    React.createElement(FieldSet_1.default, { title: locale.filterFieldTitle, onCheckChange: this.onFilterCheckChange, checked: filterFieldChecked },
                        React.createElement(FilterTree_1.default, { internalDataDef: gsData, filter: cmpFilter, onFilterChange: this.onFilterChange })))),
            React.createElement(antd_1.Button, { className: "gs-rule-remove-button", danger: true, icon: React.createElement(icons_1.CloseCircleOutlined, null), size: "large", onClick: this.onRemoveButtonClick }, locale.removeRuleBtnText)));
    };
    Rule.componentName = 'Rule';
    Rule.defaultProps = {
        locale: en_US_1.default.Rule,
        rule: {
            name: 'My Style',
            symbolizers: [{
                    kind: 'Mark',
                    wellKnownName: 'circle'
                }]
        },
        dataProjection: 'EPSG:4326',
        rendererType: 'OpenLayers'
    };
    return Rule;
}(React.Component));
exports.Rule = Rule;
exports.default = (0, LocaleWrapper_1.localize)(Rule, Rule.componentName);
//# sourceMappingURL=Rule.js.map