import React from 'react';
import { Rule as GsRule } from 'geostyler-style';
import './Rules.css';
import { Data } from 'geostyler-data';
import { GeoStylerLocale } from '../../locale/locale';
interface RulesDefaultProps {
    /** Locale object containing translated text snippets */
    locale: GeoStylerLocale['Rules'];
    /** Display the number of features that match a rule */
    showAmount: boolean;
    /** Display the number of features that match more than one rule */
    showDuplicates: boolean;
    /** Enable classification */
    enableClassification: boolean;
}
export interface RulesProps extends Partial<RulesDefaultProps> {
    /** List of rules to display in rule table */
    rules: GsRule[];
    /** Reference to internal data object (holding schema and example features) */
    data?: Data;
    /** The callback function that is triggered when the rules change */
    onRulesChange?: (rules: GsRule[]) => void;
    /** The callback function that is triggered when the classification button was clicked */
    onClassificationClick?: () => void;
    /** The callback function that is triggered when the edit selection button was clicked */
    onEditSelectionClick?: (selectedIdxs: number[]) => void;
    /** The callback function that is triggered when the rule was clicked */
    onEditRuleClick?: (ruleId: number) => void;
}
export declare const Rules: React.FC<RulesProps>;
declare const _default: {
    new (props: (RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps) | Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps, context: any): {
        render(): JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<RulesProps & import("../LocaleWrapper/LocaleWrapper").LocaleProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextTypes: {
        locale: import("prop-types").Requireable<object>;
    };
    contextType?: React.Context<any>;
};
export default _default;
