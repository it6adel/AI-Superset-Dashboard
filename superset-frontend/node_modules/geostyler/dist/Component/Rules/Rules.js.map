{"version":3,"file":"Rules.js","sourceRoot":"","sources":["../../../src/Component/Rules/Rules.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2021-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { ReactNode, useState } from 'react';\n\nimport {\n  Rule as GsRule,\n} from 'geostyler-style';\n\nimport { closestCenter, DndContext } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\n\nimport { localize } from '../LocaleWrapper/LocaleWrapper';\n\nimport './Rules.less';\nimport FilterUtil, { CountResult } from '../../Util/FilterUtil';\nimport DataUtil from '../../Util/DataUtil';\nimport { Data } from 'geostyler-data';\nimport { Button, Switch, Divider } from 'antd';\n\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _uniqueId from 'lodash/uniqueId';\nimport Selectable from '../Selectable/Selectable';\nimport { RuleCard } from '../RuleCard/RuleCard';\nimport { GeoStylerLocale } from '../../locale/locale';\nimport en_US from '../../locale/en_US';\nimport { useDragDropSensors } from '../../hook/UseDragDropSensors';\nimport { SortableItem } from '../SortableItem/SortableItem';\nimport { RemovableItem } from '../RemovableItem/RemovableItem';\n\n// default props\ninterface RulesDefaultProps {\n  /** Locale object containing translated text snippets */\n  locale: GeoStylerLocale['Rules'];\n  /** Display the number of features that match a rule */\n  showAmount: boolean;\n  /** Display the number of features that match more than one rule */\n  showDuplicates: boolean;\n  /** Enable classification */\n  enableClassification: boolean;\n}\n\n// non default props\nexport interface RulesProps extends Partial<RulesDefaultProps> {\n  /** List of rules to display in rule table */\n  rules: GsRule[];\n  /** Reference to internal data object (holding schema and example features) */\n  data?: Data;\n  /** The callback function that is triggered when the rules change */\n  onRulesChange?: (rules: GsRule[]) => void;\n  /** The callback function that is triggered when the classification button was clicked */\n  onClassificationClick?: () => void;\n  /** The callback function that is triggered when the edit selection button was clicked */\n  onEditSelectionClick?: (selectedIdxs: number[]) => void;\n  /** The callback function that is triggered when the rule was clicked */\n  onEditRuleClick?: (ruleId: number) => void;\n}\n\nexport const Rules: React.FC<RulesProps> = ({\n  locale = en_US.Rules,\n  data,\n  rules,\n  onRulesChange,\n  onClassificationClick,\n  onEditSelectionClick,\n  onEditRuleClick,\n  enableClassification = true\n}) => {\n  const [multiEditActive, setMultiEditActive] = useState<boolean>(false);\n  const [selectedRules, setSelectedRules] = useState<number[]>([]);\n  const toggleMultiEdit = () => {\n    setMultiEditActive(!multiEditActive);\n    setSelectedRules([]);\n  };\n\n  const addRule = () => {\n    const defaultRule: GsRule = {\n      name: locale.defaultRuleTitle,\n      symbolizers: []\n    };\n    const rulesClone = _cloneDeep(rules);\n    rulesClone.push(defaultRule);\n    if (onRulesChange) {\n      onRulesChange(rulesClone);\n    }\n  };\n\n  const removeSelectedRules = () => {\n    if (onRulesChange) {\n      const rulesClone = _cloneDeep(rules)\n        .filter((rule: GsRule, idx: number) => {\n          return !selectedRules.includes(idx);\n        });\n      onRulesChange(rulesClone);\n    }\n    setSelectedRules([]);\n    setMultiEditActive(false);\n  };\n\n  const cloneSelectedRules = () => {\n    if (onRulesChange) {\n      let rulesClone = _cloneDeep(rules);\n      selectedRules.forEach((selectedIdx: number) => {\n        rulesClone.push(_cloneDeep(rulesClone[selectedIdx]));\n      });\n\n      onRulesChange(rulesClone);\n    }\n  };\n\n  const editSelectedRules = () => {\n    if (onEditSelectionClick) {\n      onEditSelectionClick(selectedRules);\n    }\n    setSelectedRules([]);\n    setMultiEditActive(false);\n  };\n\n  const classificationClick = () => {\n    if (onClassificationClick) {\n      onClassificationClick();\n    }\n  };\n\n  const onSelectionChange = (selectedIdxs: number[]) => {\n    setSelectedRules([...selectedIdxs]);\n  };\n\n  const editRule = (ruleId: number) => {\n    if (onEditRuleClick) {\n      onEditRuleClick(ruleId);\n    }\n  };\n\n  const removeRule = (ruleIdx: number) => {\n    if (onRulesChange) {\n      const rulesClone = _cloneDeep(rules);\n      rulesClone.splice(ruleIdx, 1);\n      onRulesChange(rulesClone);\n    }\n  };\n\n  let countAndDuplicates: CountResult;\n  if (data && DataUtil.isVector(data)) {\n    countAndDuplicates = FilterUtil.calculateCountAndDuplicates(rules, data);\n  }\n\n  const rulesCards = rules.map((rule: GsRule, idx: number) => {\n    let ruleDuplicates;\n    if (countAndDuplicates) {\n      ruleDuplicates = countAndDuplicates.duplicates[idx];\n    }\n    return (\n      <RuleCard\n        key={_uniqueId('rule')}\n        rule={rule}\n        data={data}\n        duplicates={ruleDuplicates}\n        onClick={() => {\n          if (!multiEditActive) {\n            editRule(idx);\n          }\n        }}\n      />\n    );\n  });\n\n  const removableRulesCards = rulesCards.map((ruleCard, idx) => {\n    return (\n      <RemovableItem\n        key={_uniqueId('removableRule')}\n        onRemoveClick={() => {\n          removeRule(idx);\n        }}\n      >\n        { ruleCard }\n      </RemovableItem>\n    );\n  });\n\n  const sortableAndRemovableRulesCards = removableRulesCards.map((ruleCard, idx) => {\n    const key = _uniqueId('rule');\n    // id must be truthy, so we have to increment the index by 1\n    const id = idx + 1;\n\n    return (\n      <SortableItem\n        key={key}\n        id={id}\n      >\n        { ruleCard }\n      </SortableItem>\n    );\n  });\n\n  let defaultActions = [\n    <Button\n      className=\"gs-add-rule-button\"\n      onClick={addRule}\n      key={0}\n    >\n      {locale.addRule}\n    </Button>\n  ];\n\n  // TODO: Classification button should only be available if data is VectorData\n  if (enableClassification) {\n    defaultActions = [\n      ...defaultActions,\n      <Button\n        className=\"gs-classification-button\"\n        onClick={classificationClick}\n        key={1}\n      >\n        {locale.classification}\n      </Button>\n    ];\n  }\n\n  const multiEditActions: ReactNode[] = [\n    <Button\n      className=\"gs-remove-rules-button\"\n      onClick={removeSelectedRules}\n      key={0}\n    >\n      {locale.remove}\n    </Button>,\n    <Button\n      className=\"gs-clone-rules-button\"\n      onClick={cloneSelectedRules}\n      key={1}\n    >\n      {locale.clone}\n    </Button>,\n    <Button\n      className=\"gs-edit-rules-button\"\n      onClick={editSelectedRules}\n      key={2}\n    >\n      {locale.edit}\n    </Button>\n  ];\n\n  const onDragEnd = (evt: any) => {\n    const { active, over } = evt;\n    if (active.id !== over.id) {\n      const newOrder = arrayMove([...rules], active.id - 1, over.id - 1);\n      onRulesChange(newOrder);\n    }\n  };\n\n  const sensors = useDragDropSensors();\n\n  return (\n    <div className='gs-rules'>\n      <div className='gs-rules-header'>\n        <h2>{locale.rulesTitle}</h2>\n        <Switch\n          className=\"gs-multi-select-toggle\"\n          onChange={toggleMultiEdit}\n          checked={multiEditActive}\n          checkedChildren={locale.multiEdit}\n          unCheckedChildren={locale.multiEdit}\n        />\n      </div>\n      <Divider />\n      <div className='gs-rules-list'>\n        {\n          multiEditActive ? (\n            <Selectable\n              selection={selectedRules}\n              onSelectionChange={onSelectionChange}\n            >\n              { rulesCards }\n            </Selectable>\n          ) : (\n            <DndContext\n              onDragEnd={onDragEnd}\n              sensors={sensors}\n              collisionDetection={closestCenter}\n            >\n              <SortableContext\n                items={rules.map((r, idx) => idx + 1)}\n              >\n                { sortableAndRemovableRulesCards }\n              </SortableContext>\n            </DndContext>\n          )\n        }\n      </div>\n      <Divider />\n      <div className='gs-rules-actions'>\n        {\n          multiEditActive ? multiEditActions : defaultActions\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default localize(Rules, 'Rules');\n"]}