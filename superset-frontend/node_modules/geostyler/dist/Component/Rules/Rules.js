"use strict";
/* eslint-disable camelcase */
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2021-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rules = void 0;
var react_1 = __importStar(require("react"));
var core_1 = require("@dnd-kit/core");
var sortable_1 = require("@dnd-kit/sortable");
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
require("./Rules.css");
var FilterUtil_1 = __importDefault(require("../../Util/FilterUtil"));
var DataUtil_1 = __importDefault(require("../../Util/DataUtil"));
var antd_1 = require("antd");
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var uniqueId_1 = __importDefault(require("lodash/uniqueId"));
var Selectable_1 = __importDefault(require("../Selectable/Selectable"));
var RuleCard_1 = require("../RuleCard/RuleCard");
var en_US_1 = __importDefault(require("../../locale/en_US"));
var UseDragDropSensors_1 = require("../../hook/UseDragDropSensors");
var SortableItem_1 = require("../SortableItem/SortableItem");
var RemovableItem_1 = require("../RemovableItem/RemovableItem");
var Rules = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.Rules : _b, data = _a.data, rules = _a.rules, onRulesChange = _a.onRulesChange, onClassificationClick = _a.onClassificationClick, onEditSelectionClick = _a.onEditSelectionClick, onEditRuleClick = _a.onEditRuleClick, _c = _a.enableClassification, enableClassification = _c === void 0 ? true : _c;
    var _d = (0, react_1.useState)(false), multiEditActive = _d[0], setMultiEditActive = _d[1];
    var _e = (0, react_1.useState)([]), selectedRules = _e[0], setSelectedRules = _e[1];
    var toggleMultiEdit = function () {
        setMultiEditActive(!multiEditActive);
        setSelectedRules([]);
    };
    var addRule = function () {
        var defaultRule = {
            name: locale.defaultRuleTitle,
            symbolizers: []
        };
        var rulesClone = (0, cloneDeep_1.default)(rules);
        rulesClone.push(defaultRule);
        if (onRulesChange) {
            onRulesChange(rulesClone);
        }
    };
    var removeSelectedRules = function () {
        if (onRulesChange) {
            var rulesClone = (0, cloneDeep_1.default)(rules)
                .filter(function (rule, idx) {
                return !selectedRules.includes(idx);
            });
            onRulesChange(rulesClone);
        }
        setSelectedRules([]);
        setMultiEditActive(false);
    };
    var cloneSelectedRules = function () {
        if (onRulesChange) {
            var rulesClone_1 = (0, cloneDeep_1.default)(rules);
            selectedRules.forEach(function (selectedIdx) {
                rulesClone_1.push((0, cloneDeep_1.default)(rulesClone_1[selectedIdx]));
            });
            onRulesChange(rulesClone_1);
        }
    };
    var editSelectedRules = function () {
        if (onEditSelectionClick) {
            onEditSelectionClick(selectedRules);
        }
        setSelectedRules([]);
        setMultiEditActive(false);
    };
    var classificationClick = function () {
        if (onClassificationClick) {
            onClassificationClick();
        }
    };
    var onSelectionChange = function (selectedIdxs) {
        setSelectedRules(__spreadArray([], selectedIdxs, true));
    };
    var editRule = function (ruleId) {
        if (onEditRuleClick) {
            onEditRuleClick(ruleId);
        }
    };
    var removeRule = function (ruleIdx) {
        if (onRulesChange) {
            var rulesClone = (0, cloneDeep_1.default)(rules);
            rulesClone.splice(ruleIdx, 1);
            onRulesChange(rulesClone);
        }
    };
    var countAndDuplicates;
    if (data && DataUtil_1.default.isVector(data)) {
        countAndDuplicates = FilterUtil_1.default.calculateCountAndDuplicates(rules, data);
    }
    var rulesCards = rules.map(function (rule, idx) {
        var ruleDuplicates;
        if (countAndDuplicates) {
            ruleDuplicates = countAndDuplicates.duplicates[idx];
        }
        return (react_1.default.createElement(RuleCard_1.RuleCard, { key: (0, uniqueId_1.default)('rule'), rule: rule, data: data, duplicates: ruleDuplicates, onClick: function () {
                if (!multiEditActive) {
                    editRule(idx);
                }
            } }));
    });
    var removableRulesCards = rulesCards.map(function (ruleCard, idx) {
        return (react_1.default.createElement(RemovableItem_1.RemovableItem, { key: (0, uniqueId_1.default)('removableRule'), onRemoveClick: function () {
                removeRule(idx);
            } }, ruleCard));
    });
    var sortableAndRemovableRulesCards = removableRulesCards.map(function (ruleCard, idx) {
        var key = (0, uniqueId_1.default)('rule');
        // id must be truthy, so we have to increment the index by 1
        var id = idx + 1;
        return (react_1.default.createElement(SortableItem_1.SortableItem, { key: key, id: id }, ruleCard));
    });
    var defaultActions = [
        react_1.default.createElement(antd_1.Button, { className: "gs-add-rule-button", onClick: addRule, key: 0 }, locale.addRule)
    ];
    // TODO: Classification button should only be available if data is VectorData
    if (enableClassification) {
        defaultActions = __spreadArray(__spreadArray([], defaultActions, true), [
            react_1.default.createElement(antd_1.Button, { className: "gs-classification-button", onClick: classificationClick, key: 1 }, locale.classification)
        ], false);
    }
    var multiEditActions = [
        react_1.default.createElement(antd_1.Button, { className: "gs-remove-rules-button", onClick: removeSelectedRules, key: 0 }, locale.remove),
        react_1.default.createElement(antd_1.Button, { className: "gs-clone-rules-button", onClick: cloneSelectedRules, key: 1 }, locale.clone),
        react_1.default.createElement(antd_1.Button, { className: "gs-edit-rules-button", onClick: editSelectedRules, key: 2 }, locale.edit)
    ];
    var onDragEnd = function (evt) {
        var active = evt.active, over = evt.over;
        if (active.id !== over.id) {
            var newOrder = (0, sortable_1.arrayMove)(__spreadArray([], rules, true), active.id - 1, over.id - 1);
            onRulesChange(newOrder);
        }
    };
    var sensors = (0, UseDragDropSensors_1.useDragDropSensors)();
    return (react_1.default.createElement("div", { className: 'gs-rules' },
        react_1.default.createElement("div", { className: 'gs-rules-header' },
            react_1.default.createElement("h2", null, locale.rulesTitle),
            react_1.default.createElement(antd_1.Switch, { className: "gs-multi-select-toggle", onChange: toggleMultiEdit, checked: multiEditActive, checkedChildren: locale.multiEdit, unCheckedChildren: locale.multiEdit })),
        react_1.default.createElement(antd_1.Divider, null),
        react_1.default.createElement("div", { className: 'gs-rules-list' }, multiEditActive ? (react_1.default.createElement(Selectable_1.default, { selection: selectedRules, onSelectionChange: onSelectionChange }, rulesCards)) : (react_1.default.createElement(core_1.DndContext, { onDragEnd: onDragEnd, sensors: sensors, collisionDetection: core_1.closestCenter },
            react_1.default.createElement(sortable_1.SortableContext, { items: rules.map(function (r, idx) { return idx + 1; }) }, sortableAndRemovableRulesCards)))),
        react_1.default.createElement(antd_1.Divider, null),
        react_1.default.createElement("div", { className: 'gs-rules-actions' }, multiEditActive ? multiEditActions : defaultActions)));
};
exports.Rules = Rules;
exports.default = (0, LocaleWrapper_1.localize)(exports.Rules, 'Rules');
//# sourceMappingURL=Rules.js.map