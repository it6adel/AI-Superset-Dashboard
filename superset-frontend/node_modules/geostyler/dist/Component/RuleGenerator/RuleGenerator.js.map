{"version":3,"file":"RuleGenerator.js","sourceRoot":"","sources":["../../../src/Component/RuleGenerator/RuleGenerator.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Released under the BSD 2-Clause License\n *\n * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport React, { useState } from 'react';\nimport { Rule, SymbolizerKind, WellKnownName } from 'geostyler-style';\nimport { VectorData } from 'geostyler-data';\nimport { Radio, Form, Button, InputNumber, Tooltip } from 'antd';\nimport en_US from '../../locale/en_US';\nimport AttributeCombo from '../Filter/AttributeCombo/AttributeCombo';\n\nimport './RuleGenerator.less';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport RuleGeneratorUtil from '../../Util/RuleGeneratorUtil';\nimport KindField from '../Symbolizer/Field/KindField/KindField';\nimport WellKnownNameField from '../Symbolizer/Field/WellKnownNameField/WellKnownNameField';\nimport { localize } from '../LocaleWrapper/LocaleWrapper';\nimport { brewer, InterpolationMode } from 'chroma-js';\nimport ColorRampCombo from './ColorRampCombo/ColorRampCombo';\nimport ColorSpaceCombo from './ColorSpaceCombo/ColorSpaceCombo';\nimport ColorsPreview from './ColorsPreview/ColorsPreview';\nimport ClassificationCombo, { ClassificationMethod } from './ClassificationCombo/ClassificationCombo';\nimport _get from 'lodash/get';\nimport { PlusSquareOutlined } from '@ant-design/icons';\nimport { GeoStylerLocale } from '../../locale/locale';\n\nexport type LevelOfMeasurement = 'nominal' | 'ordinal' | 'cardinal';\n\n// default props\ninterface RuleGeneratorDefaultProps {\n  locale: GeoStylerLocale['RuleGenerator'];\n  /** List of provided color ramps */\n  colorRamps: {\n    [name: string]: string[];\n  };\n  /** List of color spaces to use */\n  colorSpaces: (InterpolationMode)[];\n}\n\n// non default props\nexport interface RuleGeneratorProps extends Partial<RuleGeneratorDefaultProps> {\n  internalDataDef: VectorData;\n  onRulesChange?: (rules: Rule[]) => void;\n}\nconst COMPONENTNAME = 'RuleGenerator';\n\nexport const RuleGenerator: React.FC<RuleGeneratorProps> = ({\n  locale = en_US.RuleGenerator,\n  internalDataDef,\n  onRulesChange,\n  colorSpaces = ['hsl', 'hsv', 'hsi', 'lab', 'lch', 'hcl', 'rgb'], // rgba, cmyk and gl crash\n  colorRamps = {\n    GeoStyler: ['#E7000E', '#F48E00', '#FFED00', '#00943D', '#272C82', '#611E82'],\n    GreenRed: ['#00FF00', '#FF0000'],\n    ...brewer\n  }\n}) => {\n\n  const minNrClasses = 2;\n\n  const [symbolizerKind, setSymbolizerKind] = useState<SymbolizerKind>(\n    RuleGeneratorUtil.guessSymbolizerFromData(internalDataDef)\n  );\n  const [wellKnownName, setWellKnownName] = useState<WellKnownName>('circle');\n  const [colorRamp, setColorRamp] = useState<string>(colorRamps && colorRamps.GeoStyler ? 'GeoStyler' : undefined);\n  const [colorSpace, setColorSpace] = useState<InterpolationMode>('hsl');\n  const [numberOfRules, setNumberOfRules] = useState<number>(2);\n  const [distinctValues, setDistinctValues] = useState<any[]>();\n  const [hasError, setHasError] = useState<boolean>();\n  const [attributeType, setAttributeType] = useState<string>();\n  const [attributeName, setAttributeName] = useState<string>();\n  const [classificationMethod, setClassificationMethod] = useState<ClassificationMethod>();\n  const [levelOfMeasurement, setLevelOfMeasurement] = useState<LevelOfMeasurement>();\n\n  const onAttributeChange = (newAttributeName: string) => {\n    try {\n      const newAttributeType = _get(internalDataDef, `schema.properties[${newAttributeName}].type`);\n      let newClassficationMethod = classificationMethod;\n      if (newAttributeType === 'string' && classificationMethod === 'kmeans') {\n        newClassficationMethod = undefined;\n      }\n\n      const newDistinctValues = RuleGeneratorUtil.getDistinctValues(internalDataDef, newAttributeName) || [];\n      setAttributeName(newAttributeName);\n      setAttributeType(newAttributeType);\n      setDistinctValues(newDistinctValues);\n      setLevelOfMeasurement(newAttributeType === 'string' ? 'nominal' : 'cardinal');\n      setClassificationMethod(newClassficationMethod);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const onLevelOfMeasurementChange = (event: RadioChangeEvent) => {\n    setLevelOfMeasurement(event.target.value);\n  };\n\n  const onAllDistinctClicked = () => {\n    setNumberOfRules(distinctValues.length);\n  };\n\n  const onSymbolizerKindChange = (newSymbolizerKind: SymbolizerKind) => {\n    let newWellKnownName: WellKnownName;\n\n    if (newSymbolizerKind === 'Mark' && !wellKnownName) {\n      newWellKnownName = 'circle';\n    } else {\n      newWellKnownName = undefined;\n    }\n\n    setWellKnownName(newWellKnownName);\n    setSymbolizerKind(newSymbolizerKind);\n  };\n\n  const onGenerateClick = () => {\n    try {\n      const rules = RuleGeneratorUtil.generateRules({\n        attributeName,\n        classificationMethod,\n        colors: colorRamps[colorRamp],\n        data: internalDataDef,\n        levelOfMeasurement,\n        numberOfRules,\n        symbolizerKind,\n        wellKnownName\n      });\n\n      if (classificationMethod === 'kmeans') {\n        setNumberOfRules(rules.length);\n      }\n\n      if (onRulesChange) {\n        onRulesChange(rules);\n      }\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  if (hasError) {\n    return <h1>An error occurred in the RuleGenerator UI.</h1>;\n  }\n\n  const previewColors = RuleGeneratorUtil.generateColors(colorRamps[colorRamp], numberOfRules, colorSpace);\n\n  return (\n    <div className=\"gs-rule-generator\" >\n      <Form layout=\"vertical\">\n        <AttributeCombo\n          value={attributeName}\n          internalDataDef={internalDataDef}\n          onAttributeChange={onAttributeChange}\n          validateStatus={attributeName ? 'success' : 'warning'}\n        />\n        <Form.Item\n          label={locale.levelOfMeasurement}\n        >\n          <Radio.Group\n            onChange={onLevelOfMeasurementChange}\n            value={levelOfMeasurement}\n            buttonStyle=\"solid\"\n          >\n            <Radio.Button\n              value=\"nominal\"\n            >\n              {locale.nominal}\n            </Radio.Button>\n            <Radio.Button\n              value=\"cardinal\"\n              disabled={attributeType === 'string'}\n            >\n              {locale.cardinal}\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        {\n          levelOfMeasurement !== 'cardinal' ? null :\n            <Form.Item\n              label={locale.classification}\n            >\n              <ClassificationCombo\n                classification={classificationMethod}\n                onChange={setClassificationMethod}\n              />\n            </Form.Item>\n        }\n        <Form.Item\n          label={locale.numberOfRules}\n          validateStatus={\n            classificationMethod === 'kmeans'\n              ? 'warning'\n              : numberOfRules < minNrClasses\n                ? 'error'\n                : undefined\n          }\n          help={classificationMethod === 'kmeans'\n            ? locale.numberOfRulesViaKmeans\n            : numberOfRules < minNrClasses\n            // eslint-disable-next-line max-len\n              ? `${locale.colorRampMinClassesWarningPre} ${minNrClasses} ${locale.colorRampMinClassesWarningPost}`\n              : undefined\n          }\n        >\n          <div>\n            <InputNumber<number>\n              min={minNrClasses}\n              max={100}\n              value={numberOfRules}\n              onChange={setNumberOfRules}\n            />\n            {\n              levelOfMeasurement === 'nominal' && distinctValues.length > 0 &&\n                <Tooltip title={locale.allDistinctValues}>\n                  <Button\n                    className=\"all-distinct-values-button\"\n                    icon={<PlusSquareOutlined />}\n                    onClick={onAllDistinctClicked}\n                  />\n                </Tooltip>\n            }\n          </div>\n        </Form.Item>\n        <fieldset>\n          <legend>{locale.symbolizer}</legend>\n          <Form.Item>\n            <KindField\n              kind={symbolizerKind}\n              symbolizerKinds={[\n                'Fill',\n                'Mark',\n                'Line'\n              ]}\n              onChange={onSymbolizerKindChange}\n            />\n          </Form.Item>\n          { symbolizerKind !== 'Mark' ? null :\n            <Form.Item>\n              <WellKnownNameField\n                wellKnownName={wellKnownName}\n                onChange={setWellKnownName}\n              />\n            </Form.Item>\n          }\n          <Form.Item\n            label={locale.colorRamp}\n            help={numberOfRules < minNrClasses ?\n              `${locale.colorRampMinClassesWarningPre} ${minNrClasses} ${locale.colorRampMinClassesWarningPost}`\n              : undefined}\n          >\n            <ColorRampCombo\n              colorRamps={colorRamps}\n              colorRamp={colorRamp}\n              onChange={setColorRamp}\n            />\n          </Form.Item>\n          {colorSpaces.length > 0 ?\n            <Form.Item\n              label={locale.colorSpace}\n            >\n              <ColorSpaceCombo\n                colorSpace={colorSpace}\n                colorSpaces={colorSpaces}\n                onChange={setColorSpace}\n              />\n            </Form.Item>\n            : null}\n          <Form.Item\n            label={locale.preview}\n          >\n            <ColorsPreview\n              colors={previewColors}\n            />\n          </Form.Item>\n        </fieldset>\n        <Form.Item>\n          <Button\n            className=\"gs-rule-generator-submit-button\"\n            type=\"primary\"\n            onClick={onGenerateClick}\n            disabled={numberOfRules < minNrClasses || !attributeName}\n          >\n            {locale.generateButtonText}\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default localize(RuleGenerator, COMPONENTNAME);\n"]}