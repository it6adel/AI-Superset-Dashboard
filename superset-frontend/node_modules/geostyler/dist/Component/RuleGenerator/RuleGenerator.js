"use strict";
/* Released under the BSD 2-Clause License
 *
 * Copyright Â© 2018-present, terrestris GmbH & Co. KG and GeoStyler contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleGenerator = void 0;
var react_1 = __importStar(require("react"));
var antd_1 = require("antd");
var en_US_1 = __importDefault(require("../../locale/en_US"));
var AttributeCombo_1 = __importDefault(require("../Filter/AttributeCombo/AttributeCombo"));
require("./RuleGenerator.css");
var RuleGeneratorUtil_1 = __importDefault(require("../../Util/RuleGeneratorUtil"));
var KindField_1 = __importDefault(require("../Symbolizer/Field/KindField/KindField"));
var WellKnownNameField_1 = __importDefault(require("../Symbolizer/Field/WellKnownNameField/WellKnownNameField"));
var LocaleWrapper_1 = require("../LocaleWrapper/LocaleWrapper");
var chroma_js_1 = require("chroma-js");
var ColorRampCombo_1 = __importDefault(require("./ColorRampCombo/ColorRampCombo"));
var ColorSpaceCombo_1 = __importDefault(require("./ColorSpaceCombo/ColorSpaceCombo"));
var ColorsPreview_1 = __importDefault(require("./ColorsPreview/ColorsPreview"));
var ClassificationCombo_1 = __importDefault(require("./ClassificationCombo/ClassificationCombo"));
var get_1 = __importDefault(require("lodash/get"));
var icons_1 = require("@ant-design/icons");
var COMPONENTNAME = 'RuleGenerator';
var RuleGenerator = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? en_US_1.default.RuleGenerator : _b, internalDataDef = _a.internalDataDef, onRulesChange = _a.onRulesChange, _c = _a.colorSpaces, colorSpaces = _c === void 0 ? ['hsl', 'hsv', 'hsi', 'lab', 'lch', 'hcl', 'rgb'] : _c, // rgba, cmyk and gl crash
    _d = _a.colorRamps, // rgba, cmyk and gl crash
    colorRamps = _d === void 0 ? __assign({ GeoStyler: ['#E7000E', '#F48E00', '#FFED00', '#00943D', '#272C82', '#611E82'], GreenRed: ['#00FF00', '#FF0000'] }, chroma_js_1.brewer) : _d;
    var minNrClasses = 2;
    var _e = (0, react_1.useState)(RuleGeneratorUtil_1.default.guessSymbolizerFromData(internalDataDef)), symbolizerKind = _e[0], setSymbolizerKind = _e[1];
    var _f = (0, react_1.useState)('circle'), wellKnownName = _f[0], setWellKnownName = _f[1];
    var _g = (0, react_1.useState)(colorRamps && colorRamps.GeoStyler ? 'GeoStyler' : undefined), colorRamp = _g[0], setColorRamp = _g[1];
    var _h = (0, react_1.useState)('hsl'), colorSpace = _h[0], setColorSpace = _h[1];
    var _j = (0, react_1.useState)(2), numberOfRules = _j[0], setNumberOfRules = _j[1];
    var _k = (0, react_1.useState)(), distinctValues = _k[0], setDistinctValues = _k[1];
    var _l = (0, react_1.useState)(), hasError = _l[0], setHasError = _l[1];
    var _m = (0, react_1.useState)(), attributeType = _m[0], setAttributeType = _m[1];
    var _o = (0, react_1.useState)(), attributeName = _o[0], setAttributeName = _o[1];
    var _p = (0, react_1.useState)(), classificationMethod = _p[0], setClassificationMethod = _p[1];
    var _q = (0, react_1.useState)(), levelOfMeasurement = _q[0], setLevelOfMeasurement = _q[1];
    var onAttributeChange = function (newAttributeName) {
        try {
            var newAttributeType = (0, get_1.default)(internalDataDef, "schema.properties[".concat(newAttributeName, "].type"));
            var newClassficationMethod = classificationMethod;
            if (newAttributeType === 'string' && classificationMethod === 'kmeans') {
                newClassficationMethod = undefined;
            }
            var newDistinctValues = RuleGeneratorUtil_1.default.getDistinctValues(internalDataDef, newAttributeName) || [];
            setAttributeName(newAttributeName);
            setAttributeType(newAttributeType);
            setDistinctValues(newDistinctValues);
            setLevelOfMeasurement(newAttributeType === 'string' ? 'nominal' : 'cardinal');
            setClassificationMethod(newClassficationMethod);
        }
        catch (error) {
            setHasError(true);
        }
    };
    var onLevelOfMeasurementChange = function (event) {
        setLevelOfMeasurement(event.target.value);
    };
    var onAllDistinctClicked = function () {
        setNumberOfRules(distinctValues.length);
    };
    var onSymbolizerKindChange = function (newSymbolizerKind) {
        var newWellKnownName;
        if (newSymbolizerKind === 'Mark' && !wellKnownName) {
            newWellKnownName = 'circle';
        }
        else {
            newWellKnownName = undefined;
        }
        setWellKnownName(newWellKnownName);
        setSymbolizerKind(newSymbolizerKind);
    };
    var onGenerateClick = function () {
        try {
            var rules = RuleGeneratorUtil_1.default.generateRules({
                attributeName: attributeName,
                classificationMethod: classificationMethod,
                colors: colorRamps[colorRamp],
                data: internalDataDef,
                levelOfMeasurement: levelOfMeasurement,
                numberOfRules: numberOfRules,
                symbolizerKind: symbolizerKind,
                wellKnownName: wellKnownName
            });
            if (classificationMethod === 'kmeans') {
                setNumberOfRules(rules.length);
            }
            if (onRulesChange) {
                onRulesChange(rules);
            }
        }
        catch (error) {
            setHasError(true);
        }
    };
    if (hasError) {
        return react_1.default.createElement("h1", null, "An error occurred in the RuleGenerator UI.");
    }
    var previewColors = RuleGeneratorUtil_1.default.generateColors(colorRamps[colorRamp], numberOfRules, colorSpace);
    return (react_1.default.createElement("div", { className: "gs-rule-generator" },
        react_1.default.createElement(antd_1.Form, { layout: "vertical" },
            react_1.default.createElement(AttributeCombo_1.default, { value: attributeName, internalDataDef: internalDataDef, onAttributeChange: onAttributeChange, validateStatus: attributeName ? 'success' : 'warning' }),
            react_1.default.createElement(antd_1.Form.Item, { label: locale.levelOfMeasurement },
                react_1.default.createElement(antd_1.Radio.Group, { onChange: onLevelOfMeasurementChange, value: levelOfMeasurement, buttonStyle: "solid" },
                    react_1.default.createElement(antd_1.Radio.Button, { value: "nominal" }, locale.nominal),
                    react_1.default.createElement(antd_1.Radio.Button, { value: "cardinal", disabled: attributeType === 'string' }, locale.cardinal))),
            levelOfMeasurement !== 'cardinal' ? null :
                react_1.default.createElement(antd_1.Form.Item, { label: locale.classification },
                    react_1.default.createElement(ClassificationCombo_1.default, { classification: classificationMethod, onChange: setClassificationMethod })),
            react_1.default.createElement(antd_1.Form.Item, { label: locale.numberOfRules, validateStatus: classificationMethod === 'kmeans'
                    ? 'warning'
                    : numberOfRules < minNrClasses
                        ? 'error'
                        : undefined, help: classificationMethod === 'kmeans'
                    ? locale.numberOfRulesViaKmeans
                    : numberOfRules < minNrClasses
                        // eslint-disable-next-line max-len
                        ? "".concat(locale.colorRampMinClassesWarningPre, " ").concat(minNrClasses, " ").concat(locale.colorRampMinClassesWarningPost)
                        : undefined },
                react_1.default.createElement("div", null,
                    react_1.default.createElement(antd_1.InputNumber, { min: minNrClasses, max: 100, value: numberOfRules, onChange: setNumberOfRules }),
                    levelOfMeasurement === 'nominal' && distinctValues.length > 0 &&
                        react_1.default.createElement(antd_1.Tooltip, { title: locale.allDistinctValues },
                            react_1.default.createElement(antd_1.Button, { className: "all-distinct-values-button", icon: react_1.default.createElement(icons_1.PlusSquareOutlined, null), onClick: onAllDistinctClicked })))),
            react_1.default.createElement("fieldset", null,
                react_1.default.createElement("legend", null, locale.symbolizer),
                react_1.default.createElement(antd_1.Form.Item, null,
                    react_1.default.createElement(KindField_1.default, { kind: symbolizerKind, symbolizerKinds: [
                            'Fill',
                            'Mark',
                            'Line'
                        ], onChange: onSymbolizerKindChange })),
                symbolizerKind !== 'Mark' ? null :
                    react_1.default.createElement(antd_1.Form.Item, null,
                        react_1.default.createElement(WellKnownNameField_1.default, { wellKnownName: wellKnownName, onChange: setWellKnownName })),
                react_1.default.createElement(antd_1.Form.Item, { label: locale.colorRamp, help: numberOfRules < minNrClasses ?
                        "".concat(locale.colorRampMinClassesWarningPre, " ").concat(minNrClasses, " ").concat(locale.colorRampMinClassesWarningPost)
                        : undefined },
                    react_1.default.createElement(ColorRampCombo_1.default, { colorRamps: colorRamps, colorRamp: colorRamp, onChange: setColorRamp })),
                colorSpaces.length > 0 ?
                    react_1.default.createElement(antd_1.Form.Item, { label: locale.colorSpace },
                        react_1.default.createElement(ColorSpaceCombo_1.default, { colorSpace: colorSpace, colorSpaces: colorSpaces, onChange: setColorSpace }))
                    : null,
                react_1.default.createElement(antd_1.Form.Item, { label: locale.preview },
                    react_1.default.createElement(ColorsPreview_1.default, { colors: previewColors }))),
            react_1.default.createElement(antd_1.Form.Item, null,
                react_1.default.createElement(antd_1.Button, { className: "gs-rule-generator-submit-button", type: "primary", onClick: onGenerateClick, disabled: numberOfRules < minNrClasses || !attributeName }, locale.generateButtonText)))));
};
exports.RuleGenerator = RuleGenerator;
exports.default = (0, LocaleWrapper_1.localize)(exports.RuleGenerator, COMPONENTNAME);
//# sourceMappingURL=RuleGenerator.js.map