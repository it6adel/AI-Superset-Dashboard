'use client'

// src/getGlobal.ts
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("Unable to locate global object");
}

// src/Store.ts
var Store = class {
  constructor() {
    this.items = {};
  }
  /**
   * Check if the item with given globalId exists
   * @param globalId
   */
  has(globalId) {
    const item = this.items[globalId];
    return item != null;
  }
  /**
   * Get value from globalId and cast to type T
   * @param globalId
   */
  get(globalId) {
    const value = this.items[globalId];
    return value;
  }
  /**
   * Get value from globalId if the value exists.
   * Otherwise, create a new value.
   * @param globalId
   * @param factory
   */
  getOrCreate(globalId, factory) {
    if (this.has(globalId)) {
      return this.get(globalId);
    }
    const value = factory();
    this.set(globalId, value);
    return value;
  }
  /**
   * Store the given globalId and value
   * @param globalId
   * @param value
   */
  set(globalId, value) {
    if (this.has(globalId)) {
      console.warn(`Item with globalId "${globalId}" already exists. You are assigning a new value.`);
    }
    this.items[globalId] = value;
    return this;
  }
  /**
   * Remove item with the specified globalId from this store.
   * If the item with globalId does not exist, do nothing.
   * @param globalId
   */
  remove(globalId) {
    delete this.items[globalId];
    return this;
  }
};

// src/getStore.ts
var globals = getGlobal();
var COUNTER = "__SINGLETON_STORE_COUNT__";
var store;
function getStore() {
  if (typeof store === "undefined") {
    const oldCount = globals[COUNTER];
    if (typeof oldCount === "number") {
      console.warn(
        `Found ${oldCount} existing instance(s) of global-box. This may cause unexpected behaviors. There should be only one global-box in your node_modules. Check your dependencies. All libraries should list global-box as peerDependencies and only install it as dependencies at the application level.`
      );
      globals[COUNTER] = oldCount + 1;
    } else {
      globals[COUNTER] = 1;
    }
    store = new Store();
  }
  return store;
}

// src/index.ts
var globalBox = getStore;
export {
  getStore,
  globalBox
};
