{"version":3,"file":"OlStyleParser.js","sourceRoot":"","sources":["../../src/OlStyleParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseFont } from 'css-font-parser';\n\nimport {\n  CapType,\n  FillSymbolizer,\n  Filter,\n  IconSymbolizer,\n  isGeoStylerBooleanFunction,\n  isGeoStylerFunction,\n  isGeoStylerStringFunction,\n  isIconSymbolizer,\n  isMarkSymbolizer,\n  isSprite,\n  JoinType,\n  LineSymbolizer,\n  MarkSymbolizer,\n  Operator,\n  PointSymbolizer,\n  ReadStyleResult,\n  Rule,\n  Style,\n  StyleParser,\n  StyleType,\n  Symbolizer,\n  TextSymbolizer,\n  UnsupportedProperties,\n  WriteStyleResult\n} from 'geostyler-style';\n\nimport OlImageState from 'ol/ImageState';\n\nimport OlGeomPoint from 'ol/geom/Point';\n\nimport OlStyle, { StyleFunction as OlStyleFunction, StyleLike as OlStyleLike} from 'ol/style/Style';\nimport OlStyleImage from 'ol/style/Image';\nimport OlStyleStroke from 'ol/style/Stroke';\nimport OlStyleText, { Options as OlStyleTextOptions }  from 'ol/style/Text';\nimport OlStyleCircle, { Options as OlStyleCircleOptions } from 'ol/style/Circle';\nimport OlStyleFill from 'ol/style/Fill';\nimport OlStyleIcon, { Options as OlStyleIconOptions }  from 'ol/style/Icon';\nimport OlStyleRegularshape from 'ol/style/RegularShape';\nimport { METERS_PER_UNIT } from 'ol/proj/Units';\n\nimport OlStyleUtil from './Util/OlStyleUtil';\nimport { toContext } from 'ol/render';\nimport { Feature as OlFeature } from 'ol';\n\nexport interface OlParserStyleFct {\n  (feature?: any, resolution?: number): any;\n  __geoStylerStyle: Style;\n}\n\ntype SymbolizerKeyType = keyof UnsupportedProperties['Symbolizer'];\n\n/**\n * This parser can be used with the GeoStyler.\n * It implements the GeoStyler-Style Parser interface to work with OpenLayers styles.\n *\n * @class OlStyleParser\n * @implements StyleParser\n */\nexport class OlStyleParser implements StyleParser<OlStyleLike> {\n\n  /**\n   * The name of the OlStyleParser.\n   */\n  public static title = 'OpenLayers Style Parser';\n\n  unsupportedProperties: UnsupportedProperties = {\n    Symbolizer: {\n      MarkSymbolizer: {\n        avoidEdges: 'none',\n        blur: 'none',\n        offsetAnchor: 'none',\n        pitchAlignment: 'none',\n        pitchScale: 'none'\n      },\n      FillSymbolizer: {\n        antialias: 'none',\n        opacity: {\n          support: 'none',\n          info: 'Use fillOpacity instead.'\n        }\n      },\n      IconSymbolizer: {\n        allowOverlap: 'none',\n        anchor: 'none',\n        avoidEdges: 'none',\n        color: 'none',\n        haloBlur: 'none',\n        haloColor: 'none',\n        haloWidth: 'none',\n        keepUpright: 'none',\n        offsetAnchor: 'none',\n        size: {\n          support: 'partial',\n          info: 'Will set/get the width of the ol Icon.'\n        },\n        optional: 'none',\n        padding: 'none',\n        pitchAlignment: 'none',\n        rotationAlignment: 'none',\n        textFit: 'none',\n        textFitPadding: 'none'\n      },\n      LineSymbolizer: {\n        blur: 'none',\n        gapWidth: 'none',\n        gradient: 'none',\n        miterLimit: 'none',\n        roundLimit: 'none',\n        spacing: 'none',\n        graphicFill: 'none',\n        graphicStroke: 'none',\n        perpendicularOffset: 'none'\n      },\n      RasterSymbolizer: 'none',\n      TextSymbolizer: {\n        placement: {\n          support:'partial',\n          info: 'point and line supported. line-center will be mapped to line.'\n        }\n      }\n    },\n    Function: {\n      double2bool: {\n        support: 'none',\n        info: 'Always returns false'\n      },\n      atan2: {\n        support: 'none',\n        info: 'Currently returns the first argument'\n      },\n      rint: {\n        support: 'none',\n        info: 'Currently returns the first argument'\n      },\n      numberFormat: {\n        support: 'none',\n        info: 'Currently returns the first argument'\n      },\n      strAbbreviate: {\n        support: 'none',\n        info: 'Currently returns the first argument'\n      }\n    }\n  };\n\n  title = 'OpenLayers Style Parser';\n  olIconStyleCache: any = {};\n\n  OlStyleConstructor = OlStyle;\n  OlStyleImageConstructor = OlStyleImage;\n  OlStyleFillConstructor = OlStyleFill;\n  OlStyleStrokeConstructor = OlStyleStroke;\n  OlStyleTextConstructor = OlStyleText;\n  OlStyleCircleConstructor = OlStyleCircle;\n  OlStyleIconConstructor = OlStyleIcon;\n  OlStyleRegularshapeConstructor = OlStyleRegularshape;\n\n  constructor(ol?: any) {\n    if (ol) {\n      this.OlStyleConstructor = ol.style.Style;\n      this.OlStyleImageConstructor = ol.style.Image;\n      this.OlStyleFillConstructor = ol.style.Fill;\n      this.OlStyleStrokeConstructor = ol.style.Stroke;\n      this.OlStyleTextConstructor = ol.style.Text;\n      this.OlStyleCircleConstructor = ol.style.Circle;\n      this.OlStyleIconConstructor = ol.style.Icon;\n      this.OlStyleRegularshapeConstructor = ol.style.RegularShape;\n    }\n  }\n\n  isOlParserStyleFct = (x: any): x is OlParserStyleFct => {\n    return typeof x === 'function';\n  };\n\n  /**\n   * Get the GeoStyler-Style PointSymbolizer from an OpenLayers Style object.\n   *\n   * @param olStyle The OpenLayers Style object\n   * @return The GeoStyler-Style PointSymbolizer\n   */\n  getPointSymbolizerFromOlStyle(olStyle: OlStyle): PointSymbolizer {\n    let pointSymbolizer: PointSymbolizer;\n    if (olStyle.getImage() instanceof this.OlStyleCircleConstructor) {\n      // circle\n      const olCircleStyle: OlStyleCircle = olStyle.getImage() as OlStyleCircle;\n      const olFillStyle = olCircleStyle.getFill();\n      const olStrokeStyle = olCircleStyle.getStroke();\n      const offset = olCircleStyle.getDisplacement() as [number, number];\n\n      const circleSymbolizer: MarkSymbolizer = {\n        kind: 'Mark',\n        wellKnownName: 'circle',\n        color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\n        opacity: olCircleStyle.getOpacity() !== 1 ? olCircleStyle.getOpacity() : undefined,\n        fillOpacity: olFillStyle ? OlStyleUtil.getOpacity(olFillStyle.getColor() as string) : undefined,\n        radius: (olCircleStyle.getRadius() !== 0) ? olCircleStyle.getRadius() : 5,\n        strokeColor: olStrokeStyle ? olStrokeStyle.getColor() as string : undefined,\n        strokeOpacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\n        strokeWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\n        offset: offset[0] || offset[1] ? offset : undefined\n      };\n      pointSymbolizer = circleSymbolizer;\n    } else if (olStyle.getImage() instanceof this.OlStyleRegularshapeConstructor) {\n      // square, triangle, star, cross or x\n      const olRegularStyle: OlStyleRegularshape = olStyle.getImage() as OlStyleRegularshape;\n      const olFillStyle = olRegularStyle.getFill();\n      const olStrokeStyle = olRegularStyle.getStroke();\n      const radius = olRegularStyle.getRadius();\n      const radius2 = olRegularStyle.getRadius2();\n      const points = olRegularStyle.getPoints();\n      const angle = olRegularStyle.getAngle();\n      const offset = olRegularStyle.getDisplacement() as [number, number];\n\n      const markSymbolizer: MarkSymbolizer = {\n        kind: 'Mark',\n        color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\n        opacity: olRegularStyle.getOpacity() !== 1 ? olRegularStyle.getOpacity() : undefined,\n        fillOpacity: olFillStyle ? OlStyleUtil.getOpacity(olFillStyle.getColor() as string) : undefined,\n        strokeColor: olStrokeStyle ? olStrokeStyle.getColor() as string : undefined,\n        strokeOpacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\n        strokeWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\n        radius: (radius !== 0) ? radius : 5,\n        // Rotation in openlayers is radians while we use degree\n        rotate: olRegularStyle.getRotation() / Math.PI * 180,\n        offset: offset[0] || offset[1] ? offset : undefined\n      } as MarkSymbolizer;\n\n      switch (points) {\n        case 2:\n          switch (angle) {\n            case 0:\n              markSymbolizer.wellKnownName = 'shape://vertline';\n              break;\n            case Math.PI / 2:\n              markSymbolizer.wellKnownName = 'shape://horline';\n              break;\n            case Math.PI / 4:\n              markSymbolizer.wellKnownName = 'shape://slash';\n              break;\n            case 2 * Math.PI - (Math.PI / 4):\n              markSymbolizer.wellKnownName = 'shape://backslash';\n              break;\n            default:\n              break;\n          }\n          break;\n        case 3:\n          switch (angle) {\n            case 0:\n              markSymbolizer.wellKnownName = 'triangle';\n              break;\n            case Math.PI / 2:\n              markSymbolizer.wellKnownName = 'shape://carrow';\n              break;\n            default:\n              break;\n          }\n          break;\n        case 4:\n          if (Number.isFinite(radius2)) {\n            // cross or x\n            if (olRegularStyle.getAngle() === 0) {\n              // cross\n              markSymbolizer.wellKnownName = 'cross';\n            } else {\n              // x\n              markSymbolizer.wellKnownName = 'x';\n            }\n          } else {\n            // square\n            markSymbolizer.wellKnownName = 'square';\n          }\n          break;\n        case 5:\n          // star\n          markSymbolizer.wellKnownName = 'star';\n          break;\n        default:\n          throw new Error('Could not parse OlStyle. Only 2, 3, 4 or 5 point regular shapes are allowed');\n      }\n      pointSymbolizer = markSymbolizer;\n    } else if (olStyle.getText() instanceof this.OlStyleTextConstructor) {\n      const olTextStyle: OlStyleText = olStyle.getText() as OlStyleText;\n      const olFillStyle = olTextStyle.getFill();\n      const olStrokeStyle = olTextStyle.getStroke();\n      const rotation = olTextStyle.getRotation();\n      let char = olTextStyle.getText() || 'a';\n      const font = olTextStyle.getFont() || '10px sans-serif';\n      const fontName = OlStyleUtil.getFontNameFromOlFont(font);\n      const radius = OlStyleUtil.getSizeFromOlFont(font);\n      const offset = [olTextStyle.getOffsetX(), olTextStyle.getOffsetY()];\n\n      if (Array.isArray(char)) {\n        char = char[0];\n      }\n\n      pointSymbolizer = {\n        kind: 'Mark',\n        wellKnownName: `ttf://${fontName}#0x${char.charCodeAt(0).toString(16)}`,\n        color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\n        opacity: olFillStyle ? OlStyleUtil.getOpacity(olFillStyle.getColor() as string) : undefined,\n        strokeColor: olStrokeStyle ? olStrokeStyle.getColor() as string : undefined,\n        strokeOpacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\n        strokeWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\n        radius: (radius !== 0) ? radius : 5,\n        // Rotation in openlayers is radians while we use degree\n        rotate: rotation ? rotation / Math.PI * 180 : 0,\n        offset: offset[0] || offset[1] ? offset : undefined\n      } as MarkSymbolizer;\n    } else {\n      // icon\n      const olIconStyle = olStyle.getImage() as OlStyleIcon;\n      const displacement = olIconStyle.getDisplacement() as [number, number];\n      // initialOptions_ as fallback when image is not yet loaded\n      const image = this.getImageFromIconStyle(olIconStyle);\n      // this always gets calculated from ol so this might not have been set initially\n      let size = olIconStyle.getWidth();\n      const rotation = olIconStyle.getRotation() / Math.PI * 180;\n      const opacity = olIconStyle.getOpacity();\n\n      const iconSymbolizer: IconSymbolizer = {\n        kind: 'Icon',\n        image,\n        opacity: opacity < 1 ? opacity : undefined,\n        size,\n        // Rotation in openlayers is radians while we use degree\n        rotate: rotation !== 0 ? rotation : undefined,\n        offset: displacement[0] || displacement[1] ? displacement : undefined\n      };\n      pointSymbolizer = iconSymbolizer;\n    }\n    return pointSymbolizer;\n  }\n\n  /**\n   *\n   * @param olIconStyle An ol style Icon representation\n   * @returns A string or Sprite configuration\n   */\n  getImageFromIconStyle(olIconStyle: OlStyleIcon): IconSymbolizer['image'] {\n    const size = olIconStyle.getSize();\n    if (Array.isArray(size)) {\n      // TODO: create getters (and setters?) in openlayers\n      // @ts-ignore\n      let position = olIconStyle.offset_ as [number, number];\n      // @ts-ignore\n      const offsetOrigin = olIconStyle.offsetOrigin_ as string;\n      if (offsetOrigin && offsetOrigin !== 'top-left') {\n        throw new Error(`Offset origin ${offsetOrigin} not supported`);\n      }\n\n      return {\n        source: olIconStyle.getSrc()!,\n        position,\n        size: size as [number, number]\n      };\n    } else {\n      return olIconStyle.getSrc() ? olIconStyle.getSrc() : undefined;\n    }\n\n  }\n\n  /**\n   * Get the GeoStyler-Style LineSymbolizer from an OpenLayers Style object.\n   *\n   * @param olStyle The OpenLayers Style object\n   * @return The GeoStyler-Style LineSymbolizer\n   */\n  getLineSymbolizerFromOlStyle(olStyle: OlStyle): LineSymbolizer {\n    const olStrokeStyle = olStyle.getStroke();\n    // getLineDash returns null not undefined. So we have to double check\n    const dashArray = olStrokeStyle ? olStrokeStyle.getLineDash() : undefined;\n\n    return {\n      kind: 'Line',\n      color: olStrokeStyle ? OlStyleUtil.getHexColor(olStrokeStyle.getColor() as string) as string : undefined,\n      opacity: olStrokeStyle ? OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string) : undefined,\n      width: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\n      cap: olStrokeStyle ? <LineSymbolizer['cap']> olStrokeStyle.getLineCap() : 'butt',\n      join: olStrokeStyle ? <LineSymbolizer['join']> olStrokeStyle.getLineJoin() : 'miter',\n      dasharray: dashArray ? dashArray : undefined,\n      dashOffset: olStrokeStyle ? olStrokeStyle.getLineDashOffset() : undefined\n    };\n  }\n\n  /**\n   * Get the GeoStyler-Style FillSymbolizer from an OpenLayers Style object.\n   *\n   * PolygonSymbolizer Stroke is just partially supported.\n   *\n   * @param olStyle The OpenLayers Style object\n   * @return The GeoStyler-Style FillSymbolizer\n   */\n  getFillSymbolizerFromOlStyle(olStyle: OlStyle): FillSymbolizer {\n    const olFillStyle = olStyle.getFill();\n    const olStrokeStyle = olStyle.getStroke();\n    // getLineDash returns null not undefined. So we have to double check\n    const outlineDashArray = olStrokeStyle ? olStrokeStyle.getLineDash() : undefined;\n\n    const symbolizer: FillSymbolizer = {\n      kind: 'Fill'\n    };\n\n    if (olFillStyle) {\n      symbolizer.color = OlStyleUtil.getHexColor(olFillStyle.getColor() as string);\n    }\n    if (olFillStyle) {\n      symbolizer.fillOpacity = OlStyleUtil.getOpacity(olFillStyle.getColor() as string);\n    }\n    if (olStrokeStyle) {\n      symbolizer.outlineColor = OlStyleUtil.getHexColor(olStrokeStyle.getColor() as string);\n    }\n    if (outlineDashArray) {\n      symbolizer.outlineDasharray = outlineDashArray;\n    }\n    if (olStrokeStyle) {\n      symbolizer.outlineOpacity = OlStyleUtil.getOpacity(olStrokeStyle.getColor() as string);\n    }\n    if (olStrokeStyle && olStrokeStyle.getWidth()) {\n      symbolizer.outlineWidth = olStrokeStyle.getWidth();\n    }\n    return symbolizer;\n\n  }\n\n  /**\n   * Get the GeoStyler-Style TextSymbolizer from an OpenLayers Style object.\n   *\n   *\n   * @param olStyle The OpenLayers Style object\n   * @return The GeoStyler-Style TextSymbolizer\n   */\n  getTextSymbolizerFromOlStyle(olStyle: OlStyle): TextSymbolizer {\n    const olTextStyle = olStyle.getText();\n    if (!olTextStyle) {\n      throw new Error('Could not get text from olStyle.');\n    }\n    const olFillStyle = olTextStyle.getFill();\n    const olStrokeStyle = olTextStyle.getStroke();\n    const offsetX = olTextStyle.getOffsetX();\n    const offsetY = olTextStyle.getOffsetY();\n    const font = olTextStyle.getFont();\n    const rotation = olTextStyle.getRotation();\n    const allowOverlap = olTextStyle.getOverflow() ? olTextStyle.getOverflow() : undefined;\n    const placement = olTextStyle.getPlacement();\n    const text = olTextStyle.getText();\n    const label = Array.isArray(text) ? text[0] : text;\n    let fontSize: number = Infinity;\n    let fontFamily: string[]|undefined = undefined;\n    let fontWeight: 'normal' | 'bold' | undefined = undefined;\n    let fontStyle: 'normal' | 'italic' | 'oblique' | undefined = undefined;\n    if (font) {\n      const fontObj = parseFont(font);\n      if (fontObj['font-weight']) {\n        fontWeight = fontObj['font-weight'];\n      }\n      if (fontObj['font-size']) {\n        fontSize = parseInt(fontObj['font-size'], 10);\n      }\n      if (fontObj['font-family']) {\n        const fontFamilies = fontObj['font-family'];\n        fontFamily = fontFamilies?.map((f: string) => f.includes(' ') ? '\"' + f + '\"' : f);\n      }\n      if (fontObj['font-style']) {\n        fontStyle = fontObj['font-style'];\n      }\n    }\n\n    return {\n      kind: 'Text',\n      label,\n      placement,\n      allowOverlap,\n      color: olFillStyle ? OlStyleUtil.getHexColor(olFillStyle.getColor() as string) : undefined,\n      size: isFinite(fontSize) ? fontSize : undefined,\n      font: fontFamily,\n      fontWeight: fontWeight || undefined,\n      fontStyle: fontStyle || undefined,\n      offset: (offsetX !== undefined) && (offsetY !== undefined) ? [offsetX, offsetY] : [0, 0],\n      haloColor: olStrokeStyle && olStrokeStyle.getColor() ?\n        OlStyleUtil.getHexColor(olStrokeStyle.getColor() as string) : undefined,\n      haloWidth: olStrokeStyle ? olStrokeStyle.getWidth() : undefined,\n      rotate: (rotation !== undefined) ? rotation / Math.PI * 180 : undefined\n    };\n  }\n\n  /**\n   * Get the GeoStyler-Style Symbolizer from an OpenLayers Style object.\n   *\n   * @param olStyles The OpenLayers Style object\n   * @return The GeoStyler-Style Symbolizer array\n   */\n  getSymbolizersFromOlStyle(olStyles: OlStyle[]): Symbolizer[] {\n    const symbolizers: Symbolizer[] = [];\n    olStyles.forEach(olStyle => {\n      let symbolizer: Symbolizer;\n      const styleType: StyleType = this.getStyleTypeFromOlStyle(olStyle);\n      switch (styleType) {\n        case 'Point':\n          if (olStyle.getText() && !OlStyleUtil.getIsMarkSymbolizerFont((olStyle as any).getText().getFont())) {\n            symbolizer = this.getTextSymbolizerFromOlStyle(olStyle);\n          } else {\n            symbolizer = this.getPointSymbolizerFromOlStyle(olStyle);\n          }\n          break;\n        case 'Line':\n          symbolizer = this.getLineSymbolizerFromOlStyle(olStyle);\n          break;\n        case 'Fill':\n          symbolizer = this.getFillSymbolizerFromOlStyle(olStyle);\n          break;\n        default:\n          throw new Error('Failed to parse SymbolizerKind from OpenLayers Style');\n      }\n      symbolizers.push(symbolizer);\n    });\n\n    return symbolizers;\n  }\n\n  /**\n   * Get the GeoStyler-Style Rule from an OpenLayers Style object.\n   *\n   * @param olStyles The OpenLayers Style object\n   * @return The GeoStyler-Style Rule\n   */\n  getRuleFromOlStyle(olStyles: OlStyle | OlStyle[]): Rule {\n    let symbolizers: Symbolizer[];\n    const name = 'OL Style Rule 0';\n\n    if (Array.isArray(olStyles)) {\n      symbolizers = this.getSymbolizersFromOlStyle(olStyles);\n    } else {\n      symbolizers = this.getSymbolizersFromOlStyle([olStyles]);\n    }\n\n    return {\n      name, symbolizers\n    };\n  }\n\n  /**\n   * Get the GeoStyler-Style Symbolizer from an OpenLayers Style object.\n   *\n   * @param olStyle The OpenLayers Style object\n   * @return The GeoStyler-Style Symbolizer\n   */\n  getStyleTypeFromOlStyle(olStyle: OlStyle): StyleType {\n    let styleType: StyleType;\n\n    if (olStyle.getImage() instanceof this.OlStyleImageConstructor) {\n      styleType = 'Point';\n    } else if (olStyle.getText() instanceof this.OlStyleTextConstructor) {\n      styleType = 'Point';\n    } else if (olStyle.getFill() instanceof this.OlStyleFillConstructor) {\n      styleType = 'Fill';\n    } else if (olStyle.getStroke() && !olStyle.getFill()) {\n      styleType = 'Line';\n    } else {\n      throw new Error('StyleType could not be detected');\n    }\n\n    return styleType;\n  }\n\n  /**\n   * Get the GeoStyler-Style Style from an OpenLayers Style object.\n   *\n   * @param olStyle The OpenLayers Style object\n   * @return The GeoStyler-Style Style\n   */\n  olStyleToGeoStylerStyle(olStyle: OlStyle | OlStyle[]): Style {\n    const name = 'OL Style';\n    const rule = this.getRuleFromOlStyle(olStyle);\n    return {\n      name,\n      rules: [rule]\n    };\n  }\n\n  /**\n   * The readStyle implementation of the GeoStyler-Style StyleParser interface.\n   * It reads an OpenLayers Style, an array of OpenLayers Styles or an olParserStyleFct and returns a Promise.\n   *\n   * The Promise itself resolves with a GeoStyler-Style Style.\n   *\n   * @param olStyle The style to be parsed\n   * @return The Promise resolving with the GeoStyler-Style Style\n   */\n  readStyle(olStyle: OlStyleLike): Promise<ReadStyleResult> {\n    return new Promise<ReadStyleResult>((resolve) => {\n      try {\n        if (this.isOlParserStyleFct(olStyle)) {\n          resolve({\n            output: olStyle.__geoStylerStyle\n          });\n        } else {\n          olStyle = olStyle as OlStyle | OlStyle[];\n          const geoStylerStyle: Style = this.olStyleToGeoStylerStyle(olStyle);\n          const unsupportedProperties = this.checkForUnsupportedProperties(geoStylerStyle);\n          resolve({\n            output: geoStylerStyle,\n            unsupportedProperties\n          });\n        }\n      } catch (error) {\n        resolve({\n          errors: [error]\n        });\n      }\n    });\n  }\n\n  /**\n   * The writeStyle implementation of the GeoStyler-Style StyleParser interface.\n   * It reads a GeoStyler-Style Style and returns a Promise.\n   * The Promise itself resolves one of three types\n   *\n   * 1. OlStyle if input Style consists of\n   *    one rule with one symbolizer, no filter, no scaleDenominator, no TextSymbolizer\n   * 2. OlStyle[] if input Style consists of\n   *    one rule with multiple symbolizers, no filter, no scaleDenominator, no TextSymbolizer\n   * 3. OlParserStyleFct for everything else\n   *\n   * @param geoStylerStyle A GeoStyler-Style Style.\n   * @return The Promise resolving with one of above mentioned style types.\n   */\n  writeStyle(geoStylerStyle: Style): Promise<WriteStyleResult<OlStyle | OlStyle[] | OlParserStyleFct>> {\n    return new Promise<WriteStyleResult>((resolve) => {\n      const clonedStyle = structuredClone(geoStylerStyle);\n      const unsupportedProperties = this.checkForUnsupportedProperties(clonedStyle);\n      try {\n        const olStyle = this.getOlStyleTypeFromGeoStylerStyle(clonedStyle);\n        resolve({\n          output: olStyle,\n          unsupportedProperties,\n          warnings: unsupportedProperties && ['Your style contains unsupportedProperties!']\n        });\n      } catch (error) {\n        resolve({\n          errors: [error]\n        });\n      }\n    });\n  }\n\n  checkForUnsupportedProperties(geoStylerStyle: Style): UnsupportedProperties | undefined {\n    const capitalizeFirstLetter = (a: string) => a[0].toUpperCase() + a.slice(1);\n    const unsupportedProperties: UnsupportedProperties = {};\n    geoStylerStyle.rules.forEach(rule => {\n      // ScaleDenominator and Filters are completly supported so we just check for symbolizers\n      rule.symbolizers.forEach(symbolizer => {\n        const key = capitalizeFirstLetter(`${symbolizer.kind}Symbolizer`);\n        const value = this.unsupportedProperties?.Symbolizer?.[key as SymbolizerKeyType];\n        if (value) {\n          if (typeof value === 'string') {\n            if (!unsupportedProperties.Symbolizer) {\n              unsupportedProperties.Symbolizer = {};\n            }\n            unsupportedProperties.Symbolizer[key as SymbolizerKeyType] = value;\n          } else {\n            Object.keys(symbolizer).forEach(property => {\n              if (value[property]) {\n                if (!unsupportedProperties.Symbolizer) {\n                  unsupportedProperties.Symbolizer = {};\n                }\n                if (!unsupportedProperties.Symbolizer[key as SymbolizerKeyType]) {\n                  (unsupportedProperties.Symbolizer as any)[key] = {};\n                }\n                unsupportedProperties.Symbolizer\n                  [key as SymbolizerKeyType][property] = value[property];\n              }\n            });\n          }\n        }\n      });\n    });\n    if (Object.keys(unsupportedProperties).length > 0) {\n      return unsupportedProperties;\n    }\n    return undefined;\n  }\n\n  /**\n   * Decides which OlStyleType should be returned depending on given geoStylerStyle.\n   * Three OlStyleTypes are possible:\n   *\n   * 1. OlStyle if input Style consists of\n   *    one rule with one symbolizer, no filter, no scaleDenominator, no TextSymbolizer\n   * 2. OlStyle[] if input Style consists of\n   *    one rule with multiple symbolizers, no filter, no scaleDenominator, no TextSymbolizer\n   * 3. OlParserStyleFct for everything else\n   *\n   * @param geoStylerStyle A GeoStyler-Style Style\n   */\n  getOlStyleTypeFromGeoStylerStyle(geoStylerStyle: Style): OlStyle | OlStyle[] | OlParserStyleFct {\n    const rules = geoStylerStyle.rules;\n    const nrRules = rules.length;\n    if (nrRules === 1) {\n      const hasFilter = geoStylerStyle?.rules?.[0]?.filter !== undefined ? true : false;\n      const hasMinScale = geoStylerStyle?.rules?.[0]?.scaleDenominator?.min !== undefined ? true : false;\n      const hasMaxScale = geoStylerStyle?.rules?.[0]?.scaleDenominator?.max !== undefined ? true : false;\n      const hasScaleDenominator = hasMinScale || hasMaxScale ? true : false;\n      const hasFunctions = OlStyleUtil.containsGeoStylerFunctions(geoStylerStyle);\n\n      const nrSymbolizers = geoStylerStyle.rules[0].symbolizers.length;\n      const hasTextSymbolizer = rules[0].symbolizers.some((symbolizer: Symbolizer) => {\n        return symbolizer.kind === 'Text';\n      });\n      const hasDynamicIconSymbolizer = rules[0].symbolizers.some((symbolizer: Symbolizer) => {\n        return symbolizer.kind === 'Icon' && typeof(symbolizer.image) === 'string' && symbolizer.image.includes('{{');\n      });\n      if (!hasFilter && !hasScaleDenominator && !hasTextSymbolizer && !hasDynamicIconSymbolizer && !hasFunctions) {\n        if (nrSymbolizers === 1) {\n          return this.geoStylerStyleToOlStyle(geoStylerStyle);\n        } else {\n          return this.geoStylerStyleToOlStyleArray(geoStylerStyle);\n        }\n      } else {\n        return this.geoStylerStyleToOlParserStyleFct(geoStylerStyle);\n      }\n    } else {\n      return this.geoStylerStyleToOlParserStyleFct(geoStylerStyle);\n    }\n  }\n\n  /**\n   * Parses the first symbolizer of the first rule of a GeoStyler-Style Style.\n   *\n   * @param geoStylerStyle GeoStyler-Style Style\n   * @return An OpenLayers Style Object\n   */\n  geoStylerStyleToOlStyle(geoStylerStyle: Style): OlStyle {\n    const rule = geoStylerStyle.rules[0];\n    const symbolizer = rule.symbolizers[0];\n    const olSymbolizer = this.getOlSymbolizerFromSymbolizer(symbolizer);\n    return olSymbolizer;\n  }\n\n  /**\n   * Parses all symbolizers of the first rule of a GeoStyler-Style Style.\n   *\n   * @param geoStylerStyle GeoStyler-Style Style\n   * @return An array of OpenLayers Style Objects\n   */\n  geoStylerStyleToOlStyleArray(geoStylerStyle: Style): OlStyle[] {\n    const rule = geoStylerStyle.rules[0];\n    const olStyles: any[] = [];\n    rule.symbolizers.forEach((symbolizer: Symbolizer) => {\n      const olSymbolizer: any = this.getOlSymbolizerFromSymbolizer(symbolizer);\n      olStyles.push(olSymbolizer);\n    });\n    return olStyles;\n  }\n\n  /**\n   * Get the OpenLayers Style object from an GeoStyler-Style Style\n   *\n   * @param geoStylerStyle A GeoStyler-Style Style.\n   * @return An OlParserStyleFct\n   */\n  geoStylerStyleToOlParserStyleFct(geoStylerStyle: Style): OlParserStyleFct {\n    const rules = structuredClone(geoStylerStyle.rules);\n    const olStyle = (feature: any, resolution: number): any[] => {\n      const styles: any[] = [];\n\n      // calculate scale for resolution (from ol-util MapUtil)\n      const dpi = 25.4 / 0.28;\n      const mpu = METERS_PER_UNIT.m;\n      const inchesPerMeter = 39.37;\n      const scale = resolution * mpu * inchesPerMeter * dpi;\n\n      rules.forEach((rule: Rule) => {\n        // handling scale denominator\n        let minScale = rule?.scaleDenominator?.min;\n        let maxScale = rule?.scaleDenominator?.max;\n        let isWithinScale = true;\n        if (minScale || maxScale) {\n          minScale = isGeoStylerFunction(minScale) ? OlStyleUtil.evaluateNumberFunction(minScale) : minScale;\n          maxScale = isGeoStylerFunction(maxScale) ? OlStyleUtil.evaluateNumberFunction(maxScale) : maxScale;\n          if (minScale && scale < minScale) {\n            isWithinScale = false;\n          }\n          if (maxScale && scale >= maxScale) {\n            isWithinScale = false;\n          }\n        }\n\n        // handling filter\n        let matchesFilter: boolean = false;\n        if (!rule.filter) {\n          matchesFilter = true;\n        } else {\n          try {\n            matchesFilter = this.geoStylerFilterToOlParserFilter(feature, rule.filter);\n          } catch (e) {\n            matchesFilter = false;\n          }\n        }\n\n        if (isWithinScale && matchesFilter) {\n          rule.symbolizers.forEach((symb: Symbolizer) => {\n            if (symb.visibility === false) {\n              styles.push(null);\n            }\n\n            if (isGeoStylerBooleanFunction(symb.visibility)) {\n              const visibility = OlStyleUtil.evaluateBooleanFunction(symb.visibility);\n              if (!visibility) {\n                styles.push(null);\n              }\n            }\n\n            const olSymbolizer: any = this.getOlSymbolizerFromSymbolizer(symb, feature);\n            // either an OlStyle or an ol.StyleFunction. OpenLayers only accepts an array\n            // of OlStyles, not ol.StyleFunctions.\n            // So we have to check it and in case of an ol.StyleFunction call that function\n            // and add the returned style to const styles.\n            if (typeof olSymbolizer !== 'function') {\n              styles.push(olSymbolizer);\n            } else {\n              const styleFromFct: any = olSymbolizer(feature, resolution);\n              styles.push(styleFromFct);\n            }\n          });\n        }\n      });\n      return styles;\n    };\n    const olStyleFct: OlParserStyleFct = olStyle as OlParserStyleFct;\n    olStyleFct.__geoStylerStyle = geoStylerStyle;\n    return olStyleFct;\n  }\n\n  /**\n   * Checks if a feature matches given filter expression(s)\n   * @param feature ol.Feature\n   * @param filter Filter\n   * @return boolean true if feature matches filter expression\n   */\n  geoStylerFilterToOlParserFilter(feature: any, filter: Filter): boolean {\n    const operatorMapping: any = {\n      '&&': true,\n      '||': true,\n      '!': true\n    };\n\n    let matchesFilter: boolean = true;\n    if (isGeoStylerBooleanFunction(filter)) {\n      return OlStyleUtil.evaluateBooleanFunction(filter, feature);\n    }\n    if (filter === true || filter === false) {\n      return filter;\n    }\n    const operator: Operator = filter[0];\n    let isNestedFilter: boolean = false;\n    if (operatorMapping[operator]) {\n      isNestedFilter = true;\n    }\n    try {\n      if (isNestedFilter) {\n        switch (filter[0]) {\n          case '&&':\n            let intermediate = true;\n            let restFilter = filter.slice(1);\n            restFilter.forEach((f: Filter) => {\n              if (!this.geoStylerFilterToOlParserFilter(feature, f)) {\n                intermediate = false;\n              }\n            });\n            matchesFilter = intermediate;\n            break;\n          case '||':\n            intermediate = false;\n            restFilter = filter.slice(1);\n            restFilter.forEach((f: Filter) => {\n              if (this.geoStylerFilterToOlParserFilter(feature, f)) {\n                intermediate = true;\n              }\n            });\n            matchesFilter = intermediate;\n            break;\n          case '!':\n            matchesFilter = !this.geoStylerFilterToOlParserFilter(feature, filter[1]);\n            break;\n          default:\n            throw new Error('Cannot parse Filter. Unknown combination or negation operator.');\n        }\n      } else {\n        let arg1: any;\n        if (isGeoStylerFunction(filter[1])) {\n          arg1 = OlStyleUtil.evaluateFunction(filter[1], feature);\n        } else {\n          arg1 = feature.get(filter[1]);\n        }\n        let arg2: any;\n        if (isGeoStylerFunction(filter[2])) {\n          arg2 = feature.get(OlStyleUtil.evaluateFunction(filter[2], feature));\n        } else {\n          arg2 = filter[2];\n        }\n        switch (filter[0]) {\n          case '==':\n            matchesFilter = ('' + arg1) === ('' + arg2);\n            break;\n          case '*=':\n            // inspired by\n            // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\n            if (typeof arg2 === 'string' && typeof arg1 === 'string') {\n              if (arg2.length > arg1.length) {\n                matchesFilter = false;\n              } else {\n                matchesFilter = arg1.indexOf(arg2) !== -1;\n              }\n            }\n            break;\n          case '!=':\n            matchesFilter = ('' + arg1) !== ('' + arg2);\n            break;\n          case '<':\n            matchesFilter = Number(arg1) < Number(arg2);\n            break;\n          case '<=':\n            matchesFilter = Number(arg1) <= Number(arg2);\n            break;\n          case '>':\n            matchesFilter = Number(arg1) > Number(arg2);\n            break;\n          case '>=':\n            matchesFilter = Number(arg1) >= Number(arg2);\n            break;\n          default:\n            throw new Error('Cannot parse Filter. Unknown comparison operator.');\n        }\n      }\n    } catch (e) {\n      throw new Error('Cannot parse Filter. Invalid structure.');\n    }\n    return matchesFilter;\n  }\n\n  /**\n   * Get the OpenLayers Style object or an OL StyleFunction from an\n   * GeoStyler-Style Symbolizer.\n   *\n   * @param symbolizer A GeoStyler-Style Symbolizer.\n   * @return The OpenLayers Style object or a StyleFunction\n   */\n  getOlSymbolizerFromSymbolizer(symbolizer: Symbolizer, feature?: OlFeature): OlStyle {\n    let olSymbolizer: any;\n    symbolizer = structuredClone(symbolizer);\n\n    switch (symbolizer.kind) {\n      case 'Mark':\n        olSymbolizer = this.getOlPointSymbolizerFromMarkSymbolizer(symbolizer, feature);\n        break;\n      case 'Icon':\n        olSymbolizer = this.getOlIconSymbolizerFromIconSymbolizer(symbolizer, feature);\n        break;\n      case 'Text':\n        olSymbolizer = this.getOlTextSymbolizerFromTextSymbolizer(symbolizer, feature);\n        break;\n      case 'Line':\n        olSymbolizer = this.getOlLineSymbolizerFromLineSymbolizer(symbolizer, feature);\n        break;\n      case 'Fill':\n        olSymbolizer = this.getOlPolygonSymbolizerFromFillSymbolizer(symbolizer, feature);\n        break;\n      default:\n        // Return the OL default style since the TS type binding does not allow\n        // us to set olSymbolizer to undefined\n        const fill = new this.OlStyleFillConstructor({\n          color: 'rgba(255,255,255,0.4)'\n        });\n        const stroke = new this.OlStyleStrokeConstructor({\n          color: '#3399CC',\n          width: 1.25\n        });\n        olSymbolizer = new this.OlStyleConstructor({\n          image: new this.OlStyleCircleConstructor({\n            fill: fill,\n            stroke: stroke,\n            radius: 5\n          }),\n          fill: fill,\n          stroke: stroke\n        });\n        break;\n    }\n\n    return olSymbolizer;\n  }\n\n  /**\n   * Get the OL Style object  from an GeoStyler-Style MarkSymbolizer.\n   *\n   * @param markSymbolizer A GeoStyler-Style MarkSymbolizer.\n   * @return The OL Style object\n   */\n  getOlPointSymbolizerFromMarkSymbolizer(markSymbolizer: MarkSymbolizer, feature?: OlFeature): OlStyleRegularshape {\n    let stroke: any;\n\n    for (const key of Object.keys(markSymbolizer)) {\n      if (isGeoStylerFunction(markSymbolizer[key as keyof MarkSymbolizer])) {\n        (markSymbolizer as any)[key] = OlStyleUtil.evaluateFunction((markSymbolizer as any)[key], feature);\n      }\n    }\n\n    const strokeColor = markSymbolizer.strokeColor as string;\n    const strokeOpacity = markSymbolizer.strokeOpacity as number;\n\n    const sColor = strokeColor && (strokeOpacity !== undefined)\n      ? OlStyleUtil.getRgbaColor(strokeColor, strokeOpacity)\n      : markSymbolizer.strokeColor as string;\n\n    if (markSymbolizer.strokeColor || markSymbolizer.strokeWidth !== undefined) {\n      stroke = new this.OlStyleStrokeConstructor({\n        color: sColor,\n        width: markSymbolizer.strokeWidth as number\n      });\n    }\n\n    const color = markSymbolizer.color as string;\n    const opacity = markSymbolizer.opacity as number;\n    const radius = markSymbolizer.radius as number;\n    const fillOpacity = markSymbolizer.fillOpacity as number;\n    const fColor = color && (fillOpacity !== undefined)\n      ? OlStyleUtil.getRgbaColor(color, fillOpacity ?? 1)\n      : color;\n\n    const fill = new this.OlStyleFillConstructor({\n      color: fColor\n    });\n\n    let olStyle: any;\n    const shapeOpts = {\n      fill: fill,\n      radius: radius ?? 5,\n      rotation: typeof(markSymbolizer.rotate) === 'number' ? markSymbolizer.rotate * Math.PI / 180 : undefined,\n      stroke: stroke,\n      displacement: typeof(markSymbolizer.offset) === 'number' ? markSymbolizer.offset : undefined\n    };\n\n    switch (markSymbolizer.wellKnownName) {\n      case 'shape://dot':\n      case 'circle':\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleCircleConstructor(shapeOpts as OlStyleCircleOptions)\n        });\n        break;\n      case 'square':\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 4,\n            angle: 45 * Math.PI / 180\n          })\n        });\n        break;\n      case 'triangle':\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 3,\n            angle: 0\n          })\n        });\n        break;\n      case 'star':\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 5,\n            radius2: shapeOpts.radius! / 2.5,\n            angle: 0\n          })\n        });\n        break;\n      case 'shape://plus':\n      case 'cross':\n        // openlayers does not seem to set a default stroke color,\n        // which is needed for regularshapes with radius2 = 0\n        if (shapeOpts.stroke === undefined) {\n          shapeOpts.stroke = new this.OlStyleStrokeConstructor({\n            color: '#000'\n          });\n        }\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 4,\n            radius2: 0,\n            angle: 0\n          })\n        });\n        break;\n      case 'shape://times':\n      case 'x':\n        // openlayers does not seem to set a default stroke color,\n        // which is needed for regularshapes with radius2 = 0\n        if (shapeOpts.stroke === undefined) {\n          shapeOpts.stroke = new this.OlStyleStrokeConstructor({\n            color: '#000'\n          });\n        }\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 4,\n            radius2: 0,\n            angle: 45 * Math.PI / 180\n          })\n        });\n        break;\n      case 'shape://backslash':\n        // openlayers does not seem to set a default stroke color,\n        // which is needed for regularshapes with radius2 = 0\n        if (shapeOpts.stroke === undefined) {\n          shapeOpts.stroke = new this.OlStyleStrokeConstructor({\n            color: '#000'\n          });\n        }\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 2,\n            angle: 2 * Math.PI - (Math.PI / 4)\n          })\n        });\n        break;\n      case 'shape://horline':\n        // openlayers does not seem to set a default stroke color,\n        // which is needed for regularshapes with radius2 = 0\n        if (shapeOpts.stroke === undefined) {\n          shapeOpts.stroke = new this.OlStyleStrokeConstructor({\n            color: '#000'\n          });\n        }\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 2,\n            angle: Math.PI / 2\n          })\n        });\n        break;\n      // so far, both arrows are closed arrows. Also, shape is a regular triangle with\n      // all sides of equal length. In geoserver arrows only have two sides of equal length.\n      // TODO redefine shapes of arrows?\n      case 'shape://oarrow':\n      case 'shape://carrow':\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 3,\n            angle: Math.PI / 2\n          })\n        });\n        break;\n      case 'shape://slash':\n        // openlayers does not seem to set a default stroke color,\n        // which is needed for regularshapes with radius2 = 0\n        if (shapeOpts.stroke === undefined) {\n          shapeOpts.stroke = new this.OlStyleStrokeConstructor({\n            color: '#000'\n          });\n        }\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 2,\n            angle: Math.PI / 4\n          })\n        });\n        break;\n      case 'shape://vertline':\n        // openlayers does not seem to set a default stroke color,\n        // which is needed for regularshapes with radius2 = 0\n        if (shapeOpts.stroke === undefined) {\n          shapeOpts.stroke = new this.OlStyleStrokeConstructor({\n            color: '#000'\n          });\n        }\n        olStyle = new this.OlStyleConstructor({\n          image: new this.OlStyleRegularshapeConstructor({\n            ...shapeOpts,\n            points: 2,\n            angle: 0\n          })\n        });\n        break;\n      default:\n        if (OlStyleUtil.getIsFontGlyphBased(markSymbolizer)) {\n          olStyle = new this.OlStyleConstructor({\n            text: new this.OlStyleTextConstructor({\n              text: OlStyleUtil.getCharacterForMarkSymbolizer(markSymbolizer),\n              font: OlStyleUtil.getTextFontForMarkSymbolizer(markSymbolizer),\n              fill: shapeOpts.fill,\n              stroke: shapeOpts.stroke,\n              rotation: shapeOpts.rotation\n            })\n          });\n          break;\n        }\n        throw new Error('MarkSymbolizer cannot be parsed. Unsupported WellKnownName.');\n    }\n\n    if (Number.isFinite(opacity) && olStyle.getImage()) {\n      olStyle.getImage().setOpacity(opacity);\n    }\n\n    return olStyle;\n  }\n\n  /**\n   * Get the OL Style object  from an GeoStyler-Style IconSymbolizer.\n   *\n   * @param symbolizer  A GeoStyler-Style IconSymbolizer.\n   * @return The OL Style object\n   */\n  getOlIconSymbolizerFromIconSymbolizer(\n    symbolizer: IconSymbolizer,\n    feat?: OlFeature\n  ): OlStyle | OlStyleIcon | OlStyleFunction {\n    for (const key of Object.keys(symbolizer)) {\n      if (isGeoStylerFunction(symbolizer[key as keyof IconSymbolizer])) {\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\n      }\n    }\n\n    const baseProps: OlStyleIconOptions = {\n      src: isSprite(symbolizer.image) ? symbolizer.image.source as string : symbolizer.image as string,\n      crossOrigin: 'anonymous',\n      opacity: symbolizer.opacity as number,\n      width: symbolizer.size as number,\n      // Rotation in openlayers is radians while we use degree\n      rotation: (typeof(symbolizer.rotate) === 'number' ? symbolizer.rotate * Math.PI / 180 : undefined) as number,\n      displacement: symbolizer.offset as [number, number],\n      size: isSprite(symbolizer.image) ? symbolizer.image.size as [number, number] : undefined,\n      offset: isSprite(symbolizer.image) ? symbolizer.image.position as [number, number] : undefined,\n    };\n\n    // check if IconSymbolizer.image contains a placeholder\n    const prefix = '\\\\{\\\\{';\n    const suffix = '\\\\}\\\\}';\n    const regExp = new RegExp(prefix + '.*?' + suffix, 'g');\n    const regExpRes = typeof(symbolizer.image) === 'string' ? symbolizer.image.match(regExp) : null;\n    if (regExpRes) {\n      // if it contains a placeholder\n      // return olStyleFunction\n      const olPointStyledIconFn = (feature: any) => {\n        let src: string = OlStyleUtil.resolveAttributeTemplate(feature, symbolizer.image as string, '');\n        // src can't be blank, would trigger ol errors\n        if (!src) {\n          src = symbolizer.image + '';\n        }\n        let image;\n        if (this.olIconStyleCache[src]) {\n          image = this.olIconStyleCache[src];\n          if (baseProps.rotation !== undefined) {\n            image.setRotation(baseProps.rotation);\n          }\n          if (baseProps.opacity !== undefined) {\n            image.setOpacity(baseProps.opacity);\n          }\n        } else {\n          image = new this.OlStyleIconConstructor({\n            ...baseProps,\n            src // order is important\n          });\n          this.olIconStyleCache[src] = image;\n        }\n        const style = new this.OlStyleConstructor({\n          image\n        });\n        return style;\n      };\n      return olPointStyledIconFn;\n    } else {\n      return new this.OlStyleConstructor({\n        image: new this.OlStyleIconConstructor({\n          ...baseProps\n        })\n      });\n    }\n  }\n\n  /**\n   * Get the OL Style object from an GeoStyler-Style LineSymbolizer.\n   *\n   * @param symbolizer A GeoStyler-Style LineSymbolizer.\n   * @return The OL Style object\n   */\n  getOlLineSymbolizerFromLineSymbolizer(symbolizer: LineSymbolizer, feat?: OlFeature): OlStyle | OlStyleStroke {\n    for (const key of Object.keys(symbolizer)) {\n      if (isGeoStylerFunction(symbolizer[key as keyof LineSymbolizer])) {\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\n      }\n    }\n    const color = symbolizer.color as string;\n    const opacity = symbolizer.opacity as number;\n    const sColor = (color && opacity !== null && opacity !== undefined) ?\n      OlStyleUtil.getRgbaColor(color, opacity) : color;\n\n    return new this.OlStyleConstructor({\n      stroke: new this.OlStyleStrokeConstructor({\n        color: sColor,\n        width: symbolizer.width as number,\n        lineCap: symbolizer.cap as CapType,\n        lineJoin: symbolizer.join as JoinType,\n        lineDash: symbolizer.dasharray as number[],\n        lineDashOffset: symbolizer.dashOffset as number\n      })\n    });\n  }\n\n  /**\n   * Get the OL Style object from an GeoStyler-Style FillSymbolizer.\n   *\n   * @param symbolizer A GeoStyler-Style FillSymbolizer.\n   * @return The OL Style object\n   */\n  getOlPolygonSymbolizerFromFillSymbolizer(symbolizer: FillSymbolizer, feat?: OlFeature): OlStyle | OlStyleFill {\n    for (const key of Object.keys(symbolizer)) {\n      if (isGeoStylerFunction(symbolizer[key as keyof FillSymbolizer])) {\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\n      }\n    }\n\n    const color = symbolizer.color as string;\n    const opacity = symbolizer.fillOpacity as number;\n    const fColor = color && Number.isFinite(opacity)\n      ? OlStyleUtil.getRgbaColor(color, opacity)\n      : color;\n\n    let fill = color\n      ? new this.OlStyleFillConstructor({color: fColor})\n      : undefined;\n\n    const outlineColor = symbolizer.outlineColor as string;\n    const outlineOpacity = symbolizer.outlineOpacity as number;\n    const oColor = (outlineColor && Number.isFinite(outlineOpacity))\n      ? OlStyleUtil.getRgbaColor(outlineColor, outlineOpacity)\n      : outlineColor;\n\n    const stroke = outlineColor || symbolizer.outlineWidth ? new this.OlStyleStrokeConstructor({\n      color: oColor,\n      width: symbolizer.outlineWidth as number,\n      lineDash: symbolizer.outlineDasharray as number[],\n    }) : undefined;\n\n    const olStyle = new this.OlStyleConstructor({\n      fill,\n      stroke\n    });\n\n    if (symbolizer.graphicFill) {\n      const pattern = this.getOlPatternFromGraphicFill(symbolizer.graphicFill);\n      if (!fill) {\n        fill = new this.OlStyleFillConstructor({});\n      }\n      if (pattern) {\n        fill.setColor(pattern);\n      }\n      olStyle.setFill(fill);\n    }\n\n    return olStyle;\n  }\n\n  /**\n   * Get the pattern for a graphicFill.\n   *\n   * This creates a CanvasPattern based on the\n   * properties of the given PointSymbolizer. Currently,\n   * only IconSymbolizer and MarkSymbolizer are supported.\n   *\n   * @param graphicFill The Symbolizer that holds the pattern config.\n   * @returns The created CanvasPattern, or null.\n   */\n  getOlPatternFromGraphicFill(graphicFill: PointSymbolizer): CanvasPattern | null {\n    let graphicFillStyle: any;\n    if (isIconSymbolizer(graphicFill)) {\n      graphicFillStyle = this.getOlIconSymbolizerFromIconSymbolizer(graphicFill);\n      const graphicFillImage = graphicFillStyle?.getImage();\n      graphicFillImage?.load(); // Needed for Icon type images with a remote src\n      // We can only work with the image once it's loaded\n      if (graphicFillImage?.getImageState() !== OlImageState.LOADED) {\n        return null;\n      }\n    } else if (isMarkSymbolizer(graphicFill)) {\n      graphicFillStyle = this.getOlPointSymbolizerFromMarkSymbolizer(graphicFill);\n    } else {\n      return null;\n    }\n\n    // We need to clone the style and image since we'll be changing the scale below (hack)\n    const graphicFillStyleCloned = graphicFillStyle.clone();\n    const imageCloned = graphicFillStyleCloned.getImage();\n\n    // Temporary canvas.\n    // TODO: Can/should we reuse an pre-existing one for efficiency?\n    const tmpCanvas: HTMLCanvasElement = document.createElement('canvas');\n    const tmpContext = tmpCanvas.getContext('2d') as CanvasRenderingContext2D;\n\n    // Hack to make scaling work for Icons.\n    // TODO: find a better way than this.\n    const scale = imageCloned.getScale() || 1;\n    const pixelRatio = scale;\n    imageCloned.setScale(1);\n\n    const size: [number, number] = imageCloned.getSize();\n\n    // Create the context where we'll be drawing the style on\n    const vectorContext = toContext(tmpContext, {\n      pixelRatio,\n      size\n    });\n\n    // Draw the graphic\n    vectorContext.setStyle(graphicFillStyleCloned);\n    const pointCoords = size.map(item  => item / 2);\n    vectorContext.drawGeometry(new OlGeomPoint(pointCoords));\n\n    // Create the actual pattern and return style\n    return tmpContext.createPattern(tmpCanvas, 'repeat');\n  }\n\n  /**\n   * Get the OL StyleFunction object from an GeoStyler-Style TextSymbolizer.\n   *\n   * @param {TextSymbolizer} textSymbolizer A GeoStyler-Style TextSymbolizer.\n   * @return {object} The OL StyleFunction\n   */\n  getOlTextSymbolizerFromTextSymbolizer(\n    symbolizer: TextSymbolizer,\n    feat?: OlFeature\n  ): OlStyle | OlStyleText | OlStyleFunction {\n    for (const key of Object.keys(symbolizer)) {\n      if (isGeoStylerFunction(symbolizer[key as keyof TextSymbolizer])) {\n        (symbolizer as any)[key] = OlStyleUtil.evaluateFunction((symbolizer as any)[key], feat);\n      }\n    }\n    const color = symbolizer.color as string;\n    let placement = symbolizer.placement;\n    if (!placement) {\n      // When setting placement it must not be undefined.\n      // So we set it to the OL default value.\n      placement = 'point';\n    }\n    if (placement === 'line-center') {\n      // line-center not supported by OL.\n      // So we use the closest supported value.\n      placement = 'line';\n    }\n    const opacity = symbolizer.opacity as number;\n    const fColor = color && Number.isFinite(opacity)\n      ? OlStyleUtil.getRgbaColor(color, opacity)\n      : color;\n\n    const haloColor = symbolizer.haloColor as string;\n    const haloWidth = symbolizer.haloWidth as number;\n    const sColor = haloColor && Number.isFinite(opacity)\n      ? OlStyleUtil.getRgbaColor(haloColor, opacity)\n      : haloColor;\n    const baseProps: OlStyleTextOptions = {\n      font: OlStyleUtil.getTextFont(symbolizer),\n      fill: new this.OlStyleFillConstructor({\n        color: fColor\n      }),\n      stroke: new this.OlStyleStrokeConstructor({\n        color: sColor,\n        width: haloWidth ? haloWidth : 0 as number\n      }),\n      overflow: symbolizer.allowOverlap as boolean,\n      offsetX: (symbolizer.offset ? symbolizer.offset[0] : 0) as number,\n      offsetY: (symbolizer.offset ? symbolizer.offset[1] : 0) as number,\n      rotation: typeof(symbolizer.rotate) === 'number' ? symbolizer.rotate * Math.PI / 180 : undefined,\n      placement: placement as 'line' | 'point'\n      // TODO check why props match\n      // textAlign: symbolizer.pitchAlignment,\n      // textBaseline: symbolizer.anchor\n    };\n\n    // check if TextSymbolizer.label contains a placeholder\n    const prefix = '\\\\{\\\\{';\n    const suffix = '\\\\}\\\\}';\n    const regExp = new RegExp(prefix + '.*?' + suffix, 'g');\n    let regExpRes;\n    if (!isGeoStylerStringFunction(symbolizer.label)) {\n      regExpRes = symbolizer.label ? symbolizer.label.match(regExp) : null;\n    }\n    if (regExpRes) {\n      // if it contains a placeholder\n      // return olStyleFunction\n      const olPointStyledLabelFn = (feature: any) => {\n\n        const text = new this.OlStyleTextConstructor({\n          text: OlStyleUtil.resolveAttributeTemplate(feature, symbolizer.label as string, ''),\n          ...baseProps\n        });\n\n        const style = new this.OlStyleConstructor({\n          text: text\n        });\n\n        return style;\n      };\n      return olPointStyledLabelFn;\n    } else {\n      // if TextSymbolizer does not contain a placeholder\n      // return OlStyle\n      return new this.OlStyleConstructor({\n        text: new this.OlStyleTextConstructor({\n          text: symbolizer.label as string,\n          ...baseProps\n        })\n      });\n    }\n  }\n\n}\n\nexport default OlStyleParser;\n"]}