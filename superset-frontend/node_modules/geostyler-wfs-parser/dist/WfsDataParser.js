"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WfsDataParser = void 0;
var isEmpty = require('lodash/isEmpty');
var isFinite = require('lodash/isFinite');
var fast_xml_parser_1 = require("fast-xml-parser");
/**
 * Class implementing DataParser to fetch schema and sample data
 * using WFS requests (DescribeFeatureType resp. GetFeature)
 */
var WfsDataParser = /** @class */ (function () {
    function WfsDataParser() {
        this.title = 'WFS Data Parser';
    }
    /**
     * Generate request parameter string for a passed object
     *
     * @param {Object} params Object holding request params
     * @return {string} The URI encoded request parameter string joined with &
     */
    WfsDataParser.prototype.generateRequestParamString = function (params) {
        return Object.keys(params)
            .filter(function (key) { return !isEmpty(params[key]) || isFinite(params[key]); })
            .map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]); })
            .join('&');
    };
    /**
     * Map XSD datatypes (SimpleType) to json schema data stypes
     *
     * @param qualifiedXsdDataType The XSD datatype as string (including namespace)
     * @returns {JSONSchema4TypeName} The corresponding JSON schema type name
     */
    WfsDataParser.prototype.mapXsdTypeToJsonDataType = function (qualifiedXsdDataType) {
        var xsdDataType = qualifiedXsdDataType.indexOf(':') > -1
            ? qualifiedXsdDataType.split(':')[1]
            : qualifiedXsdDataType;
        switch (xsdDataType) {
            case 'string':
                return 'string';
            case 'boolean':
                return 'boolean';
            case 'float':
            case 'double':
            case 'long':
            case 'byte':
            case 'decimal':
            case 'integer':
            case 'int':
            case 'positiveInteger':
            case 'negativeInteger':
            case 'nonPositiveInteger':
            case 'nonNegativeInteger':
            case 'short':
            case 'unsignedLong':
            case 'unsignedInt':
            case 'unsignedShort':
            case 'unsignedByte':
                return 'number';
            default:
                return 'string';
        }
    };
    /**
     * Fetch schema and sample data and transforms it to the GeoStyler data model.
     *
     * Currently, WFS service must support application/json as outputFormat
     * and needs CORS headers (only needed if WFS Service is not located on the same origin
     * as the component using this parser) to be available in responses
     *
     * @param wfsConfig The parameters of the WFS
     */
    WfsDataParser.prototype.readData = function (_a) {
        return __awaiter(this, arguments, void 0, function (_b) {
            var desribeFeatureTypeOpts, schema, requestParamsString, requestDescribeFeatureType, describeFeatureTypeResponse, describeFeatueTypeResult, parser, result, attributes, properties_1, title, error_1, exampleFeatures, requestGetFeature, getFeatureResponse, getFeatureResult, error_2;
            var _this = this;
            var _c, _d, _e, _f, _g, _h, _j;
            var url = _b.url, requestParams = _b.requestParams, _k = _b.fetchParams, fetchParams = _k === void 0 ? {} : _k;
            return __generator(this, function (_l) {
                switch (_l.label) {
                    case 0:
                        if (!requestParams.outputFormat) {
                            requestParams.outputFormat = 'application/json';
                        }
                        if (requestParams.version === '1.1.0') {
                            desribeFeatureTypeOpts = {
                                version: requestParams.version,
                                maxFeatures: requestParams.maxFeatures,
                                typeName: requestParams.typeName,
                                outputFormat: requestParams.outputFormat
                            };
                        }
                        else {
                            desribeFeatureTypeOpts = {
                                version: requestParams.version,
                                count: requestParams.count,
                                typeNames: requestParams.typeNames,
                                outputFormat: requestParams.outputFormat
                            };
                        }
                        _l.label = 1;
                    case 1:
                        _l.trys.push([1, 4, , 5]);
                        requestParamsString = this.generateRequestParamString(__assign(__assign({}, desribeFeatureTypeOpts), { service: 'WFS', request: 'DescribeFeatureType' }));
                        requestDescribeFeatureType = "".concat(url, "?").concat(requestParamsString);
                        return [4 /*yield*/, fetch(requestDescribeFeatureType, fetchParams)];
                    case 2:
                        describeFeatureTypeResponse = _l.sent();
                        return [4 /*yield*/, describeFeatureTypeResponse.text()];
                    case 3:
                        describeFeatueTypeResult = _l.sent();
                        parser = new fast_xml_parser_1.XMLParser({
                            removeNSPrefix: true,
                            ignoreDeclaration: true,
                            ignoreAttributes: false
                        });
                        result = parser.parse(describeFeatueTypeResult);
                        attributes = (_g = (_f = (_e = (_d = (_c = result === null || result === void 0 ? void 0 : result.schema) === null || _c === void 0 ? void 0 : _c.complexType) === null || _d === void 0 ? void 0 : _d.complexContent) === null || _e === void 0 ? void 0 : _e.extension) === null || _f === void 0 ? void 0 : _f.sequence) === null || _g === void 0 ? void 0 : _g.element;
                        properties_1 = {};
                        if (attributes) {
                            if (!Array.isArray(attributes)) {
                                attributes = [attributes];
                            }
                            attributes.forEach(function (attr) {
                                var name = attr['@_name'];
                                var type = attr['@_type'];
                                if (!properties_1[name]) {
                                    var propertyType = { type: _this.mapXsdTypeToJsonDataType(type) };
                                    properties_1[name] = propertyType;
                                }
                            });
                        }
                        title = (_j = (_h = result === null || result === void 0 ? void 0 : result.schema) === null || _h === void 0 ? void 0 : _h.element) === null || _j === void 0 ? void 0 : _j['@_name'];
                        schema = {
                            type: 'object',
                            title: title,
                            properties: properties_1
                        };
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _l.sent();
                        throw "Could not parse XML document: ".concat(error_1);
                    case 5:
                        _l.trys.push([5, 8, , 9]);
                        requestGetFeature = "".concat(url, "?").concat(this.generateRequestParamString(__assign(__assign({}, requestParams), { service: 'WFS', request: 'GetFeature', outputFormat: 'application/json' })));
                        return [4 /*yield*/, fetch(requestGetFeature, fetchParams)];
                    case 6:
                        getFeatureResponse = _l.sent();
                        return [4 /*yield*/, getFeatureResponse.json()];
                    case 7:
                        getFeatureResult = _l.sent();
                        exampleFeatures = getFeatureResult;
                        return [3 /*break*/, 9];
                    case 8:
                        error_2 = _l.sent();
                        exampleFeatures = {
                            type: 'FeatureCollection',
                            features: []
                        };
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/, {
                            schema: schema,
                            exampleFeatures: exampleFeatures
                        }];
                }
            });
        });
    };
    /**
     * The name of the WfsDataParser.
     */
    WfsDataParser.title = 'WFS Data Parser';
    return WfsDataParser;
}());
exports.WfsDataParser = WfsDataParser;
exports.default = WfsDataParser;
//# sourceMappingURL=WfsDataParser.js.map