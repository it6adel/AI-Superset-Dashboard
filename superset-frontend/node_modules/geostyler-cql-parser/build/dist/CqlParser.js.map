{"version":3,"file":"CqlParser.js","sourceRoot":"","sources":["../../src/CqlParser.ts"],"names":[],"mappings":";;;;;;AAAA,mDASyB;AAEzB,iCAIgB;AAEhB,uBAAuB;AACvB,4DAAkC;AAsBlC;IAgCE;QA9BA,WAAM,GAAkB;YACtB,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS;SAC7C,CAAC;QAEF,iBAAY,GAAiB;YAC3B,GAAG,EAAE,IAAI;YACT,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,OAAO;SACjB,CAAC;QAEF,uBAAkB,GAAwB,EAAE,CAAC;QAE7C,4BAAuB,GAA4B;YACjD,GAAG,EAAE,IAAI;YACT,EAAE,EAAE,IAAI;SACT,CAAC;QAEF,mCAA8B,GAAmC,EAAE,CAAC;QAEpE,eAAU,GAAkB;YAC1B,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,CAAC;YACV,UAAU,EAAE,CAAC;SACd,CAAC;QAGM,IAAA,KAKF,IAAI,EAJN,uBAAuB,6BAAA,EACvB,8BAA8B,oCAAA,EAC9B,YAAY,kBAAA,EACZ,kBAAkB,wBACZ,CAAC;QAET,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;aACtB,OAAO,CAAC,UAAC,QAAqB;YAC7B,IAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;YACrC,kBAAkB,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QACvC,CAAC,CAAC,CAAC;QAEL,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC;aACjC,OAAO,CAAC,UAAC,mBAAiC;YACzC,IAAM,KAAK,GAAwB,uBAAuB,CAAC,mBAAmB,CAAC,CAAC;YAChF,8BAA8B,CAAC,KAAK,CAAC,GAAG,mBAAmB,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,wBAAI,GAAJ,UAAK,IAAwB;QAC3B,IAAI;YACF,OAAO,oBAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAED,yBAAK,GAAL,UACE,MAAkD,EAClD,OAAiB;QAFnB,iBA0EC;QAtEO,IAAA,KAIF,IAAI,EAHN,kBAAkB,wBAAA,EAClB,8BAA8B,oCAAA,EAC9B,KAAK,WACC,CAAC;QAET,IAAI,MAAM,IAAI,IAAA,qCAAmB,EAAC,MAAM,CAAC,EAAE;YACzC,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACpD,OAAO,MAAM,CAAC,IAAI,CAAC;aACpB;iBAAM;gBACL,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAb,CAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5D,OAAO,UAAG,MAAM,CAAC,IAAI,cAAI,IAAI,MAAG,CAAC;aAClC;SACF;QAED,wBAAwB;QACxB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrB,OAAO,SAAS,CAAC;aAClB;YACD,IAAI,CAAC,IAAA,4BAAU,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,wBAAiB,MAAM,CAAE,CAAC,CAAC;aAC5C;SACF;QAED,IAAI,IAAA,0BAAQ,EAAC,MAAM,CAAC,EAAE;YACpB,IAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAM,WAAW,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAEjD,QAAQ,QAAQ,EAAE;gBAChB,KAAK,GAAG;oBACN,wDAAwD;oBACxD,OAAO,gBAAS,KAAK,CAAC,MAAM,CAAC,CAAC,CAAQ,CAAC,OAAI,CAAC;gBAC9C,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI;oBACP,IAAI,SAAS,GAAW,EAAE,CAAC;oBAC3B,IAAM,sBAAsB,GAAG,8BAA8B,CAAC,QAAQ,CAAC,CAAC;oBACxE,SAAS,IAAI,MAAM;yBAChB,KAAK,CAAC,CAAC,CAAC;wBACT,wDAAwD;yBACvD,GAAG,CAAC,UAAC,CAAM,IAAK,OAAA,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,EAAd,CAAc,CAAC;yBAC/B,IAAI,CAAC,WAAI,sBAAsB,MAAG,CAAC,CAAC;oBACvC,IAAI,OAAO,EAAE;wBACX,OAAO,WAAI,SAAS,MAAG,CAAC;qBACzB;yBAAM;wBACL,OAAO,SAAS,CAAC;qBAClB;gBACH,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI,CAAC;gBACV,KAAK,GAAG,CAAC;gBACT,KAAK,IAAI,CAAC;gBACV,KAAK,GAAG,CAAC;gBACT,KAAK,IAAI;oBACP,IAAM,aAAa,GAAG,IAAA,iBAAS,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3C,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAI,aAAa,EAAE;wBACjB,KAAK,GAAG,WAAI,KAAK,MAAG,CAAC;qBACtB;oBACD,OAAO,UAAG,MAAM,CAAC,CAAC,CAAC,cAAI,WAAW,cAAI,KAAK,CAAE,CAAC;gBAChD,KAAK,OAAO;oBACV,OAAO,UAAG,MAAM,CAAC,CAAC,CAAC,cAAI,WAAW,cAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,kBAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC;gBAC7F,KAAK,SAAS;oBACZ,MAAM;gBACR;oBACE,MAAM;aACT;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEH,gBAAC;AAAD,CAAC,AA5ID,IA4IC;AA5IY,8BAAS;AA8ItB,kBAAe,SAAS,CAAC","sourcesContent":["import {\n  CombinationOperator,\n  Operator,\n  Filter,\n  Expression,\n  PropertyType,\n  isGeoStylerFunction,\n  isFilter,\n  isOperator\n} from 'geostyler-style';\n\nimport {\n  isString as _isString,\n  isNumber as _isNumber,\n  isNaN as _isNaN\n} from 'lodash';\n\n// @ts-ignore:next-line\nimport Parser from './cql-parser';\n\ntype PatternName = 'PROPERTY' | 'COMPARISON' | 'VALUE' | 'LOGICAL' | 'LPAREN' | 'RPAREN'\n  | 'SPATIAL' | 'NOT' | 'BETWEEN' | 'GEOMETRY' | 'END' | 'COMMA' | 'IS_NULL';\ntype CqlOperator = '=' | '<>' | '<' | '<=' | '>' | '>=' | 'LIKE' | 'BETWEEN' | 'IS NULL';\n\ntype OperatorsMap = {\n  [cqlOperator: string]: Operator;\n};\ntype CombinationOperatorsMap = {\n  [cqlOperator: string]: CombinationOperator;\n};\ntype OperatorsReverseMap = {\n  [cqlOperator: string]: CqlOperator;\n};\ntype CombinationOperatorsReverseMap = {\n  [cqlOperator: string]: 'AND' | 'OR';\n};\ntype PrecedenceMap = {\n  [name: string]: 1 | 2 | 3;\n};\n\nexport class CqlParser {\n\n  tokens: PatternName[] = [\n    'PROPERTY', 'COMPARISON', 'VALUE', 'LOGICAL'\n  ];\n\n  operatorsMap: OperatorsMap = {\n    '=': '==',\n    '<>': '!=',\n    '<': '<',\n    '<=': '<=',\n    '>': '>',\n    '>=': '>=',\n    LIKE: '*=',\n    BETWEEN: '<=x<='\n  };\n\n  operatorReverseMap: OperatorsReverseMap = {};\n\n  combinationOperatorsMap: CombinationOperatorsMap = {\n    AND: '&&',\n    OR: '||'\n  };\n\n  combinationOperatorsReverseMap: CombinationOperatorsReverseMap = {};\n\n  precedence: PrecedenceMap = {\n    RPAREN: 3,\n    LOGICAL: 2,\n    COMPARISON: 1\n  };\n\n  constructor() {\n    const {\n      combinationOperatorsMap,\n      combinationOperatorsReverseMap,\n      operatorsMap,\n      operatorReverseMap\n    } = this;\n\n    Object.keys(operatorsMap)\n      .forEach((operator: CqlOperator) => {\n        const value = operatorsMap[operator];\n        operatorReverseMap[value] = operator;\n      });\n\n    Object.keys(combinationOperatorsMap)\n      .forEach((combinationOperator: 'AND' | 'OR') => {\n        const value: CombinationOperator = combinationOperatorsMap[combinationOperator];\n        combinationOperatorsReverseMap[value] = combinationOperator;\n      });\n\n    this.read = this.read.bind(this);\n    this.write = this.write.bind(this);\n  }\n\n  read(text: string | undefined): Filter | Expression<PropertyType> | undefined {\n    try {\n      return Parser.parse(text);\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  write(\n    filter: RegExp | Filter | Expression<PropertyType>,\n    isChild?: boolean\n  ): PropertyType {\n    const {\n      operatorReverseMap,\n      combinationOperatorsReverseMap,\n      write\n    } = this;\n\n    if (filter && isGeoStylerFunction(filter)) {\n      if (filter.name === 'pi' || filter.name === 'random') {\n        return filter.name;\n      } else {\n        const args = filter.args.map(a => this.write(a)).join(', ');\n        return `${filter.name}(${args})`;\n      }\n    }\n\n    // catch illegal filters\n    if (Array.isArray(filter)) {\n      if (filter.length < 2) {\n        return undefined;\n      }\n      if (!isOperator(filter[0])) {\n        throw new Error(`Can't encode: ${filter}`);\n      }\n    }\n\n    if (isFilter(filter)) {\n      const operator = filter[0];\n      const cqlOperator = operatorReverseMap[operator];\n\n      switch (operator) {\n        case '!':\n          // TODO this should be better typed, get rid of `as any`\n          return `NOT ( ${write(filter[1] as any)} )`;\n        case '&&':\n        case '||':\n          let cqlFilter: string = '';\n          const cqlCombinationOperator = combinationOperatorsReverseMap[operator];\n          cqlFilter += filter\n            .slice(1)\n            // TODO this should be better typed, get rid of `f: any`\n            .map((f: any) => write(f, true))\n            .join(` ${cqlCombinationOperator} `);\n          if (isChild) {\n            return `(${cqlFilter})`;\n          } else {\n            return cqlFilter;\n          }\n        case '==':\n        case '*=':\n        case '!=':\n        case '<':\n        case '<=':\n        case '>':\n        case '>=':\n          const valueIsString = _isString(filter[2]);\n          let value = filter[2];\n          if (valueIsString) {\n            value = `'${value}'`;\n          }\n          return `${filter[1]} ${cqlOperator} ${value}`;\n        case '<=x<=':\n          return `${filter[1]} ${cqlOperator} ${this.write(filter[2])} AND ${this.write(filter[3])}`;\n        case undefined:\n          break;\n        default:\n          break;\n      }\n    }\n\n    return filter;\n  }\n\n}\n\nexport default CqlParser;\n"]}