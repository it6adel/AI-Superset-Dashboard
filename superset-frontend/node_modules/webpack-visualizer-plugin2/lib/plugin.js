"use strict";

var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _mkdirp = _interopRequireDefault(require("mkdirp"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var cssString = _fs["default"].readFileSync(_path["default"].join(__dirname, './style.css'), 'utf8');
var jsString = _fs["default"].readFileSync(_path["default"].join(__dirname, './main.js'), 'utf8');
module.exports = /*#__PURE__*/function () {
  function VisualizerPlugin() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, VisualizerPlugin);
    this.opts = _objectSpread({
      filename: 'stats.html',
      throwOnError: true
    }, opts);
  }
  _createClass(VisualizerPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;
      compiler.hooks.emit.tapAsync('Visualizer', function (compilation, callback) {
        var html;
        try {
          var stats = compilation.getStats().toJson({
            chunkModules: true
          });
          var stringifiedStats = JSON.stringify(stats).replace(/</g, '&lt;').replace(/>/g, '&gt;');
          html = "\n                    <!DOCTYPE html>\n                    <html lang=\"en\">\n                        <head>\n                            <meta charset=\"UTF-8\">\n                            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                            <title>Webpack Visualizer</title>\n                            <style>".concat(cssString, "</style>\n                        </head>\n                        <body>\n                            <div id=\"App\"></div>\n                            <script>window.stats = ").concat(stringifiedStats, ";</script>\n                            <script>").concat(jsString, "</script>\n                        </body>\n                    </html>\n                ");
        } catch (error) {
          console.error('webpack-visualizer-plugin: error creating stats file');
          if (_this.opts.throwOnError) {
            return callback(error);
          } else {
            console.error(error);
            return callback();
          }
        }
        var outputFile = _path["default"].join(compilation.outputOptions.path, _this.opts.filename);
        (0, _mkdirp["default"])(_path["default"].dirname(outputFile), function (mkdirpErr) {
          if (mkdirpErr) {
            console.error('webpack-visualizer-plugin: error writing stats file');
            if (_this.opts.throwOnError) {
              return callback(mkdirpErr);
            } else {
              return callback();
            }
          }
          _fs["default"].writeFile(outputFile, html, function (err) {
            if (err) {
              console.error('webpack-visualizer-plugin: error writing stats file');
              if (_this.opts.throwOnError) {
                return callback(err);
              }
            }
            callback();
          });
        });
      });
    }
  }]);
  return VisualizerPlugin;
}();
