#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = require("process");
const index_1 = __importDefault(require("./index"));
void (() => __awaiter(void 0, void 0, void 0, function* () {
    const args = process.argv.slice(2);
    try {
        const child = yield (0, index_1.default)(args);
        if (child.stdout) {
            console.log(child.stdout);
        }
        else {
            console.error(child.stderr);
        }
        (0, process_1.exit)(child.exitCode);
    }
    catch (e) {
        console.error("Failed to execute type checking:", e);
        console.error("Received arguments:", args.join(" "));
        (0, process_1.exit)(1);
    }
}))();
//# sourceMappingURL=cli.js.map