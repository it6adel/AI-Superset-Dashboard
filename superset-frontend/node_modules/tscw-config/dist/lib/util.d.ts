export declare const fileExists: (...paths: string[]) => boolean;
export declare const getRootDirForCurrentWorkSpace: () => string | null;
export declare const getFilesRecursivelySync: (dir: string, regex: RegExp) => string[];
export declare const processArgs: (args: string[]) => {
    error: {
        pid: null;
        exitCode: number;
        stderr: string;
        stdout: null;
    };
    indexOfProjectFlag?: undefined;
    remainingCliOptions?: undefined;
    files?: undefined;
    declarationFiles?: undefined;
} | {
    indexOfProjectFlag: number;
    remainingCliOptions: string[];
    files: string[];
    error: null;
    declarationFiles: string[];
};
export declare const getNearestTsconfig: (rootDirForCurrentWorkSpace: string) => string | null;
export interface SpawnResult {
    pid: number;
    exitCode: number;
    stdout: string;
    stderr: string;
}
export declare const runTsc: (args: string[], rootDirForCurrentWorkSpace: string, isPnp: boolean) => Promise<SpawnResult>;
export declare const processJsonData: (rawData: string, files: string[]) => Promise<Record<string, unknown>>;
export declare const isRunning: (pid: number) => boolean;
export type TemplateExpression = (string | number)[];
export declare const templateLiteralToArray: (strings: TemplateStringsArray, ...values: TemplateExpression) => string[];
export declare const isTemplateStringsArray: (arr: readonly unknown[]) => arr is TemplateStringsArray;
export declare const getArgArray: (arr: TemplateStringsArray | string[], ...args: TemplateExpression | never[]) => string[];
export declare const registerCleanup: (process: NodeJS.Process, tmpTsconfig: string) => void;
