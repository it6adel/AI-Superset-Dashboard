{"ast":null,"code":"import ChartWrapper from '../components/ChartWrapper';\n/**\n * Create a chart component for a location.\n *\n * @param chartVizType The superset visualization type\n * @param chartConfigs The chart configurations\n * @param chartWidth The chart width\n * @param chartHeight The chart height\n * @param chartTheme The chart theme\n * @returns The chart as React component\n */import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const createChartComponent = (chartVizType, chartConfig, chartWidth, chartHeight, chartTheme) => _jsx(ChartWrapper, { vizType: chartVizType, chartConfig: chartConfig, width: chartWidth, height: chartHeight, theme: chartTheme });\n/**\n * Simplifies a chart configuration by removing\n * non-serializable properties.\n *\n * @param config The chart configuration to simplify.\n * @returns The simplified chart configuration.\n */\nexport const simplifyConfig = (config) => {\n  const simplifiedConfig = {\n    type: config.type,\n    features: config.features.map((f) => ({\n      type: f.type,\n      geometry: f.geometry,\n      properties: Object.keys(f.properties).\n      filter((k) => k !== 'refs').\n      reduce((prev, cur) => ({ ...prev, [cur]: f.properties[cur] }), {})\n    }))\n  };\n  return simplifiedConfig;\n};\n/**\n * Check if two chart configurations are equal (deep equality).\n *\n * @param configA The first chart config for comparison.\n * @param configB The second chart config for comparison.\n * @returns True, if configurations are equal. False otherwise.\n */\nexport const isChartConfigEqual = (configA, configB) => {\n  const simplifiedConfigA = simplifyConfig(configA);\n  const simplifiedConfigB = simplifyConfig(configB);\n  return JSON.stringify(simplifiedConfigA) === JSON.stringify(simplifiedConfigB);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}