{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\nimport { styled, useTheme } from '@superset-ui/core';\nimport Label from 'src/components/Label';\nimport Icons from 'src/components/Icons';\nimport { now, fDuration } from 'src/utils/dates';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst TimerLabel = styled(Label)`\n  text-align: left;\n  font-family: ${({ theme }) => theme.typography.families.monospace};\n`;\nexport default function Timer({ endTime, isRunning, startTime, status = 'success' }) {\n  const theme = useTheme();\n  const [clockStr, setClockStr] = useState('00:00:00.00');\n  const timer = useRef();\n  const getIconColor = (status) => {\n    const { colors } = theme;\n    const colorMap = {\n      success: colors.success.dark2,\n      warning: colors.warning.dark2,\n      danger: colors.error.dark2,\n      info: colors.info.dark2,\n      default: colors.grayscale.dark1,\n      primary: colors.primary.dark2,\n      secondary: colors.secondary.dark2\n    };\n    return colorMap[status] || colors.grayscale.dark1;\n  };\n  useEffect(() => {\n    const stopTimer = () => {\n      if (timer.current) {\n        clearInterval(timer.current);\n        timer.current = undefined;\n      }\n    };\n    if (isRunning) {\n      timer.current = setInterval(() => {\n        if (startTime) {\n          const endDttm = endTime || now();\n          if (startTime < endDttm) {\n            setClockStr(fDuration(startTime, endDttm));\n          }\n          if (!isRunning) {\n            stopTimer();\n          }\n        }\n      }, 30);\n    }\n    return stopTimer;\n  }, [endTime, isRunning, startTime]);\n  return _jsx(TimerLabel, { icon: _jsx(Icons.ClockCircleOutlined, { iconColor: getIconColor(status), iconSize: \"m\" }), type: status, role: \"timer\", children:\n    clockStr }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}