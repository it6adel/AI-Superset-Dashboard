{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t } from '@superset-ui/core';\n\nimport { ControlSubSectionHeader, getStandardizedControls, sections, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { EchartsTimeseriesSeriesType } from '../Timeseries/types';\nimport { legendSection, minorTicks, richTooltipSection, truncateXAxis, xAxisBounds, xAxisLabelRotation } from '../controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { area, logAxis, markerEnabled, markerSize, minorSplitLine, opacity, orderDesc, rowLimit, seriesType, showValues, stack, truncateYAxis, yAxisBounds, zoomable, yAxisIndex } = DEFAULT_FORM_DATA;\nfunction createQuerySection(label, controlSuffix) {\n  return {\n    label,\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: `metrics${controlSuffix}`,\n      config: sharedControls.metrics\n    }],\n\n    [\n    {\n      name: `groupby${controlSuffix}`,\n      config: sharedControls.groupby\n    }],\n\n    [\n    {\n      name: `adhoc_filters${controlSuffix}`,\n      config: sharedControls.adhoc_filters\n    }],\n\n    [\n    {\n      name: `limit${controlSuffix}`,\n      config: sharedControls.limit\n    }],\n\n    [\n    {\n      name: `timeseries_limit_metric${controlSuffix}`,\n      config: sharedControls.timeseries_limit_metric\n    }],\n\n    [\n    {\n      name: `order_desc${controlSuffix}`,\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort Descending'),\n        default: orderDesc,\n        description: t('Whether to sort descending or ascending')\n      }\n    }],\n\n    [\n    {\n      name: `row_limit${controlSuffix}`,\n      config: {\n        ...sharedControls.row_limit,\n        default: rowLimit\n      }\n    }],\n\n    [\n    {\n      name: `truncate_metric${controlSuffix}`,\n      config: {\n        ...sharedControls.truncate_metric,\n        default: sharedControls.truncate_metric.default\n      }\n    }]]\n\n\n  };\n}\nfunction createCustomizeSection(label, controlSuffix) {\n  return [\n  [_jsx(ControlSubSectionHeader, { children: label })],\n  [\n  {\n    name: `seriesType${controlSuffix}`,\n    config: {\n      type: 'SelectControl',\n      label: t('Series type'),\n      renderTrigger: true,\n      default: seriesType,\n      choices: [\n      [EchartsTimeseriesSeriesType.Line, t('Line')],\n      [EchartsTimeseriesSeriesType.Scatter, t('Scatter')],\n      [EchartsTimeseriesSeriesType.Smooth, t('Smooth Line')],\n      [EchartsTimeseriesSeriesType.Bar, t('Bar')],\n      [EchartsTimeseriesSeriesType.Start, t('Step - start')],\n      [EchartsTimeseriesSeriesType.Middle, t('Step - middle')],\n      [EchartsTimeseriesSeriesType.End, t('Step - end')]],\n\n      description: t('Series chart type (line, bar etc)')\n    }\n  }],\n\n  [\n  {\n    name: `stack${controlSuffix}`,\n    config: {\n      type: 'CheckboxControl',\n      label: t('Stack series'),\n      renderTrigger: true,\n      default: stack,\n      description: t('Stack series on top of each other')\n    }\n  }],\n\n  [\n  {\n    name: `area${controlSuffix}`,\n    config: {\n      type: 'CheckboxControl',\n      label: t('Area chart'),\n      renderTrigger: true,\n      default: area,\n      description: t('Draw area under curves. Only applicable for line types.')\n    }\n  }],\n\n  [\n  {\n    name: `show_value${controlSuffix}`,\n    config: {\n      type: 'CheckboxControl',\n      label: t('Show Values'),\n      renderTrigger: true,\n      default: showValues,\n      description: t('Whether to display the numerical values within the cells')\n    }\n  }],\n\n  [\n  {\n    name: `opacity${controlSuffix}`,\n    config: {\n      type: 'SliderControl',\n      label: t('Opacity'),\n      renderTrigger: true,\n      min: 0,\n      max: 1,\n      step: 0.1,\n      default: opacity,\n      description: t('Opacity of area chart.')\n    }\n  }],\n\n  [\n  {\n    name: `markerEnabled${controlSuffix}`,\n    config: {\n      type: 'CheckboxControl',\n      label: t('Marker'),\n      renderTrigger: true,\n      default: markerEnabled,\n      description: t('Draw a marker on data points. Only applicable for line types.')\n    }\n  }],\n\n  [\n  {\n    name: `markerSize${controlSuffix}`,\n    config: {\n      type: 'SliderControl',\n      label: t('Marker size'),\n      renderTrigger: true,\n      min: 0,\n      max: 100,\n      default: markerSize,\n      description: t('Size of marker. Also applies to forecast observations.')\n    }\n  }],\n\n  [\n  {\n    name: `yAxisIndex${controlSuffix}`,\n    config: {\n      type: 'SelectControl',\n      label: t('Y Axis'),\n      choices: [\n      [0, t('Primary')],\n      [1, t('Secondary')]],\n\n      default: yAxisIndex,\n      clearable: false,\n      renderTrigger: true,\n      description: t('Primary or secondary y-axis')\n    }\n  }]];\n\n\n}\nfunction createAdvancedAnalyticsSection(label, controlSuffix) {\n  const aaWithSuffix = _cloneDeep(sections.advancedAnalyticsControls);\n  aaWithSuffix.label = label;\n  if (!controlSuffix) {\n    return aaWithSuffix;\n  }\n  aaWithSuffix.controlSetRows.forEach((row) => row.forEach((control) => {\n    if (control != null && control.name) {\n      // eslint-disable-next-line no-param-reassign\n      control.name = `${control.name}${controlSuffix}`;\n    }\n  }));\n  return aaWithSuffix;\n}\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Shared query fields'),\n    expanded: true,\n    controlSetRows: [['x_axis'], ['time_grain_sqla']]\n  },\n  createQuerySection(t('Query A'), ''),\n  createAdvancedAnalyticsSection(t('Advanced analytics Query A'), ''),\n  createQuerySection(t('Query B'), '_b'),\n  createAdvancedAnalyticsSection(t('Advanced analytics Query B'), '_b'),\n  sections.annotationsAndLayersControls,\n  sections.titleControls,\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    ['time_shift_color'],\n    ...createCustomizeSection(t('Query A'), ''),\n    ...createCustomizeSection(t('Query B'), 'B'),\n    [\n    {\n      name: 'zoomable',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Data Zoom'),\n        default: zoomable,\n        renderTrigger: true,\n        description: t('Enable data zooming controls')\n      }\n    }],\n\n    [minorTicks],\n    ...legendSection,\n    [_jsx(ControlSubSectionHeader, { children: t('X Axis') })],\n    ['x_axis_time_format'],\n    [xAxisLabelRotation],\n    ...richTooltipSection,\n    // eslint-disable-next-line react/jsx-key\n    [_jsx(ControlSubSectionHeader, { children: t('Y Axis') })],\n    [\n    {\n      name: 'minorSplitLine',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Minor Split Line'),\n        renderTrigger: true,\n        default: minorSplitLine,\n        description: t('Draw split lines for minor y-axis ticks')\n      }\n    }],\n\n    [truncateXAxis],\n    [xAxisBounds],\n    [\n    {\n      name: 'truncateYAxis',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Truncate Y Axis'),\n        default: truncateYAxis,\n        renderTrigger: true,\n        description: t('Truncate Y Axis. Can be overridden by specifying a min or max bound.')\n      }\n    }],\n\n    [\n    {\n      name: 'y_axis_bounds',\n      config: {\n        type: 'BoundsControl',\n        label: t('Primary y-axis Bounds'),\n        renderTrigger: true,\n        default: yAxisBounds,\n        description: t('Bounds for the primary Y-axis. When left empty, the bounds are ' +\n        'dynamically defined based on the min/max of the data. Note that ' +\n        \"this feature will only expand the axis range. It won't \" +\n        \"narrow the data's extent.\")\n      }\n    }],\n\n    [\n    {\n      name: `y_axis_format`,\n      config: {\n        ...sharedControls.y_axis_format,\n        label: t('Primary y-axis format')\n      }\n    }],\n\n    ['currency_format'],\n    [\n    {\n      name: 'logAxis',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Logarithmic y-axis'),\n        renderTrigger: true,\n        default: logAxis,\n        description: t('Logarithmic scale on primary y-axis')\n      }\n    }],\n\n    [\n    {\n      name: 'y_axis_bounds_secondary',\n      config: {\n        type: 'BoundsControl',\n        label: t('Secondary y-axis Bounds'),\n        renderTrigger: true,\n        default: yAxisBounds,\n        description: t(`Bounds for the secondary Y-axis. Only works when Independent Y-axis\n                bounds are enabled. When left empty, the bounds are dynamically defined\n                based on the min/max of the data. Note that this feature will only expand\n                the axis range. It won't narrow the data's extent.`)\n      }\n    }],\n\n    [\n    {\n      name: `y_axis_format_secondary`,\n      config: {\n        ...sharedControls.y_axis_format,\n        label: t('Secondary y-axis format')\n      }\n    }],\n\n    [\n    {\n      name: 'currency_format_secondary',\n      config: {\n        ...sharedControls.currency_format,\n        label: t('Secondary currency format')\n      }\n    }],\n\n    [\n    {\n      name: 'yAxisTitleSecondary',\n      config: {\n        type: 'TextControl',\n        label: t('Secondary y-axis title'),\n        renderTrigger: true,\n        default: '',\n        description: t('Logarithmic y-axis')\n      }\n    }],\n\n    [\n    {\n      name: 'logAxisSecondary',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Logarithmic y-axis'),\n        renderTrigger: true,\n        default: logAxis,\n        description: t('Logarithmic scale on secondary y-axis')\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => {\n    const groupby = getStandardizedControls().controls.columns.filter((col) => !ensureIsArray(formData.groupby_b).includes(col));\n    getStandardizedControls().controls.columns =\n    getStandardizedControls().controls.columns.filter((col) => !groupby.includes(col));\n    const metrics = getStandardizedControls().controls.metrics.filter((metric) => !ensureIsArray(formData.metrics_b).includes(metric));\n    getStandardizedControls().controls.metrics =\n    getStandardizedControls().controls.metrics.filter((col) => !metrics.includes(col));\n    return {\n      ...formData,\n      metrics,\n      groupby\n    };\n  }\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}