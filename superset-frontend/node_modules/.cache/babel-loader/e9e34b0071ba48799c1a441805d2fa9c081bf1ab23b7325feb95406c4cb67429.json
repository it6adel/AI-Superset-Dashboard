{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ControlHeader } from '@superset-ui/chart-controls';\nimport { css, styled, t } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Popover from 'src/components/Popover';\nimport { useState } from 'react';\nimport { mix } from 'polished';\nimport MapViewPopoverContent from './MapViewPopoverContent';\nimport ExtentTag from './ExtentTag';\nimport { ControlFormItem } from '../ColumnConfigControl/ControlForm';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const StyledExtentButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-right: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.light4};\n    color: ${theme.colors.primary.dark1};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    margin-left: 9px;\n    margin-top: 10px;\n    &:hover {\n      background-color: ${mix(0.1, theme.colors.primary.base, theme.colors.primary.light4)};\n      color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nexport const StyledExtentTag = styled(ExtentTag)`\n  ${() => css`\n    margin-left: 9px;\n  `}\n`;\nexport const StyledControlFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n  `}\n`;\nexport const MapViewControl = ({ value, onChange = () => {}, name, label, description, renderTrigger, hovered, validationErrors }) => {\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const onTagClick = () => {\n    setPopoverVisible(!popoverVisible);\n  };\n  const isCustomMode = () => (value == null ? void 0 : value.mode) === 'CUSTOM';\n  const onModeChange = (newValue) => {\n    if (!value)\n    return;\n    const changedValue = {\n      ...value,\n      mode: newValue\n    };\n    if (newValue === 'FIT_DATA') {\n      setPopoverVisible(false);\n    }\n    onChange(changedValue);\n  };\n  const onButtonClick = () => {\n    if (!value)\n    return;\n    const changedValue = {\n      ...value,\n      fixedLatitude: value == null ? void 0 : value.latitude,\n      fixedLongitude: value == null ? void 0 : value.longitude,\n      fixedZoom: value == null ? void 0 : value.zoom\n    };\n    onChange(changedValue);\n  };\n  const onSaveClick = (newValue) => {\n    setPopoverVisible(false);\n    onChange(newValue);\n  };\n  const onCloseClick = () => {\n    setPopoverVisible(false);\n  };\n  const popoverTitle = t('Extent');\n  const modeNameFitData = t('FIT DATA');\n  const modeNameCustom = t('CUSTOM');\n  const extentButtonText = t('Use current extent');\n  const controlHeaderProps = {\n    name,\n    label,\n    description,\n    renderTrigger,\n    hovered,\n    validationErrors\n  };\n  return _jsxs(\"div\", { children: [\n    _jsx(ControlHeader, { ...controlHeaderProps }),\n    _jsx(StyledControlFormItem, { controlType: \"RadioButtonControl\", label: \"\", description: \"\", name: \"mode\", options: [\n      ['FIT_DATA', modeNameFitData],\n      ['CUSTOM', modeNameCustom]],\n      value: value ? value.mode : undefined, onChange: onModeChange }),\n\n    isCustomMode() && value && _jsx(StyledExtentTag, { onClick: onTagClick, value: value }),\n\n    isCustomMode() && value && _jsx(Popover, { open: popoverVisible, trigger: \"click\", title: popoverTitle, placement: \"right\", overlayStyle: {\n        maxWidth: '400px',\n        maxHeight: '700px',\n        overflowY: 'auto'\n      }, content: _jsx(MapViewPopoverContent, { onClose: onCloseClick, onSave: onSaveClick, mapViewConf: value }) }),\n\n    _jsx(\"br\", {}),\n\n    isCustomMode() && _jsx(StyledExtentButton, { onClick: onButtonClick, size: \"small\", children:\n      extentButtonText }\n    )] }\n  );\n};\nexport default MapViewControl;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}