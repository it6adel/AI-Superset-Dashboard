{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, styled, t } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { EmptyWrapperType } from 'src/components/TableView/TableView';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst CostEstimateModalStyles = styled.div`\n  ${({ theme }) => css`\n    font-size: ${theme.typography.sizes.s};\n  `}\n`;\nconst EstimateQueryCostButton = ({ getEstimate, queryEditorId, tooltip = '', disabled = false }) => {\n  const queryCostEstimate = useSelector((state) => {var _state$sqlLab$queryCo;return (_state$sqlLab$queryCo = state.sqlLab.queryCostEstimates) == null ? void 0 : _state$sqlLab$queryCo[queryEditorId];});\n  const { selectedText } = useQueryEditor(queryEditorId, ['selectedText']);\n  const { cost } = queryCostEstimate || {};\n  const tableData = useMemo(() => Array.isArray(cost) ? cost : [], [cost]);\n  const columns = useMemo(() => Array.isArray(cost) && cost.length ?\n  Object.keys(cost[0]).map((key) => ({ accessor: key, Header: key })) :\n  [], [cost]);\n  // A call back method to pass an event handler function as a prop to the Button element.\n  // Refer: https://reactjs.org/docs/handling-events.html\n  const onClickHandler = () => {\n    getEstimate();\n  };\n  const renderModalBody = () => {\n    if (queryCostEstimate != null && queryCostEstimate.error) {\n      return _jsx(Alert, { type: \"error\", message: queryCostEstimate == null ? void 0 : queryCostEstimate.error }, \"query-estimate-error\");\n    }\n    if (queryCostEstimate != null && queryCostEstimate.completed) {\n      return _jsx(CostEstimateModalStyles, { children:\n        _jsx(TableView, { columns: columns, data: tableData, withPagination: false, emptyWrapperType: EmptyWrapperType.Small }) }\n      );\n    }\n    return _jsx(Loading, { position: \"normal\" });\n  };\n  const btnText = selectedText ?\n  t('Estimate selected query cost') :\n  t('Estimate cost');\n  return _jsx(\"span\", { className: \"EstimateQueryCostButton\", children:\n    _jsx(ModalTrigger, { modalTitle: t('Cost estimate'), modalBody: renderModalBody(), triggerNode: _jsx(Button, { style: { height: 32, padding: '4px 15px' }, onClick: onClickHandler, tooltip: tooltip, disabled: disabled, children:\n        btnText }, \"query-estimate-btn\"\n      ) }) }\n  );\n};\nexport default EstimateQueryCostButton;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}