{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * 'License'); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { RegistryWithDefaultKey, OverwritePolicy } from '../models';\nimport { DEFAULT_D3_TIME_FORMAT } from './D3FormatConfig';\nimport TimeFormats, { LOCAL_PREFIX } from './TimeFormats';\nimport createD3TimeFormatter from './factories/createD3TimeFormatter';\nexport default class TimeFormatterRegistry extends RegistryWithDefaultKey {\n\n  constructor() {\n    super({\n      initialDefaultKey: TimeFormats.DATABASE_DATETIME,\n      name: 'TimeFormatter',\n      overwritePolicy: OverwritePolicy.Warn\n    });this.d3Format = void 0;\n    this.d3Format = DEFAULT_D3_TIME_FORMAT;\n  }\n  setD3Format(d3Format) {\n    this.d3Format = { ...DEFAULT_D3_TIME_FORMAT, ...d3Format };\n    return this;\n  }\n  get(format) {\n    const targetFormat = `${format === null || typeof format === 'undefined' || format === '' ?\n    this.defaultKey :\n    format}`.trim();\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat);\n    }\n    // Create new formatter if does not exist\n    const useLocalTime = targetFormat.startsWith(LOCAL_PREFIX);\n    const formatString = targetFormat.replace(LOCAL_PREFIX, '');\n    const locale = this.d3Format;\n    const formatter = createD3TimeFormatter({\n      formatString,\n      useLocalTime,\n      locale\n    });\n    this.registerValue(targetFormat, formatter);\n    return formatter;\n  }\n  format(format, value) {\n    return this.get(format)(value);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}