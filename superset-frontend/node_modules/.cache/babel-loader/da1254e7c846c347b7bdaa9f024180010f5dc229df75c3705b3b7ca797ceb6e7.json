{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CUSTOM_OPERATORS,\n  DISABLE_INPUT_OPERATORS,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE } from\n'src/explore/constants';\nimport { translateToSql } from '../utils/translateToSQL';\nimport { Clauses, ExpressionTypes } from '../types';\n\nconst CUSTOM_OPERATIONS = [...CUSTOM_OPERATORS].map(\n  (op) => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation\n);\n\nexport default class AdhocFilter {\n  constructor(adhocFilter) {\n    this.expressionType = adhocFilter.expressionType || ExpressionTypes.Simple;\n    if (this.expressionType === ExpressionTypes.Simple) {var _adhocFilter$operator;\n      this.subject = adhocFilter.subject;\n      this.operator = (_adhocFilter$operator = adhocFilter.operator) == null ? void 0 : _adhocFilter$operator.toUpperCase();\n      this.operatorId = adhocFilter.operatorId;\n      this.comparator = adhocFilter.comparator;\n      if (DISABLE_INPUT_OPERATORS.indexOf(adhocFilter.operatorId) >= 0) {\n        this.comparator = undefined;\n      }\n      this.clause = adhocFilter.clause || Clauses.Where;\n      this.sqlExpression = null;\n    } else if (this.expressionType === ExpressionTypes.Sql) {\n      this.sqlExpression =\n      typeof adhocFilter.sqlExpression === 'string' ?\n      adhocFilter.sqlExpression :\n      translateToSql(adhocFilter, { useSimple: true });\n      this.clause = adhocFilter.clause;\n      if (\n      adhocFilter.operator &&\n      CUSTOM_OPERATIONS.indexOf(adhocFilter.operator) >= 0)\n      {\n        this.subject = adhocFilter.subject;\n        this.operator = adhocFilter.operator;\n        this.operatorId = adhocFilter.operatorId;\n      } else {\n        this.subject = null;\n        this.operator = null;\n      }\n      this.comparator = null;\n    }\n    this.isExtra = !!adhocFilter.isExtra;\n    this.isNew = !!adhocFilter.isNew;\n    this.datasourceWarning = !!adhocFilter.datasourceWarning;\n\n    this.filterOptionName =\n    adhocFilter.filterOptionName ||\n    `filter_${Math.random().toString(36).substring(2, 15)}_${Math.random().\n    toString(36).\n    substring(2, 15)}`;\n  }\n\n  duplicateWith(nextFields) {\n    return new AdhocFilter({\n      ...this,\n      // all duplicated fields are not new (i.e. will not open popup automatically)\n      isNew: false,\n      ...nextFields\n    });\n  }\n\n  equals(adhocFilter) {\n    return (\n      adhocFilter.clause === this.clause &&\n      adhocFilter.expressionType === this.expressionType &&\n      adhocFilter.sqlExpression === this.sqlExpression &&\n      adhocFilter.operator === this.operator &&\n      adhocFilter.operatorId === this.operatorId &&\n      adhocFilter.comparator === this.comparator &&\n      adhocFilter.subject === this.subject);\n\n  }\n\n  isValid() {\n    if (this.expressionType === ExpressionTypes.Simple) {\n      // operators where the comparator is not used\n      if (\n      DISABLE_INPUT_OPERATORS.map(\n        (op) => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation\n      ).indexOf(this.operator) >= 0)\n      {\n        return !!this.subject;\n      }\n\n      if (this.operator && this.subject && this.clause) {\n        if (Array.isArray(this.comparator)) {\n          // A non-empty array of values ('IN' or 'NOT IN' clauses)\n          return this.comparator.length > 0;\n        }\n        // A value has been selected or typed\n        return this.comparator !== null;\n      }\n    }\n\n    return (\n      this.expressionType === ExpressionTypes.Sql &&\n      !!(this.sqlExpression && this.clause));\n\n  }\n\n  getDefaultLabel() {\n    const label = this.translateToSql();\n    return label.length < 43 ? label : `${label.substring(0, 40)}...`;\n  }\n\n  getTooltipTitle() {\n    return this.translateToSql();\n  }\n\n  translateToSql() {\n    return translateToSql(this);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}