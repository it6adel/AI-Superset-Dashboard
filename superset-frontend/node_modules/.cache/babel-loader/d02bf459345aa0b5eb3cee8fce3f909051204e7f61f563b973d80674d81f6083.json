{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ControlSubSectionHeader, getStandardizedControls, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { legendSection } from '../controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst requiredEntity = {\n  ...sharedControls.entity,\n  clearable: false\n};\nconst optionalEntity = {\n  ...sharedControls.entity,\n  clearable: true,\n  validators: []\n};\nconst controlPanel = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'source',\n      config: {\n        ...requiredEntity,\n        label: t('Source'),\n        description: t('Name of the source nodes')\n      }\n    }],\n\n    [\n    {\n      name: 'target',\n      config: {\n        ...requiredEntity,\n        label: t('Target'),\n        description: t('Name of the target nodes')\n      }\n    }],\n\n    ['metric'],\n    [\n    {\n      name: 'source_category',\n      config: {\n        ...optionalEntity,\n        label: t('Source category'),\n        description: t('The category of source nodes used to assign colors. ' +\n        'If a node is associated with more than one category, only the first will be used.')\n      }\n    }],\n\n    [\n    {\n      name: 'target_category',\n      config: {\n        ...optionalEntity,\n        label: t('Target category'),\n        description: t('Category of target nodes')\n      }\n    }],\n\n    ['adhoc_filters'],\n    ['row_limit']]\n\n  },\n  {\n    label: t('Chart options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    ...legendSection,\n    [_jsx(ControlSubSectionHeader, { children: t('Layout') })],\n    [\n    {\n      name: 'layout',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Graph layout'),\n        default: DEFAULT_FORM_DATA.layout,\n        options: [\n        ['force', t('Force')],\n        ['circular', t('Circular')]],\n\n        description: t('Layout type of graph')\n      }\n    }],\n\n    [\n    {\n      name: 'edgeSymbol',\n      config: {\n        type: 'SelectControl',\n        renderTrigger: true,\n        label: t('Edge symbols'),\n        description: t('Symbol of two ends of edge line'),\n        default: DEFAULT_FORM_DATA.edgeSymbol,\n        choices: [\n        ['none,none', t('None -> None')],\n        ['none,arrow', t('None -> Arrow')],\n        ['circle,arrow', t('Circle -> Arrow')],\n        ['circle,circle', t('Circle -> Circle')]]\n\n      }\n    }],\n\n    [\n    {\n      name: 'draggable',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Enable node dragging'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.draggable,\n        description: t('Whether to enable node dragging in force layout mode.'),\n        visibility({ form_data: { layout } }) {\n          return layout === 'force' ||\n          !layout && DEFAULT_FORM_DATA.layout === 'force';\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'roam',\n      config: {\n        type: 'SelectControl',\n        label: t('Enable graph roaming'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.roam,\n        choices: [\n        [false, t('Disabled')],\n        ['scale', t('Scale only')],\n        ['move', t('Move only')],\n        [true, t('Scale and Move')]],\n\n        description: t('Whether to enable changing graph position and scaling.')\n      }\n    }],\n\n    [\n    {\n      name: 'selectedMode',\n      config: {\n        type: 'SelectControl',\n        renderTrigger: true,\n        label: t('Node select mode'),\n        default: DEFAULT_FORM_DATA.selectedMode,\n        choices: [\n        [false, t('Disabled')],\n        ['single', t('Single')],\n        ['multiple', t('Multiple')]],\n\n        description: t('Allow node selections')\n      }\n    }],\n\n    [\n    {\n      name: 'showSymbolThreshold',\n      config: {\n        type: 'TextControl',\n        label: t('Label threshold'),\n        renderTrigger: true,\n        isInt: true,\n        default: DEFAULT_FORM_DATA.showSymbolThreshold,\n        description: t('Minimum value for label to be displayed on graph.')\n      }\n    }],\n\n    [\n    {\n      name: 'baseNodeSize',\n      config: {\n        type: 'TextControl',\n        label: t('Node size'),\n        renderTrigger: true,\n        isFloat: true,\n        default: DEFAULT_FORM_DATA.baseNodeSize,\n        description: t('Median node size, the largest node will be 4 times larger than the smallest')\n      }\n    },\n    {\n      name: 'baseEdgeWidth',\n      config: {\n        type: 'TextControl',\n        label: t('Edge width'),\n        renderTrigger: true,\n        isFloat: true,\n        default: DEFAULT_FORM_DATA.baseEdgeWidth,\n        description: t('Median edge width, the thickest edge will be 4 times thicker than the thinnest.')\n      }\n    }],\n\n    [\n    {\n      name: 'edgeLength',\n      config: {\n        type: 'SliderControl',\n        label: t('Edge length'),\n        renderTrigger: true,\n        min: 100,\n        max: 1000,\n        step: 50,\n        default: DEFAULT_FORM_DATA.edgeLength,\n        description: t('Edge length between nodes'),\n        visibility({ form_data: { layout } }) {\n          return layout === 'force' ||\n          !layout && DEFAULT_FORM_DATA.layout === 'force';\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'gravity',\n      config: {\n        type: 'SliderControl',\n        label: t('Gravity'),\n        renderTrigger: true,\n        min: 0.1,\n        max: 1,\n        step: 0.1,\n        default: DEFAULT_FORM_DATA.gravity,\n        description: t('Strength to pull the graph toward center'),\n        visibility({ form_data: { layout } }) {\n          return layout === 'force' ||\n          !layout && DEFAULT_FORM_DATA.layout === 'force';\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'repulsion',\n      config: {\n        type: 'SliderControl',\n        label: t('Repulsion'),\n        renderTrigger: true,\n        min: 100,\n        max: 3000,\n        step: 50,\n        default: DEFAULT_FORM_DATA.repulsion,\n        description: t('Repulsion strength between nodes'),\n        visibility({ form_data: { layout } }) {\n          return layout === 'force' ||\n          !layout && DEFAULT_FORM_DATA.layout === 'force';\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'friction',\n      config: {\n        type: 'SliderControl',\n        label: t('Friction'),\n        renderTrigger: true,\n        min: 0.1,\n        max: 1,\n        step: 0.1,\n        default: DEFAULT_FORM_DATA.friction,\n        description: t('Friction between nodes'),\n        visibility({ form_data: { layout } }) {\n          return layout === 'force' ||\n          !layout && DEFAULT_FORM_DATA.layout === 'force';\n        }\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().popAllMetrics()\n  })\n};\nexport default controlPanel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}