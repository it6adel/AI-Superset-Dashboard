{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { HeatmapLayer } from '@deck.gl/aggregation-layers';\nimport { t, getSequentialSchemeRegistry } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nfunction setTooltipContent(o) {\n  return _jsx(\"div\", { className: \"deckgl-tooltip\", children:\n    _jsx(TooltipRow, { label: t('Centroid (Longitude and Latitude): '), value: `(${o == null ? void 0 : o.coordinate[0]}, ${o == null ? void 0 : o.coordinate[1]})` }) }\n  );\n}\nexport const getLayer = (formData, payload, onAddFilter, setTooltip) => {var _getSequentialSchemeR, _getSequentialSchemeR2, _colorScale$range, _colorScale$range$map;\n  const fd = formData;\n  const { intensity = 1, radius_pixels: radiusPixels = 30, aggregation = 'SUM', js_data_mutator: jsFnMutator, linear_color_scheme: colorScheme } = fd;\n  let data = payload.data.features;\n  if (jsFnMutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutatorFunction = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutatorFunction(data);\n  }\n  const colorScale = (_getSequentialSchemeR = getSequentialSchemeRegistry()) == null ? void 0 : (_getSequentialSchemeR2 = _getSequentialSchemeR.\n  get(colorScheme)) == null ? void 0 : _getSequentialSchemeR2.\n  createLinearScale([0, 6]);\n  const colorRange = colorScale == null ? void 0 : (_colorScale$range = colorScale.\n  range()) == null ? void 0 : (_colorScale$range$map = _colorScale$range.\n  map((color) => hexToRGB(color))) == null ? void 0 : _colorScale$range$map.\n  reverse();\n  return new HeatmapLayer({\n    id: `heatmap-layer-${fd.slice_id}`,\n    data,\n    intensity,\n    radiusPixels,\n    colorRange,\n    aggregation: aggregation.toUpperCase(),\n    getPosition: (d) => d.position,\n    getWeight: (d) => d.weight ? d.weight : 1,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent)\n  });\n};\nfunction getPoints(data) {\n  return data.map((d) => d.position);\n}\nexport default createDeckGLComponent(getLayer, getPoints);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}