{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { sharedControls, ControlSubSectionHeader, D3_FORMAT_OPTIONS, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'groupby',\n      config: {\n        ...sharedControls.groupby,\n        description: t('Columns to group by')\n      }\n    }],\n\n    ['metric'],\n    ['adhoc_filters'],\n    [\n    {\n      name: 'row_limit',\n      config: {\n        ...sharedControls.row_limit,\n        choices: [...Array(10).keys()].map((n) => n + 1),\n        default: DEFAULT_FORM_DATA.rowLimit\n      }\n    }],\n\n    ['sort_by_metric']]\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    [_jsx(ControlSubSectionHeader, { children: t('General') })],\n    [\n    {\n      name: 'min_val',\n      config: {\n        type: 'TextControl',\n        isInt: true,\n        default: DEFAULT_FORM_DATA.minVal,\n        renderTrigger: true,\n        label: t('Min'),\n        description: t('Minimum value on the gauge axis')\n      }\n    },\n    {\n      name: 'max_val',\n      config: {\n        type: 'TextControl',\n        isInt: true,\n        default: DEFAULT_FORM_DATA.maxVal,\n        renderTrigger: true,\n        label: t('Max'),\n        description: t('Maximum value on the gauge axis')\n      }\n    }],\n\n    [\n    {\n      name: 'start_angle',\n      config: {\n        type: 'TextControl',\n        label: t('Start angle'),\n        description: t('Angle at which to start progress axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.startAngle\n      }\n    },\n    {\n      name: 'end_angle',\n      config: {\n        type: 'TextControl',\n        label: t('End angle'),\n        description: t('Angle at which to end progress axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.endAngle\n      }\n    }],\n\n    ['color_scheme'],\n    [\n    {\n      name: 'font_size',\n      config: {\n        type: 'SliderControl',\n        label: t('Font size'),\n        description: t('Font size for axis labels, detail value and other text elements'),\n        renderTrigger: true,\n        min: 10,\n        max: 20,\n        default: DEFAULT_FORM_DATA.fontSize\n      }\n    }],\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        label: t('Number format'),\n        description: t('D3 format syntax: https://github.com/d3/d3-format'),\n        freeForm: true,\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.numberFormat,\n        choices: D3_FORMAT_OPTIONS\n      }\n    }],\n\n    ['currency_format'],\n    [\n    {\n      name: 'value_formatter',\n      config: {\n        type: 'TextControl',\n        label: t('Value format'),\n        description: t('Additional text to add before or after the value, e.g. unit'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.valueFormatter\n      }\n    }],\n\n    [\n    {\n      name: 'show_pointer',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show pointer'),\n        description: t('Whether to show the pointer'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showPointer\n      }\n    }],\n\n    [\n    {\n      name: 'animation',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Animation'),\n        description: t('Whether to animate the progress and the value or just display them'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.animation\n      }\n    }],\n\n    [_jsx(ControlSubSectionHeader, { children: t('Axis') })],\n    [\n    {\n      name: 'show_axis_tick',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show axis line ticks'),\n        description: t('Whether to show minor ticks on the axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showAxisTick\n      }\n    }],\n\n    [\n    {\n      name: 'show_split_line',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show split lines'),\n        description: t('Whether to show the split lines on the axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showSplitLine\n      }\n    }],\n\n    [\n    {\n      name: 'split_number',\n      config: {\n        type: 'SliderControl',\n        label: t('Split number'),\n        description: t('Number of split segments on the axis'),\n        renderTrigger: true,\n        min: 3,\n        max: 30,\n        default: DEFAULT_FORM_DATA.splitNumber\n      }\n    }],\n\n    [_jsx(ControlSubSectionHeader, { children: t('Progress') })],\n    [\n    {\n      name: 'show_progress',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show progress'),\n        description: t('Whether to show the progress of gauge chart'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showProgress\n      }\n    }],\n\n    [\n    {\n      name: 'overlap',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Overlap'),\n        description: t('Whether the progress bar overlaps when there are multiple groups of data'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.overlap\n      }\n    }],\n\n    [\n    {\n      name: 'round_cap',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Round cap'),\n        description: t('Style the ends of the progress bar with a round cap'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.roundCap\n      }\n    }],\n\n    [_jsx(ControlSubSectionHeader, { children: t('Intervals') })],\n    [\n    {\n      name: 'intervals',\n      config: {\n        type: 'TextControl',\n        label: t('Interval bounds'),\n        description: t('Comma-separated interval bounds, e.g. 2,4,5 for intervals 0-2, 2-4 and 4-5. Last number should match the value provided for MAX.'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.intervals\n      }\n    }],\n\n    [\n    {\n      name: 'interval_color_indices',\n      config: {\n        type: 'TextControl',\n        label: t('Interval colors'),\n        description: t('Comma-separated color picks for the intervals, e.g. 1,2,4. Integers denote colors from the chosen color scheme and are 1-indexed. Length must be matching that of interval bounds.'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.intervalColorIndices\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}