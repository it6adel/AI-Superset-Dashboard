{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { AppSection, ensureIsArray, getColumnLabel, finestTemporalGrainFormatter, t, tn } from '@superset-ui/core';\n\nimport { useImmerReducer } from 'use-immer';\nimport { Select } from 'src/components';\nimport { SLOW_DEBOUNCE } from 'src/constants';\nimport { hasOption, propertyComparator } from 'src/components/Select/utils';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport { FilterPluginStyle, StatusMessage, StyledFormItem } from '../common';\nimport { getDataRecordFormatter, getSelectExtraFormData } from '../../utils';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nfunction reducer(draft, action) {\n  switch (action.type) {\n    case 'ownState':\n      draft.ownState = {\n        ...draft.ownState,\n        ...action.ownState\n      };\n      return draft;\n    case 'filterState':\n      if (JSON.stringify(draft.extraFormData) !==\n      JSON.stringify(action.extraFormData)) {\n        draft.extraFormData = action.extraFormData;\n      }\n      if (JSON.stringify(draft.filterState) !== JSON.stringify(action.filterState)) {\n        draft.filterState = { ...draft.filterState, ...action.filterState };\n      }\n      return draft;\n    default:\n      return draft;\n  }\n}\nexport default function PluginFilterSelect(props) {\n  const { coltypeMap, data, filterState, formData, height, isRefreshing, width, setDataMask, setHoveredFilter, unsetHoveredFilter, setFocusedFilter, unsetFocusedFilter, setFilterActive, appSection, showOverflow, parentRef, inputRef, filterBarOrientation } = props;\n  const { enableEmptyFilter, multiSelect, showSearch, inverseSelection, defaultToFirstItem, searchAllOptions } = formData;\n  const groupby = useMemo(() => ensureIsArray(formData.groupby).map(getColumnLabel), [formData.groupby]);\n  const [col] = groupby;\n  const [initialColtypeMap] = useState(coltypeMap);\n  const [search, setSearch] = useState('');\n  const [dataMask, dispatchDataMask] = useImmerReducer(reducer, {\n    extraFormData: {},\n    filterState\n  });\n  const datatype = coltypeMap[col];\n  const labelFormatter = useMemo(() => getDataRecordFormatter({\n    timeFormatter: finestTemporalGrainFormatter(data.map((el) => el[col]))\n  }), [data, col]);\n  const updateDataMask = useCallback((values) => {\n    const emptyFilter = enableEmptyFilter && !inverseSelection && !(values != null && values.length);\n    const suffix = inverseSelection && values != null && values.length ? t(' (excluded)') : '';\n    dispatchDataMask({\n      type: 'filterState',\n      extraFormData: getSelectExtraFormData(col, values, emptyFilter, inverseSelection),\n      filterState: {\n        ...filterState,\n        label: values != null && values.length ?\n        `${(values || []).\n        map((value) => labelFormatter(value, datatype)).\n        join(', ')}${suffix}` :\n        undefined,\n        value: appSection === AppSection.FilterConfigModal && defaultToFirstItem ?\n        undefined :\n        values\n      }\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  appSection,\n  col,\n  datatype,\n  defaultToFirstItem,\n  dispatchDataMask,\n  enableEmptyFilter,\n  inverseSelection,\n  JSON.stringify(filterState),\n  labelFormatter]\n  );\n  const isDisabled = appSection === AppSection.FilterConfigModal && defaultToFirstItem;\n  const onSearch = useMemo(() => _debounce((search) => {\n    setSearch(search);\n    if (searchAllOptions) {\n      dispatchDataMask({\n        type: 'ownState',\n        ownState: {\n          coltypeMap: initialColtypeMap,\n          search\n        }\n      });\n    }\n  }, SLOW_DEBOUNCE), [dispatchDataMask, initialColtypeMap, searchAllOptions]);\n  const handleBlur = useCallback(() => {\n    unsetFocusedFilter();\n    onSearch('');\n  }, [onSearch, unsetFocusedFilter]);\n  const handleChange = useCallback((value) => {\n    const values = value === null ? [null] : ensureIsArray(value);\n    if (values.length === 0) {\n      updateDataMask(null);\n    } else\n    {\n      updateDataMask(values);\n    }\n  }, [updateDataMask]);\n  const placeholderText = data.length === 0 ?\n  t('No data') :\n  tn('%s option', '%s options', data.length, data.length);\n  const formItemExtra = useMemo(() => {\n    if (filterState.validateMessage) {\n      return _jsx(StatusMessage, { status: filterState.validateStatus, children:\n        filterState.validateMessage }\n      );\n    }\n    return undefined;\n  }, [filterState.validateMessage, filterState.validateStatus]);\n  const uniqueOptions = useMemo(() => {\n    const allOptions = new Set([...data.map((el) => el[col])]);\n    return [...allOptions].map((value) => ({\n      label: labelFormatter(value, datatype),\n      value,\n      isNewOption: false\n    }));\n  }, [data, datatype, col, labelFormatter]);\n  const options = useMemo(() => {\n    if (search && !multiSelect && !hasOption(search, uniqueOptions, true)) {\n      uniqueOptions.unshift({\n        label: search,\n        value: search,\n        isNewOption: true\n      });\n    }\n    return uniqueOptions;\n  }, [multiSelect, search, uniqueOptions]);\n  const sortComparator = useCallback((a, b) => {\n    const labelComparator = propertyComparator('label');\n    if (formData.sortAscending) {\n      return labelComparator(a, b);\n    }\n    return labelComparator(b, a);\n  }, [formData.sortAscending]);\n  useEffect(() => {\n    if (defaultToFirstItem && filterState.value === undefined) {\n      // initialize to first value if set to default to first item\n      const firstItem = data[0] ?\n      groupby.map((col) => data[0][col]) :\n      null;\n      // firstItem[0] !== undefined for a case when groupby changed but new data still not fetched\n      // TODO: still need repopulate default value in config modal when column changed\n      if ((firstItem == null ? void 0 : firstItem[0]) !== undefined) {\n        updateDataMask(firstItem);\n      }\n    } else\n    if (isDisabled) {\n      // empty selection if filter is disabled\n      updateDataMask(null);\n    } else\n    {\n      // reset data mask based on filter state\n      updateDataMask(filterState.value);\n    }\n  }, [\n  col,\n  isDisabled,\n  defaultToFirstItem,\n  enableEmptyFilter,\n  inverseSelection,\n  updateDataMask,\n  data,\n  groupby,\n  JSON.stringify(filterState.value)]\n  );\n  useEffect(() => {\n    setDataMask(dataMask);\n  }, [JSON.stringify(dataMask)]);\n  return _jsx(FilterPluginStyle, { height: height, width: width, children:\n    _jsx(StyledFormItem, { validateStatus: filterState.validateStatus, extra: formItemExtra, children:\n      _jsx(Select, { name: formData.nativeFilterId, allowClear: true, allowNewOptions: !searchAllOptions, allowSelectAll: !searchAllOptions\n        // @ts-ignore\n        , value: filterState.value || [], disabled: isDisabled, getPopupContainer: showOverflow ?\n        () => (parentRef == null ? void 0 : parentRef.current) || document.body :\n        (trigger) => (trigger == null ? void 0 : trigger.parentNode) || document.body, showSearch: showSearch, mode: multiSelect ? 'multiple' : 'single', placeholder: placeholderText, onClear: () => onSearch(''), onSearch: onSearch, onBlur: handleBlur, onFocus: setFocusedFilter, onMouseEnter: setHoveredFilter, onMouseLeave: unsetHoveredFilter\n        // @ts-ignore\n        , onChange: handleChange, ref: inputRef, loading: isRefreshing, oneLine: filterBarOrientation === FilterBarOrientation.Horizontal, invertSelection: inverseSelection, options: options, sortComparator: sortComparator, onDropdownVisibleChange: setFilterActive }) }\n    ) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}