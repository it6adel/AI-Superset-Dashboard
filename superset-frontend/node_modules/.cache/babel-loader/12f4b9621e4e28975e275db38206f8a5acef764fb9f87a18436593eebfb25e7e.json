{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nexport const AGGREGATES = {\n  AVG: 'AVG',\n  COUNT: 'COUNT',\n  COUNT_DISTINCT: 'COUNT_DISTINCT',\n  MAX: 'MAX',\n  MIN: 'MIN',\n  SUM: 'SUM'\n};\nexport const AGGREGATES_OPTIONS = Object.values(AGGREGATES);\nexport var Operators;\n(function (Operators) {\n  Operators[\"Equals\"] = \"EQUALS\";\n  Operators[\"NotEquals\"] = \"NOT_EQUALS\";\n  Operators[\"LessThan\"] = \"LESS_THAN\";\n  Operators[\"LessThanOrEqual\"] = \"LESS_THAN_OR_EQUAL\";\n  Operators[\"GreaterThan\"] = \"GREATER_THAN\";\n  Operators[\"GreaterThanOrEqual\"] = \"GREATER_THAN_OR_EQUAL\";\n  Operators[\"In\"] = \"IN\";\n  Operators[\"NotIn\"] = \"NOT_IN\";\n  Operators[\"Like\"] = \"LIKE\";\n  Operators[\"CaseInsensitiveLike\"] = \"ILIKE\";\n  Operators[\"IsNotNull\"] = \"IS_NOT_NULL\";\n  Operators[\"IsNull\"] = \"IS_NULL\";\n  Operators[\"LatestPartition\"] = \"LATEST_PARTITION\";\n  Operators[\"IsTrue\"] = \"IS_TRUE\";\n  Operators[\"IsFalse\"] = \"IS_FALSE\";\n  Operators[\"TemporalRange\"] = \"TEMPORAL_RANGE\";\n})(Operators || (Operators = {}));\nexport const OPERATOR_ENUM_TO_OPERATOR_TYPE = {\n  [Operators.Equals]: { display: t('Equal to (=)'), operation: '==' },\n  [Operators.NotEquals]: { display: t('Not equal to (â‰ )'), operation: '!=' },\n  [Operators.LessThan]: { display: t('Less than (<)'), operation: '<' },\n  [Operators.LessThanOrEqual]: {\n    display: t('Less or equal (<=)'),\n    operation: '<='\n  },\n  [Operators.GreaterThan]: { display: t('Greater than (>)'), operation: '>' },\n  [Operators.GreaterThanOrEqual]: {\n    display: t('Greater or equal (>=)'),\n    operation: '>='\n  },\n  [Operators.In]: { display: t('In'), operation: 'IN' },\n  [Operators.NotIn]: { display: t('Not in'), operation: 'NOT IN' },\n  [Operators.Like]: { display: t('Like'), operation: 'LIKE' },\n  [Operators.CaseInsensitiveLike]: {\n    display: t('Like (case insensitive)'),\n    operation: 'ILIKE'\n  },\n  [Operators.IsNotNull]: {\n    display: t('Is not null'),\n    operation: 'IS NOT NULL'\n  },\n  [Operators.IsNull]: { display: t('Is null'), operation: 'IS NULL' },\n  [Operators.LatestPartition]: {\n    display: t('use latest_partition template'),\n    operation: 'LATEST PARTITION'\n  },\n  [Operators.IsTrue]: { display: t('Is true'), operation: 'IS TRUE' },\n  [Operators.IsFalse]: { display: t('Is false'), operation: 'IS FALSE' },\n  [Operators.TemporalRange]: {\n    display: t('TEMPORAL_RANGE'),\n    operation: 'TEMPORAL_RANGE'\n  }\n};\nexport const OPERATORS_OPTIONS = Object.values(Operators);\nexport const TABLE_ONLY_OPERATORS = [\nOperators.Like,\nOperators.CaseInsensitiveLike];\n\nexport const HAVING_OPERATORS = [\nOperators.Equals,\nOperators.NotEquals,\nOperators.LessThan,\nOperators.LessThanOrEqual,\nOperators.GreaterThan,\nOperators.GreaterThanOrEqual];\n\nexport const MULTI_OPERATORS = new Set([Operators.In, Operators.NotIn]);\n// CUSTOM_OPERATORS will show operator in simple mode,\n// but will generate customized sqlExpression\nexport const CUSTOM_OPERATORS = new Set([\nOperators.LatestPartition,\nOperators.TemporalRange]\n);\n// DISABLE_INPUT_OPERATORS will disable filter value input\n// in adhocFilter control\nexport const DISABLE_INPUT_OPERATORS = [\nOperators.IsNotNull,\nOperators.IsNull,\nOperators.LatestPartition,\nOperators.IsTrue,\nOperators.IsFalse];\n\nexport const sqlaAutoGeneratedMetricNameRegex = /^(sum|min|max|avg|count|count_distinct)__.*$/i;\nexport const sqlaAutoGeneratedMetricRegex = /^(LONG|DOUBLE|FLOAT)?(SUM|AVG|MAX|MIN|COUNT)\\([A-Z0-9_.\"]*\\)$/i;\nexport const TIME_FILTER_LABELS = {\n  time_range: t('Time range'),\n  granularity_sqla: t('Time column'),\n  time_grain_sqla: t('Time grain'),\n  granularity: t('Time granularity')\n};\nexport const FILTER_CONFIG_ATTRIBUTES = {\n  CLEARABLE: 'clearable',\n  DEFAULT_VALUE: 'defaultValue',\n  MULTIPLE: 'multiple',\n  SEARCH_ALL_OPTIONS: 'searchAllOptions',\n  SORT_ASCENDING: 'asc',\n  SORT_METRIC: 'metric'\n};\nexport const FILTER_OPTIONS_LIMIT = 1000;\n/**\n * Map control names to their key in extra_filters\n */\nexport const TIME_FILTER_MAP = {\n  time_range: '__time_range',\n  granularity_sqla: '__time_col',\n  time_grain_sqla: '__time_grain',\n  granularity: '__granularity'\n};\nexport const POPOVER_INITIAL_HEIGHT = 240;\nexport const POPOVER_INITIAL_WIDTH = 320;\nexport const UNSAVED_CHART_ID = 0;\nexport const QUERY_MODE_REQUISITES = new Set([\n'all_columns',\n'groupby',\n'metrics',\n'percent_metrics',\n'order_by_cols']\n);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}