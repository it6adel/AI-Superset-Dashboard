{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\nimport { InputNumber } from 'src/components/Input';\nimport { t, styled } from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledDiv = styled.div`\n  display: flex;\n`;\nconst MinInput = styled(InputNumber)`\n  flex: 1;\n  margin-right: ${({ theme }) => theme.gridUnit}px;\n`;\nconst MaxInput = styled(InputNumber)`\n  flex: 1;\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\nconst parseNumber = (value) => {\n  if (value === null ||\n  value === undefined ||\n  typeof value === 'string' && Number.isNaN(Number.parseInt(value, 10))) {\n    return null;\n  }\n  return Number(value);\n};\nexport default function BoundsControl({ onChange = () => {}, value = [null, null], ...props }) {\n  const [minMax, setMinMax] = useState([\n  parseNumber(value[0]),\n  parseNumber(value[1])]\n  );\n  const min = value[0];\n  const max = value[1];\n  const debouncedOnChange = useRef(_debounce(onChange, 300)).current;\n  const update = (mm) => {\n    setMinMax(mm);\n    debouncedOnChange([\n    mm[0] === undefined ? null : mm[0],\n    mm[1] === undefined ? null : mm[1]]\n    );\n  };\n  useEffect(() => {\n    setMinMax([parseNumber(min), parseNumber(max)]);\n  }, [min, max]);\n  const onMinChange = (value) => {\n    update([parseNumber(value), minMax[1]]);\n  };\n  const onMaxChange = (value) => {\n    update([minMax[0], parseNumber(value)]);\n  };\n  return _jsxs(\"div\", { children: [\n    _jsx(ControlHeader, { ...props }),\n    _jsxs(StyledDiv, { children: [\n      _jsx(MinInput, { placeholder: t('Min')\n        // emit (string | number | undefined | null)\n        , onChange: onMinChange\n        // accept (number | undefined)\n        , value: minMax[0] === null ? undefined : minMax[0] }),\n      _jsx(MaxInput, { placeholder: t('Max')\n        // emit (number | string | undefined | null)\n        , onChange: onMaxChange\n        // accept (number | undefined)\n        , value: minMax[1] === null ? undefined : minMax[1] })] }\n    )] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}