{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, logging } from '@superset-ui/core';\nconst assembleEndpoint = (dashId, key, tabId) => {\n  let endpoint = `api/v1/dashboard/${dashId}/filter_state`;\n  if (key) {\n    endpoint = endpoint.concat(`/${key}`);\n  }\n  if (tabId) {\n    endpoint = endpoint.concat(`?tab_id=${tabId}`);\n  }\n  return endpoint;\n};\nexport const updateFilterKey = (dashId, value, key, tabId) => SupersetClient.put({\n  endpoint: assembleEndpoint(dashId, key, tabId),\n  jsonPayload: { value }\n}).\nthen((r) => r.json.message).\ncatch((err) => {\n  logging.error(err);\n  return null;\n});\nexport const createFilterKey = (dashId, value, tabId) => SupersetClient.post({\n  endpoint: assembleEndpoint(dashId, undefined, tabId),\n  jsonPayload: { value }\n}).\nthen((r) => r.json.key).\ncatch((err) => {\n  logging.error(err);\n  return null;\n});\nexport const getFilterValue = (dashId, key) => SupersetClient.get({\n  endpoint: assembleEndpoint(dashId, key)\n}).\nthen(({ json }) => JSON.parse(json.value)).\ncatch((err) => {\n  logging.error(err);\n  return null;\n});\nexport const getPermalinkValue = (key) => SupersetClient.get({\n  endpoint: `/api/v1/dashboard/permalink/${key}`\n}).\nthen(({ json }) => json).\ncatch((err) => {\n  logging.error(err);\n  return null;\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}