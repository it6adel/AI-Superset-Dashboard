{"ast":null,"code":"/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable camelcase */\n/* eslint-disable no-prototype-builtins */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { CategoricalColorNamespace } from '@superset-ui/core';\nimport Legend from './components/Legend';\nimport { hexToRGB } from './utils/colors';\nimport sandboxedEval from './utils/sandbox';\n// eslint-disable-next-line import/extensions\nimport fitViewport from './utils/fitViewport';\nimport { DeckGLContainerStyledWrapper } from './DeckGLContainer';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst { getScale } = CategoricalColorNamespace;\nfunction getCategories(fd, data) {\n  const c = fd.color_picker || { r: 0, g: 0, b: 0, a: 1 };\n  const fixedColor = [c.r, c.g, c.b, 255 * c.a];\n  const appliedScheme = fd.color_scheme;\n  const colorFn = getScale(appliedScheme);\n  const categories = {};\n  data.forEach((d) => {\n    if (d.cat_color != null && !categories.hasOwnProperty(d.cat_color)) {\n      let color;\n      if (fd.dimension) {\n        color = hexToRGB(colorFn(d.cat_color, fd.sliceId), c.a * 255);\n      } else\n      {\n        color = fixedColor;\n      }\n      categories[d.cat_color] = { color, enabled: true };\n    }\n  });\n  return categories;\n}\nconst CategoricalDeckGLContainer = (props) => {\n  const containerRef = useRef(null);\n  const getAdjustedViewport = useCallback(() => {\n    let viewport = { ...props.viewport };\n    if (props.formData.autozoom) {\n      viewport = fitViewport(viewport, {\n        width: props.width,\n        height: props.height,\n        points: props.getPoints(props.payload.data.features || [])\n      });\n    }\n    if (viewport.zoom < 0) {\n      viewport.zoom = 0;\n    }\n    return viewport;\n  }, [props]);\n  const [categories, setCategories] = useState(getCategories(props.formData, props.payload.data.features || []));\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n  useEffect(() => {\n    if (props.payload.form_data !== stateFormData) {\n      const features = props.payload.data.features || [];\n      const categories = getCategories(props.formData, features);\n      setViewport(getAdjustedViewport());\n      setStateFormData(props.payload.form_data);\n      setCategories(categories);\n    }\n  }, [getAdjustedViewport, props, stateFormData]);\n  const setTooltip = useCallback((tooltip) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n  const addColor = useCallback((data, fd) => {\n    const c = fd.color_picker || { r: 0, g: 0, b: 0, a: 1 };\n    const appliedScheme = fd.color_scheme;\n    const colorFn = getScale(appliedScheme);\n    return data.map((d) => {\n      let color;\n      if (fd.dimension) {\n        color = hexToRGB(colorFn(d.cat_color, fd.sliceId), c.a * 255);\n        return { ...d, color };\n      }\n      return d;\n    });\n  }, []);\n  const getLayers = useCallback(() => {\n    const { getLayer, payload, formData: fd, onAddFilter } = props;\n    let features = payload.data.features ? [...payload.data.features] : [];\n    // Add colors from categories or fixed color\n    features = addColor(features, fd);\n    // Apply user defined data mutator if defined\n    if (fd.js_data_mutator) {\n      const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n      features = jsFnMutator(features);\n    }\n    // Show only categories selected in the legend\n    if (fd.dimension) {\n      features = features.filter((d) => {var _categories$d$cat_col;return (_categories$d$cat_col = categories[d.cat_color]) == null ? void 0 : _categories$d$cat_col.enabled;});\n    }\n    const filteredPayload = {\n      ...payload,\n      data: { ...payload.data, features }\n    };\n    return [\n    getLayer(fd, filteredPayload, onAddFilter, setTooltip, props.datasource)];\n\n  }, [addColor, categories, props, setTooltip]);\n  const toggleCategory = useCallback((category) => {\n    const categoryState = categories[category];\n    const categoriesExtended = {\n      ...categories,\n      [category]: {\n        ...categoryState,\n        enabled: !categoryState.enabled\n      }\n    };\n    // if all categories are disabled, enable all -- similar to nvd3\n    if (Object.values(categoriesExtended).every((v) => !v.enabled)) {\n      /* eslint-disable no-param-reassign */\n      Object.values(categoriesExtended).forEach((v) => {\n        v.enabled = true;\n      });\n    }\n    setCategories(categoriesExtended);\n  }, [categories]);\n  const showSingleCategory = useCallback((category) => {\n    const modifiedCategories = { ...categories };\n    Object.values(modifiedCategories).forEach((v) => {\n      v.enabled = false;\n    });\n    modifiedCategories[category].enabled = true;\n    setCategories(modifiedCategories);\n  }, [categories]);\n  return _jsxs(\"div\", { style: { position: 'relative' }, children: [\n    _jsx(DeckGLContainerStyledWrapper, { ref: containerRef, viewport: viewport, layers: getLayers(), setControlValue: props.setControlValue, mapStyle: props.formData.mapbox_style, mapboxApiAccessToken: props.mapboxApiKey, width: props.width, height: props.height }),\n    _jsx(Legend, { forceCategorical: true, categories: categories, format: props.formData.legend_format, position: props.formData.legend_position, showSingleCategory: showSingleCategory, toggleCategory: toggleCategory })] }\n  );\n};\nexport default /*#__PURE__*/memo(CategoricalDeckGLContainer);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}