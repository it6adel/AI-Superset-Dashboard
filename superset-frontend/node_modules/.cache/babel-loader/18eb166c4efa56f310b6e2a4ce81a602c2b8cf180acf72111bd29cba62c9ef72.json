{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isAdhocColumn } from '@superset-ui/core';\nimport { Clauses, ExpressionTypes } from '../explore/components/controls/FilterControl/types';\nimport { OPERATOR_ENUM_TO_OPERATOR_TYPE } from '../explore/constants';\nimport { translateToSql } from '../explore/components/controls/FilterControl/utils/translateToSQL';\nexport const simpleFilterToAdhoc = (filterClause, clause = Clauses.Where) => {\n  let result;\n  if (isAdhocColumn(filterClause.col)) {\n    result = {\n      expressionType: 'SQL',\n      clause,\n      sqlExpression: translateToSql({\n        expressionType: ExpressionTypes.Simple,\n        subject: `(${filterClause.col.sqlExpression})`,\n        operator: filterClause.op,\n        comparator: 'val' in filterClause ? filterClause.val : undefined\n      })\n    };\n  } else\n  {var _Object$entries$find;\n    result = {\n      expressionType: 'SIMPLE',\n      clause,\n      operator: filterClause.op,\n      operatorId: (_Object$entries$find = Object.entries(OPERATOR_ENUM_TO_OPERATOR_TYPE).find((operatorEntry) => operatorEntry[1].operation === filterClause.op)) == null ? void 0 : _Object$entries$find[0],\n      subject: filterClause.col,\n      comparator: 'val' in filterClause ? filterClause.val : undefined\n    };\n  }\n  if (filterClause.isExtra) {\n    Object.assign(result, {\n      isExtra: true,\n      filterOptionName: `filter_${Math.random().\n      toString(36).\n      substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`\n    });\n  }\n  return result;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}