{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { SupersetClient, t, useTheme } from '@superset-ui/core';\nimport { useFavoriteStatus, useListViewResource } from 'src/views/CRUD/hooks';\nimport { TableTab } from 'src/views/CRUD/types';\nimport handleResourceExport from 'src/utils/export';\nimport { useHistory } from 'react-router-dom';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { LoadingCards } from 'src/pages/Home';\nimport { CardContainer, createErrorHandler, getFilterValues, PAGE_SIZE, handleDashboardDelete } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport Icons from 'src/components/Icons';\nimport EmptyState from './EmptyState';\nimport SubMenu from './SubMenu';\nimport { WelcomeTable } from './types';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction DashboardTable({ user, addDangerToast, addSuccessToast, mine, showThumbnails, otherTabData, otherTabFilters, otherTabTitle }) {\n  const theme = useTheme();\n  const history = useHistory();\n  const defaultTab = getItem(LocalStorageKeys.HomepageDashboardFilter, TableTab.Other);\n  const filteredOtherTabData = otherTabData.filter((obj) => !('viz_type' in obj));\n  const { state: { loading, resourceCollection: dashboards }, setResourceCollection: setDashboards, hasPerm, refreshData, fetchData } = useListViewResource('dashboard', t('dashboard'), addDangerToast, true, defaultTab === TableTab.Mine ? mine : filteredOtherTabData, [], false);\n  const dashboardIds = useMemo(() => dashboards.map((c) => c.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('dashboard', dashboardIds, addDangerToast);\n  const [editModal, setEditModal] = useState();\n  const [activeTab, setActiveTab] = useState(defaultTab);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [dashboardToDelete, setDashboardToDelete] = useState(null);\n  const getData = (tab) => fetchData({\n    pageIndex: 0,\n    pageSize: PAGE_SIZE,\n    sortBy: [\n    {\n      id: 'changed_on_delta_humanized',\n      desc: true\n    }],\n\n    filters: getFilterValues(tab, WelcomeTable.Dashboards, user, otherTabFilters)\n  });\n  useEffect(() => {\n    if (loaded || activeTab === TableTab.Favorite) {\n      getData(activeTab);\n    }\n    setLoaded(true);\n  }, [activeTab]);\n  const handleBulkDashboardExport = (dashboardsToExport) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const handleDashboardEdit = (edits) => SupersetClient.get({\n    endpoint: `/api/v1/dashboard/${edits.id}`\n  }).then(({ json = {} }) => {\n    setDashboards(dashboards.map((dashboard) => {\n      if (dashboard.id === json.id) {\n        return json.result;\n      }\n      return dashboard;\n    }));\n  }, createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboards: %s', errMsg))));\n  const menuTabs = [\n  {\n    name: TableTab.Favorite,\n    label: t('Favorite'),\n    onClick: () => {\n      setActiveTab(TableTab.Favorite);\n      setItem(LocalStorageKeys.HomepageDashboardFilter, TableTab.Favorite);\n    }\n  },\n  {\n    name: TableTab.Mine,\n    label: t('Mine'),\n    onClick: () => {\n      setActiveTab(TableTab.Mine);\n      setItem(LocalStorageKeys.HomepageDashboardFilter, TableTab.Mine);\n    }\n  }];\n\n  if (otherTabData) {\n    menuTabs.push({\n      name: TableTab.Other,\n      label: otherTabTitle,\n      onClick: () => {\n        setActiveTab(TableTab.Other);\n        setItem(LocalStorageKeys.HomepageDashboardFilter, TableTab.Other);\n      }\n    });\n  }\n  if (loading)\n  return _jsx(LoadingCards, { cover: showThumbnails });\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { activeChild: activeTab, tabs: menuTabs, buttons: [\n      {\n        name: _jsxs(_Fragment, { children: [\n          _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.dark1, iconSize: \"m\" }),\n          t('Dashboard')] }\n        ),\n        buttonStyle: 'tertiary',\n        onClick: () => {\n          window.location.assign('/dashboard/new');\n        }\n      },\n      {\n        name: t('View All Â»'),\n        buttonStyle: 'link',\n        onClick: () => {\n          const target = activeTab === TableTab.Favorite ?\n          `/dashboard/list/?filters=(favorite:(label:${t('Yes')},value:!t))` :\n          '/dashboard/list/';\n          history.push(target);\n        }\n      }] }\n    ),\n    editModal && _jsx(PropertiesModal, { dashboardId: editModal == null ? void 0 : editModal.id, show: true, onHide: () => setEditModal(undefined), onSubmit: handleDashboardEdit }),\n    dashboardToDelete && _jsx(DeleteModal, { description: _jsxs(_Fragment, { children: [\n        t('Are you sure you want to delete'), ' ',\n        _jsx(\"b\", { children: dashboardToDelete.dashboard_title }), \"?\"] }\n      ), onConfirm: () => {\n        handleDashboardDelete(dashboardToDelete, refreshData, addSuccessToast, addDangerToast, activeTab, user == null ? void 0 : user.userId);\n        setDashboardToDelete(null);\n      }, onHide: () => setDashboardToDelete(null), open: !!dashboardToDelete, title: t('Please confirm') }),\n    dashboards.length > 0 && _jsx(CardContainer, { showThumbnails: showThumbnails, children:\n      dashboards.map((e) => _jsx(DashboardCard, { dashboard: e, hasPerm: hasPerm, bulkSelectEnabled: false, showThumbnails: showThumbnails, userId: user == null ? void 0 : user.userId, loading: loading, openDashboardEditModal: (dashboard) => setEditModal(dashboard), saveFavoriteStatus: saveFavoriteStatus, favoriteStatus: favoriteStatus[e.id], handleBulkDashboardExport: handleBulkDashboardExport, onDelete: (dashboard) => setDashboardToDelete(dashboard) }, e.id)) }\n    ),\n    dashboards.length === 0 && _jsx(EmptyState, { tableName: WelcomeTable.Dashboards, tab: activeTab }),\n    preparingExport && _jsx(Loading, {})] }\n  );\n}\nexport default withToasts(DashboardTable);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}