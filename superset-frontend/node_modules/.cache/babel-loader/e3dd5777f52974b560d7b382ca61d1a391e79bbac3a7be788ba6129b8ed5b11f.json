{"ast":null,"code":"import { shallowEqual, useSelector } from 'react-redux';\nimport Alert from 'src/components/Alert';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { FeatureFlag, styled, t, isFeatureEnabled } from '@superset-ui/core';\nimport ResultSet from '../ResultSet';\nimport { LOCALSTORAGE_MAX_QUERY_AGE_MS } from '../../constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst EXTRA_HEIGHT_RESULTS = 8; // we need extra height in RESULTS tab. because the height from props was calculated based on PREVIEW tab.\nconst StyledEmptyStateWrapper = styled.div`\n  height: 100%;\n  .antd5-empty-image img {\n    margin-right: 28px;\n  }\n\n  p {\n    margin-right: 28px;\n  }\n`;\nconst Results = ({ latestQueryId, height, displayLimit, defaultQueryLimit }) => {\n  const databases = useSelector(({ sqlLab: { databases } }) => databases, shallowEqual);\n  const latestQuery = useSelector(({ sqlLab: { queries } }) => queries[latestQueryId || ''], shallowEqual);\n  if (!latestQuery ||\n  Date.now() - latestQuery.startDttm > LOCALSTORAGE_MAX_QUERY_AGE_MS) {\n    return _jsx(StyledEmptyStateWrapper, { children:\n      _jsx(EmptyState, { title: t('Run a query to display results'), image: \"document.svg\" }) }\n    );\n  }\n  if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n  latestQuery.state === 'success' &&\n  !latestQuery.resultsKey &&\n  !latestQuery.results) {\n    return _jsx(Alert, { type: \"warning\", message: t('No stored results found, you need to re-run your query') });\n  }\n  return _jsx(ResultSet, { search: true, queryId: latestQuery.id, height: height + EXTRA_HEIGHT_RESULTS, database: databases[latestQuery.dbId], displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit, showSql: true, showSqlInline: true });\n};\nexport default Results;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}