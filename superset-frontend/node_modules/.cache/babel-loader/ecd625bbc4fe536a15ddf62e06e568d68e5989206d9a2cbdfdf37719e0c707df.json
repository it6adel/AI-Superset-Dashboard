{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, useState } from 'react';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst ModalTrigger = /*#__PURE__*/forwardRef((props, ref) => {\n  const [showModal, setShowModal] = useState(false);\n  const { beforeOpen = () => {}, onExit = () => {}, isButton = false, resizable = false, draggable = false, className = '', tooltip, modalFooter, triggerNode, destroyOnClose = true, modalBody, draggableConfig = {}, resizableConfig = {}, modalTitle, responsive, width, maxWidth } = props;\n  const close = () => {\n    setShowModal(false);\n    onExit == null ? void 0 : onExit();\n  };\n  const open = (e) => {\n    e.preventDefault();\n    beforeOpen == null ? void 0 : beforeOpen();\n    setShowModal(true);\n  };\n  if (ref) {\n    ref.current = { close, open, showModal }; // eslint-disable-line\n  }\n  /* eslint-disable jsx-a11y/interactive-supports-focus */\n  return _jsxs(_Fragment, { children: [\n    isButton && _jsx(Button, { className: \"modal-trigger\", tooltip: tooltip, onClick: open, children:\n      triggerNode }\n    ),\n    !isButton && _jsx(\"div\", { onClick: open, role: \"button\", children:\n      triggerNode }\n    ),\n    _jsx(Modal, { className: className, show: showModal, onHide: close, title: modalTitle, footer: modalFooter, hideFooter: !modalFooter, width: width, maxWidth: maxWidth, responsive: responsive, resizable: resizable, resizableConfig: resizableConfig, draggable: draggable, draggableConfig: draggableConfig, destroyOnClose: destroyOnClose, children:\n      modalBody }\n    )] }\n  );\n});\nexport default ModalTrigger;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}