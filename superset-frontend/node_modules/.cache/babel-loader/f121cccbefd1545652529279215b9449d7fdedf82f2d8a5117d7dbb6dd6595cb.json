{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\nimport { styled, css } from '@superset-ui/core';\n\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { Row, Col, Grid } from 'src/components';\nimport { MainNav } from 'src/components/Menu';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\nimport Icons from 'src/components/Icons';\nimport { useUiConfig } from 'src/components/UiConfigContext';\nimport { URL_PARAMS } from 'src/constants';\nimport RightMenu from './RightMenu';import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledHeader = styled.header`\n  ${({ theme }) => `\n      background-color: ${theme.colors.grayscale.light5};\n      margin-bottom: 2px;\n      z-index: 10;\n\n      &:nth-last-of-type(2) nav {\n        margin-bottom: 2px;\n      }\n      .caret {\n        display: none;\n      }\n      .navbar-brand {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        /* must be exactly the height of the Antd navbar */\n        min-height: 50px;\n        padding: ${theme.gridUnit}px\n          ${theme.gridUnit * 2}px\n          ${theme.gridUnit}px\n          ${theme.gridUnit * 4}px;\n        max-width: ${theme.gridUnit * theme.brandIconMaxWidth}px;\n        img {\n          height: 100%;\n          object-fit: contain;\n        }\n        &:focus {\n          border-color: transparent;\n        }\n        &:focus-visible {\n          border-color: ${theme.colors.primary.dark1};\n        }\n      }\n      .navbar-brand-text {\n        border-left: 1px solid ${theme.colors.grayscale.light2};\n        border-right: 1px solid ${theme.colors.grayscale.light2};\n        height: 100%;\n        color: ${theme.colors.grayscale.dark1};\n        padding-left: ${theme.gridUnit * 4}px;\n        padding-right: ${theme.gridUnit * 4}px;\n        margin-right: ${theme.gridUnit * 6}px;\n        font-size: ${theme.gridUnit * 4}px;\n        float: left;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n\n        span {\n          max-width: ${theme.gridUnit * 58}px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        @media (max-width: 1127px) {\n          display: none;\n        }\n      }\n      @media (max-width: 767px) {\n        .navbar-brand {\n          float: none;\n        }\n      }\n      @media (max-width: 767px) {\n        .antd5-menu-item {\n          padding: 0 ${theme.gridUnit * 6}px 0\n            ${theme.gridUnit * 3}px !important;\n        }\n        .antd5-menu > .antd5-menu-item > span > a {\n          padding: 0px;\n        }\n        .main-nav .antd5-menu-submenu-title > svg:nth-of-type(1) {\n          display: none;\n        }\n      }\n  `}\n`;\nconst { SubMenu } = MainNav;\nconst StyledSubMenu = styled(SubMenu)`\n  ${({ theme }) => css`\n    [data-icon=\"caret-down\"] {\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.xs}px;\n      margin-left: ${theme.gridUnit}px;\n    }\n    &.antd5-menu-submenu {\n        padding: ${theme.gridUnit * 2}px ${theme.gridUnit * 4}px;\n        display: flex;\n        align-items: center;\n        height: 100%;  &.antd5-menu-submenu-active {\n    .antd5-menu-title-content {\n      color: ${theme.colors.primary.base};\n    }\n  }\n  `}\n`;\nconst { useBreakpoint } = Grid;\nexport function Menu({ data: { menu, brand, navbar_right: navbarRight, settings, environment_tag: environmentTag }, isFrontendRoute = () => false }) {\n  const [showMenu, setMenu] = useState('horizontal');\n  const screens = useBreakpoint();\n  const uiConfig = useUiConfig();\n  useEffect(() => {\n    function handleResize() {\n      if (window.innerWidth <= 767) {\n        setMenu('inline');\n      } else\n\n      setMenu('horizontal');\n    }\n    handleResize();\n    const windowResize = _debounce(() => handleResize(), 10);\n    window.addEventListener('resize', windowResize);\n    return () => window.removeEventListener('resize', windowResize);\n  }, []);\n  let Paths;\n  (function (Paths) {\n    Paths[\"Explore\"] = \"/explore\";\n    Paths[\"Dashboard\"] = \"/dashboard\";\n    Paths[\"Chart\"] = \"/chart\";\n    Paths[\"Datasets\"] = \"/tablemodelview\";\n  })(Paths || (Paths = {}));\n  const defaultTabSelection = [];\n  const [activeTabs, setActiveTabs] = useState(defaultTabSelection);\n  const location = useLocation();\n  useEffect(() => {\n    const path = location.pathname;\n    switch (true) {\n      case path.startsWith(Paths.Dashboard):\n        setActiveTabs(['Dashboards']);\n        break;\n      case path.startsWith(Paths.Chart) || path.startsWith(Paths.Explore):\n        setActiveTabs(['Charts']);\n        break;\n      case path.startsWith(Paths.Datasets):\n        setActiveTabs(['Datasets']);\n        break;\n      default:\n        setActiveTabs(defaultTabSelection);\n    }\n  }, [location.pathname]);\n  const standalone = getUrlParam(URL_PARAMS.standalone);\n  if (standalone || uiConfig.hideNav)\n  return _jsx(_Fragment, {});\n  const renderSubMenu = ({ label, childs, url, index, isFrontendRoute }) => {\n    if (url && isFrontendRoute) {\n      return _jsx(MainNav.Item, { role: \"presentation\", children:\n        _jsx(NavLink, { role: \"button\", to: url, activeClassName: \"is-active\", children:\n          label }\n        ) }, label\n      );\n    }\n    if (url) {\n      return _jsx(MainNav.Item, { children:\n        _jsx(\"a\", { href: url, children: label }) }, label\n      );\n    }\n    return _jsx(StyledSubMenu, { title: label, icon: showMenu === 'inline' ? _jsx(_Fragment, {}) : _jsx(Icons.CaretDownOutlined, { iconSize: \"xs\" }), children:\n      childs == null ? void 0 : childs.map((child, index1) => {\n        if (typeof child === 'string' && child === '-' && label !== 'Data') {\n          return _jsx(MainNav.Divider, {}, `$${index1}`);\n        }\n        if (typeof child !== 'string') {\n          return _jsx(MainNav.Item, { children:\n            child.isFrontendRoute ? _jsx(NavLink, { to: child.url || '', exact: true, activeClassName: \"is-active\", children:\n              child.label }\n            ) : _jsx(\"a\", { href: child.url, children: child.label }) }, `${child.label}`\n          );\n        }\n        return null;\n      }) }, index\n    );\n  };\n  return _jsx(StyledHeader, { className: \"top\", id: \"main-menu\", role: \"navigation\", children:\n    _jsxs(Row, { children: [\n      _jsxs(Col, { md: 16, xs: 24, children: [\n        _jsx(Tooltip, { id: \"brand-tooltip\", placement: \"bottomLeft\", title: brand.tooltip, arrow: { pointAtCenter: true }, children:\n          isFrontendRoute(window.location.pathname) ? _jsx(GenericLink, { className: \"navbar-brand\", to: brand.path, children:\n            _jsx(\"img\", { src: brand.icon, alt: brand.alt }) }\n          ) : _jsx(\"a\", { className: \"navbar-brand\", href: brand.path, tabIndex: -1, children:\n            _jsx(\"img\", { src: brand.icon, alt: brand.alt }) }\n          ) }\n        ),\n        brand.text && _jsx(\"div\", { className: \"navbar-brand-text\", children:\n          _jsx(\"span\", { children: brand.text }) }\n        ),\n        _jsx(MainNav, { mode: showMenu, className: \"main-nav\", selectedKeys: activeTabs, disabledOverflow: true, children:\n          menu.map((item, index) => {var _item$childs;\n            const props = {\n              index,\n              ...item,\n              isFrontendRoute: isFrontendRoute(item.url),\n              childs: (_item$childs = item.childs) == null ? void 0 : _item$childs.map((c) => {\n                if (typeof c === 'string') {\n                  return c;\n                }\n                return {\n                  ...c,\n                  isFrontendRoute: isFrontendRoute(c.url)\n                };\n              })\n            };\n            return renderSubMenu(props);\n          }) }\n        )] }\n      ),\n      _jsx(Col, { md: 8, xs: 24, children:\n        _jsx(RightMenu, { align: screens.md ? 'flex-end' : 'flex-start', settings: settings, navbarRight: navbarRight, isFrontendRoute: isFrontendRoute, environmentTag: environmentTag }) }\n      )] }\n    ) }\n  );\n}\n// transform the menu data to reorganize components\nexport default function MenuWrapper({ data, ...rest }) {\n  const newMenuData = {\n    ...data\n  };\n  // Menu items that should go into settings dropdown\n  const settingsMenus = {\n    Data: true,\n    Security: true,\n    Manage: true\n  };\n  // Cycle through menu.menu to build out cleanedMenu and settings\n  const cleanedMenu = [];\n  const settings = [];\n  newMenuData.menu.forEach((item) => {\n    if (!item) {\n      return;\n    }\n    const children = [];\n    const newItem = {\n      ...item\n    };\n    // Filter childs\n    if (item.childs) {\n      item.childs.forEach((child) => {\n        if (typeof child === 'string') {\n          children.push(child);\n        } else\n        if (child.label) {\n          children.push(child);\n        }\n      });\n      newItem.childs = children;\n    }\n    if (!settingsMenus.hasOwnProperty(item.name)) {\n      cleanedMenu.push(newItem);\n    } else\n    {\n      settings.push(newItem);\n    }\n  });\n  newMenuData.menu = cleanedMenu;\n  newMenuData.settings = settings;\n  return _jsx(Menu, { data: newMenuData, ...rest });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}