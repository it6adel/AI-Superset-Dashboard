{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { getChartKey } from 'src/explore/exploreUtils';\nimport { VizTile } from './VizTile';\nimport { FEATURED_CHARTS } from './constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const antdIconProps = {\n  iconSize: 'l',\n  css: (theme) => css`\n    padding: ${theme.gridUnit}px;\n    & > * {\n      line-height: 0;\n    }\n  `\n};\nexport const FastVizSwitcher = /*#__PURE__*/memo(({ currentSelection, onChange }) => {\n  const currentViz = useSelector((state) => {var _state$charts, _state$charts$getChar, _state$charts$getChar2;return (_state$charts = state.charts) == null ? void 0 : (_state$charts$getChar = _state$charts[getChartKey(state.explore)]) == null ? void 0 : (_state$charts$getChar2 = _state$charts$getChar.latestQueryFormData) == null ? void 0 : _state$charts$getChar2.\n    viz_type;});\n  const vizTiles = useMemo(() => {\n    const vizTiles = [...FEATURED_CHARTS];\n    if (currentSelection &&\n    FEATURED_CHARTS.every((featuredVizMeta) => featuredVizMeta.name !== currentSelection) &&\n    currentSelection !== currentViz) {\n      vizTiles.unshift({\n        name: currentSelection,\n        icon: _jsx(Icons.MonitorOutlined, { ...antdIconProps, \"aria-label\": \"monitor\" })\n      });\n    }\n    if (currentViz &&\n    FEATURED_CHARTS.every((featuredVizMeta) => featuredVizMeta.name !== currentViz)) {\n      vizTiles.unshift({\n        name: currentViz,\n        icon: _jsx(Icons.CheckSquareOutlined, { ...antdIconProps, \"aria-label\": \"check-square\" })\n      });\n    }\n    return vizTiles;\n  }, [currentSelection, currentViz]);\n  return _jsx(\"div\", { css: (theme) => css`\n          display: flex;\n          justify-content: space-between;\n          column-gap: ${theme.gridUnit}px;\n        `, children:\n    vizTiles.map((vizMeta) => _jsx(VizTile, { vizMeta: vizMeta, isActive: currentSelection === vizMeta.name, isRendered: currentViz === vizMeta.name, onTileClick: onChange }, vizMeta.name)) }\n  );\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}