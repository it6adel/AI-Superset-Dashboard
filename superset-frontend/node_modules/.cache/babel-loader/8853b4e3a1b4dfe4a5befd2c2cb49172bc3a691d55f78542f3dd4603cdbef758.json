{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo } from 'react';\nimport { Tag } from 'src/components/Tags';\nimport { css, isAdhocColumn, t, useTheme } from '@superset-ui/core';\nimport RowCountLabel from 'src/explore/components/RowCountLabel';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport default function TableControls({ filters, setFilters, totalCount, loading, onReload }) {\n  const theme = useTheme();\n  const filterMap = useMemo(() => Object.assign({}, ...filters.map((filter) => ({\n    [isAdhocColumn(filter.col) ?\n    filter.col.label :\n    filter.col]: filter\n  }))), [filters]);\n  const removeFilter = useCallback((colName) => {\n    const updatedFilterMap = { ...filterMap };\n    delete updatedFilterMap[colName];\n    setFilters([...Object.values(updatedFilterMap)]);\n  }, [filterMap, setFilters]);\n  const filterTags = useMemo(() => Object.entries(filterMap).\n  map(([colName, { val, formattedVal }]) => ({\n    colName,\n    val: formattedVal != null ? formattedVal : val\n  })).\n  sort((a, b) => a.colName.localeCompare(b.colName)), [filterMap]);\n  return _jsxs(\"div\", { css: css`\n        display: flex;\n        justify-content: space-between;\n        padding: ${theme.gridUnit / 2}px 0;\n        margin-bottom: ${theme.gridUnit * 2}px;\n      `, children: [\n    _jsx(\"div\", { css: css`\n          display: flex;\n          flex-wrap: wrap;\n        `, children:\n      filterTags.map(({ colName, val }, index) => _jsxs(Tag, { editable: true, onDelete: removeFilter.bind(null, colName), index: index, id: index, name: `${colName}=${val}`, children: [\n        _jsx(\"span\", { css: css`\n                margin-right: ${theme.gridUnit}px;\n              `, children:\n          colName }\n        ),\n        _jsx(\"strong\", { children: val })] }, colName\n      )) }\n    ),\n    _jsxs(\"div\", { css: css`\n          display: flex;\n          align-items: center;\n          height: min-content;\n        `, children: [\n      _jsx(RowCountLabel, { loading: loading && !totalCount, rowcount: totalCount }),\n      _jsx(Icons.ReloadOutlined, { iconColor: theme.colors.grayscale.light1, iconSize: \"l\", \"aria-label\": t('Reload'), role: \"button\", onClick: onReload })] }\n    )] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}