{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo, useState } from 'react';\nimport { tn, t, isAdhocColumn } from '@superset-ui/core';\nimport { isColumnMeta } from '@superset-ui/chart-controls';\n\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport ColumnSelectPopoverTrigger from './ColumnSelectPopoverTrigger';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction DndColumnSelect(props) {\n  const { value, options, multi = true, onChange, canDelete = true, ghostButtonText, name, label, isTemporal, disabledTabs } = props;\n  const [newColumnPopoverVisible, setNewColumnPopoverVisible] = useState(false);\n  const optionSelector = useMemo(() => {\n    const optionsMap = Object.fromEntries(options.map((option) => [option.column_name, option]));\n    return new OptionSelector(optionsMap, multi, value);\n  }, [multi, options, value]);\n  const onDrop = useCallback((item) => {\n    const column = item.value;\n    if (!optionSelector.multi && !_isEmpty(optionSelector.values)) {\n      optionSelector.replace(0, column.column_name);\n    } else\n    {\n      optionSelector.add(column.column_name);\n    }\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const canDrop = useCallback((item) => {\n    const columnName = item.value.column_name;\n    return columnName in optionSelector.options && !optionSelector.has(columnName);\n  }, [optionSelector]);\n  const onClickClose = useCallback((index) => {\n    optionSelector.del(index);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const onShiftOptions = useCallback((dragIndex, hoverIndex) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const valuesRenderer = useCallback(() => optionSelector.values.map((column, idx) => {\n    const datasourceWarningMessage = isAdhocColumn(column) && column.datasourceWarning ?\n    t('This column might be incompatible with current dataset') :\n    undefined;\n    const withCaret = isAdhocColumn(column) || !column.error_text;\n    return _jsx(ColumnSelectPopoverTrigger, { columns: options, onColumnEdit: (newColumn) => {\n        if (isColumnMeta(newColumn)) {\n          optionSelector.replace(idx, newColumn.column_name);\n        } else\n        {\n          optionSelector.replace(idx, newColumn);\n        }\n        onChange(optionSelector.getValues());\n      }, editedColumn: column, isTemporal: isTemporal, disabledTabs: disabledTabs, children:\n      _jsx(OptionWrapper, { index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: `${DndItemType.ColumnOption}_${name}_${label}`, canDelete: canDelete, column: column, datasourceWarningMessage: datasourceWarningMessage, withCaret: withCaret }, idx) }, idx\n    );\n  }), [\n  canDelete,\n  isTemporal,\n  label,\n  name,\n  onChange,\n  onClickClose,\n  onShiftOptions,\n  optionSelector,\n  options]\n  );\n  const addNewColumnWithPopover = useCallback((newColumn) => {\n    if (isColumnMeta(newColumn)) {\n      optionSelector.add(newColumn.column_name);\n    } else\n    {\n      optionSelector.add(newColumn);\n    }\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const togglePopover = useCallback((visible) => {\n    setNewColumnPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const openPopover = useCallback(() => {\n    togglePopover(true);\n  }, [togglePopover]);\n  const labelGhostButtonText = useMemo(() => ghostButtonText != null ? ghostButtonText :\n  tn('Drop a column here or click', 'Drop columns here or click', multi ? 2 : 1), [ghostButtonText, multi]);\n  return _jsxs(\"div\", { children: [\n    _jsx(DndSelectLabel, { onDrop: onDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DndItemType.Column, displayGhostButton: multi || optionSelector.values.length === 0, ghostButtonText: labelGhostButtonText, onClickGhostButton: openPopover, ...props }),\n    _jsx(ColumnSelectPopoverTrigger, { columns: options, onColumnEdit: addNewColumnWithPopover, isControlledComponent: true, togglePopover: togglePopover, closePopover: closePopover, visible: newColumnPopoverVisible, isTemporal: isTemporal, disabledTabs: disabledTabs, children:\n      _jsx(\"div\", {}) }\n    )] }\n  );\n}\nexport { DndColumnSelect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}