{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { styled, t, useTheme, css } from '@superset-ui/core';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport { saveFilterBarOrientation, saveCrossFiltersSetting } from 'src/dashboard/actions/dashboardInfo';\nimport Icons from 'src/components/Icons';\nimport Checkbox from 'src/components/Checkbox';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Button } from 'src/components';\nimport { Space } from 'src/components/Space';\nimport { clearDataMaskState } from 'src/dataMask/actions';\nimport { useFilters } from 'src/dashboard/components/nativeFilters/FilterBar/state';\nimport { useFilterConfigModal } from 'src/dashboard/components/nativeFilters/FilterBar/FilterConfigurationLink/useFilterConfigModal';\nimport { useCrossFiltersScopingModal } from '../CrossFilters/ScopingModal/useCrossFiltersScopingModal';\nimport FilterConfigurationLink from '../FilterConfigurationLink';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledMenuLabel = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  .enable-cross-filters-text {\n    padding-left: ${({ theme }) => `${theme.gridUnit * 2}px`};\n  }\n`;\nconst StyledCheckbox = styled(Checkbox)`\n  ${({ theme }) => `\n  &,\n  svg {\n    display: inline-block;\n    width: ${theme.gridUnit * 4}px;\n    height: ${theme.gridUnit * 4}px;\n  }\n`}\n`;\nconst CROSS_FILTERS_MENU_KEY = 'cross-filters-menu-key';\nconst CROSS_FILTERS_SCOPING_MENU_KEY = 'cross-filters-scoping-menu-key';\nconst ADD_EDIT_FILTERS_MENU_KEY = 'add-edit-filters-menu-key';\nconst isOrientation = (o) => o === FilterBarOrientation.Vertical || o === FilterBarOrientation.Horizontal;\nconst FilterBarSettings = () => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const isCrossFiltersEnabled = useSelector(({ dashboardInfo }) => dashboardInfo.crossFiltersEnabled);\n  const filterBarOrientation = useSelector(({ dashboardInfo }) => dashboardInfo.filterBarOrientation);\n  const [selectedFilterBarOrientation, setSelectedFilterBarOrientation] = useState(filterBarOrientation);\n  const [crossFiltersEnabled, setCrossFiltersEnabled] = useState(isCrossFiltersEnabled);\n  const canEdit = useSelector(({ dashboardInfo }) => dashboardInfo.dash_edit_perm);\n  const filters = useFilters();\n  const filterValues = useMemo(() => Object.values(filters), [filters]);\n  const dashboardId = useSelector(({ dashboardInfo }) => dashboardInfo.id);\n  const [openScopingModal, scopingModal] = useCrossFiltersScopingModal();\n  const { openFilterConfigModal, FilterConfigModalComponent } = useFilterConfigModal({\n    createNewOnOpen: filterValues.length === 0,\n    dashboardId\n  });\n  const updateCrossFiltersSetting = useCallback(async (isEnabled) => {\n    if (!isEnabled) {\n      dispatch(clearDataMaskState());\n    }\n    await dispatch(saveCrossFiltersSetting(isEnabled));\n  }, [dispatch]);\n  const toggleCrossFiltering = useCallback(() => {\n    setCrossFiltersEnabled(!crossFiltersEnabled);\n    updateCrossFiltersSetting(!crossFiltersEnabled);\n  }, [crossFiltersEnabled, updateCrossFiltersSetting]);\n  const toggleFilterBarOrientation = useCallback(async (orientation) => {\n    if (orientation === filterBarOrientation) {\n      return;\n    }\n    // set displayed selection in local state for immediate visual response after clicking\n    setSelectedFilterBarOrientation(orientation);\n    try {\n      // save selection in Redux and backend\n      await dispatch(saveFilterBarOrientation(orientation));\n    }\n    catch {\n      // revert local state in case of error when saving\n      setSelectedFilterBarOrientation(filterBarOrientation);\n    }\n  }, [dispatch, filterBarOrientation]);\n  const handleClick = useCallback((selection) => {\n    const selectedKey = selection.key;\n    if (selectedKey === CROSS_FILTERS_MENU_KEY) {\n      toggleCrossFiltering();\n    } else\n    if (isOrientation(selectedKey)) {\n      toggleFilterBarOrientation(selectedKey);\n    } else\n    if (selectedKey === CROSS_FILTERS_SCOPING_MENU_KEY) {\n      openScopingModal();\n    } else\n    if (selectedKey === ADD_EDIT_FILTERS_MENU_KEY) {\n      openFilterConfigModal();\n    }\n  }, [\n  openScopingModal,\n  toggleCrossFiltering,\n  toggleFilterBarOrientation,\n  openFilterConfigModal]\n  );\n  const crossFiltersMenuItem = useMemo(() => _jsxs(StyledMenuLabel, { children: [\n    _jsx(StyledCheckbox, { className: \"enable-cross-filters\", checked: crossFiltersEnabled, onChange: (checked) => setCrossFiltersEnabled(checked || false) }), ' ',\n    _jsx(\"span\", { className: \"enable-cross-filters-text\", children:\n      t('Enable cross-filtering') }\n    )] }\n  ), [crossFiltersEnabled]);\n  const menuItems = useMemo(() => {\n    const items = [];\n    if (canEdit) {\n      items.push({\n        key: ADD_EDIT_FILTERS_MENU_KEY,\n        label: _jsx(FilterConfigurationLink, { children:\n          t('Add or edit filters') }\n        )\n      });\n      if (canEdit) {\n        items.push({ type: 'divider' });\n      }\n    }\n    if (canEdit) {\n      items.push({\n        key: CROSS_FILTERS_MENU_KEY,\n        label: crossFiltersMenuItem\n      });\n      items.push({\n        key: CROSS_FILTERS_SCOPING_MENU_KEY,\n        label: t('Cross-filtering scoping')\n      });\n      items.push({ type: 'divider' });\n    }\n    if (canEdit) {\n      items.push({\n        key: 'placement',\n        label: t('Orientation of filter bar'),\n        children: [\n        {\n          key: FilterBarOrientation.Vertical,\n          label: _jsxs(Space, { children: [\n            t('Vertical (Left)'),\n            selectedFilterBarOrientation ===\n            FilterBarOrientation.Vertical && _jsx(Icons.CheckOutlined, { iconColor: theme.colors.primary.base, css: css`\n                      vertical-align: -${theme.gridUnit * 0.03125}em;\n                    `, iconSize: \"m\" })] }\n          )\n        },\n        {\n          key: FilterBarOrientation.Horizontal,\n          label: _jsxs(Space, { children: [\n            t('Horizontal (Top)'),\n            selectedFilterBarOrientation ===\n            FilterBarOrientation.Horizontal && _jsx(Icons.CheckOutlined, { iconSize: \"m\", css: css`\n                      vertical-align: middle;\n                    ` })] }\n          )\n        }],\n\n        ...{}\n      });\n    }\n    return items;\n  }, [\n  selectedFilterBarOrientation,\n  canEdit,\n  crossFiltersMenuItem,\n  dashboardId,\n  filterValues]\n  );\n  if (!menuItems.length) {\n    return null;\n  }\n  return _jsxs(_Fragment, { children: [\n    _jsx(Dropdown, { menu: {\n        onClick: handleClick,\n        items: menuItems,\n        selectedKeys: [selectedFilterBarOrientation]\n      }, trigger: ['click'], children:\n      _jsx(Button, { type: \"link\", css: css`\n            padding: 0;\n          `, children:\n        _jsx(Icons.SettingOutlined, { iconSize: \"xl\", name: \"gear\" }) }\n      ) }\n    ),\n    scopingModal,\n    FilterConfigModalComponent] }\n  );\n};\nexport default FilterBarSettings;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}