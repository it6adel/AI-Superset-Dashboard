{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { MenuDotsDropdown } from 'src/components/Dropdown';\nimport { Menu } from 'src/components/Menu';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { PIVOT_COL_ID } from './constants';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst IconEmpty = styled.span`\n  width: 14px;\n`;\nconst HeaderMenu = ({ colId, api, pinnedLeft, pinnedRight, invisibleColumns, isMain, onVisibleChange }) => {var _api$getColumns;\n  const pinColumn = useCallback((pinLoc) => {\n    api.setColumnsPinned([colId], pinLoc);\n  }, [api, colId]);\n  const unHideAction = invisibleColumns.length > 0 && _jsxs(Menu.SubMenu, { title: t('Unhide'), icon: _jsx(Icons.EyeOutlined, { iconSize: \"m\" }), children: [\n    invisibleColumns.length > 1 && _jsx(Menu.Item, { onClick: () => {\n        api.setColumnsVisible(invisibleColumns, true);\n      }, children:\n      _jsx(\"b\", { children: t('All %s hidden columns', invisibleColumns.length) }) }\n    ),\n    invisibleColumns.map((c) => _jsx(Menu.Item, { onClick: () => {\n        api.setColumnsVisible([c.getColId()], true);\n      }, children:\n      c.getColDef().headerName }, c.getColId()\n    ))] }\n  );\n  if (isMain) {\n    return _jsx(MenuDotsDropdown, { placement: \"bottomLeft\", trigger: ['click'], onOpenChange: onVisibleChange, overlay: _jsxs(Menu, { style: { width: 250 }, mode: \"vertical\", children: [\n        _jsx(Menu.Item, { onClick: () => {\n            copyTextToClipboard(() => new Promise((resolve, reject) => {\n              const data = api.getDataAsCsv({\n                columnKeys: api.\n                getAllDisplayedColumns().\n                map((c) => c.getColId()).\n                filter((id) => id !== colId),\n                suppressQuotes: true,\n                columnSeparator: '\\t'\n              });\n              if (data) {\n                resolve(data);\n              } else\n              {\n                reject();\n              }\n            }));\n          }, icon: _jsx(Icons.CopyOutlined, { iconSize: \"m\" }), children:\n          t('Copy the current data') }\n        ),\n        _jsx(Menu.Item, { onClick: () => {\n            api.exportDataAsCsv({\n              columnKeys: api.\n              getAllDisplayedColumns().\n              map((c) => c.getColId()).\n              filter((id) => id !== colId)\n            });\n          }, icon: _jsx(Icons.DownloadOutlined, { iconSize: \"m\" }), children:\n          t('Download to CSV') }\n        ),\n        _jsx(Menu.Divider, {}),\n        _jsx(Menu.Item, { onClick: () => {\n            api.autoSizeAllColumns();\n          }, icon: _jsx(Icons.ColumnWidthOutlined, { iconSize: \"m\" }), children:\n          t('Autosize all columns') }\n        ),\n        unHideAction,\n        _jsx(Menu.Divider, {}),\n        _jsx(Menu.Item, { onClick: () => {\n            api.setColumnsVisible(invisibleColumns, true);\n            const columns = api.getColumns();\n            if (columns) {\n              const pinnedColumns = columns.filter((c) => c.getColId() !== PIVOT_COL_ID && c.isPinned());\n              api.setColumnsPinned(pinnedColumns, null);\n              api.moveColumns(columns, 0);\n              const firstColumn = columns.find((c) => c.getColId() !== PIVOT_COL_ID);\n              if (firstColumn) {\n                api.ensureColumnVisible(firstColumn, 'start');\n              }\n            }\n          }, icon: _jsx(IconEmpty, { className: \"anticon\" }), children:\n          t('Reset columns') }\n        )] }\n      ) });\n  }\n  return _jsx(MenuDotsDropdown, { placement: \"bottomRight\", trigger: ['click'], onOpenChange: onVisibleChange, overlay: _jsxs(Menu, { style: { width: 180 }, mode: \"vertical\", children: [\n      _jsx(Menu.Item, { onClick: () => {\n          copyTextToClipboard(() => new Promise((resolve, reject) => {\n            const data = api.getDataAsCsv({\n              columnKeys: [colId],\n              suppressQuotes: true\n            });\n            if (data) {\n              resolve(data);\n            } else\n            {\n              reject();\n            }\n          }));\n        }, icon: _jsx(Icons.CopyOutlined, { iconSize: \"m\" }), children:\n        t('Copy') }\n      ),\n      (pinnedLeft || pinnedRight) && _jsx(Menu.Item, { onClick: () => pinColumn(null), icon: _jsx(Icons.UnlockOutlined, { iconSize: \"m\" }), children:\n        t('Unpin') }\n      ),\n      !pinnedLeft && _jsx(Menu.Item, { onClick: () => pinColumn('left'), icon: _jsx(Icons.VerticalRightOutlined, { iconSize: \"m\" }), children:\n        t('Pin Left') }\n      ),\n      !pinnedRight && _jsx(Menu.Item, { onClick: () => pinColumn('right'), icon: _jsx(Icons.VerticalLeftOutlined, { iconSize: \"m\" }), children:\n        t('Pin Right') }\n      ),\n      _jsx(Menu.Divider, {}),\n      _jsx(Menu.Item, { onClick: () => {\n          api.autoSizeColumns([colId]);\n        }, icon: _jsx(Icons.ColumnWidthOutlined, { iconSize: \"m\" }), children:\n        t('Autosize Column') }\n      ),\n      _jsx(Menu.Item, { onClick: () => {\n          api.setColumnsVisible([colId], false);\n        }, disabled: ((_api$getColumns = api.getColumns()) == null ? void 0 : _api$getColumns.length) === invisibleColumns.length + 1, icon: _jsx(Icons.EyeInvisibleOutlined, { iconSize: \"m\" }), children:\n        t('Hide Column') }\n      ),\n      unHideAction] }\n    ) });\n};\nexport default HeaderMenu;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}