{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport NumberFormatter from '../NumberFormatter';\nfunction formatMemory(binary, decimals, transfer) {\n  return (value) => {\n    let formatted = '';\n    if (value === 0) {\n      formatted = '0B';\n    } else\n    {\n      const sign = value > 0 ? '' : '-';\n      const absValue = Math.abs(value);\n      const suffixes = binary ?\n      ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'] :\n      ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'RB', 'QB'];\n      const base = binary ? 1024 : 1000;\n      const i = Math.min(suffixes.length - 1, Math.floor(Math.log(absValue) / Math.log(base)));\n      formatted = `${sign}${parseFloat((absValue / Math.pow(base, i)).toFixed(decimals))}${suffixes[i]}`;\n    }\n    if (transfer) {\n      formatted = `${formatted}/s`;\n    }\n    return formatted;\n  };\n}\nexport default function createMemoryFormatter(config = {}) {\n  const { description, id, label, binary, decimals = 2, transfer = false } = config;\n  return new NumberFormatter({\n    description,\n    formatFunc: formatMemory(binary, decimals, transfer),\n    id: id != null ? id : 'memory_format',\n    label: label != null ? label : `Memory formatter`\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}