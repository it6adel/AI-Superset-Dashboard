{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DTTM_ALIAS, GenericDataType, QueryMode, t } from '@superset-ui/core';\nimport { SortSeriesType } from './types';\nexport const DEFAULT_MAX_ROW = 100000;\n// eslint-disable-next-line import/prefer-default-export\nexport const TIME_FILTER_LABELS = {\n  time_range: t('Time Range'),\n  granularity_sqla: t('Time Column'),\n  time_grain_sqla: t('Time Grain'),\n  granularity: t('Time Granularity')\n};\nexport const COLUMN_NAME_ALIASES = {\n  [DTTM_ALIAS]: t('Time')\n};\nexport const DATASET_TIME_COLUMN_OPTION = {\n  verbose_name: COLUMN_NAME_ALIASES[DTTM_ALIAS],\n  column_name: DTTM_ALIAS,\n  type: 'TIMESTAMP',\n  type_generic: GenericDataType.Temporal,\n  description: t('A reference to the [Time] configuration, taking granularity into account')\n};\nexport const QUERY_TIME_COLUMN_OPTION = {\n  column_name: DTTM_ALIAS,\n  is_dttm: true,\n  type: 'TIMESTAMP',\n  type_generic: GenericDataType.Temporal\n};\nexport const QueryModeLabel = {\n  [QueryMode.Aggregate]: t('Aggregate'),\n  [QueryMode.Raw]: t('Raw records')\n};\nexport const DEFAULT_SORT_SERIES_DATA = {\n  sort_series_type: SortSeriesType.Sum,\n  sort_series_ascending: false\n};\nexport const SORT_SERIES_CHOICES = [\n[SortSeriesType.Name, t('Category name')],\n[SortSeriesType.Sum, t('Total value')],\n[SortSeriesType.Min, t('Minimum value')],\n[SortSeriesType.Max, t('Maximum value')],\n[SortSeriesType.Avg, t('Average value')]];\n\nexport const DEFAULT_XAXIS_SORT_SERIES_DATA = {\n  sort_series_type: SortSeriesType.Name,\n  sort_series_ascending: true\n};\nexport const DEFAULT_DATE_PATTERN = /\\d{4}-\\d{2}-\\d{2}/g;\n// When it fails to parse a date\nexport const INVALID_DATE = 'Invalid date';","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}