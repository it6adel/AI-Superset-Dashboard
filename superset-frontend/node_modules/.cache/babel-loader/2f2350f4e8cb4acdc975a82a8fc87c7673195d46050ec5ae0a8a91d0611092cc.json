{"ast":null,"code":"import { css, GenericDataType, styled, t } from '@superset-ui/core';\nimport { ClockCircleOutlined, QuestionOutlined, FunctionOutlined, FieldBinaryOutlined, FieldStringOutlined, NumberOutlined } from '@ant-design/icons';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst TypeIconWrapper = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${theme.gridUnit * 6}px;\n    height: ${theme.gridUnit * 6}px;\n    margin-right: ${theme.gridUnit}px;\n\n    && svg {\n      margin-right: 0;\n      margin-left: 0;\n      width: 100%;\n      height: 100%;\n    }\n  `};\n`;\nexport function ColumnTypeLabel({ type }) {\n  let typeIcon = _jsx(QuestionOutlined, { \"aria-label\": t('unknown type icon') });\n  if (type === '' || type === 'expression') {\n    typeIcon = _jsx(FunctionOutlined, { \"aria-label\": t('function type icon') });\n  } else\n  if (type === GenericDataType.String) {\n    typeIcon = _jsx(FieldStringOutlined, { \"aria-label\": t('string type icon') });\n  } else\n  if (type === GenericDataType.Numeric) {\n    typeIcon = _jsx(NumberOutlined, { \"aria-label\": t('numeric type icon') });\n  } else\n  if (type === GenericDataType.Boolean) {\n    typeIcon = _jsx(FieldBinaryOutlined, { \"aria-label\": t('boolean type icon') });\n  } else\n  if (type === GenericDataType.Temporal) {\n    typeIcon = _jsx(ClockCircleOutlined, { \"aria-label\": t('temporal type icon') });\n  }\n  return _jsx(TypeIconWrapper, { children: typeIcon });\n}\nexport default ColumnTypeLabel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}