{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState } from 'react';\nimport { getClientErrorObject, t, useTheme } from '@superset-ui/core';\nimport Popover from 'src/components/Popover';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { getDashboardPermalink } from 'src/utils/urlUtils';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport default function URLShortLinkButton({ dashboardId, anchorLinkId, placement = 'right', emailContent = '', emailSubject = '' }) {\n  const theme = useTheme();\n  const [shortUrl, setShortUrl] = useState('');\n  const { addDangerToast } = useToasts();\n  const { dataMask, activeTabs } = useSelector((state) => ({\n    dataMask: state.dataMask,\n    activeTabs: state.dashboardState.activeTabs\n  }), shallowEqual);\n  const getCopyUrl = async () => {\n    try {\n      const url = await getDashboardPermalink({\n        dashboardId,\n        dataMask,\n        activeTabs,\n        anchor: anchorLinkId\n      });\n      setShortUrl(url);\n    }\n    catch (error) {\n      if (error) {\n        addDangerToast((await getClientErrorObject(error)).error ||\n        t('Something went wrong.'));\n      }\n    }\n  };\n  const emailBody = `${emailContent}${shortUrl || ''}`;\n  const emailLink = `mailto:?Subject=${emailSubject}%20&Body=${emailBody}`;\n  return _jsx(Popover, { trigger: \"click\", placement: placement, content:\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    _jsxs(\"div\", { id: \"shorturl-popover\", onClick: (e) => {\n        e.stopPropagation();\n      }, children: [\n      _jsx(CopyToClipboard, { text: shortUrl, copyNode: _jsx(Icons.CopyOutlined, { iconSize: \"m\", iconColor: theme.colors.primary.dark1 }) }), \"\\xA0\\xA0\",\n\n      _jsx(\"a\", { href: emailLink, \"aria-label\": \"Email link\", children:\n        _jsx(Icons.MailOutlined, { iconSize: \"m\", iconColor: theme.colors.primary.dark1 }) }\n      )] }\n    ), children:\n    _jsxs(\"span\", { className: \"short-link-trigger btn btn-default btn-sm\", tabIndex: -1, role: \"button\", onClick: (e) => {\n        e.stopPropagation();\n        getCopyUrl();\n      }, \"aria-label\": t('Copy URL'), children: [\n      _jsx(Icons.LinkOutlined, { iconSize: \"m\", className: \"short-link-trigger\" }), \"\\xA0\"] }\n\n    ) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}