{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState, useEffect } from 'react';\n\nimport { styled, usePrevious } from '@superset-ui/core';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport controlMap from './controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst StyledControl = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nexport default function Control(props) {\n  const { actions: { setControlValue }, name, type, hidden, isVisible, resetOnHide = true } = props;\n  const [hovered, setHovered] = useState(false);\n  const wasVisible = usePrevious(isVisible);\n  const onChange = useCallback((value, errors) => setControlValue(name, value, errors), [name, setControlValue]);\n  useEffect(() => {\n    if (wasVisible === true &&\n    isVisible === false &&\n    props.default !== undefined &&\n    !_isEqual(props.value, props.default) &&\n    resetOnHide) {\n      // reset control value if setting to invisible\n      setControlValue == null ? void 0 : setControlValue(name, props.default);\n    }\n  }, [\n  name,\n  wasVisible,\n  isVisible,\n  setControlValue,\n  props.value,\n  props.default]\n  );\n  if (!type || isVisible === false)\n  return null;\n  const ControlComponent = typeof type === 'string' ?\n  controlMap[type] :\n  type;\n  if (!ControlComponent) {\n    // eslint-disable-next-line no-console\n    console.warn(`Unknown controlType: ${type}`);\n    return null;\n  }\n  return _jsx(StyledControl, { className: \"Control\", style: hidden ? { display: 'none' } : undefined, onMouseEnter: () => setHovered(true), onMouseLeave: () => setHovered(false), children:\n    _jsx(ErrorBoundary, { children:\n      _jsx(ControlComponent, { onChange: onChange, hovered: hovered, ...props }) }\n    ) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}