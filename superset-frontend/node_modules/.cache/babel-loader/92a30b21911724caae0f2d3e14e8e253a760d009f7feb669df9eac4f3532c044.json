{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef } from 'react';\n/*\n * Functional components and setTimeout with useState do not play well\n * and the setTimeout callback typically has stale state from a closure\n * The useInterval function solves this issue.\n * more info: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(callback);\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback == null ? void 0 : savedCallback.current == null ? void 0 : savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return () => {};\n  }, [delay]);\n}\nexport default useInterval;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}