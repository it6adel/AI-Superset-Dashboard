{"ast":null,"code":"import _isNil from \"lodash/isNil\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isValidElement, cloneElement, useMemo, useRef, useState } from 'react';\n\nimport { css, styled, t } from '@superset-ui/core';\nimport { Modal as AntdModal } from 'antd-v5';\nimport Button from 'src/components/Button';\nimport { Resizable } from 're-resizable';\nimport Draggable from 'react-draggable';import { jsx as _jsx, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst MODAL_HEADER_HEIGHT = 55;\nconst MODAL_MIN_CONTENT_HEIGHT = 54;\nconst MODAL_FOOTER_HEIGHT = 65;\nconst RESIZABLE_MIN_HEIGHT = MODAL_HEADER_HEIGHT + MODAL_MIN_CONTENT_HEIGHT;\nconst RESIZABLE_MIN_WIDTH = '380px';\nconst RESIZABLE_MAX_HEIGHT = '100vh';\nconst RESIZABLE_MAX_WIDTH = '100vw';\nexport const BaseModal = (props) =>\n// Removes mask animation. Fixed in 4.6.0.\n// https://github.com/ant-design/ant-design/issues/27192\n_jsx(AntdModal, { ...props, maskTransitionName: \"\" });\nexport const StyledModal = styled(BaseModal)`\n  ${({ theme, responsive, maxWidth }) => responsive &&\ncss`\n      max-width: ${maxWidth != null ? maxWidth : '900px'};\n      padding-left: ${theme.gridUnit * 3}px;\n      padding-right: ${theme.gridUnit * 3}px;\n      padding-bottom: 0;\n      top: 0;\n    `}\n\n  .antd5-modal-content {\n    display: flex;\n    flex-direction: column;\n    max-height: ${({ theme }) => `calc(100vh - ${theme.gridUnit * 8}px)`};\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-top: ${({ theme }) => theme.gridUnit * 4}px;\n    padding: 0;\n  }\n\n  .antd5-modal-header {\n    flex: 0 0 auto;\n    border-radius: ${({ theme }) => theme.borderRadius}px\n      ${({ theme }) => theme.borderRadius}px 0 0;\n    padding: ${({ theme }) => theme.gridUnit * 4}px\n      ${({ theme }) => theme.gridUnit * 6}px;\n\n    .antd5-modal-title {\n      font-weight: ${({ theme }) => theme.typography.weights.medium};\n    }\n\n    .antd5-modal-title h4 {\n      display: flex;\n      margin: 0;\n      align-items: center;\n    }\n  }\n\n  .antd5-modal-close {\n    width: ${({ theme }) => theme.gridUnit * 14}px;\n    height: ${({ theme }) => theme.gridUnit * 14}px;\n    top: 0;\n    right: 0;\n  }\n\n  .antd5-modal-close:hover {\n    background: transparent;\n  }\n\n  .antd5-modal-close-x {\n    display: flex;\n    align-items: center;\n\n    .close {\n      flex: 1 1 auto;\n      margin-bottom: ${({ theme }) => theme.gridUnit}px;\n      color: ${({ theme }) => theme.colors.secondary.dark1};\n      font-size: 32px;\n      font-weight: ${({ theme }) => theme.typography.weights.light};\n    }\n  }\n\n  .antd5-modal-body {\n    flex: 0 1 auto;\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n    overflow: auto;\n    ${({ resizable, height }) => !resizable && height && `height: ${height};`}\n  }\n  .antd5-modal-footer {\n    flex: 0 0 1;\n    border-top: ${({ theme }) => theme.gridUnit / 4}px solid\n      ${({ theme }) => theme.colors.grayscale.light2};\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-top: 0;\n\n    .btn {\n      font-size: 12px;\n    }\n\n    .btn + .btn {\n      margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  // styling for Tabs component\n  // Aaron note 20-11-19: this seems to be exclusively here for the Edit Database modal.\n  // TODO: remove this as it is a special case.\n  .ant-tabs-top {\n    margin-top: -${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  &.no-content-padding .antd5-modal-body {\n    padding: 0;\n  }\n\n  ${({ draggable, theme }) => draggable &&\n`\n    .antd5-modal-header {\n      padding: 0;\n      .draggable-trigger {\n          cursor: move;\n          padding: ${theme.gridUnit * 4}px;\n          width: 100%;\n        }\n    }\n  `};\n\n  ${({ resizable, hideFooter }) => resizable &&\n`\n    .resizable {\n      pointer-events: all;\n\n      .resizable-wrapper {\n        height: 100%;\n      }\n\n      .antd5-modal-content {\n        height: 100%;\n\n        .antd5-modal-body {\n          /* 100% - header height - footer height */\n          height: ${hideFooter ?\n`calc(100% - ${MODAL_HEADER_HEIGHT}px);` :\n`calc(100% - ${MODAL_HEADER_HEIGHT}px - ${MODAL_FOOTER_HEIGHT}px);`}\n        }\n      }\n    }\n  `}\n`;\nconst defaultResizableConfig = (hideFooter) => ({\n  maxHeight: RESIZABLE_MAX_HEIGHT,\n  maxWidth: RESIZABLE_MAX_WIDTH,\n  minHeight: hideFooter ?\n  RESIZABLE_MIN_HEIGHT :\n  RESIZABLE_MIN_HEIGHT + MODAL_FOOTER_HEIGHT,\n  minWidth: RESIZABLE_MIN_WIDTH,\n  enable: {\n    bottom: true,\n    bottomLeft: false,\n    bottomRight: true,\n    left: false,\n    top: false,\n    topLeft: false,\n    topRight: false,\n    right: true\n  }\n});\nconst CustomModal = ({ children, disablePrimaryButton = false, primaryTooltipMessage, primaryButtonLoading = false, onHide, onHandledPrimaryAction, primaryButtonName = t('OK'), primaryButtonType = 'primary', show, name, title, width, maxWidth, responsive = false, centered, footer, hideFooter, wrapProps, draggable = false, resizable = false, resizableConfig = defaultResizableConfig(hideFooter), draggableConfig, destroyOnClose, ...rest }) => {\n  const draggableRef = useRef(null);\n  const [bounds, setBounds] = useState();\n  const [dragDisabled, setDragDisabled] = useState(true);\n  let FooterComponent;\n  if (/*#__PURE__*/isValidElement(footer)) {\n    // If a footer component is provided inject a closeModal function\n    // so the footer can provide a \"close\" button if desired\n    FooterComponent = /*#__PURE__*/cloneElement(footer, {\n      closeModal: onHide\n    });\n  }\n  const modalFooter = _isNil(FooterComponent) ?\n  [\n  _jsx(Button, { onClick: onHide, cta: true, children:\n    t('Cancel') }, \"back\"\n  ),\n  _jsx(Button, { buttonStyle: primaryButtonType, disabled: disablePrimaryButton, tooltip: primaryTooltipMessage, loading: primaryButtonLoading, onClick: onHandledPrimaryAction, cta: true, children:\n    primaryButtonName }, \"submit\"\n  )] :\n\n  FooterComponent;\n  const modalWidth = width || (responsive ? '100vw' : '600px');\n  const shouldShowMask = !(resizable || draggable);\n  const onDragStart = (_, uiData) => {var _window, _window$document, _draggableRef$current;\n    const { clientWidth, clientHeight } = (_window = window) == null ? void 0 : (_window$document = _window.document) == null ? void 0 : _window$document.documentElement;\n    const targetRect = draggableRef == null ? void 0 : (_draggableRef$current = draggableRef.current) == null ? void 0 : _draggableRef$current.getBoundingClientRect();\n    if (targetRect) {\n      setBounds({\n        left: -(targetRect == null ? void 0 : targetRect.left) + (uiData == null ? void 0 : uiData.x),\n        right: clientWidth - ((targetRect == null ? void 0 : targetRect.right) - (uiData == null ? void 0 : uiData.x)),\n        top: -(targetRect == null ? void 0 : targetRect.top) + (uiData == null ? void 0 : uiData.y),\n        bottom: clientHeight - ((targetRect == null ? void 0 : targetRect.bottom) - (uiData == null ? void 0 : uiData.y))\n      });\n    }\n  };\n  const getResizableConfig = useMemo(() => {\n    if (Object.keys(resizableConfig).length === 0) {\n      return defaultResizableConfig(hideFooter);\n    }\n    return resizableConfig;\n  }, [hideFooter, resizableConfig]);\n  const ModalTitle = () => draggable ? _jsx(\"div\", { className: \"draggable-trigger\", onMouseOver: () => dragDisabled && setDragDisabled(false), onMouseOut: () => !dragDisabled && setDragDisabled(true), children:\n    title }\n  ) : _jsx(_Fragment, { children: title });\n  return _jsx(StyledModal, { centered: !!centered, onOk: onHandledPrimaryAction, onCancel: onHide, width: modalWidth, maxWidth: maxWidth, responsive: responsive, open: show, title: _jsx(ModalTitle, {}), closeIcon: _jsx(\"span\", { className: \"close\", \"aria-hidden\": \"true\", children: \"\\xD7\" }\n\n    ), footer: !hideFooter ? modalFooter : null, hideFooter: hideFooter, wrapProps: { ...wrapProps }, modalRender: (modal) => resizable || draggable ? _jsx(Draggable, { disabled: !draggable || dragDisabled, bounds: bounds, onStart: (event, uiData) => onDragStart(event, uiData), ...draggableConfig, children:\n      resizable ? _jsx(Resizable, { className: \"resizable\", ...getResizableConfig, children:\n        _jsx(\"div\", { className: \"resizable-wrapper\", ref: draggableRef, children:\n          modal }\n        ) }\n      ) : _jsx(\"div\", { ref: draggableRef, children: modal }) }\n    ) : modal, mask: shouldShowMask, draggable: draggable, resizable: resizable, destroyOnClose: destroyOnClose, ...rest, children:\n    children }\n  );\n};\nCustomModal.displayName = 'Modal';\n// TODO: in another PR, rename this to CompatabilityModal\n// and demote it as the default export.\n// We should start using AntD component interfaces going forward.\nconst Modal = Object.assign(CustomModal, {\n  error: AntdModal.error,\n  warning: AntdModal.warning,\n  confirm: AntdModal.confirm,\n  useModal: AntdModal.useModal\n});\nexport default Modal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}