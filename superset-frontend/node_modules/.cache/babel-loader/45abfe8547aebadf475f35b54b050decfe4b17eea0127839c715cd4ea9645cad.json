{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector, useDispatch } from 'react-redux';\nimport { t, VizType } from '@superset-ui/core';\nimport { createCtasDatasource, addInfoToast, addDangerToast } from 'src/SqlLab/actions/sqlLab';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport Button from 'src/components/Button';\nimport { exploreChart } from 'src/explore/exploreUtils';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst ExploreCtasResultsButton = ({ table, schema, dbId, templateParams }) => {\n  const errorMessage = useSelector((state) => state.sqlLab.errorMessage);\n  const dispatch = useDispatch();\n  const buildVizOptions = {\n    table_name: table,\n    schema,\n    database_id: dbId,\n    template_params: templateParams\n  };\n  const visualize = () => {\n    dispatch(createCtasDatasource(buildVizOptions)).\n    then((data) => {\n      const formData = {\n        datasource: `${data.table_id}__table`,\n        metrics: ['count'],\n        groupby: [],\n        viz_type: VizType.Table,\n        since: '100 years ago',\n        all_columns: [],\n        row_limit: 1000\n      };\n      dispatch(addInfoToast(t('Creating a data source and creating a new tab')));\n      // open new window for data visualization\n      exploreChart(formData);\n    }).\n    catch(() => {\n      dispatch(addDangerToast(errorMessage || t('An error occurred')));\n    });\n  };\n  return _jsxs(Button, { buttonSize: \"small\", onClick: visualize, tooltip: t('Explore the result set in the data exploration view'), children: [\n    _jsx(InfoTooltipWithTrigger, { icon: \"line-chart\", placement: \"top\", label: t('explore') }), ' ',\n    t('Explore')] }\n  );\n};\nexport default ExploreCtasResultsButton;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}