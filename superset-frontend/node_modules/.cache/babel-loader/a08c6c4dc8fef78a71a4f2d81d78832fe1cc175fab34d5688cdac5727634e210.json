{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_FORMAT_DOCS, D3_FORMAT_OPTIONS, D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT, getStandardizedControls, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA, EchartsFunnelLabelTypeType, PercentCalcType } from './types';\nimport { legendSection } from '../controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { labelType, numberFormat, showLabels, defaultTooltipLabel } = DEFAULT_FORM_DATA;\nconst funnelLegendSection = [...legendSection];\nfunnelLegendSection.splice(2, 1);\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['metric'],\n    ['adhoc_filters'],\n    [\n    {\n      name: 'row_limit',\n      config: {\n        ...sharedControls.row_limit,\n        default: 10\n      }\n    }],\n\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        ...sharedControls.sort_by_metric,\n        default: true\n      }\n    }],\n\n    [\n    {\n      name: 'percent_calculation_type',\n      config: {\n        type: 'SelectControl',\n        label: t('% calculation'),\n        description: t('Display percents in the label and tooltip as the percent of the total value, from the first step of the funnel, or from the previous step in the funnel.'),\n        choices: [\n        [PercentCalcType.FirstStep, t('Calculate from first step')],\n        [\n        PercentCalcType.PreviousStep,\n        t('Calculate from previous step')],\n\n        [PercentCalcType.Total, t('Percent of total')]],\n\n        default: PercentCalcType.FirstStep,\n        renderTrigger: true\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    ...funnelLegendSection,\n    // eslint-disable-next-line react/jsx-key\n    [_jsx(ControlSubSectionHeader, { children: t('Labels') })],\n    [\n    {\n      name: 'label_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Label Contents'),\n        default: labelType,\n        renderTrigger: true,\n        choices: [\n        [EchartsFunnelLabelTypeType.Key, t('Category Name')],\n        [EchartsFunnelLabelTypeType.Value, t('Value')],\n        [EchartsFunnelLabelTypeType.Percent, t('Percentage')],\n        [EchartsFunnelLabelTypeType.KeyValue, t('Category and Value')],\n        [\n        EchartsFunnelLabelTypeType.KeyPercent,\n        t('Category and Percentage')],\n\n        [\n        EchartsFunnelLabelTypeType.KeyValuePercent,\n        t('Category, Value and Percentage')],\n\n        [\n        EchartsFunnelLabelTypeType.ValuePercent,\n        t('Value and Percentage')]],\n\n\n        description: t('What should be shown as the label')\n      }\n    }],\n\n    [\n    {\n      name: 'tooltip_label_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Tooltip Contents'),\n        default: defaultTooltipLabel,\n        renderTrigger: true,\n        choices: [\n        [EchartsFunnelLabelTypeType.Key, t('Category Name')],\n        [EchartsFunnelLabelTypeType.Value, t('Value')],\n        [EchartsFunnelLabelTypeType.Percent, t('Percentage')],\n        [EchartsFunnelLabelTypeType.KeyValue, t('Category and Value')],\n        [\n        EchartsFunnelLabelTypeType.KeyPercent,\n        t('Category and Percentage')],\n\n        [\n        EchartsFunnelLabelTypeType.KeyValuePercent,\n        t('Category, Value and Percentage')]],\n\n\n        description: t('What should be shown as the tooltip label')\n      }\n    }],\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: numberFormat,\n        choices: D3_FORMAT_OPTIONS,\n        description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`\n      }\n    }],\n\n    ['currency_format'],\n    [\n    {\n      name: 'show_labels',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Labels'),\n        renderTrigger: true,\n        default: showLabels,\n        description: t('Whether to display the labels.')\n      }\n    }],\n\n    [\n    {\n      name: 'show_tooltip_labels',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Tooltip Labels'),\n        renderTrigger: true,\n        default: showLabels,\n        description: t('Whether to display the tooltip labels.')\n      }\n    }]]\n\n\n  }],\n\n  onInit(state) {\n    return {\n      ...state,\n      row_limit: {\n        ...state.row_limit,\n        value: state.row_limit.default\n      }\n    };\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}