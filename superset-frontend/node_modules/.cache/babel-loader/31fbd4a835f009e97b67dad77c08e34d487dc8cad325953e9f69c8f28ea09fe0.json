{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo } from 'react';\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyState } from 'src/components/EmptyState';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport { useFilteredTableData, useTableColumns } from 'src/explore/components/DataTableControl';\nimport { getDatasourceSamples } from 'src/components/Chart/chartAction';\nimport { TableControls } from './DataTableControls';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\nconst cache = new WeakSet();\nexport const SamplesPane = ({ isRequest, datasource, queryForce, actions, dataSize = 50, isVisible, canDownload }) => {\n  const [filterText, setFilterText] = useState('');\n  const [data, setData] = useState([]);\n  const [colnames, setColnames] = useState([]);\n  const [coltypes, setColtypes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [rowcount, setRowCount] = useState(0);\n  const [responseError, setResponseError] = useState('');\n  const datasourceId = useMemo(() => `${datasource.id}__${datasource.type}`, [datasource]);\n  useEffect(() => {\n    if (isRequest && queryForce) {\n      cache.delete(datasource);\n    }\n    if (isRequest && !cache.has(datasource)) {\n      setIsLoading(true);\n      getDatasourceSamples(datasource.type, datasource.id, queryForce, {}).\n      then((response) => {\n        setData(ensureIsArray(response.data));\n        setColnames(ensureIsArray(response.colnames));\n        setColtypes(ensureIsArray(response.coltypes));\n        setRowCount(response.rowcount);\n        setResponseError('');\n        cache.add(datasource);\n        if (queryForce && actions) {\n          actions.setForceQuery(false);\n        }\n      }).\n      catch((error) => {\n        setData([]);\n        setColnames([]);\n        setColtypes([]);\n        setResponseError(`${error.name}: ${error.message}`);\n      }).\n      finally(() => {\n        setIsLoading(false);\n      });\n    }\n  }, [datasource, isRequest, queryForce]);\n  // this is to preserve the order of the columns, even if there are integer values,\n  // while also only grabbing the first column's keys\n  const columns = useTableColumns(colnames, coltypes, data, datasourceId, isVisible, {}, // moreConfig\n  true);\n  const filteredData = useFilteredTableData(filterText, data);\n  if (isLoading) {\n    return _jsx(Loading, {});\n  }\n  if (responseError) {\n    return _jsxs(_Fragment, { children: [\n      _jsx(TableControls, { data: filteredData, columnNames: colnames, columnTypes: coltypes, rowcount: rowcount, datasourceId: datasourceId, onInputChange: (input) => setFilterText(input), isLoading: isLoading, canDownload: canDownload }),\n      _jsx(Error, { children: responseError })] }\n    );\n  }\n  if (data.length === 0) {\n    const title = t('No samples were returned for this dataset');\n    return _jsx(EmptyState, { image: \"document.svg\", title: title });\n  }\n  return _jsxs(_Fragment, { children: [\n    _jsx(TableControls, { data: filteredData, columnNames: colnames, columnTypes: coltypes, rowcount: rowcount, datasourceId: datasourceId, onInputChange: (input) => setFilterText(input), isLoading: isLoading, canDownload: canDownload }),\n    _jsx(TableView, { columns: columns, data: filteredData, pageSize: dataSize, noDataText: t('No results'), emptyWrapperType: EmptyWrapperType.Small, className: \"table-condensed\", isPaginationSticky: true, showRowCount: false, small: true })] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}