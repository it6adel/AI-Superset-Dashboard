{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import cx from 'classnames';\nimport { t, isFeatureEnabled, useTheme, FeatureFlag } from '@superset-ui/core';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Collapse from 'src/components/Collapse';\nimport { StyledInputContainer, StyledJsonEditor, StyledExpandableForm, antdCollapseStyles, no_margin_bottom } from './styles';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst ExtraOptions = ({ db, onInputChange, onTextChange, onEditorChange, onExtraInputChange, onExtraEditorChange, extraExtension }) => {var _db$engine_informatio, _db$engine_informatio2, _extraJson$schema_opt, _extraJson$metadata_c, _extraJson$metadata_c2;\n  const expandableModalIsOpen = !!(db != null && db.expose_in_sqllab);\n  const createAsOpen = !!(db != null && db.allow_ctas || db != null && db.allow_cvas);\n  const isFileUploadSupportedByEngine = db == null ? void 0 : (_db$engine_informatio = db.engine_information) == null ? void 0 : _db$engine_informatio.supports_file_upload;\n  const supportsDynamicCatalog = db == null ? void 0 : (_db$engine_informatio2 = db.engine_information) == null ? void 0 : _db$engine_informatio2.supports_dynamic_catalog;\n  // JSON.parse will deep parse engine_params\n  // if it's an object, and we want to keep it a string\n  const extraJson = JSON.parse((db == null ? void 0 : db.extra) || '{}', (key, value) => {\n    if (key === 'engine_params' && typeof value === 'object') {\n      // keep this as a string\n      return JSON.stringify(value);\n    }\n    return value;\n  });\n  const theme = useTheme();\n  const ExtraExtensionComponent = extraExtension == null ? void 0 : extraExtension.component;\n  const ExtraExtensionLogo = extraExtension == null ? void 0 : extraExtension.logo;\n  const ExtensionDescription = extraExtension == null ? void 0 : extraExtension.description;\n  const allowRunAsync = isFeatureEnabled(FeatureFlag.ForceSqlLabRunAsync) ?\n  true :\n  !!(db != null && db.allow_run_async);\n  const isAllowRunAsyncDisabled = isFeatureEnabled(FeatureFlag.ForceSqlLabRunAsync);\n  return _jsxs(Collapse, { expandIconPosition: \"right\", accordion: true, css: (theme) => antdCollapseStyles(theme), children: [\n    _jsx(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n        _jsx(\"h4\", { children: t('SQL Lab') }),\n        _jsx(\"p\", { className: \"helper\", children:\n          t('Adjust how this database will interact with SQL Lab.') }\n        )] }\n      ), children:\n      _jsxs(StyledInputContainer, { css: no_margin_bottom, children: [\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(IndeterminateCheckbox, { id: \"expose_in_sqllab\", indeterminate: false, checked: !!(db != null && db.expose_in_sqllab), onChange: onInputChange, labelText: t('Expose database in SQL Lab') }),\n          _jsx(InfoTooltip, { tooltip: t('Allow this database to be queried in SQL Lab') })] }\n        ),\n        _jsxs(StyledExpandableForm, { className: cx('expandable', {\n            open: expandableModalIsOpen,\n            'ctas-open': createAsOpen\n          }), children: [\n          _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(IndeterminateCheckbox, { id: \"allow_ctas\", indeterminate: false, checked: !!(db != null && db.allow_ctas), onChange: onInputChange, labelText: t('Allow CREATE TABLE AS') }),\n              _jsx(InfoTooltip, { tooltip: t('Allow creation of new tables based on queries') })] }\n            ) }\n          ),\n          _jsxs(StyledInputContainer, { css: no_margin_bottom, children: [\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(IndeterminateCheckbox, { id: \"allow_cvas\", indeterminate: false, checked: !!(db != null && db.allow_cvas), onChange: onInputChange, labelText: t('Allow CREATE VIEW AS') }),\n              _jsx(InfoTooltip, { tooltip: t('Allow creation of new views based on queries') })] }\n            ),\n            _jsxs(StyledInputContainer, { className: cx('expandable', { open: createAsOpen }), children: [\n              _jsx(\"div\", { className: \"control-label\", children: t('CTAS & CVAS SCHEMA') }),\n              _jsx(\"div\", { className: \"input-container\", children:\n                _jsx(\"input\", { type: \"text\", name: \"force_ctas_schema\", placeholder: t('Create or select schema...'), onChange: onInputChange, value: (db == null ? void 0 : db.force_ctas_schema) || '' }) }\n              ),\n              _jsx(\"div\", { className: \"helper\", children:\n                t('Force all tables and views to be created in this schema when clicking CTAS or CVAS in SQL Lab.') }\n              )] }\n            )] }\n          ),\n          _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(IndeterminateCheckbox, { id: \"allow_dml\", indeterminate: false, checked: !!(db != null && db.allow_dml), onChange: onInputChange, labelText: t('Allow DDL and DML') }),\n              _jsx(InfoTooltip, { tooltip: t('Allow the execution of DDL (Data Definition Language: CREATE, DROP, TRUNCATE, etc.) and DML (Data Modification Language: INSERT, UPDATE, DELETE, etc)') })] }\n            ) }\n          ),\n          _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(IndeterminateCheckbox, { id: \"cost_estimate_enabled\", indeterminate: false, checked: !!(extraJson != null && extraJson.cost_estimate_enabled), onChange: onExtraInputChange, labelText: t('Enable query cost estimation') }),\n              _jsx(InfoTooltip, { tooltip: t('For Bigquery, Presto and Postgres, shows a button to compute cost before running a query.') })] }\n            ) }\n          ),\n          _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(IndeterminateCheckbox, { id: \"allows_virtual_table_explore\", indeterminate: false\n                // when `allows_virtual_table_explore` is not present in `extra` it defaults to true\n                , checked: (extraJson == null ? void 0 : extraJson.allows_virtual_table_explore) !== false, onChange: onExtraInputChange, labelText: t('Allow this database to be explored') }),\n              _jsx(InfoTooltip, { tooltip: t('When enabled, users are able to visualize SQL Lab results in Explore.') })] }\n            ) }\n          ),\n          _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(IndeterminateCheckbox, { id: \"disable_data_preview\", indeterminate: false, checked: !!(extraJson != null && extraJson.disable_data_preview), onChange: onExtraInputChange, labelText: t('Disable SQL Lab data preview queries') }),\n              _jsx(InfoTooltip, { tooltip: t('Disable data preview when fetching table metadata in SQL Lab. ' +\n                ' Useful to avoid browser performance issues when using ' +\n                ' databases with very wide tables.') })] }\n            ) }\n          ),\n          _jsx(StyledInputContainer, { children:\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(IndeterminateCheckbox, { id: \"expand_rows\", indeterminate: false, checked: !!(extraJson != null && (_extraJson$schema_opt = extraJson.schema_options) != null && _extraJson$schema_opt.expand_rows), onChange: onExtraInputChange, labelText: t('Enable row expansion in schemas') }),\n              _jsx(InfoTooltip, { tooltip: t('For Trino, describe full schemas of nested ROW types, expanding them with dotted paths') })] }\n            ) }\n          )] }\n        )] }\n      ) }, \"1\"\n    ),\n    _jsxs(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n        _jsx(\"h4\", { children: t('Performance') }),\n        _jsx(\"p\", { className: \"helper\", children:\n          t('Adjust performance settings of this database.') }\n        )] }\n      ), children: [\n      _jsxs(StyledInputContainer, { className: \"mb-8\", children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Chart cache timeout') }),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(\"input\", { type: \"number\", name: \"cache_timeout\", value: (db == null ? void 0 : db.cache_timeout) || '', placeholder: t('Enter duration in seconds'), onChange: onInputChange }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          t('Duration (in seconds) of the caching timeout for charts of this database.' +\n          ' A timeout of 0 indicates that the cache never expires, and -1 bypasses the cache.' +\n          ' Note this defaults to the global timeout if undefined.') }\n        )] }\n      ),\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Schema cache timeout') }),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(\"input\", { type: \"number\", name: \"schema_cache_timeout\", value: (extraJson == null ? void 0 : (_extraJson$metadata_c = extraJson.metadata_cache_timeout) == null ? void 0 : _extraJson$metadata_c.schema_cache_timeout) || '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          t('Duration (in seconds) of the metadata caching timeout for schemas of ' +\n          'this database. If left unset, the cache never expires.') }\n        )] }\n      ),\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Table cache timeout') }),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(\"input\", { type: \"number\", name: \"table_cache_timeout\", value: (extraJson == null ? void 0 : (_extraJson$metadata_c2 = extraJson.metadata_cache_timeout) == null ? void 0 : _extraJson$metadata_c2.table_cache_timeout) || '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          t('Duration (in seconds) of the metadata caching timeout for tables of ' +\n          'this database. If left unset, the cache never expires. ') }\n        )] }\n      ),\n      _jsx(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), children:\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(IndeterminateCheckbox, { id: \"allow_run_async\", indeterminate: false, checked: allowRunAsync, onChange: onInputChange, labelText: t('Asynchronous query execution') }),\n          _jsx(InfoTooltip, { tooltip: t('Operate the database in asynchronous mode, meaning that the queries ' +\n            'are executed on remote workers as opposed to on the web server itself. ' +\n            'This assumes that you have a Celery worker setup as well as a results ' +\n            'backend. Refer to the installation docs for more information.') }),\n          isAllowRunAsyncDisabled && _jsx(InfoTooltip, { iconStyle: { color: theme.colors.error.base }, tooltip: t('This option has been disabled by the administrator.') })] }\n        ) }\n      ),\n      _jsx(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), children:\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(IndeterminateCheckbox, { id: \"cancel_query_on_windows_unload\", indeterminate: false, checked: !!(extraJson != null && extraJson.cancel_query_on_windows_unload), onChange: onExtraInputChange, labelText: t('Cancel query on window unload event') }),\n          _jsx(InfoTooltip, { tooltip: t('Terminate running queries when browser window closed or navigated ' +\n            'to another page. Available for Presto, Hive, MySQL, Postgres and ' +\n            'Snowflake databases.') })] }\n        ) }\n      )] }, \"2\"\n    ),\n    _jsxs(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n        _jsx(\"h4\", { children: t('Security') }),\n        _jsx(\"p\", { className: \"helper\", children: t('Add extra connection information.') })] }\n      ), children: [\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Secure extra') }),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(StyledJsonEditor, { name: \"masked_encrypted_extra\", value: (db == null ? void 0 : db.masked_encrypted_extra) || '', placeholder: t('Secure extra'), onChange: (json) => onEditorChange({ json, name: 'masked_encrypted_extra' }), width: \"100%\", height: \"160px\" }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          _jsx(\"div\", { children:\n            t('JSON string containing additional connection configuration. ' +\n            'This is used to provide connection information for systems ' +\n            'like Hive, Presto and BigQuery which do not conform to the ' +\n            'username:password syntax normally used by SQLAlchemy.') }\n          ) }\n        )] }\n      ),\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Root certificate') }),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(\"textarea\", { name: \"server_cert\", value: (db == null ? void 0 : db.server_cert) || '', placeholder: t('Enter CA_BUNDLE'), onChange: onTextChange }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          t('Optional CA_BUNDLE contents to validate HTTPS requests. Only ' +\n          'available on certain database engines.') }\n        )] }\n      ),\n      _jsx(StyledInputContainer, { css: !isFileUploadSupportedByEngine ? no_margin_bottom : {}, children:\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(IndeterminateCheckbox, { id: \"impersonate_user\", indeterminate: false, checked: !!(db != null && db.impersonate_user), onChange: onInputChange, labelText: t('Impersonate logged in user (Presto, Trino, Drill, Hive, and GSheets)') }),\n          _jsx(InfoTooltip, { tooltip: t('If Presto or Trino, all the queries in SQL Lab are going to be executed as the ' +\n            'currently logged on user who must have permission to run them. If Hive ' +\n            'and hive.server2.enable.doAs is enabled, will run the queries as ' +\n            'service account, but impersonate the currently logged on user via ' +\n            'hive.server2.proxy.user property.') })] }\n        ) }\n      ),\n      isFileUploadSupportedByEngine && _jsx(StyledInputContainer, { css: !(db != null && db.allow_file_upload) ? no_margin_bottom : {}, children:\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(IndeterminateCheckbox, { id: \"allow_file_upload\", indeterminate: false, checked: !!(db != null && db.allow_file_upload), onChange: onInputChange, labelText: t('Allow file uploads to database') }) }\n        ) }\n      ),\n      isFileUploadSupportedByEngine && !!(db != null && db.allow_file_upload) && _jsxs(StyledInputContainer, { css: no_margin_bottom, children: [\n        _jsx(\"div\", { className: \"control-label\", children:\n          t('Schemas allowed for File upload') }\n        ),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(\"input\", { type: \"text\", name: \"schemas_allowed_for_file_upload\", value: ((extraJson == null ? void 0 : extraJson.schemas_allowed_for_file_upload) || []).join(','), placeholder: \"schema1,schema2\", onChange: onExtraInputChange }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          t('A comma-separated list of schemas that files are allowed to upload to.') }\n        )] }\n      )] }, \"3\"\n    ),\n    extraExtension && ExtraExtensionComponent && ExtensionDescription && _jsx(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n        ExtraExtensionLogo && _jsx(ExtraExtensionLogo, {}),\n        _jsx(\"span\", { css: (theme) => ({\n            fontSize: theme.typography.sizes.l,\n            fontWeight: theme.typography.weights.bold\n          }), children:\n          extraExtension == null ? void 0 : extraExtension.title }\n        ),\n        _jsx(\"p\", { className: \"helper\", children:\n          _jsx(ExtensionDescription, {}) }\n        )] }\n      ),\n      // @ts-ignore, 'icon' is valid in >=4.9.0 but missing from `CollapsibleType`\n      collapsible: extraExtension.enabled != null && extraExtension.enabled() ? 'icon' : 'disabled', children:\n      _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n        _jsx(ExtraExtensionComponent, { db: db, onEdit: extraExtension.onEdit }) }\n      ) }, extraExtension == null ? void 0 : extraExtension.title\n    ),\n    _jsxs(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n        _jsx(\"h4\", { children: t('Other') }),\n        _jsx(\"p\", { className: \"helper\", children: t('Additional settings.') })] }\n      ), children: [\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Metadata Parameters') }),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(StyledJsonEditor, { name: \"metadata_params\", placeholder: t('Metadata Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'metadata_params' }), width: \"100%\", height: \"160px\", value: !Object.keys((extraJson == null ? void 0 : extraJson.metadata_params) || {}).length ?\n            '' :\n            extraJson == null ? void 0 : extraJson.metadata_params }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          _jsx(\"div\", { children:\n            t('The metadata_params object gets unpacked into the sqlalchemy.MetaData call.') }\n          ) }\n        )] }\n      ),\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Engine Parameters') }),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(StyledJsonEditor, { name: \"engine_params\", placeholder: t('Engine Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'engine_params' }), width: \"100%\", height: \"160px\", value: !Object.keys((extraJson == null ? void 0 : extraJson.engine_params) || {}).length ?\n            '' :\n            extraJson == null ? void 0 : extraJson.engine_params }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          _jsx(\"div\", { children:\n            t('The engine_params object gets unpacked into the sqlalchemy.create_engine call.') }\n          ) }\n        )] }\n      ),\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children:\n          t('Version') }\n        ),\n        _jsx(\"div\", { className: \"input-container\", children:\n          _jsx(\"input\", { type: \"text\", name: \"version\", placeholder: t('Version number'), onChange: onExtraInputChange, value: (extraJson == null ? void 0 : extraJson.version) || '' }) }\n        ),\n        _jsx(\"div\", { className: \"helper\", children:\n          t('Specify the database version. This is used with Presto for query cost ' +\n          'estimation, and Dremio for syntax changes, among others.') }\n        )] }\n      ),\n      _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(IndeterminateCheckbox, { id: \"disable_drill_to_detail\", indeterminate: false, checked: !!(extraJson != null && extraJson.disable_drill_to_detail), onChange: onExtraInputChange, labelText: t('Disable drill to detail') }),\n          _jsx(InfoTooltip, { tooltip: t('Disables the drill to detail feature for this database.') })] }\n        ) }\n      ),\n      supportsDynamicCatalog && _jsx(StyledInputContainer, { css: no_margin_bottom, children:\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(IndeterminateCheckbox, { id: \"allow_multi_catalog\", indeterminate: false, checked: !!(extraJson != null && extraJson.allow_multi_catalog), onChange: onExtraInputChange, labelText: t('Allow changing catalogs') }),\n          _jsx(InfoTooltip, { tooltip: t('Give access to multiple catalogs in a single database connection.') })] }\n        ) }\n      )] }, \"4\"\n    )] }\n  );\n};\nexport default ExtraOptions;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}