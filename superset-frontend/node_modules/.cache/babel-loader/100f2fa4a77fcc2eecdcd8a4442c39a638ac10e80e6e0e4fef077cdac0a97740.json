{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, ensureIsArray } from '@superset-ui/core';\nimport { isTimeComparison, timeCompareOperator } from '@superset-ui/chart-controls';\n\nexport default function buildQuery(formData) {\n  const { cols: groupby } = formData;\n  const queryContextA = buildQueryContext(formData, (baseQueryObject) => {\n    const postProcessing = [];\n    postProcessing.push(timeCompareOperator(formData, baseQueryObject));\n    const nonCustomNorInheritShifts = ensureIsArray(formData.time_compare).filter((shift) => shift !== 'custom' && shift !== 'inherit');\n    const customOrInheritShifts = ensureIsArray(formData.time_compare).filter((shift) => shift === 'custom' || shift === 'inherit');\n    let timeOffsets = [];\n    // Shifts for non-custom or non inherit time comparison\n    if (!_isEmpty(nonCustomNorInheritShifts)) {\n      timeOffsets = nonCustomNorInheritShifts;\n    }\n    // Shifts for custom or inherit time comparison\n    if (!_isEmpty(customOrInheritShifts)) {\n      if (customOrInheritShifts.includes('custom')) {\n        timeOffsets = timeOffsets.concat([formData.start_date_offset]);\n      }\n      if (customOrInheritShifts.includes('inherit')) {\n        timeOffsets = timeOffsets.concat(['inherit']);\n      }\n    }\n    return [\n    {\n      ...baseQueryObject,\n      groupby,\n      post_processing: postProcessing,\n      time_offsets: isTimeComparison(formData, baseQueryObject) ?\n      ensureIsArray(timeOffsets) :\n      []\n    }];\n\n  });\n  return {\n    ...queryContextA\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}