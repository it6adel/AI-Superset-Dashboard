{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, memo } from 'react';\n// first, ..., prev, current, next, ..., last\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";const MINIMAL_PAGE_ITEM_COUNT = 7;\n/**\n * Generate numeric page items around current page.\n *   - Always include first and last page\n *   - Add ellipsis if needed\n */\nexport function generatePageItems(total, current, width) {\n  if (width < MINIMAL_PAGE_ITEM_COUNT) {\n    throw new Error(`Must allow at least ${MINIMAL_PAGE_ITEM_COUNT} page items`);\n  }\n  if (width % 2 === 0) {\n    throw new Error(`Must allow odd number of page items`);\n  }\n  if (total < width) {\n    return [...new Array(total).keys()];\n  }\n  const left = Math.max(0, Math.min(total - width, current - Math.floor(width / 2)));\n  const items = new Array(width);\n  for (let i = 0; i < width; i += 1) {\n    items[i] = i + left;\n  }\n  // replace non-ending items with placeholders\n  if (typeof items[0] === 'number' && items[0] > 0) {\n    items[0] = 0;\n    items[1] = 'prev-more';\n  }\n  const lastItem = items[items.length - 1];\n  if (typeof lastItem === 'number' && lastItem < total - 1) {\n    items[items.length - 1] = total - 1;\n    items[items.length - 2] = 'next-more';\n  }\n  return items;\n}\nexport default /*#__PURE__*/memo(/*#__PURE__*/forwardRef(function Pagination({ style, pageCount, currentPage = 0, maxPageItemCount = 9, onPageChange }, ref) {\n  const pageItems = generatePageItems(pageCount, currentPage, maxPageItemCount);\n  return _jsx(\"div\", { ref: ref, className: \"dt-pagination\", style: style, children:\n    _jsx(\"ul\", { className: \"pagination pagination-sm\", children:\n      pageItems.map((item) => typeof item === 'number' ?\n      // actual page number\n      _jsx(\"li\", { className: currentPage === item ? 'active' : undefined, children:\n        _jsx(\"a\", { href: `#page-${item}`, role: \"button\", onClick: (e) => {\n            e.preventDefault();\n            onPageChange(item);\n          }, children:\n          item + 1 }\n        ) }, item\n      ) : _jsx(\"li\", { className: \"dt-pagination-ellipsis\", children:\n        _jsx(\"span\", { children: \"\\u2026\" }) }, item\n      )) }\n    ) }\n  );\n}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}