{"ast":null,"code":"import { t, tn } from '@superset-ui/core';\nimport levenshtein from 'js-levenshtein';\nimport IssueCode from './IssueCode';\nimport ErrorAlert from './ErrorAlert';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst maxDistanceForSuggestion = 2;\nconst findMatches = (undefinedParameters, templateKeys) => {\n  const matches = {};\n  undefinedParameters.forEach((undefinedParameter) => {\n    templateKeys.forEach((templateKey) => {\n      if (levenshtein(undefinedParameter, templateKey) <= maxDistanceForSuggestion) {\n        if (!matches[undefinedParameter]) {\n          matches[undefinedParameter] = [];\n        }\n        matches[undefinedParameter].push(`\"${templateKey}\"`);\n      }\n    });\n  });\n  return matches;\n};\nfunction ParameterErrorMessage({ error, source = 'sqllab', subtitle }) {\n  const { extra = { issue_codes: [] }, level, message } = error;\n  const triggerMessage = tn('This was triggered by:', 'This may be triggered by:', extra.issue_codes.length);\n  const matches = findMatches(extra.undefined_parameters || [], Object.keys(extra.template_parameters || {}));\n  const body = _jsx(_Fragment, { children:\n    _jsxs(\"p\", { children: [\n      Object.keys(matches).length > 0 && _jsxs(_Fragment, { children: [\n        _jsx(\"p\", { children: t('Did you mean:') }),\n        _jsx(\"ul\", { children:\n          Object.entries(matches).map(([undefinedParameter, templateKeys]) => _jsx(\"li\", { children:\n            tn('%(suggestion)s instead of \"%(undefinedParameter)s?\"', '%(firstSuggestions)s or %(lastSuggestion)s instead of \"%(undefinedParameter)s\"?', templateKeys.length, {\n              suggestion: templateKeys.join(', '),\n              firstSuggestions: templateKeys.slice(0, -1).join(', '),\n              lastSuggestion: templateKeys[templateKeys.length - 1],\n              undefinedParameter\n            }) }\n          )) }\n        ),\n        _jsx(\"br\", {})] }\n      ),\n      triggerMessage,\n      _jsx(\"br\", {}),\n      extra.issue_codes.length > 0 &&\n      extra.issue_codes.\n      map((issueCode) => _jsx(IssueCode, { ...issueCode })).\n      reduce((prev, curr) => [prev, _jsx(\"br\", {}), curr])] }\n    ) }\n  );\n  return _jsx(ErrorAlert, { errorType: t('Parameter error'), type: level, message: message, description: subtitle, descriptionDetails: body });\n}\nexport default ParameterErrorMessage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}