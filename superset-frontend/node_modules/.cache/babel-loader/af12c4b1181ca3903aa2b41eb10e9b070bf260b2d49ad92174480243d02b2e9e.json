{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var LocalStorageKeys;\n(function (LocalStorageKeys) {\n  /**\n   * START LEGACY LOCAL STORAGE KEYS\n   *\n   * Do not follow the patterns here for key names. Keys should instead be namespaced to avoid\n   * collisions.\n   *\n   * TODO: Update all local storage keys to follow the new pattern. This is a breaking change,\n   * and therefore should be done in a major release.\n   */\n  LocalStorageKeys[\"Database\"] = \"db\";\n  LocalStorageKeys[\"ChartSplitSizes\"] = \"chart_split_sizes\";\n  LocalStorageKeys[\"ControlsWidth\"] = \"controls_width\";\n  LocalStorageKeys[\"DatasourceWidth\"] = \"datasource_width\";\n  LocalStorageKeys[\"IsDatapanelOpen\"] = \"is_datapanel_open\";\n  LocalStorageKeys[\"HomepageChartFilter\"] = \"homepage_chart_filter\";\n  LocalStorageKeys[\"HomepageDashboardFilter\"] = \"homepage_dashboard_filter\";\n  LocalStorageKeys[\"HomepageCollapseState\"] = \"homepage_collapse_state\";\n  LocalStorageKeys[\"HomepageActivityFilter\"] = \"homepage_activity_filter\";\n  LocalStorageKeys[\"DatasetnameSetSuccessful\"] = \"datasetname_set_successful\";\n  /** END LEGACY LOCAL STORAGE KEYS */\n  /**\n   * New local storage keys should be namespaced to avoid collisions. Keys should be named in the\n   * form [namespace]__[key].\n   *\n   * Example:\n   * sqllab__is_autocomplete_enabled\n   */\n  LocalStorageKeys[\"SqllabIsAutocompleteEnabled\"] = \"sqllab__is_autocomplete_enabled\";\n  LocalStorageKeys[\"SqllabIsRenderHtmlEnabled\"] = \"sqllab__is_render_html_enabled\";\n  LocalStorageKeys[\"ExploreDataTableOriginalFormattedTimeColumns\"] = \"explore__data_table_original_formatted_time_columns\";\n  LocalStorageKeys[\"DashboardCustomFilterBarWidths\"] = \"dashboard__custom_filter_bar_widths\";\n  LocalStorageKeys[\"DashboardExploreContext\"] = \"dashboard__explore_context\";\n  LocalStorageKeys[\"DashboardEditorShowOnlyMyCharts\"] = \"dashboard__editor_show_only_my_charts\";\n  LocalStorageKeys[\"CommonResizableSidebarWidths\"] = \"common__resizable_sidebar_widths\";\n})(LocalStorageKeys || (LocalStorageKeys = {}));\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslyGetItemDoNotUse(key, defaultValue) {\n  try {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      return defaultValue;\n    }\n    return JSON.parse(value);\n  }\n  catch {\n    return defaultValue;\n  }\n}\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslySetItemDoNotUse(key, value) {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n  catch {\n\n    // Catch in case localStorage is unavailable\n  }}\nexport function getItem(key, defaultValue) {\n  return dangerouslyGetItemDoNotUse(key, defaultValue);\n}\nexport function setItem(key, value) {\n  dangerouslySetItemDoNotUse(key, value);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}