{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport Tabs from 'src/components/Tabs';\nimport { ResultTypes } from '../types';\nimport { useResultsPane } from './useResultsPane';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  .ant-tabs {\n    height: 100%;\n  }\n\n  .ant-tabs-content {\n    height: 100%;\n  }\n\n  .ant-tabs-tabpane {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .table-condensed {\n    overflow: auto;\n  }\n`;\nexport const ResultsPaneOnDashboard = ({ isRequest, queryFormData, queryForce, ownState, errorMessage, actions, isVisible, dataSize = 50, canDownload }) => {\n  const resultsPanes = useResultsPane({\n    errorMessage,\n    queryFormData,\n    queryForce,\n    ownState,\n    isRequest,\n    actions,\n    dataSize,\n    isVisible,\n    canDownload\n  });\n  if (resultsPanes.length === 1) {\n    return _jsx(Wrapper, { children: resultsPanes[0] });\n  }\n  const panes = resultsPanes.map((pane, idx) => {\n    if (idx === 0) {\n      return _jsx(Tabs.TabPane, { tab: t('Results'), children:\n        pane }, ResultTypes.Results\n      );\n    }\n    return _jsx(Tabs.TabPane, { tab: t('Results %s', idx + 1), children:\n      pane }, `${ResultTypes.Results} ${idx + 1}`\n    );\n  });\n  return _jsx(Wrapper, { children:\n    _jsx(Tabs, { fullWidth: false, children: panes }) }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}