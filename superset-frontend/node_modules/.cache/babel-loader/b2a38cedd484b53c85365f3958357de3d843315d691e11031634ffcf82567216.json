{"ast":null,"code":"import { css, styled, t } from '@superset-ui/core';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst TooltipSectionWrapper = styled.div`\n  ${({ theme }) => css`\n    display: -webkit-box;\n    -webkit-line-clamp: 40;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    font-size: ${theme.typography.sizes.s}px;\n    line-height: 1.2;\n\n    &:not(:last-of-type) {\n      margin-bottom: ${theme.gridUnit * 2}px;\n    }\n  `}\n`;\nconst TooltipSectionLabel = styled.span`\n  ${({ theme }) => css`\n    font-weight: ${theme.typography.weights.bold};\n  `}\n`;\nconst TooltipSection = ({ label, text }) => _jsxs(TooltipSectionWrapper, { children: [\n  _jsx(TooltipSectionLabel, { children: label }), \": \", _jsx(\"span\", { children: text })] }\n);\nexport const isLabelTruncated = (labelRef) => {var _labelRef$current, _labelRef$current2;return !!((labelRef == null ? void 0 : (_labelRef$current = labelRef.current) == null ? void 0 : _labelRef$current.scrollWidth) > (labelRef == null ? void 0 : (_labelRef$current2 = labelRef.current) == null ? void 0 : _labelRef$current2.clientWidth));};\nexport const getColumnLabelText = (column) => column.verbose_name || column.column_name;\nexport const getColumnTypeTooltipNode = (column) => {\n  if (!column.type) {\n    return null;\n  }\n  return _jsx(TooltipSection, { label: t('Column type'), text: column.type });\n};\nexport const getColumnTooltipNode = (column, labelRef) => {\n  if ((!column.column_name || !column.verbose_name) &&\n  !column.description &&\n  !isLabelTruncated(labelRef)) {\n    return null;\n  }\n  return _jsxs(_Fragment, { children: [\n    column.column_name && _jsx(TooltipSection, { label: t('Column name'), text: column.column_name }),\n    column.verbose_name && _jsx(TooltipSection, { label: t('Label'), text: column.verbose_name }),\n    column.description && _jsx(TooltipSection, { label: t('Description'), text: column.description })] }\n  );\n};\nexport const getMetricTooltipNode = (metric, labelRef) => {\n  if (!metric.verbose_name &&\n  !metric.description &&\n  !metric.label &&\n  !isLabelTruncated(labelRef)) {\n    return null;\n  }\n  return _jsxs(_Fragment, { children: [\n    _jsx(TooltipSection, { label: t('Metric name'), text: metric.metric_name }),\n    (metric.label || metric.verbose_name) && _jsx(TooltipSection, { label: t('Label'), text: metric.label || metric.verbose_name }),\n    metric.description && _jsx(TooltipSection, { label: t('Description'), text: metric.description })] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}