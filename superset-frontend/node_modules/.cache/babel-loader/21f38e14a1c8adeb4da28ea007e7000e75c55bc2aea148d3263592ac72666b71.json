{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ContributionType, ensureIsArray, GenericDataType, getColumnLabel, getMetricLabel, t } from '@superset-ui/core';\nimport { isDataset } from '../types';\nimport { isTemporalColumn } from '../utils';\nimport { DEFAULT_XAXIS_SORT_SERIES_DATA, SORT_SERIES_CHOICES } from '../constants';\nimport { checkColumnType } from '../utils/checkColumnType';\nimport { isSortable } from '../utils/isSortable';\nexport const contributionModeControl = {\n  name: 'contributionMode',\n  config: {\n    type: 'SelectControl',\n    label: t('Contribution Mode'),\n    default: null,\n    choices: [\n    [null, t('None')],\n    [ContributionType.Row, t('Row')],\n    [ContributionType.Column, t('Series')]],\n\n    description: t('Calculate contribution per series or row')\n  }\n};\nconst xAxisSortVisibility = ({ controls }) => {var _controls$groupby, _controls$metrics;return isSortable(controls) &&\n  ensureIsArray(controls == null ? void 0 : (_controls$groupby = controls.groupby) == null ? void 0 : _controls$groupby.value).length === 0 &&\n  ensureIsArray(controls == null ? void 0 : (_controls$metrics = controls.metrics) == null ? void 0 : _controls$metrics.value).length === 1;};\nconst xAxisMultiSortVisibility = ({ controls }) => {var _controls$groupby2, _controls$metrics2;return isSortable(controls) && (\n  !!ensureIsArray(controls == null ? void 0 : (_controls$groupby2 = controls.groupby) == null ? void 0 : _controls$groupby2.value).length ||\n  ensureIsArray(controls == null ? void 0 : (_controls$metrics2 = controls.metrics) == null ? void 0 : _controls$metrics2.value).length > 1);};\nexport const xAxisSortControl = {\n  name: 'x_axis_sort',\n  config: {\n    type: 'XAxisSortControl',\n    label: (state) => {var _state$form_data;return ((_state$form_data = state.form_data) == null ? void 0 : _state$form_data.orientation) === 'horizontal' ?\n      t('Y-Axis Sort By') :\n      t('X-Axis Sort By');},\n    description: t('Decides which column to sort the base axis by.'),\n    shouldMapStateToProps: () => true,\n    mapStateToProps: (state, controlState) => {var _controls$x_axis, _controls$metrics3, _controls$timeseries_, _controls$x_axis2, _controls$datasource;\n      const { controls, datasource } = state;\n      const dataset = isDataset(datasource) ? datasource : undefined;\n      const columns = [controls == null ? void 0 : (_controls$x_axis = controls.x_axis) == null ? void 0 : _controls$x_axis.value].filter(Boolean);\n      const metrics = [\n      ...ensureIsArray(controls == null ? void 0 : (_controls$metrics3 = controls.metrics) == null ? void 0 : _controls$metrics3.value),\n      controls == null ? void 0 : (_controls$timeseries_ = controls.timeseries_limit_metric) == null ? void 0 : _controls$timeseries_.value].\n      filter(Boolean);\n      const metricLabels = [...new Set(metrics.map(getMetricLabel))];\n      const options = [\n      ...columns.map((column) => {var _dataset$verbose_map;\n        const value = getColumnLabel(column);\n        return {\n          value,\n          label: (dataset == null ? void 0 : (_dataset$verbose_map = dataset.verbose_map) == null ? void 0 : _dataset$verbose_map[value]) || value\n        };\n      }),\n      ...metricLabels.map((value) => {var _dataset$verbose_map2;return {\n          value,\n          label: (dataset == null ? void 0 : (_dataset$verbose_map2 = dataset.verbose_map) == null ? void 0 : _dataset$verbose_map2[value]) || value\n        };})];\n\n      const shouldReset = !(typeof controlState.value === 'string' &&\n      options.map((option) => option.value).includes(controlState.value) &&\n      !isTemporalColumn(getColumnLabel(controls == null ? void 0 : (_controls$x_axis2 = controls.x_axis) == null ? void 0 : _controls$x_axis2.value), controls == null ? void 0 : (_controls$datasource = controls.datasource) == null ? void 0 : _controls$datasource.datasource));\n      return {\n        shouldReset,\n        options\n      };\n    },\n    visibility: xAxisSortVisibility\n  }\n};\nexport const xAxisSortAscControl = {\n  name: 'x_axis_sort_asc',\n  config: {\n    type: 'CheckboxControl',\n    label: (state) => {var _state$form_data2;return ((_state$form_data2 = state.form_data) == null ? void 0 : _state$form_data2.orientation) === 'horizontal' ?\n      t('Y-Axis Sort Ascending') :\n      t('X-Axis Sort Ascending');},\n    default: true,\n    description: t('Whether to sort ascending or descending on the base Axis.'),\n    visibility: ({ controls }) => {var _controls$x_axis_sort;return (controls == null ? void 0 : (_controls$x_axis_sort = controls.x_axis_sort) == null ? void 0 : _controls$x_axis_sort.value) !== undefined &&\n      xAxisSortVisibility({ controls });}\n  }\n};\nexport const xAxisForceCategoricalControl = {\n  name: 'xAxisForceCategorical',\n  config: {\n    type: 'CheckboxControl',\n    label: () => t('Force categorical'),\n    default: false,\n    description: t('Treat values as categorical.'),\n    initialValue: (control, state) => {var _state$form_data3;return (state == null ? void 0 : (_state$form_data3 = state.form_data) == null ? void 0 : _state$form_data3.x_axis_sort) !== undefined || control.value;},\n    renderTrigger: true,\n    visibility: ({ controls }) => {var _controls$x_axis3, _controls$datasource2;return checkColumnType(getColumnLabel(controls == null ? void 0 : (_controls$x_axis3 = controls.x_axis) == null ? void 0 : _controls$x_axis3.value), controls == null ? void 0 : (_controls$datasource2 = controls.datasource) == null ? void 0 : _controls$datasource2.datasource, [GenericDataType.Numeric]);},\n    shouldMapStateToProps: () => true\n  }\n};\nexport const xAxisSortSeriesControl = {\n  name: 'x_axis_sort_series',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: (state) => {var _state$form_data4;return ((_state$form_data4 = state.form_data) == null ? void 0 : _state$form_data4.orientation) === 'horizontal' ?\n      t('Y-Axis Sort By') :\n      t('X-Axis Sort By');},\n    choices: SORT_SERIES_CHOICES,\n    default: DEFAULT_XAXIS_SORT_SERIES_DATA.sort_series_type,\n    renderTrigger: true,\n    description: t('Decides which measure to sort the base axis by.'),\n    visibility: xAxisMultiSortVisibility\n  }\n};\nexport const xAxisSortSeriesAscendingControl = {\n  name: 'x_axis_sort_series_ascending',\n  config: {\n    type: 'CheckboxControl',\n    label: (state) => {var _state$form_data5;return ((_state$form_data5 = state.form_data) == null ? void 0 : _state$form_data5.orientation) === 'horizontal' ?\n      t('Y-Axis Sort Ascending') :\n      t('X-Axis Sort Ascending');},\n    default: DEFAULT_XAXIS_SORT_SERIES_DATA.sort_series_ascending,\n    description: t('Whether to sort ascending or descending on the base Axis.'),\n    renderTrigger: true,\n    visibility: ({ controls }) => {var _controls$x_axis_sort2;return (controls == null ? void 0 : (_controls$x_axis_sort2 = controls.x_axis_sort_series) == null ? void 0 : _controls$x_axis_sort2.value) !== undefined &&\n      xAxisMultiSortVisibility({ controls });}\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}