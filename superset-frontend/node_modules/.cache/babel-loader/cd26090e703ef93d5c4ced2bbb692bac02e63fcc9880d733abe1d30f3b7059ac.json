{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extractTimegrain, GenericDataType, getTimeFormatter, getTimeFormatterForGranularity, SMART_DATE_ID, TimeFormats } from '@superset-ui/core';\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nconst { DATABASE_DATETIME } = TimeFormats;\nfunction isNumeric(key, data = []) {\n  return data.every((record) => record[key] === null ||\n  record[key] === undefined ||\n  typeof record[key] === 'number');\n}\nexport default function transformProps(chartProps) {\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your PivotTableChart.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const { width, height, queriesData, formData, rawFormData, hooks: { setDataMask = () => {}, onContextMenu }, filterState, datasource: { verboseMap = {}, columnFormats = {}, currencyFormats = {} }, emitCrossFilters } = chartProps;\n  const { data, colnames, coltypes } = queriesData[0];\n  const { groupbyRows, groupbyColumns, metrics, tableRenderer, colOrder, rowOrder, aggregateFunction, transposePivot, combineMetric, rowSubtotalPosition, colSubtotalPosition, colTotals, colSubTotals, rowTotals, rowSubTotals, valueFormat, dateFormat, metricsLayout, conditionalFormatting, timeGrainSqla, currencyFormat, allowRenderHtml } = formData;\n  const { selectedFilters } = filterState;\n  const granularity = extractTimegrain(rawFormData);\n  const dateFormatters = colnames.\n  filter((colname, index) => coltypes[index] === GenericDataType.Temporal).\n  reduce((acc, temporalColname) => {\n    let formatter;\n    if (dateFormat === SMART_DATE_ID) {\n      if (granularity) {\n        // time column use formats based on granularity\n        formatter = getTimeFormatterForGranularity(granularity);\n      } else\n      if (isNumeric(temporalColname, data)) {\n        formatter = getTimeFormatter(DATABASE_DATETIME);\n      } else\n      {\n        // if no column-specific format, print cell as is\n        formatter = String;\n      }\n    } else\n    if (dateFormat) {\n      formatter = getTimeFormatter(dateFormat);\n    }\n    if (formatter) {\n      acc[temporalColname] = formatter;\n    }\n    return acc;\n  }, {});\n  const metricColorFormatters = getColorFormatters(conditionalFormatting, data);\n  return {\n    width,\n    height,\n    data,\n    groupbyRows,\n    groupbyColumns,\n    metrics,\n    tableRenderer,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    currencyFormat,\n    emitCrossFilters,\n    setDataMask,\n    selectedFilters,\n    verboseMap,\n    columnFormats,\n    currencyFormats,\n    metricsLayout,\n    metricColorFormatters,\n    dateFormatters,\n    onContextMenu,\n    timeGrainSqla,\n    allowRenderHtml\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}