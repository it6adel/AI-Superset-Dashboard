{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateMapboxStylesUrl } from '@superset-ui/core';\nimport { columnChoices, formatSelectOptions, sharedControls, getStandardizedControls } from '@superset-ui/chart-controls';\nconst columnsConfig = sharedControls.entity;\nconst colorChoices = [\n['rgb(0, 139, 139)', t('Dark Cyan')],\n['rgb(128, 0, 128)', t('Purple')],\n['rgb(255, 215, 0)', t('Gold')],\n['rgb(69, 69, 69)', t('Dim Gray')],\n['rgb(220, 20, 60)', t('Crimson')],\n['rgb(34, 139, 34)', t('Forest Green')]];\n\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'all_columns_x',\n      config: {\n        ...columnsConfig,\n        label: t('Longitude'),\n        description: t('Column containing longitude data')\n      }\n    }],\n\n    [\n    {\n      name: 'all_columns_y',\n      config: {\n        ...columnsConfig,\n        label: t('Latitude'),\n        description: t('Column containing latitude data')\n      }\n    }],\n\n    [\n    {\n      name: 'clustering_radius',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Clustering Radius'),\n        default: '60',\n        choices: formatSelectOptions([\n        '0',\n        '20',\n        '40',\n        '60',\n        '80',\n        '100',\n        '200',\n        '500',\n        '1000']\n        ),\n        description: t('The radius (in pixels) the algorithm uses to define a cluster. ' +\n        'Choose 0 to turn off clustering, but beware that a large ' +\n        'number of points (>1000) will cause lag.')\n      }\n    }],\n\n    ['row_limit'],\n    ['adhoc_filters'],\n    ['groupby']]\n\n  },\n  {\n    label: t('Points'),\n    controlSetRows: [\n    [\n    {\n      name: 'point_radius',\n      config: {\n        type: 'SelectControl',\n        label: t('Point Radius'),\n        default: 'Auto',\n        description: t('The radius of individual points (ones that are not in a cluster). ' +\n        'Either a numerical column or `Auto`, which scales the point based ' +\n        'on the largest cluster'),\n        mapStateToProps: (state) => {\n          const datasourceChoices = columnChoices(state.datasource);\n          const choices = [['Auto', t('Auto')]];\n          return {\n            choices: choices.concat(datasourceChoices)\n          };\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'point_radius_unit',\n      config: {\n        type: 'SelectControl',\n        label: t('Point Radius Unit'),\n        default: 'Pixels',\n        choices: [\n        ['Pixels', t('Pixels')],\n        ['Miles', t('Miles')],\n        ['Kilometers', t('Kilometers')]],\n\n        description: t('The unit of measure for the specified point radius')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Labelling'),\n    controlSetRows: [\n    [\n    {\n      name: 'mapbox_label',\n      config: {\n        type: 'SelectControl',\n        multi: true,\n        label: t('label'),\n        default: [],\n        description: t('`count` is COUNT(*) if a group by is used. ' +\n        'Numerical columns will be aggregated with the aggregator. ' +\n        'Non-numerical columns will be used to label points. ' +\n        'Leave empty to get a count of points in each cluster.'),\n        mapStateToProps: (state) => ({\n          choices: columnChoices(state.datasource)\n        })\n      }\n    }],\n\n    [\n    {\n      name: 'pandas_aggfunc',\n      config: {\n        type: 'SelectControl',\n        label: t('Cluster label aggregator'),\n        clearable: false,\n        choices: [\n        ['sum', t('sum')],\n        ['mean', t('mean')],\n        ['min', t('min')],\n        ['max', t('max')],\n        ['std', t('std')],\n        ['var', t('var')]],\n\n        default: 'sum',\n        description: t('Aggregate function applied to the list of points ' +\n        'in each cluster to produce the cluster label.')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Visual Tweaks'),\n    controlSetRows: [\n    [\n    {\n      name: 'render_while_dragging',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Live render'),\n        default: true,\n        description: t('Points and clusters will update as the viewport is being changed')\n      }\n    }],\n\n    [\n    {\n      name: 'mapbox_style',\n      config: {\n        type: 'SelectControl',\n        label: t('Map Style'),\n        clearable: false,\n        renderTrigger: true,\n        freeForm: true,\n        validators: [validateMapboxStylesUrl],\n        choices: [\n        ['mapbox://styles/mapbox/streets-v9', t('Streets')],\n        ['mapbox://styles/mapbox/dark-v9', t('Dark')],\n        ['mapbox://styles/mapbox/light-v9', t('Light')],\n        [\n        'mapbox://styles/mapbox/satellite-streets-v9',\n        t('Satellite Streets')],\n\n        ['mapbox://styles/mapbox/satellite-v9', t('Satellite')],\n        ['mapbox://styles/mapbox/outdoors-v9', t('Outdoors')]],\n\n        default: 'mapbox://styles/mapbox/light-v9',\n        description: t('Base layer map style. See Mapbox documentation: %s', 'https://docs.mapbox.com/help/glossary/style-url/')\n      }\n    }],\n\n    [\n    {\n      name: 'global_opacity',\n      config: {\n        type: 'TextControl',\n        label: t('Opacity'),\n        default: 1,\n        isFloat: true,\n        description: t('Opacity of all clusters, points, and labels. Between 0 and 1.')\n      }\n    }],\n\n    [\n    {\n      name: 'mapbox_color',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('RGB Color'),\n        default: colorChoices[0][0],\n        choices: colorChoices,\n        description: t('The color for points and clusters in RGB')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Viewport'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'viewport_longitude',\n      config: {\n        type: 'TextControl',\n        label: t('Default longitude'),\n        renderTrigger: true,\n        default: -122.405293,\n        isFloat: true,\n        description: t('Longitude of default viewport'),\n        places: 8,\n        // Viewport longitude changes shouldn't prompt user to re-run query\n        dontRefreshOnChange: true\n      }\n    },\n    {\n      name: 'viewport_latitude',\n      config: {\n        type: 'TextControl',\n        label: t('Default latitude'),\n        renderTrigger: true,\n        default: 37.772123,\n        isFloat: true,\n        description: t('Latitude of default viewport'),\n        places: 8,\n        // Viewport latitude changes shouldn't prompt user to re-run query\n        dontRefreshOnChange: true\n      }\n    }],\n\n    [\n    {\n      name: 'viewport_zoom',\n      config: {\n        type: 'TextControl',\n        label: t('Zoom'),\n        renderTrigger: true,\n        isFloat: true,\n        default: 11,\n        description: t('Zoom level of the map'),\n        places: 8,\n        // Viewport zoom shouldn't prompt user to re-run query\n        dontRefreshOnChange: true\n      }\n    },\n    null]]\n\n\n  }],\n\n  controlOverrides: {\n    groupby: {\n      description: t('One or many controls to group by. If grouping, latitude ' +\n      'and longitude columns must be present.')\n    }\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}