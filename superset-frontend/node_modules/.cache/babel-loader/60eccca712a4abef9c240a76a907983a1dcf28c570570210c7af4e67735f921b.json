{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalScheme, getCategoricalSchemeRegistry, getSequentialSchemeRegistry, SequentialScheme, CategoricalAirbnb, CategoricalD3, CategoricalEcharts, CategoricalGoogle, CategoricalLyft, CategoricalPreset, CategoricalSuperset, SequentialCommon, SequentialD3, ColorSchemeGroup, CategoricalPresetSuperset, CategoricalModernSunset, CategoricalColorsOfRainbow, CategoricalBlueToGreen, CategoricalRedToYellow, CategoricalWavesOfBlue } from '@superset-ui/core';\nfunction registerColorSchemes(registry, colorSchemes, standardDefaultKey) {var _colorSchemes$find;\n  colorSchemes.forEach((scheme) => {\n    registry.registerValue(scheme.id, scheme);\n  });\n  const defaultKey = ((_colorSchemes$find = colorSchemes.find((scheme) => scheme.isDefault)) == null ? void 0 : _colorSchemes$find.id) || standardDefaultKey;\n  registry.setDefaultKey(defaultKey);\n}\nexport default function setupColors(extraCategoricalColorSchemeConfigs = [], extraSequentialColorSchemeConfigs = []) {\n  const extraCategoricalColorSchemes = extraCategoricalColorSchemeConfigs.map((config) => new CategoricalScheme({ ...config, group: ColorSchemeGroup.Custom }));\n  const extraSequentialColorSchemes = extraSequentialColorSchemeConfigs.map((config) => new SequentialScheme(config));\n  registerColorSchemes(\n    // @ts-ignore\n    getCategoricalSchemeRegistry(), [\n    ...CategoricalAirbnb,\n    ...CategoricalD3,\n    ...CategoricalEcharts,\n    ...CategoricalGoogle,\n    ...CategoricalLyft,\n    ...CategoricalPreset,\n    ...CategoricalSuperset,\n    ...CategoricalPresetSuperset,\n    ...CategoricalModernSunset,\n    ...CategoricalColorsOfRainbow,\n    ...CategoricalBlueToGreen,\n    ...CategoricalRedToYellow,\n    ...CategoricalWavesOfBlue,\n    ...extraCategoricalColorSchemes],\n    'supersetColors');\n  registerColorSchemes(\n    // @ts-ignore\n    getSequentialSchemeRegistry(), [...SequentialCommon, ...SequentialD3, ...extraSequentialColorSchemes], 'superset_seq_1');\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}