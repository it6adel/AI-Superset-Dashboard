{"ast":null,"code":"export default function transformProps(chartProps) {\n  const { height, datasource, formData, queriesData } = chartProps;\n  const { columnCollection = [], groupby, metrics, url } = formData;\n  const { records, columns } = queriesData[0].data;\n  const isGroupBy = (groupby == null ? void 0 : groupby.length) > 0;\n  // When there is a \"group by\",\n  // each row in the table is a database column\n  // Otherwise each row in the table is a metric\n  let rows;\n  if (isGroupBy) {\n    rows = columns.map((column) => typeof column === 'object' ? column : { label: column });\n  } else\n  {\n    /* eslint-disable */\n    const metricMap = datasource.metrics.reduce((acc, current) => {\n      const map = acc;\n      map[current.metric_name] = current;\n      return map;\n    }, {});\n    /* eslint-disable */\n    rows = metrics.map((metric) => typeof metric === 'object' ? metric : metricMap[metric]);\n  }\n  // TODO: Better parse this from controls instead of mutative value here.\n  columnCollection.forEach((column) => {\n    const c = column;\n    if (typeof c.timeLag === 'string' && c.timeLag) {\n      c.timeLag = parseInt(c.timeLag, 10);\n    }\n  });\n  return {\n    height,\n    data: records,\n    columnConfigs: columnCollection,\n    rows,\n    rowType: isGroupBy ? 'column' : 'metric',\n    url\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}