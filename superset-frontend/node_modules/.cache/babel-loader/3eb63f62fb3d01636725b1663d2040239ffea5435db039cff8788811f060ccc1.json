{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextArea } from 'src/components/Input';\nimport {\n  Tooltip,\n  TooltipProps as TooltipOptions } from\n'src/components/Tooltip';\nimport { t, withTheme } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport { TextAreaEditor } from 'src/components/AsyncAceEditor';\nimport ModalTrigger from 'src/components/ModalTrigger';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n  height: PropTypes.number,\n  minLines: PropTypes.number,\n  maxLines: PropTypes.number,\n  offerEditInModal: PropTypes.bool,\n  language: PropTypes.oneOf([\n  null,\n  'json',\n  'html',\n  'sql',\n  'markdown',\n  'javascript']\n  ),\n  aboveEditorSection: PropTypes.node,\n  readOnly: PropTypes.bool,\n  resize: PropTypes.oneOf([\n  null,\n  'block',\n  'both',\n  'horizontal',\n  'inline',\n  'none',\n  'vertical']\n  ),\n  textAreaStyles: PropTypes.object,\n  tooltipOptions: PropTypes.oneOf([null, TooltipOptions])\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  initialValue: '',\n  height: 250,\n  minLines: 3,\n  maxLines: 10,\n  offerEditInModal: true,\n  readOnly: false,\n  resize: null,\n  textAreaStyles: {},\n  tooltipOptions: {}\n};\n\nclass TextAreaControl extends Component {\n  onControlChange(event) {\n    const { value } = event.target;\n    this.props.onChange(value);\n  }\n\n  onAreaEditorChange(value) {\n    this.props.onChange(value);\n  }\n\n  renderEditor(inModal = false) {\n    const minLines = inModal ? 40 : this.props.minLines || 12;\n    if (this.props.language) {\n      const style = {\n        border: `1px solid ${this.props.theme.colors.grayscale.light1}`,\n        minHeight: `${minLines}em`,\n        width: 'auto',\n        ...this.props.textAreaStyles\n      };\n      if (this.props.resize) {\n        style.resize = this.props.resize;\n      }\n      if (this.props.readOnly) {\n        style.backgroundColor = '#f2f2f2';\n      }\n      const codeEditor =\n      _jsx(\"div\", { children:\n        _jsx(TextAreaEditor, {\n          mode: this.props.language,\n          style: style,\n          minLines: minLines,\n          maxLines: inModal ? 1000 : this.props.maxLines,\n          editorProps: { $blockScrolling: true },\n          defaultValue: this.props.initialValue,\n          readOnly: this.props.readOnly, ...\n\n          this.props,\n          onChange: this.onAreaEditorChange.bind(this) }, this.props.name\n        ) }\n      );\n\n\n      if (this.props.tooltipOptions) {\n        return _jsx(Tooltip, { ...this.props.tooltipOptions, children: codeEditor });\n      }\n      return codeEditor;\n    }\n\n    const textArea =\n    _jsx(\"div\", { children:\n      _jsx(TextArea, {\n        placeholder: t('textarea'),\n        onChange: this.onControlChange.bind(this),\n        defaultValue: this.props.initialValue,\n        disabled: this.props.readOnly,\n        style: { height: this.props.height } }\n      ) }\n    );\n\n    if (this.props.tooltipOptions) {\n      return _jsx(Tooltip, { ...this.props.tooltipOptions, children: textArea });\n    }\n    return textArea;\n  }\n\n  renderModalBody() {\n    return (\n      _jsxs(_Fragment, { children: [\n        _jsx(\"div\", { children: this.props.aboveEditorSection }),\n        this.renderEditor(true)] }\n      ));\n\n  }\n\n  render() {\n    const controlHeader = _jsx(ControlHeader, { ...this.props });\n    return (\n      _jsxs(\"div\", { children: [\n        controlHeader,\n        this.renderEditor(),\n        this.props.offerEditInModal &&\n        _jsx(ModalTrigger, {\n          modalTitle: controlHeader,\n          triggerNode:\n          _jsxs(Button, { buttonSize: \"small\", className: \"m-t-5\", children: [\n            t('Edit'), \" \", _jsx(\"strong\", { children: this.props.language }), ' ',\n            t('in modal')] }\n          ),\n\n          modalBody: this.renderModalBody(true),\n          responsive: true }\n        )] }\n\n      ));\n\n  }\n}\n\nTextAreaControl.propTypes = propTypes;\nTextAreaControl.defaultProps = defaultProps;\n\nexport default withTheme(TextAreaControl);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}