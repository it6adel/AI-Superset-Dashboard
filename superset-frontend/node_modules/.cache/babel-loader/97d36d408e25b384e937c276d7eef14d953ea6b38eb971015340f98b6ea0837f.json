{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useState } from 'react';\nimport { t, SupersetClient, useTheme, css } from '@superset-ui/core';\nimport rison from 'rison';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler, createFetchRelated } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SubMenu from 'src/features/home/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport CssTemplateModal from 'src/features/cssTemplates/CssTemplateModal';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nfunction CssTemplatesList({ addDangerToast, addSuccessToast, user }) {\n  const theme = useTheme();\n  const { state: { loading, resourceCount: templatesCount, resourceCollection: templates, bulkSelectEnabled }, hasPerm, fetchData, refreshData, toggleBulkSelect } = useListViewResource('css_template', t('CSS templates'), addDangerToast);\n  const [cssTemplateModalOpen, setCssTemplateModalOpen] = useState(false);\n  const [currentCssTemplate, setCurrentCssTemplate] = useState(null);\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const [templateCurrentlyDeleting, setTemplateCurrentlyDeleting] = useState(null);\n  const handleTemplateDelete = ({ id, template_name }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/css_template/${id}`\n    }).then(() => {\n      refreshData();\n      setTemplateCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', template_name));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', template_name, errMsg))));\n  };\n  const handleBulkTemplateDelete = (templatesToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/css_template/?q=${rison.encode(templatesToDelete.map(({ id }) => id))}`\n    }).then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected templates: %s', errMsg))));\n  };\n  function handleCssTemplateEdit(cssTemplate) {\n    setCurrentCssTemplate(cssTemplate);\n    setCssTemplateModalOpen(true);\n  }\n  const initialSort = [{ id: 'template_name', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'template_name',\n    Header: t('Name')\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => _jsx(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl',\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleCssTemplateEdit(original);\n      const handleDelete = () => setTemplateCurrentlyDeleting(original);\n      const actions = [\n      canEdit ?\n      {\n        label: 'edit-action',\n        tooltip: t('Edit template'),\n        placement: 'bottom',\n        icon: 'EditOutlined',\n        onClick: handleEdit\n      } :\n      null,\n      canDelete ?\n      {\n        label: 'delete-action',\n        tooltip: t('Delete template'),\n        placement: 'bottom',\n        icon: 'DeleteOutlined',\n        onClick: handleDelete\n      } :\n      null].\n      filter((item) => !!item);\n      return _jsx(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true,\n    hidden: !canEdit && !canDelete,\n    size: 'xl'\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [canDelete, canCreate]);\n  const menuData = {\n    name: t('CSS templates')\n  };\n  const subMenuButtons = [];\n  if (canCreate) {\n    subMenuButtons.push({\n      name: _jsxs(_Fragment, { children: [\n        _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n              margin: 'auto ${theme.gridUnit * 2}px auto 0';\n              vertical-align: text-top;\n            ` }),\n        t('CSS template')] }\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        setCurrentCssTemplate(null);\n        setCssTemplateModalOpen(true);\n      }\n    });\n  }\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary'\n    });\n  }\n  menuData.buttons = subMenuButtons;\n  const filters = useMemo(() => [\n  {\n    Header: t('Name'),\n    key: 'search',\n    id: 'template_name',\n    input: 'search',\n    operator: FilterOperator.Contains\n  },\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('css_template', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  []);\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { ...menuData }),\n    _jsx(CssTemplateModal, { addDangerToast: addDangerToast, cssTemplate: currentCssTemplate, onCssTemplateAdd: () => refreshData(), onHide: () => setCssTemplateModalOpen(false), show: cssTemplateModalOpen }),\n    templateCurrentlyDeleting && _jsx(DeleteModal, { description: t('This action will permanently delete the template.'), onConfirm: () => {\n        if (templateCurrentlyDeleting) {\n          handleTemplateDelete(templateCurrentlyDeleting);\n        }\n      }, onHide: () => setTemplateCurrentlyDeleting(null), open: true, title: t('Delete Template?') }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected templates?'), onConfirm: handleBulkTemplateDelete, children:\n      (confirmDelete) => {\n        const bulkActions = canDelete ?\n        [\n        {\n          key: 'delete',\n          name: t('Delete'),\n          onSelect: confirmDelete,\n          type: 'danger'\n        }] :\n\n        [];\n        return _jsx(ListView, { className: \"css-templates-list-view\", columns: columns, count: templatesCount, data: templates, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: refreshData });\n      } }\n    )] }\n  );\n}\nexport default withToasts(CssTemplatesList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}