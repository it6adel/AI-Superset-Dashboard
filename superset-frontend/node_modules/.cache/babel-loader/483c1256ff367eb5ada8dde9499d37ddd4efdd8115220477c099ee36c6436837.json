{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled } from '@superset-ui/core';\nimport { Tag as AntdTag } from 'antd-v5';\nimport { useMemo } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledTag = styled(AntdTag)`\n  ${({ theme }) => `\n  margin-top: ${theme.gridUnit}px;\n  margin-bottom: ${theme.gridUnit}px;\n  `};\n`;\nexport const CustomCloseIcon = _jsx(Icons.CloseOutlined, { iconSize: \"xs\", role: \"button\" });\nconst MAX_DISPLAY_CHAR = 20;\nconst Tag = ({ name, id, index = undefined, onDelete = undefined, editable = false, onClick = undefined, toolTipTitle = name, children, ...rest }) => {\n  const isLongTag = useMemo(() => name.length > MAX_DISPLAY_CHAR, [name]);\n  const tagDisplay = isLongTag ? `${name.slice(0, MAX_DISPLAY_CHAR)}...` : name;\n  const handleClose = () => index !== undefined ? onDelete == null ? void 0 : onDelete(index) : null;\n  const whatRole = onClick ? !id ? 'button' : 'link' : undefined;\n  const tagElem = _jsx(_Fragment, { children:\n    editable ? _jsx(Tooltip, { title: toolTipTitle, children:\n      _jsx(StyledTag, { closable: editable, onClose: handleClose, closeIcon: editable ? CustomCloseIcon : undefined, ...rest, children:\n        children || tagDisplay }, id\n      ) }, toolTipTitle\n    ) : _jsx(Tooltip, { title: toolTipTitle, children:\n      _jsxs(StyledTag, { onClick: onClick, role: whatRole, ...rest, children: [\n        ' ',\n        id ? _jsx(\"a\", { href: `/superset/all_entities/?id=${id}`, target: \"_blank\", rel: \"noreferrer\", children:\n          children || tagDisplay }\n        ) : children || tagDisplay] }, id\n      ) }, toolTipTitle\n    ) }\n  );\n  return tagElem;\n};\nexport default Tag;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}