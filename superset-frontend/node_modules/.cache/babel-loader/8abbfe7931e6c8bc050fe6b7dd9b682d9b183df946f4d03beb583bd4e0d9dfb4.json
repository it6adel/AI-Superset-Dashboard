{"ast":null,"code":"/* eslint camelcase: 0 */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DatasourceType } from './Datasource';\nimport { GenericDataType } from './QueryResponse';\n// Keep in sync with superset/errors.py\nexport const ErrorTypeEnum = {\n  // Frontend errors\n  FRONTEND_CSRF_ERROR: 'FRONTEND_CSRF_ERROR',\n  FRONTEND_NETWORK_ERROR: 'FRONTEND_NETWORK_ERROR',\n  FRONTEND_TIMEOUT_ERROR: 'FRONTEND_TIMEOUT_ERROR',\n  // DB Engine errors\n  GENERIC_DB_ENGINE_ERROR: 'GENERIC_DB_ENGINE_ERROR',\n  COLUMN_DOES_NOT_EXIST_ERROR: 'COLUMN_DOES_NOT_EXIST_ERROR',\n  TABLE_DOES_NOT_EXIST_ERROR: 'TABLE_DOES_NOT_EXIST_ERROR',\n  SCHEMA_DOES_NOT_EXIST_ERROR: 'SCHEMA_DOES_NOT_EXIST_ERROR',\n  CONNECTION_INVALID_USERNAME_ERROR: 'CONNECTION_INVALID_USERNAME_ERROR',\n  CONNECTION_INVALID_PASSWORD_ERROR: 'CONNECTION_INVALID_PASSWORD_ERROR',\n  CONNECTION_INVALID_HOSTNAME_ERROR: 'CONNECTION_INVALID_HOSTNAME_ERROR',\n  CONNECTION_PORT_CLOSED_ERROR: 'CONNECTION_PORT_CLOSED_ERROR',\n  CONNECTION_INVALID_PORT_ERROR: 'CONNECTION_INVALID_PORT_ERROR',\n  CONNECTION_HOST_DOWN_ERROR: 'CONNECTION_HOST_DOWN_ERROR',\n  CONNECTION_ACCESS_DENIED_ERROR: 'CONNECTION_ACCESS_DENIED_ERROR',\n  CONNECTION_UNKNOWN_DATABASE_ERROR: 'CONNECTION_UNKNOWN_DATABASE_ERROR',\n  CONNECTION_DATABASE_PERMISSIONS_ERROR: 'CONNECTION_DATABASE_PERMISSIONS_ERROR',\n  CONNECTION_MISSING_PARAMETERS_ERROR: 'CONNECTION_MISSING_PARAMETERS_ERROR',\n  OBJECT_DOES_NOT_EXIST_ERROR: 'OBJECT_DOES_NOT_EXIST_ERROR',\n  SYNTAX_ERROR: 'SYNTAX_ERROR',\n  CONNECTION_DATABASE_TIMEOUT: 'CONNECTION_DATABASE_TIMEOUT',\n  // Viz errors\n  VIZ_GET_DF_ERROR: 'VIZ_GET_DF_ERROR',\n  UNKNOWN_DATASOURCE_TYPE_ERROR: 'UNKNOWN_DATASOURCE_TYPE_ERROR',\n  FAILED_FETCHING_DATASOURCE_INFO_ERROR: 'FAILED_FETCHING_DATASOURCE_INFO_ERROR',\n  // Security access errors\n  TABLE_SECURITY_ACCESS_ERROR: 'TABLE_SECURITY_ACCESS_ERROR',\n  DATASOURCE_SECURITY_ACCESS_ERROR: 'DATASOURCE_SECURITY_ACCESS_ERROR',\n  DATABASE_SECURITY_ACCESS_ERROR: 'DATABASE_SECURITY_ACCESS_ERROR',\n  QUERY_SECURITY_ACCESS_ERROR: 'QUERY_SECURITY_ACCESS_ERROR',\n  MISSING_OWNERSHIP_ERROR: 'MISSING_OWNERSHIP_ERROR',\n  USER_ACTIVITY_SECURITY_ACCESS_ERROR: 'USER_ACTIVITY_SECURITY_ACCESS_ERROR',\n  DASHBOARD_SECURITY_ACCESS_ERROR: 'DASHBOARD_SECURITY_ACCESS_ERROR',\n  CHART_SECURITY_ACCESS_ERROR: 'CHART_SECURITY_ACCESS_ERROR',\n  OAUTH2_REDIRECT: 'OAUTH2_REDIRECT',\n  OAUTH2_REDIRECT_ERROR: 'OAUTH2_REDIRECT_ERROR',\n  // Other errors\n  BACKEND_TIMEOUT_ERROR: 'BACKEND_TIMEOUT_ERROR',\n  DATABASE_NOT_FOUND_ERROR: 'DATABASE_NOT_FOUND_ERROR',\n  // Sql Lab errors\n  MISSING_TEMPLATE_PARAMS_ERROR: 'MISSING_TEMPLATE_PARAMS_ERROR',\n  INVALID_TEMPLATE_PARAMS_ERROR: 'INVALID_TEMPLATE_PARAMS_ERROR',\n  RESULTS_BACKEND_NOT_CONFIGURED_ERROR: 'RESULTS_BACKEND_NOT_CONFIGURED_ERROR',\n  DML_NOT_ALLOWED_ERROR: 'DML_NOT_ALLOWED_ERROR',\n  INVALID_CTAS_QUERY_ERROR: 'INVALID_CTAS_QUERY_ERROR',\n  INVALID_CVAS_QUERY_ERROR: 'INVALID_CVAS_QUERY_ERROR',\n  SQLLAB_TIMEOUT_ERROR: 'SQLLAB_TIMEOUT_ERROR',\n  RESULTS_BACKEND_ERROR: 'RESULTS_BACKEND_ERROR',\n  ASYNC_WORKERS_ERROR: 'ASYNC_WORKERS_ERROR',\n  ADHOC_SUBQUERY_NOT_ALLOWED_ERROR: 'ADHOC_SUBQUERY_NOT_ALLOWED_ERROR',\n  INVALID_SQL_ERROR: 'INVALID_SQL_ERROR',\n  RESULT_TOO_LARGE_ERROR: 'RESULT_TOO_LARGE_ERROR',\n  // Generic errors\n  GENERIC_COMMAND_ERROR: 'GENERIC_COMMAND_ERROR',\n  GENERIC_BACKEND_ERROR: 'GENERIC_BACKEND_ERROR',\n  // API errors\n  INVALID_PAYLOAD_FORMAT_ERROR: 'INVALID_PAYLOAD_FORMAT_ERROR',\n  INVALID_PAYLOAD_SCHEMA_ERROR: 'INVALID_PAYLOAD_SCHEMA_ERROR',\n  MARSHMALLOW_ERROR: 'MARSHMALLOW_ERROR',\n  // Report errors\n  REPORT_NOTIFICATION_ERROR: 'REPORT_NOTIFICATION_ERROR'\n};\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW'\n};\n// Possible states of a query object for processing on the server\nexport var QueryState;\n(function (QueryState) {\n  QueryState[\"Started\"] = \"started\";\n  QueryState[\"Stopped\"] = \"stopped\";\n  QueryState[\"Failed\"] = \"failed\";\n  QueryState[\"Pending\"] = \"pending\";\n  QueryState[\"Running\"] = \"running\";\n  QueryState[\"Scheduled\"] = \"scheduled\";\n  QueryState[\"Success\"] = \"success\";\n  QueryState[\"Fetching\"] = \"fetching\";\n  QueryState[\"TimedOut\"] = \"timed_out\";\n})(QueryState || (QueryState = {}));\n// Indicates a Query's state is still processing\nexport const runningQueryStateList = [\nQueryState.Running,\nQueryState.Started,\nQueryState.Pending,\nQueryState.Fetching,\nQueryState.Scheduled];\n\n// Indicates a Query's state has completed processing regardless of success / failure\nexport const concludedQueryStateList = [\nQueryState.Stopped,\nQueryState.Failed,\nQueryState.Success,\nQueryState.TimedOut];\n\n// todo: move out from typing\nexport const testQuery = {\n  id: 'clientId2353',\n  dbId: 1,\n  sql: 'SELECT * FROM something',\n  sqlEditorId: 'dfsadfs',\n  tab: 'unimportant',\n  tempTable: '',\n  ctas: false,\n  cached: false,\n  errorMessage: null,\n  extra: { progress: null },\n  isDataPreview: false,\n  progress: 0,\n  resultsKey: null,\n  state: QueryState.Success,\n  tempSchema: null,\n  trackingUrl: null,\n  templateParams: null,\n  rows: 42,\n  queryLimit: 100,\n  limitingFactor: '',\n  endDttm: 1476910579693,\n  duration: '',\n  startDttm: 1476910566092.96,\n  time: {},\n  user: {},\n  userId: 1,\n  db: {},\n  started: '',\n  querylink: {},\n  queryId: 1,\n  executedSql: '',\n  output: '',\n  actions: {},\n  type: DatasourceType.Query,\n  columns: [\n  {\n    column_name: 'Column 1',\n    type: 'STRING',\n    is_dttm: false,\n    type_generic: GenericDataType.String\n  },\n  {\n    column_name: 'Column 3',\n    type: 'STRING',\n    is_dttm: false,\n    type_generic: GenericDataType.String\n  },\n  {\n    column_name: 'Column 2',\n    type: 'TIMESTAMP',\n    is_dttm: true,\n    type_generic: GenericDataType.Temporal\n  }]\n\n};\nexport const testQueryResults = {\n  results: {\n    displayLimitReached: false,\n    columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      type_generic: GenericDataType.Temporal,\n      is_dttm: true\n    }],\n\n    data: [\n    { 'Column 1': 'a', 'Column 2': 'b', 'Column 3': '2014-11-11T00:00:00' }],\n\n    expanded_columns: [],\n    selected_columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      type_generic: GenericDataType.Temporal,\n      is_dttm: true\n    }],\n\n    query: { limit: 6 }\n  }\n};\nexport const testQueryResponse = { ...testQuery, ...testQueryResults };\nexport var ContributionType;\n(function (ContributionType) {\n  ContributionType[\"Row\"] = \"row\";\n  ContributionType[\"Column\"] = \"column\";\n})(ContributionType || (ContributionType = {}));\nexport default {};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}