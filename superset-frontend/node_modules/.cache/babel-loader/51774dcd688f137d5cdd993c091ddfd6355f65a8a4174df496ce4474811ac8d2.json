{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { isFeatureEnabled, FeatureFlag, t, SupersetClient } from '@superset-ui/core';\nimport { CardStyles } from 'src/views/CRUD/utils';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Menu } from 'src/components/Menu';\nimport ListViewCard from 'src/components/ListViewCard';\nimport Icons from 'src/components/Icons';\nimport { PublishedLabel } from 'src/components/Label';\nimport FacePile from 'src/components/FacePile';\nimport FaveStar from 'src/components/FaveStar';\nimport { Button } from 'src/components';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nfunction DashboardCard({ dashboard, hasPerm, bulkSelectEnabled, userId, openDashboardEditModal, favoriteStatus, saveFavoriteStatus, showThumbnails, handleBulkDashboardExport, onDelete }) {\n  const history = useHistory();\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n  const [thumbnailUrl, setThumbnailUrl] = useState(null);\n  const [fetchingThumbnail, setFetchingThumbnail] = useState(false);\n  useEffect(() => {\n    // fetch thumbnail only if it's not already fetched\n    if (!fetchingThumbnail &&\n    dashboard.id && (\n    thumbnailUrl === undefined || thumbnailUrl === null) &&\n    isFeatureEnabled(FeatureFlag.Thumbnails)) {\n      // fetch thumbnail\n      if (dashboard.thumbnail_url) {\n        // set to empty string if null so that we don't\n        // keep fetching the thumbnail\n        setThumbnailUrl(dashboard.thumbnail_url || '');\n        return;\n      }\n      setFetchingThumbnail(true);\n      SupersetClient.get({\n        endpoint: `/api/v1/dashboard/${dashboard.id}`\n      }).then(({ json = {} }) => {var _json$result;\n        setThumbnailUrl(((_json$result = json.result) == null ? void 0 : _json$result.thumbnail_url) || '');\n        setFetchingThumbnail(false);\n      });\n    }\n  }, [dashboard, thumbnailUrl]);\n  const menu = _jsxs(Menu, { children: [\n    canEdit && openDashboardEditModal && _jsx(Menu.Item, { children:\n      _jsxs(\"div\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: () => openDashboardEditModal == null ? void 0 : openDashboardEditModal(dashboard), children: [\n        _jsx(Icons.EditOutlined, { iconSize: \"l\" }), \" \", t('Edit')] }\n      ) }\n    ),\n    canExport && _jsx(Menu.Item, { children:\n      _jsxs(\"div\", { role: \"button\", tabIndex: 0, onClick: () => handleBulkDashboardExport([dashboard]), className: \"action-button\", children: [\n        _jsx(Icons.UploadOutlined, { iconSize: \"l\" }), \" \", t('Export')] }\n      ) }\n    ),\n    canDelete && _jsx(Menu.Item, { children:\n      _jsxs(\"div\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: () => onDelete(dashboard), children: [\n        _jsx(Icons.DeleteOutlined, { iconSize: \"l\" }), \" \", t('Delete')] }\n      ) }\n    )] }\n  );\n  return _jsx(CardStyles, { onClick: () => {\n      if (!bulkSelectEnabled) {\n        history.push(dashboard.url);\n      }\n    }, children:\n    _jsx(ListViewCard, { loading: dashboard.loading || false, title: dashboard.dashboard_title, certifiedBy: dashboard.certified_by, certificationDetails: dashboard.certification_details, titleRight: _jsx(PublishedLabel, { isPublished: dashboard.published }), cover: !isFeatureEnabled(FeatureFlag.Thumbnails) || !showThumbnails ? _jsx(_Fragment, {}) : null, url: bulkSelectEnabled ? undefined : dashboard.url, linkComponent: Link, imgURL: dashboard.thumbnail_url, imgFallbackURL: \"/static/assets/images/dashboard-card-fallback.svg\", description: t('Modified %s', dashboard.changed_on_delta_humanized), coverLeft: _jsx(FacePile, { users: dashboard.owners || [] }), actions: _jsxs(ListViewCard.Actions, { onClick: (e) => {\n          e.stopPropagation();\n          e.preventDefault();\n        }, children: [\n        userId && _jsx(FaveStar, { itemId: dashboard.id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus }),\n        _jsx(Dropdown, { dropdownRender: () => menu, trigger: ['hover', 'click'], children:\n          _jsx(Button, { buttonSize: \"xsmall\", type: \"link\", children:\n            _jsx(Icons.MoreOutlined, { iconSize: \"xl\" }) }\n          ) }\n        )] }\n      ) }) }\n  );\n}\nexport default DashboardCard;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}