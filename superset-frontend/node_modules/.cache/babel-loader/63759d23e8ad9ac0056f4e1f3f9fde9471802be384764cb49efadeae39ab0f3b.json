{"ast":null,"code":"import _flatMapDeep from \"lodash/flatMapDeep\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useState, useCallback } from 'react';\nimport { ensureIsArray, GenericDataType } from '@superset-ui/core';\nimport { FILTER_SUPPORTED_TYPES } from './constants';\nconst FILTERS_FIELD_NAME = 'filters';\nexport const useForceUpdate = (isActive = true) => {\n  const [, updateState] = useState({});\n  return useCallback(() => {\n    if (isActive) {\n      updateState({});\n    }\n  }, [isActive]);\n};\nexport const setNativeFilterFieldValues = (form, filterId, values) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n  {\n    name: FILTERS_FIELD_NAME,\n    value: {\n      ...formFilters,\n      [filterId]: {\n        ...formFilters[filterId],\n        ...values\n      }\n    }\n  }]\n  );\n};\nexport const getControlItems = (controlConfig = {}) => {var _flatMapDeep$reduce, _flatMapDeep2;return (_flatMapDeep$reduce = (_flatMapDeep2 = _flatMapDeep(controlConfig.controlPanelSections)) == null ? void 0 : _flatMapDeep2.reduce((acc, { controlSetRows = [] }) => [\n  ...acc,\n  ..._flatMapDeep(controlSetRows)],\n  [])) != null ? _flatMapDeep$reduce : [];};\n// TODO: add column_types field to Dataset\n// We return true if column_types is undefined or empty as a precaution against backend failing to return column_types\nexport const hasTemporalColumns = (dataset) => {\n  const columnTypes = ensureIsArray(dataset == null ? void 0 : dataset.column_types);\n  return columnTypes.length === 0 || columnTypes.includes(GenericDataType.Temporal);\n};\nexport const doesColumnMatchFilterType = (filterType, column) => {var _FILTER_SUPPORTED_TYP;return !column.type_generic ||\n  !(filterType in FILTER_SUPPORTED_TYPES) || ((_FILTER_SUPPORTED_TYP =\n  FILTER_SUPPORTED_TYPES[filterType]) == null ? void 0 : _FILTER_SUPPORTED_TYP.includes(column.type_generic));};\nexport const mostUsedDataset = (datasets, charts) => {var _datasets$mostUsedDat;\n  const map = new Map();\n  let mostUsedDataset = '';\n  let maxCount = 0;\n  Object.values(charts).forEach((chart) => {\n    const { form_data: formData } = chart;\n    if (formData) {\n      const { datasource } = formData;\n      const count = (map.get(datasource) || 0) + 1;\n      map.set(datasource, count);\n      if (count > maxCount) {\n        maxCount = count;\n        mostUsedDataset = datasource;\n      }\n    }\n  });\n  return (_datasets$mostUsedDat = datasets[mostUsedDataset]) == null ? void 0 : _datasets$mostUsedDat.id;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}