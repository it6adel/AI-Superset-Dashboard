{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateHcl, interpolateNumber, piecewise, quantize } from 'd3-interpolate';\nimport ColorScheme from './ColorScheme';\nexport default class SequentialScheme extends ColorScheme {\n\n  constructor(config) {\n    super(config);this.isDiverging = void 0;\n    const { isDiverging = false } = config;\n    this.isDiverging = isDiverging;\n  }\n  /**\n   * Return a linear scale with a new domain interpolated from the input domain\n   * to match the number of elements in the color scheme\n   * because D3 continuous scale uses piecewise mapping between domain and range.\n   * This is a common use-case when the domain is [min, max]\n   * and the palette has more than two colors.\n   *\n   * @param domain domain of the scale\n   * @param modifyRange Set this to true if you don't want to modify the domain and\n   * want to interpolate range to have the same number of elements with domain instead.\n   */\n  createLinearScale(domain = [0, 1], modifyRange = false) {\n    const scale = scaleLinear().interpolate(interpolateHcl).clamp(true);\n    return modifyRange || domain.length === this.colors.length ?\n    scale.domain(domain).range(this.getColors(domain.length)) :\n    scale.\n    domain(quantize(piecewise(interpolateNumber, domain), this.colors.length)).\n    range(this.colors);\n  }\n  /**\n   * Get colors from this scheme\n   * @param numColors number of colors to return.\n   * Will interpolate the current scheme to match the number of colors requested\n   * @param extent The extent of the color range to use.\n   * For example [0.2, 1] will rescale the color scheme\n   * such that color values in the range [0, 0.2) are excluded from the scheme.\n   */\n  getColors(numColors = this.colors.length, extent = [0, 1]) {\n    if (numColors === this.colors.length &&\n    extent[0] === 0 &&\n    extent[1] === 1) {\n      return this.colors;\n    }\n    const piecewiseScale = piecewise(interpolateHcl, this.colors);\n    const adjustExtent = scaleLinear().range(extent).clamp(true);\n    return quantize((t) => piecewiseScale(adjustExtent(t)), numColors);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}