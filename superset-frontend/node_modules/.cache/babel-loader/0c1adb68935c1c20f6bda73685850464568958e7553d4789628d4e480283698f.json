{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _isEqual from \"lodash/isEqual\";import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react-hooks/rules-of-hooks */\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { Behavior, isFeatureEnabled, FeatureFlag, GenericDataType, getChartMetadataRegistry, NativeFilterType, styled, t, getClientErrorObject, SLOW_DEBOUNCE, useTheme, css } from '@superset-ui/core';\n\nimport { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useState, memo } from 'react';\nimport rison from 'rison';\nimport { useSelector } from 'react-redux';\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport { Input, TextArea } from 'src/components/Input';\nimport { Select } from 'src/components';\nimport Collapse from 'src/components/Collapse';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { FormItem } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport Loading from 'src/components/Loading';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { Radio } from 'src/components/Radio';\nimport Tabs from 'src/components/Tabs';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';\nimport DateFilterControl from 'src/explore/components/controls/DateFilterControl';\nimport AdhocFilterControl from 'src/explore/components/controls/FilterControl/AdhocFilterControl';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { SingleValueType } from 'src/filters/components/Range/SingleValueType';\nimport { getFormData, mergeExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport { DatasetSelectLabel } from 'src/features/datasets/DatasetSelectLabel';\nimport { ALLOW_DEPENDENCIES as TYPES_SUPPORT_DEPENDENCIES, getFiltersConfigModalTestId } from '../FiltersConfigModal';\nimport { CollapsibleControl } from './CollapsibleControl';\nimport { ColumnSelect } from './ColumnSelect';\nimport DatasetSelect from './DatasetSelect';\nimport DefaultValue from './DefaultValue';\nimport FilterScope from './FilterScope/FilterScope';\nimport getControlItemsMap from './getControlItemsMap';\nimport RemovedFilter from './RemovedFilter';\nimport { useBackendFormUpdate, useDefaultValue } from './state';\nimport { hasTemporalColumns, mostUsedDataset, setNativeFilterFieldValues, useForceUpdate } from './utils';\nimport { FILTER_SUPPORTED_TYPES, INPUT_WIDTH } from './constants';\nimport DependencyList from './DependencyList';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst FORM_ITEM_WIDTH = 260;\nconst TabPane = styled(Tabs.TabPane)`\n  padding: ${({ theme }) => theme.gridUnit * 4}px 0px;\n`;\nconst StyledContainer = styled.div`\n  ${({ theme }) => `\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: space-between;\n    padding: 0px ${theme.gridUnit * 4}px;\n  `}\n`;\nconst StyledRowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  padding: 0px ${({ theme }) => theme.gridUnit * 4}px;\n`;\nconst controlsOrder = [\n'enableEmptyFilter',\n'defaultToFirstItem',\n'multiSelect',\n'searchAllOptions',\n'inverseSelection'];\n\nexport const StyledFormItem = styled(FormItem)`\n  width: ${({ expanded }) => expanded ? '49%' : `${FORM_ITEM_WIDTH}px`};\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n  & .ant-form-item-label {\n    padding-bottom: 0;\n  }\n\n  & .ant-form-item-control-input {\n    min-height: ${({ theme }) => theme.gridUnit * 10}px;\n  }\n`;\nexport const StyledRowFormItem = styled(FormItem)`\n  margin-bottom: 0;\n  padding-bottom: 0;\n  min-width: ${({ expanded }) => expanded ? '50%' : `${FORM_ITEM_WIDTH}px`};\n\n  & .ant-form-item-label {\n    padding-bottom: 0;\n  }\n\n  .ant-form-item-control-input-content > div > div {\n    height: auto;\n  }\n\n  & .ant-form-item-control-input {\n    min-height: ${({ theme }) => theme.gridUnit * 10}px;\n  }\n`;\nexport const StyledRowSubFormItem = styled(FormItem)`\n  min-width: ${({ expanded }) => expanded ? '50%' : `${FORM_ITEM_WIDTH}px`};\n\n  & .ant-form-item-label {\n    padding-bottom: 0;\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  .ant-form-item-control-input-content > div > div {\n    height: auto;\n  }\n\n  .ant-form-item-extra {\n    display: none;\n  }\n\n  & .ant-form-item-control-input {\n    height: auto;\n  }\n`;\nexport const StyledLabel = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\nconst DefaultValueContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\nconst StyledCollapse = styled(Collapse)`\n  border-left: 0;\n  border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-radius: 0;\n\n  .ant-collapse-header {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    margin-top: -1px;\n    border-radius: 0;\n  }\n\n  .ant-collapse-content {\n    border: 0;\n  }\n\n  .ant-collapse-content-box {\n    padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &.ant-collapse > .ant-collapse-item {\n    border: 0;\n    border-radius: 0;\n  }\n`;\nconst StyledTabs = styled(Tabs)`\n  .ant-tabs-nav {\n    position: sticky;\n    top: 0;\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n    z-index: 1;\n  }\n\n  .ant-tabs-nav-list {\n    padding: 0;\n  }\n\n  .ant-form-item-label {\n    padding-bottom: 0;\n  }\n`;\nconst StyledAsterisk = styled.span`\n  color: ${({ theme }) => theme.colors.error.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin-left: ${({ theme }) => theme.gridUnit - 1}px;\n  &:before {\n    content: '*';\n  }\n`;\nconst FilterTypeInfo = styled.div`\n  ${({ theme, expanded }) => `\n    width: ${expanded ? '49%' : `${FORM_ITEM_WIDTH}px`};\n    font-size: ${theme.typography.sizes.s}px;\n    color: ${theme.colors.grayscale.light1};\n    margin:\n      ${-theme.gridUnit * 2}px\n      0px\n      ${theme.gridUnit * 4}px\n      ${theme.gridUnit * 4}px;\n  `}\n`;\nconst FilterTabs = {\n  configuration: {\n    key: 'configuration',\n    name: t('Settings')\n  },\n  scoping: {\n    key: 'scoping',\n    name: t('Scoping')\n  }\n};\nexport const FilterPanels = {\n  configuration: {\n    key: 'configuration',\n    name: t('Filter Configuration')\n  },\n  settings: {\n    key: 'settings',\n    name: t('Filter Settings')\n  }\n};\nconst FILTERS_WITH_ADHOC_FILTERS = ['filter_select', 'filter_range'];\n// TODO: Rename the filter plugins and remove this mapping\nconst FILTER_TYPE_NAME_MAPPING = {\n  [t('Select filter')]: t('Value'),\n  [t('Range filter')]: t('Numerical range'),\n  [t('Time filter')]: t('Time range'),\n  [t('Time column')]: t('Time column'),\n  [t('Time grain')]: t('Time grain'),\n  [t('Group By')]: t('Group by')\n};\n/**\n * The configuration form for a specific filter.\n * Assigns field values to `filters[filterId]` in the form.\n */\nconst FiltersConfigForm = ({ expanded, filterId, filterToEdit, removedFilters, form, getAvailableFilters, activeFilterPanelKeys, restoreFilter, handleActiveFilterPanelChange, setErroredFilters, onModifyFilter, validateDependencies, getDependencySuggestion, isActive }, ref) => {var _formFilter$dataset2, _nativeFilterItems$fo, _nativeFilterItems$fo2, _ref, _formFilter$dataset$v, _formFilter$dataset3, _filterToEdit$targets, _nativeFilterItems$fo3, _nativeFilterItem$val, _formFilter$isDataDir, _formFilter$dataset6, _filterToEdit$adhoc_f, _formFilter$controlVa, _filterToEdit$control, _filterToEdit$control2, _formFilter$controlVa2, _formFilter$controlVa3, _filterToEdit$control3, _filterToEdit$control4, _formFilter$controlVa4, _formFilter$adhoc_fil, _formFilter$controlVa5, _formFilter$dataset9, _datasetDetails$colum, _error$errors;\n  const theme = useTheme();\n  const isRemoved = !!removedFilters[filterId];\n  const [error, setError] = useState();\n  const [metrics, setMetrics] = useState([]);\n  const [activeTabKey, setActiveTabKey] = useState(FilterTabs.configuration.key);\n  const dashboardId = useSelector((state) => state.dashboardInfo.id);\n  const [undoFormValues, setUndoFormValues] = useState(null);\n  const forceUpdate = useForceUpdate(isActive);\n  const [datasetDetails, setDatasetDetails] = useState();\n  const defaultFormFilter = useMemo(() => ({}), []);\n  const filters = form.getFieldValue('filters');\n  const formValues = filters == null ? void 0 : filters[filterId];\n  const formFilter = formValues || undoFormValues || defaultFormFilter;\n  const handleModifyFilter = useCallback(() => {\n    if (onModifyFilter) {\n      onModifyFilter(filterId);\n    }\n  }, [onModifyFilter, filterId]);\n  const dependencies = (formFilter == null ? void 0 : formFilter.dependencies) || (filterToEdit == null ? void 0 : filterToEdit.cascadeParentIds) || [];\n  const nativeFilterItems = getChartMetadataRegistry().items;\n  const nativeFilterVizTypes = Object.entries(nativeFilterItems)\n  // @ts-ignore\n  .filter(([, { value }]) => {var _value$behaviors;return (_value$behaviors = value.behaviors) == null ? void 0 : _value$behaviors.includes(Behavior.NativeFilter);}).\n  map(([key]) => key);\n  const loadedDatasets = useSelector(({ datasources }) => datasources);\n  const charts = useSelector(({ charts }) => charts);\n  const doLoadedDatasetsHaveTemporalColumns = useMemo(() => Object.values(loadedDatasets).some((dataset) => hasTemporalColumns(dataset)), [loadedDatasets]);\n  const showTimeRangePicker = useMemo(() => {\n    const currentDataset = Object.values(loadedDatasets).find((dataset) => {var _formFilter$dataset;return dataset.id === (formFilter == null ? void 0 : (_formFilter$dataset = formFilter.dataset) == null ? void 0 : _formFilter$dataset.value);});\n    return currentDataset ? hasTemporalColumns(currentDataset) : true;\n  }, [formFilter == null ? void 0 : (_formFilter$dataset2 = formFilter.dataset) == null ? void 0 : _formFilter$dataset2.value, loadedDatasets]);\n  const hasDataset =\n  // @ts-ignore\n  !!((_nativeFilterItems$fo = nativeFilterItems[formFilter == null ? void 0 : formFilter.filterType]) != null && (_nativeFilterItems$fo2 = _nativeFilterItems$fo.value) != null && _nativeFilterItems$fo2.datasourceCount);\n  const datasetId = (_ref = (_formFilter$dataset$v = formFilter == null ? void 0 : (_formFilter$dataset3 = formFilter.dataset) == null ? void 0 : _formFilter$dataset3.value) != null ? _formFilter$dataset$v :\n  filterToEdit == null ? void 0 : (_filterToEdit$targets = filterToEdit.targets[0]) == null ? void 0 : _filterToEdit$targets.datasetId) != null ? _ref :\n  mostUsedDataset(loadedDatasets, charts);\n  const formChanged = useCallback(() => {\n    form.setFields([\n    {\n      name: 'changed',\n      value: true\n    }]\n    );\n    handleModifyFilter();\n  }, [form, handleModifyFilter]);\n  const debouncedFormChanged = useCallback(_debounce(formChanged, SLOW_DEBOUNCE), []);\n  const { controlItems = {}, mainControlItems = {} } = formFilter ?\n  getControlItemsMap({\n    expanded,\n    datasetId,\n    disabled: false,\n    forceUpdate,\n    formChanged,\n    form,\n    filterId,\n    filterType: formFilter == null ? void 0 : formFilter.filterType,\n    filterToEdit,\n    formFilter,\n    removed: isRemoved\n  }) :\n  {};\n  const hasColumn = !!mainControlItems.groupby;\n  const nativeFilterItem = (_nativeFilterItems$fo3 = nativeFilterItems[formFilter == null ? void 0 : formFilter.filterType]) != null ? _nativeFilterItems$fo3 : {};\n  // @ts-ignore\n  const enableNoResults = !!((_nativeFilterItem$val = nativeFilterItem.value) != null && _nativeFilterItem$val.enableNoResults);\n  const hasMetrics = hasColumn && !!metrics.length;\n  const hasFilledDataset = !hasDataset || datasetId && ((formFilter == null ? void 0 : formFilter.column) || !hasColumn);\n  const hasAdditionalFilters = FILTERS_WITH_ADHOC_FILTERS.includes(formFilter == null ? void 0 : formFilter.filterType);\n  const canDependOnOtherFilters = TYPES_SUPPORT_DEPENDENCIES.includes(formFilter == null ? void 0 : formFilter.filterType);\n  const isDataDirty = (_formFilter$isDataDir = formFilter == null ? void 0 : formFilter.isDataDirty) != null ? _formFilter$isDataDir : true;\n  const setNativeFilterFieldValuesWrapper = (values) => {\n    setNativeFilterFieldValues(form, filterId, values);\n    setError(undefined);\n    forceUpdate();\n  };\n  const setErrorWrapper = (error) => {\n    setNativeFilterFieldValues(form, filterId, {\n      defaultValueQueriesData: null\n    });\n    setError(error);\n    forceUpdate();\n  };\n  // Calculates the dependencies default values to be used\n  // to extract the available values to the filter\n  let dependenciesDefaultValues = {};\n  if (dependencies && dependencies.length > 0 && filters) {\n    dependencies.forEach((dependency) => {var _filters$dependency, _filters$dependency$d;\n      const extraFormData = (_filters$dependency = filters[dependency]) == null ? void 0 : (_filters$dependency$d = _filters$dependency.defaultDataMask) == null ? void 0 : _filters$dependency$d.extraFormData;\n      dependenciesDefaultValues = mergeExtraFormData(dependenciesDefaultValues, extraFormData);\n    });\n  }\n  const dependenciesText = JSON.stringify(dependenciesDefaultValues);\n  const refreshHandler = useCallback((force = false) => {var _formFilter$dataset4, _formFilter$dataset5;\n    if (!hasDataset || !(formFilter != null && (_formFilter$dataset4 = formFilter.dataset) != null && _formFilter$dataset4.value)) {\n      forceUpdate();\n      return;\n    }\n    const formData = getFormData({\n      datasetId: formFilter == null ? void 0 : (_formFilter$dataset5 = formFilter.dataset) == null ? void 0 : _formFilter$dataset5.value,\n      dashboardId,\n      groupby: formFilter == null ? void 0 : formFilter.column,\n      ...formFilter\n    });\n    formData.extra_form_data = dependenciesDefaultValues;\n    setNativeFilterFieldValuesWrapper({\n      defaultValueQueriesData: null,\n      isDataDirty: false\n    });\n    getChartDataRequest({\n      formData,\n      force\n    }).\n    then(({ response, json }) => {\n      if (isFeatureEnabled(FeatureFlag.GlobalAsyncQueries)) {\n        // deal with getChartDataRequest transforming the response data\n        const result = 'result' in json ? json.result[0] : json;\n        if (response.status === 200) {\n          setNativeFilterFieldValuesWrapper({\n            defaultValueQueriesData: [result]\n          });\n        } else\n        if (response.status === 202) {\n          waitForAsyncData(result).\n          then((asyncResult) => {\n            setNativeFilterFieldValuesWrapper({\n              defaultValueQueriesData: asyncResult\n            });\n          }).\n          catch((error) => {\n            getClientErrorObject(error).then((clientErrorObject) => {\n              setErrorWrapper(clientErrorObject);\n            });\n          });\n        } else\n        {\n          throw new Error(`Received unexpected response status (${response.status}) while fetching chart data`);\n        }\n      } else\n      {\n        setNativeFilterFieldValuesWrapper({\n          defaultValueQueriesData: json.result\n        });\n      }\n    }).\n    catch((error) => {\n      getClientErrorObject(error).then((clientErrorObject) => {\n        setError(clientErrorObject);\n      });\n    });\n  }, [filterId, forceUpdate, form, formFilter, hasDataset, dependenciesText]);\n  // TODO: refreshHandler changes itself because of the dependencies. Needs refactor.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => refreshHandler(), [dependenciesText]);\n  const newFormData = getFormData({\n    datasetId,\n    groupby: hasColumn ? formFilter == null ? void 0 : formFilter.column : undefined,\n    ...formFilter\n  });\n  newFormData.extra_form_data = dependenciesDefaultValues;\n  const [hasDefaultValue, isRequired, defaultValueTooltip, setHasDefaultValue] = useDefaultValue(formFilter, filterToEdit);\n  const showDataset = !datasetId || datasetDetails || (formFilter == null ? void 0 : (_formFilter$dataset6 = formFilter.dataset) == null ? void 0 : _formFilter$dataset6.label);\n  const updateFormValues = useCallback((values, triggerFormChange = true) => {\n    setNativeFilterFieldValues(form, filterId, values);\n    if (triggerFormChange)\n    formChanged();\n  }, [filterId, form, formChanged]);\n  const hasPreFilter = !!(formFilter != null && formFilter.adhoc_filters) ||\n  !!(formFilter != null && formFilter.time_range) ||\n  !!(filterToEdit != null && (_filterToEdit$adhoc_f = filterToEdit.adhoc_filters) != null && _filterToEdit$adhoc_f.length) ||\n  !!(filterToEdit != null && filterToEdit.time_range);\n  const hasEnableSingleValue = (formFilter == null ? void 0 : (_formFilter$controlVa = formFilter.controlValues) == null ? void 0 : _formFilter$controlVa.enableSingleValue) !== undefined ||\n  (filterToEdit == null ? void 0 : (_filterToEdit$control = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control.enableSingleValue) !== undefined;\n  let enableSingleValue = filterToEdit == null ? void 0 : (_filterToEdit$control2 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control2.enableSingleValue;\n  if ((formFilter == null ? void 0 : (_formFilter$controlVa2 = formFilter.controlValues) == null ? void 0 : _formFilter$controlVa2.enableSingleMaxValue) !== undefined) {\n    ({ enableSingleValue } = formFilter.controlValues);\n  }\n  const hasSorting = typeof (formFilter == null ? void 0 : (_formFilter$controlVa3 = formFilter.controlValues) == null ? void 0 : _formFilter$controlVa3.sortAscending) === 'boolean' ||\n  typeof (filterToEdit == null ? void 0 : (_filterToEdit$control3 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control3.sortAscending) === 'boolean';\n  let sort = filterToEdit == null ? void 0 : (_filterToEdit$control4 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control4.sortAscending;\n  if (typeof (formFilter == null ? void 0 : (_formFilter$controlVa4 = formFilter.controlValues) == null ? void 0 : _formFilter$controlVa4.sortAscending) === 'boolean') {\n    sort = formFilter.controlValues.sortAscending;\n  }\n  const showDefaultValue = !hasDataset ||\n  !isDataDirty && hasFilledDataset ||\n  !mainControlItems.groupby;\n  const onSortChanged = (value) => {var _form$getFieldValue;\n    const previous = (_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId].controlValues;\n    setNativeFilterFieldValues(form, filterId, {\n      controlValues: {\n        ...previous,\n        sortAscending: value\n      }\n    });\n    forceUpdate();\n  };\n  const onEnableSingleValueChanged = (value) => {var _form$getFieldValue2;\n    const previous = (_form$getFieldValue2 = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue2[filterId].controlValues;\n    setNativeFilterFieldValues(form, filterId, {\n      controlValues: {\n        ...previous,\n        enableSingleValue: value\n      }\n    });\n    forceUpdate();\n  };\n  const validatePreFilter = () => setTimeout(() => form.validateFields([\n  ['filters', filterId, 'adhoc_filters'],\n  ['filters', filterId, 'time_range']]\n  ), 0);\n  const hasTimeRange = (formFilter == null ? void 0 : formFilter.time_range) && formFilter.time_range !== 'No filter';\n  const hasAdhoc = (formFilter == null ? void 0 : (_formFilter$adhoc_fil = formFilter.adhoc_filters) == null ? void 0 : _formFilter$adhoc_fil.length) > 0;\n  const defaultToFirstItem = formFilter == null ? void 0 : (_formFilter$controlVa5 = formFilter.controlValues) == null ? void 0 : _formFilter$controlVa5.defaultToFirstItem;\n  const initialDefaultValue = (formFilter == null ? void 0 : formFilter.filterType) === (filterToEdit == null ? void 0 : filterToEdit.filterType) ?\n  filterToEdit == null ? void 0 : filterToEdit.defaultDataMask :\n  null;\n  const preFilterValidator = () => {\n    if (hasTimeRange || hasAdhoc) {\n      return Promise.resolve();\n    }\n    return Promise.reject(new Error(t('Pre-filter is required')));\n  };\n  const availableFilters = getAvailableFilters(filterId);\n  const hasAvailableFilters = availableFilters.length > 0;\n  const hasTimeDependency = availableFilters.\n  filter((filter) => filter.type === 'filter_time').\n  some((filter) => dependencies == null ? void 0 : dependencies.includes(filter.value));\n  useEffect(() => {\n    if (datasetId) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}?q=${rison.encode({\n          columns: [\n          'columns.column_name',\n          'columns.expression',\n          'columns.filterable',\n          'columns.is_dttm',\n          'columns.type',\n          'columns.verbose_name',\n          'database.id',\n          'database.database_name',\n          'datasource_type',\n          'filter_select_enabled',\n          'id',\n          'is_sqllab_view',\n          'main_dttm_col',\n          'metrics.metric_name',\n          'metrics.verbose_name',\n          'schema',\n          'sql',\n          'table_name']\n\n        })}`\n      }).\n      then((response) => {var _response$json, _response$json$result, _response$json2;\n        setMetrics((_response$json = response.json) == null ? void 0 : (_response$json$result = _response$json.result) == null ? void 0 : _response$json$result.metrics);\n        const dataset = (_response$json2 = response.json) == null ? void 0 : _response$json2.result;\n        // modify the response to fit structure expected by AdhocFilterControl\n        dataset.type = dataset.datasource_type;\n        dataset.filter_select = true;\n        setDatasetDetails(dataset);\n      }).\n      catch((response) => {\n        addDangerToast(response.message);\n      });\n    }\n  }, [datasetId]);\n  useImperativeHandle(ref, () => ({\n    changeTab(tab) {\n      setActiveTabKey(tab);\n    }\n  }));\n  useBackendFormUpdate(form, filterId);\n  useEffect(() => {\n    if (hasDataset && hasFilledDataset && hasDefaultValue && isDataDirty) {\n      refreshHandler();\n    }\n  }, [\n  hasDataset,\n  hasFilledDataset,\n  hasDefaultValue,\n  isDataDirty,\n  refreshHandler,\n  showDataset]\n  );\n  const initiallyExcludedCharts = useMemo(() => {var _formFilter$dataset7;\n    const excluded = [];\n    if ((formFilter == null ? void 0 : (_formFilter$dataset7 = formFilter.dataset) == null ? void 0 : _formFilter$dataset7.value) === undefined) {\n      return [];\n    }\n    Object.values(charts).forEach((chart) => {var _chart$form_data, _loadedDatasets$chart, _formFilter$dataset8;\n      const chartDatasetUid = (_chart$form_data = chart.form_data) == null ? void 0 : _chart$form_data.datasource;\n      if (chartDatasetUid === undefined) {\n        return;\n      }\n      if (((_loadedDatasets$chart = loadedDatasets[chartDatasetUid]) == null ? void 0 : _loadedDatasets$chart.id) !== (formFilter == null ? void 0 : (_formFilter$dataset8 = formFilter.dataset) == null ? void 0 : _formFilter$dataset8.value)) {\n        excluded.push(chart.id);\n      }\n    });\n    return excluded;\n  }, [\n  JSON.stringify(charts),\n  formFilter == null ? void 0 : (_formFilter$dataset9 = formFilter.dataset) == null ? void 0 : _formFilter$dataset9.value,\n  JSON.stringify(loadedDatasets)]\n  );\n  useEffect(() => {\n    // just removed, saving current form items for eventual undo\n    if (isRemoved) {\n      setUndoFormValues(formValues);\n    }\n  }, [isRemoved]);\n  useEffect(() => {\n    // the filter was just restored after undo\n    if (undoFormValues && !isRemoved) {\n      setNativeFilterFieldValues(form, filterId, undoFormValues);\n      setUndoFormValues(null);\n    }\n  }, [formValues, filterId, form, isRemoved, undoFormValues]);\n  if (isRemoved) {\n    return _jsx(RemovedFilter, { onClick: () => restoreFilter(filterId) });\n  }\n  const timeColumn = _jsx(StyledRowFormItem, { expanded: expanded, name: ['filters', filterId, 'granularity_sqla'], label: _jsxs(_Fragment, { children: [\n      _jsx(StyledLabel, { children: t('Time column') }), \"\\xA0\",\n      _jsx(InfoTooltipWithTrigger, { placement: \"top\", tooltip: hasTimeDependency ?\n        t('Time column to apply dependent temporal filter to') :\n        t('Time column to apply time range to') })] }\n    ), initialValue: filterToEdit == null ? void 0 : filterToEdit.granularity_sqla, children:\n    _jsx(ColumnSelect, { allowClear: true, form: form, formField: \"granularity_sqla\", filterId: filterId, filterValues: (column) => !!column.is_dttm, datasetId: datasetId, onChange: (column) => {\n        // We need reset default value when column changed\n        setNativeFilterFieldValues(form, filterId, {\n          granularity_sqla: column\n        });\n        forceUpdate();\n        formChanged();\n      } }) }\n  );\n  return _jsxs(StyledTabs, { activeKey: activeTabKey, onChange: (activeKey) => setActiveTabKey(activeKey), centered: true, children: [\n    _jsxs(TabPane, { tab: FilterTabs.configuration.name, forceRender: true, children: [\n      _jsxs(StyledContainer, { children: [\n        _jsx(StyledFormItem, { expanded: expanded, name: ['filters', filterId, 'type'], hidden: true, initialValue: NativeFilterType.NativeFilter, children:\n          _jsx(Input, { onChange: formChanged }) }\n        ),\n        _jsx(StyledFormItem, { expanded: expanded, name: ['filters', filterId, 'name'], label: _jsx(StyledLabel, { children: t('Filter name') }), initialValue: filterToEdit == null ? void 0 : filterToEdit.name, rules: [{ required: !isRemoved, message: t('Name is required') }], children:\n          _jsx(Input, { ...getFiltersConfigModalTestId('name-input'), onChange: debouncedFormChanged }) }\n        ),\n        _jsx(StyledFormItem, { expanded: expanded, name: ['filters', filterId, 'filterType'], rules: [{ required: !isRemoved, message: t('Name is required') }], initialValue: (filterToEdit == null ? void 0 : filterToEdit.filterType) || 'filter_select', label: _jsx(StyledLabel, { children: t('Filter Type') }), ...getFiltersConfigModalTestId('filter-type'), children:\n          _jsx(Select, { ariaLabel: t('Filter type'), options: nativeFilterVizTypes.map((filterType) => {var _nativeFilterItems$fi, _FILTER_SUPPORTED_TYP, _FILTER_SUPPORTED_TYP2;\n              // @ts-ignore\n              const name = (_nativeFilterItems$fi = nativeFilterItems[filterType]) == null ? void 0 : _nativeFilterItems$fi.value.name;\n              const mappedName = name ?\n              FILTER_TYPE_NAME_MAPPING[name] :\n              undefined;\n              const isDisabled = ((_FILTER_SUPPORTED_TYP = FILTER_SUPPORTED_TYPES[filterType]) == null ? void 0 : _FILTER_SUPPORTED_TYP.length) === 1 && ((_FILTER_SUPPORTED_TYP2 =\n              FILTER_SUPPORTED_TYPES[filterType]) == null ? void 0 : _FILTER_SUPPORTED_TYP2.includes(GenericDataType.Temporal)) &&\n              !doLoadedDatasetsHaveTemporalColumns;\n              return {\n                value: filterType,\n                label: mappedName || name,\n                customLabel: isDisabled ? _jsx(Tooltip, { title: t('Datasets do not contain a temporal column'), children:\n                  mappedName || name }\n                ) : undefined,\n                disabled: isDisabled\n              };\n            }), onChange: (value) => {\n              setNativeFilterFieldValues(form, filterId, {\n                filterType: value,\n                defaultDataMask: null,\n                column: null\n              });\n              forceUpdate();\n              formChanged();\n            } }) }\n        )] }\n      ),\n      (formFilter == null ? void 0 : formFilter.filterType) === 'filter_time' && _jsx(FilterTypeInfo, { expanded: expanded, children:\n        t(`Dashboard time range filters apply to temporal columns defined in\n          the filter section of each chart. Add temporal columns to the chart\n          filters to have this dashboard filter impact those charts.`) }\n      ),\n      hasDataset && _jsxs(StyledRowContainer, { children: [\n        showDataset ? _jsx(StyledFormItem, { expanded: expanded, name: ['filters', filterId, 'dataset'], label: _jsx(StyledLabel, { children: t('Dataset') }), initialValue: datasetDetails ?\n          {\n            label: DatasetSelectLabel({\n              id: datasetDetails.id,\n              table_name: datasetDetails.table_name,\n              schema: datasetDetails.schema,\n              database: {\n                database_name: datasetDetails.database.database_name\n              }\n            }),\n            value: datasetDetails.id\n          } :\n          undefined, rules: [\n          { required: !isRemoved, message: t('Dataset is required') }], ...\n          getFiltersConfigModalTestId('datasource-input'), children:\n          _jsx(DatasetSelect, { onChange: (value) => {\n              // We need to reset the column when the dataset has changed\n              if (value.value !== datasetId) {\n                setNativeFilterFieldValues(form, filterId, {\n                  dataset: value,\n                  defaultDataMask: null,\n                  column: null\n                });\n              }\n              forceUpdate();\n              formChanged();\n            } }) }\n        ) : _jsx(StyledFormItem, { expanded: expanded, label: _jsx(StyledLabel, { children: t('Dataset') }), children:\n          _jsx(Loading, { position: \"inline-centered\" }) }\n        ),\n        hasDataset &&\n        Object.keys(mainControlItems).map((key) => mainControlItems[key].element)] }\n      ),\n      _jsxs(StyledCollapse, { defaultActiveKey: activeFilterPanelKeys, onChange: (key) => {\n          handleActiveFilterPanelChange(key);\n        }, expandIconPosition: \"right\", children: [\n        (formFilter == null ? void 0 : formFilter.filterType) !== 'filter_time' && _jsxs(Collapse.Panel, { forceRender: true, header: FilterPanels.configuration.name, children: [\n          canDependOnOtherFilters && hasAvailableFilters && _jsx(StyledRowFormItem, { expanded: expanded, name: ['filters', filterId, 'dependencies'], initialValue: dependencies, children:\n            _jsx(DependencyList, { availableFilters: availableFilters, dependencies: dependencies, onDependenciesChange: (dependencies) => {\n                setNativeFilterFieldValues(form, filterId, {\n                  dependencies\n                });\n                forceUpdate();\n                validateDependencies();\n                formChanged();\n              }, getDependencySuggestion: () => getDependencySuggestion(filterId), children:\n              hasTimeDependency ? timeColumn : undefined }\n            ) }\n          ),\n          hasDataset && hasAdditionalFilters && _jsx(CleanFormItem, { name: ['filters', filterId, 'preFilter'], children:\n            _jsxs(CollapsibleControl, { initialValue: hasPreFilter, title: t('Pre-filter available values'), tooltip: t(`Add filter clauses to control the filter's source query,\n                    though only in the context of the autocomplete i.e., these conditions\n                    do not impact how the filter is applied to the dashboard. This is useful\n                    when you want to improve the query's performance by only scanning a subset\n                    of the underlying data or limit the available values displayed in the filter.`), onChange: (checked) => {\n                formChanged();\n                if (checked) {\n                  validatePreFilter();\n                }\n              }, children: [\n              _jsx(StyledRowSubFormItem, { expanded: expanded, name: ['filters', filterId, 'adhoc_filters'], css: /*#__PURE__*/_css({ width: INPUT_WIDTH }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:FiltersConfigForm;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), initialValue: filterToEdit == null ? void 0 : filterToEdit.adhoc_filters, required: true, rules: [\n                {\n                  validator: preFilterValidator\n                }], children:\n\n                _jsx(AdhocFilterControl, { columns: (datasetDetails == null ? void 0 : (_datasetDetails$colum = datasetDetails.columns) == null ? void 0 : _datasetDetails$colum.filter((c) => c.filterable)) || [], savedMetrics: (datasetDetails == null ? void 0 : datasetDetails.metrics) || [], datasource: datasetDetails, onChange: (filters) => {\n                    setNativeFilterFieldValues(form, filterId, {\n                      adhoc_filters: filters\n                    });\n                    forceUpdate();\n                    formChanged();\n                    validatePreFilter();\n                  }, label: _jsxs(\"span\", { children: [\n                    _jsx(StyledLabel, { children: t('Pre-filter') }),\n                    !hasTimeRange && _jsx(StyledAsterisk, {})] }\n                  ) }) }\n              ),\n              showTimeRangePicker && _jsx(StyledRowFormItem, { expanded: expanded, name: ['filters', filterId, 'time_range'], label: _jsx(StyledLabel, { children: t('Time range') }), initialValue: (filterToEdit == null ? void 0 : filterToEdit.time_range) || t('No filter'), required: !hasAdhoc, rules: [\n                {\n                  validator: preFilterValidator\n                }], children:\n\n                _jsx(DateFilterControl, { name: \"time_range\", onChange: (timeRange) => {\n                    setNativeFilterFieldValues(form, filterId, {\n                      time_range: timeRange\n                    });\n                    forceUpdate();\n                    formChanged();\n                    validatePreFilter();\n                  } }) }\n              ),\n              hasTimeRange && !hasTimeDependency ?\n              timeColumn :\n              undefined] }\n            ) }\n          ),\n          (formFilter == null ? void 0 : formFilter.filterType) !== 'filter_range' ? _jsx(CleanFormItem, { name: ['filters', filterId, 'sortFilter'], children:\n            _jsxs(CollapsibleControl, { initialValue: hasSorting, title: t('Sort filter values'), onChange: (checked) => {\n                onSortChanged(checked || undefined);\n                formChanged();\n              }, children: [\n              _jsx(StyledRowFormItem, { expanded: expanded, name: [\n                'filters',\n                filterId,\n                'controlValues',\n                'sortAscending'],\n                initialValue: sort, label: _jsx(StyledLabel, { children: t('Sort type') }), children:\n                _jsx(Radio.GroupWrapper, { options: [\n                  { value: true, label: t('Sort ascending') },\n                  { value: false, label: t('Sort descending') }],\n                  onChange: (value) => {\n                    onSortChanged(value.target.value);\n                    formChanged();\n                  } }) }\n              ),\n              hasMetrics && _jsx(StyledRowSubFormItem, { expanded: expanded, name: ['filters', filterId, 'sortMetric'], initialValue: filterToEdit == null ? void 0 : filterToEdit.sortMetric, label: _jsxs(_Fragment, { children: [\n                  _jsx(StyledLabel, { children: t('Sort Metric') }), \"\\xA0\",\n                  _jsx(InfoTooltipWithTrigger, { placement: \"top\", tooltip: t('If a metric is specified, sorting will be done based on the metric value') })] }\n                ), children:\n                _jsx(Select, { allowClear: true, ariaLabel: t('Sort metric'), name: \"sortMetric\", options: metrics.map((metric) => {var _metric$verbose_name;return {\n                      value: metric.metric_name,\n                      label: (_metric$verbose_name = metric.verbose_name) != null ? _metric$verbose_name : metric.metric_name\n                    };}), onChange: (value) => {\n                    if (value !== undefined) {\n                      setNativeFilterFieldValues(form, filterId, {\n                        sortMetric: value\n                      });\n                      forceUpdate();\n                    }\n                    formChanged();\n                  } }) }\n              )] }\n            ) }\n          ) : _jsx(CleanFormItem, { name: ['filters', filterId, 'rangeFilter'], children:\n            _jsx(CollapsibleControl, { initialValue: hasEnableSingleValue, title: t('Single Value'), onChange: (checked) => {\n                onEnableSingleValueChanged(checked ? SingleValueType.Exact : undefined);\n                formChanged();\n              }, children:\n              _jsx(StyledRowFormItem, { expanded: expanded, name: [\n                'filters',\n                filterId,\n                'controlValues',\n                'enableSingleValue'],\n                initialValue: enableSingleValue, label: _jsx(StyledLabel, { children: t('Single value type') }), children:\n                _jsx(Radio.GroupWrapper, { onChange: (value) => {\n                    onEnableSingleValueChanged(value.target.value);\n                    formChanged();\n                  }, options: [\n                  {\n                    label: t('Minimum'),\n                    value: SingleValueType.Minimum\n                  },\n                  { label: t('Exact'), value: SingleValueType.Exact },\n                  {\n                    label: t('Maximum'),\n                    value: SingleValueType.Maximum\n                  }] }\n                ) }\n              ) }\n            ) }\n          )] }, `${filterId}-${FilterPanels.configuration.key}`\n        ),\n        _jsxs(Collapse.Panel, { forceRender: true, header: FilterPanels.settings.name, children: [\n          _jsx(StyledFormItem, { expanded: expanded, name: ['filters', filterId, 'description'], initialValue: filterToEdit == null ? void 0 : filterToEdit.description, label: _jsx(StyledLabel, { children: t('Description') }), children:\n            _jsx(TextArea, { onChange: debouncedFormChanged }) }\n          ),\n          _jsx(CleanFormItem, { name: ['filters', filterId, 'defaultValueQueriesData'], hidden: true, initialValue: null }),\n          _jsx(CleanFormItem, { name: ['filters', filterId, 'defaultValue'], children:\n            _jsx(CollapsibleControl, { checked: hasDefaultValue, disabled: isRequired || defaultToFirstItem, initialValue: hasDefaultValue, title: t('Filter has default value'), tooltip: defaultValueTooltip, onChange: (value) => {\n                setHasDefaultValue(value);\n                if (!value) {\n                  setNativeFilterFieldValues(form, filterId, {\n                    defaultDataMask: null\n                  });\n                }\n                formChanged();\n              }, children:\n              !isRemoved && _jsx(StyledRowSubFormItem, { expanded: expanded, name: ['filters', filterId, 'defaultDataMask'], initialValue: initialDefaultValue, label: _jsx(StyledLabel, { children: t('Default Value') }), required: hasDefaultValue, rules: [\n                {\n                  validator: () => {var _formFilter$defaultDa, _formFilter$defaultDa2;\n                    if (formFilter != null && (_formFilter$defaultDa = formFilter.defaultDataMask) != null && (_formFilter$defaultDa2 = _formFilter$defaultDa.filterState) != null && _formFilter$defaultDa2.value) {\n                      // requires managing the error as the DefaultValue\n                      // component does not use an Antdesign compatible input\n                      const formValidationFields = form.getFieldsError();\n                      setErroredFilters((prevErroredFilters) => {\n                        if (prevErroredFilters.length &&\n                        !formValidationFields.find((f) => f.errors.length > 0)) {\n                          return [];\n                        }\n                        return prevErroredFilters;\n                      });\n                      return Promise.resolve();\n                    }\n                    setErroredFilters((prevErroredFilters) => {\n                      if (prevErroredFilters.includes(filterId)) {\n                        return prevErroredFilters;\n                      }\n                      return [...prevErroredFilters, filterId];\n                    });\n                    return Promise.reject(new Error(t('Please choose a valid value')));\n                  }\n                }], children:\n\n                error || showDefaultValue ? _jsxs(DefaultValueContainer, { children: [\n                  error ? _jsx(ErrorMessageWithStackTrace, { error: (_error$errors = error.errors) == null ? void 0 : _error$errors[0], fallback: _jsx(BasicErrorAlert, { title: t('Cannot load filter'), body: error.error, level: \"error\" }) }) : _jsx(DefaultValue, { setDataMask: (dataMask) => {var _initialDefaultValue$, _dataMask$filterState;\n                      if (!_isEqual(initialDefaultValue == null ? void 0 : (_initialDefaultValue$ = initialDefaultValue.filterState) == null ? void 0 : _initialDefaultValue$.value, dataMask == null ? void 0 : (_dataMask$filterState = dataMask.filterState) == null ? void 0 : _dataMask$filterState.value)) {\n                        formChanged();\n                      }\n                      setNativeFilterFieldValues(form, filterId, {\n                        defaultDataMask: dataMask\n                      });\n                      form.validateFields([\n                      ['filters', filterId, 'defaultDataMask']]\n                      );\n                      forceUpdate();\n                    }, hasDefaultValue: hasDefaultValue, filterId: filterId, hasDataset: hasDataset, form: form, formData: newFormData, enableNoResults: enableNoResults }),\n                  hasDataset && datasetId && _jsx(Tooltip, { title: t('Refresh the default values'), children:\n                    _jsx(Icons.SyncOutlined, { iconSize: \"xl\", iconColor: theme.colors.primary.base, css: css`\n                                margin-left: ${theme.gridUnit * 2}px;\n                              `, onClick: () => refreshHandler(true) }) }\n                  )] }\n                ) : t('Fill all required fields to enable \"Default Value\"') }\n              ) }\n            ) }\n          ),\n          Object.keys(controlItems).\n          sort((a, b) => controlsOrder.indexOf(a) -\n          controlsOrder.indexOf(b)).\n          map((key) => controlItems[key].element)] }, `${filterId}-${FilterPanels.settings.key}`\n        )] }, `native-filter-config-${filterId}`\n      )] }, FilterTabs.configuration.key\n    ),\n    _jsx(TabPane, { tab: FilterTabs.scoping.name, forceRender: true, children:\n      _jsx(FilterScope, { updateFormValues: updateFormValues, pathToFormValue: ['filters', filterId], forceUpdate: forceUpdate, filterScope: filterToEdit == null ? void 0 : filterToEdit.scope, formFilterScope: formFilter == null ? void 0 : formFilter.scope, initiallyExcludedCharts: initiallyExcludedCharts }) }, FilterTabs.scoping.key\n    )] }\n  );\n};\nexport default /*#__PURE__*/memo(/*#__PURE__*/forwardRef(FiltersConfigForm));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}