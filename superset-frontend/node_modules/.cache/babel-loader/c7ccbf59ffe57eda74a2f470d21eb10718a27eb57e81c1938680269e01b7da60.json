{"ast":null,"code":"import { formatNumber, formatTime, getTextDimension, useTheme } from '@superset-ui/core';\nimport { GridRows } from '@visx/grid';\nimport { scaleLinear } from '@visx/scale';\nimport { Axis, LineSeries, Tooltip, XYChart, buildChartTheme } from '@visx/xychart';\nimport { extendedDayjs } from 'src/utils/dates';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst MARGIN = {\n  top: 8,\n  right: 8,\n  bottom: 8,\n  left: 8\n};\nfunction getSparklineTextWidth(text) {\n  return getTextDimension({\n    text,\n    style: {\n      fontSize: '12px',\n      fontWeight: 200,\n      letterSpacing: 0.4\n    }\n  }).width + 5;\n}\nfunction isValidBoundValue(value) {\n  return value !== null &&\n  value !== undefined &&\n  value !== '' &&\n  !Number.isNaN(value);\n}\nconst SparklineCell = ({ ariaLabel, dataKey, data, width = 300, height = 50, numberFormat = '', dateFormat = '', yAxisBounds = [undefined, undefined], showYAxis = false, entries = [] }) => {\n  const theme = useTheme();\n  const xyTheme = buildChartTheme({\n    backgroundColor: `${theme.colors.grayscale.light5}`,\n    colors: [`${theme.colors.grayscale.base}`],\n    gridColor: `${theme.colors.grayscale.light1}`,\n    gridColorDark: `${theme.colors.grayscale.base}`,\n    tickLength: 6\n  });\n  const yScaleConfig = {\n    type: 'linear',\n    zero: false\n  };\n  let hasMinBound = false;\n  let hasMaxBound = false;\n  let min = data.reduce((acc, current) => Math.min(acc, current), data[0]);\n  let max = data.reduce((acc, current) => Math.max(acc, current), data[0]);\n  if (yAxisBounds) {\n    const [minBound, maxBound] = yAxisBounds;\n    hasMinBound = isValidBoundValue(minBound);\n    if (hasMinBound) {\n      if (minBound !== undefined && minBound <= 0) {\n        yScaleConfig.zero = true;\n      }\n      min = minBound || min;\n    }\n    hasMaxBound = isValidBoundValue(maxBound);\n    if (hasMaxBound) {\n      max = maxBound || max;\n    }\n    yScaleConfig.domain = [min, max];\n  }\n  let minLabel;\n  let maxLabel;\n  let labelLength = 0;\n  if (showYAxis) {\n    yScaleConfig.domain = [min, max];\n    minLabel = formatNumber(numberFormat, min);\n    maxLabel = formatNumber(numberFormat, max);\n    labelLength = Math.max(getSparklineTextWidth(minLabel), getSparklineTextWidth(maxLabel));\n  }\n  const margin = {\n    ...MARGIN,\n    right: MARGIN.right + labelLength\n  };\n  const innerWidth = width - margin.left - margin.right;\n  const chartData = data.map((num, idx) => ({\n    x: idx,\n    y: num\n  }));\n  const xAccessor = (d) => d.x;\n  const yAccessor = (d) => d.y;\n  return _jsxs(_Fragment, { children: [\n    _jsxs(XYChart, { accessibilityLabel: ariaLabel, width: width, height: height, margin: margin, yScale: {\n        ...yScaleConfig\n      }, xScale: { type: 'band', paddingInner: 0.5 }, theme: xyTheme, children: [\n      showYAxis && _jsx(Axis, { hideAxisLine: true, hideTicks: true, numTicks: 2, orientation: \"right\", tickFormat: (d) => formatNumber(numberFormat, d), tickValues: [min, max] }),\n      showYAxis && min !== undefined && max !== undefined && _jsx(GridRows, { left: margin.left, scale: scaleLinear({\n          range: [height - margin.top, margin.bottom],\n          domain: [min, max]\n        }), width: innerWidth, strokeDasharray: \"3 3\", stroke: `${theme.colors.grayscale.light1}`, tickValues: [min, max] }),\n      _jsx(LineSeries, { data: chartData, dataKey: dataKey, xAccessor: xAccessor, yAccessor: yAccessor }),\n      _jsx(Tooltip, { glyphStyle: { strokeWidth: 1 }, showDatumGlyph: true, showVerticalCrosshair: true, snapTooltipToDatumX: true, snapTooltipToDatumY: true, verticalCrosshairStyle: {\n          stroke: `${theme.colors.grayscale.dark1}`,\n          strokeDasharray: '3 3',\n          strokeWidth: 1\n        }, renderTooltip: ({ tooltipData }) => {\n          const idx = tooltipData == null ? void 0 : tooltipData.datumByKey[dataKey].index;\n          return _jsxs(\"div\", { children: [\n            _jsx(\"strong\", { children:\n              idx !== undefined && formatNumber(numberFormat, data[idx]) }\n            ),\n            _jsx(\"div\", { children:\n              idx !== undefined &&\n              formatTime(dateFormat, extendedDayjs.utc(entries[idx].time).toDate()) }\n            )] }\n          );\n        } })] }\n    ),\n    _jsx(\"style\", { children:\n      `svg:not(:root) {\n            overflow: visible;\n          }` }\n    )] }\n  );\n};\nexport default SparklineCell;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}