{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { ensureIsArray, SupersetClient, t } from '@superset-ui/core';\n\nimport rison from 'rison';\nconst INITIAL_ADVANCED_DATA_TYPES_STATE = {\n  parsedAdvancedDataType: '',\n  advancedDataTypeOperatorList: [],\n  errorMessage: ''\n};\nconst useAdvancedDataTypes = (validHandler) => {\n  const [advancedDataTypesState, setAdvancedDataTypesState] = useState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n  const [subjectAdvancedDataType, setSubjectAdvancedDataType] = useState();\n  const fetchAdvancedDataTypeValueCallback = useCallback((comp, advancedDataTypesState, subjectAdvancedDataType) => {\n    const values = ensureIsArray(comp);\n    if (!subjectAdvancedDataType) {\n      setAdvancedDataTypesState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n      return;\n    }\n    _debounce(() => {\n      const queryParams = rison.encode({\n        type: subjectAdvancedDataType,\n        values\n      });\n      const endpoint = `/api/v1/advanced_data_type/convert?q=${queryParams}`;\n      SupersetClient.get({ endpoint }).\n      then(({ json }) => {\n        setAdvancedDataTypesState({\n          parsedAdvancedDataType: json.result.display_value,\n          advancedDataTypeOperatorList: json.result.valid_filter_operators,\n          errorMessage: json.result.error_message\n        });\n        // Changed due to removal of status field\n        validHandler(!json.result.error_message);\n      }).\n      catch(() => {\n        setAdvancedDataTypesState({\n          parsedAdvancedDataType: '',\n          advancedDataTypeOperatorList: advancedDataTypesState.advancedDataTypeOperatorList,\n          errorMessage: t('Failed to retrieve advanced type')\n        });\n        validHandler(false);\n      });\n    }, 600)();\n  }, [validHandler]);\n  const fetchSubjectAdvancedDataType = (props) => {\n    const option = props.options.find((option) => 'column_name' in option &&\n    option.column_name === props.adhocFilter.subject ||\n    'optionName' in option &&\n    option.optionName === props.adhocFilter.subject);\n    if (option && 'advanced_data_type' in option) {\n      setSubjectAdvancedDataType(option.advanced_data_type);\n    } else\n    {\n      props.validHandler(true);\n    }\n  };\n  return {\n    advancedDataTypesState,\n    subjectAdvancedDataType,\n    setAdvancedDataTypesState,\n    fetchAdvancedDataTypeValueCallback,\n    fetchSubjectAdvancedDataType\n  };\n};\nexport default useAdvancedDataTypes;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}