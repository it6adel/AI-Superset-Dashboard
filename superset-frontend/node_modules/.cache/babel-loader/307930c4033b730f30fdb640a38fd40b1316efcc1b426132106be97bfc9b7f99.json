{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport ChartContextMenu from './ChartContextMenu';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const useContextMenu = (chartId, formData, onSelection, displayedItems, additionalConfig) => {\n  const contextMenuRef = useRef(null);\n  const [inContextMenu, setInContextMenu] = useState(false);\n  const onContextMenu = (offsetX, offsetY, filters) => {var _contextMenuRef$curre;\n    (_contextMenuRef$curre = contextMenuRef.current) == null ? void 0 : _contextMenuRef$curre.open(offsetX, offsetY, filters);\n    setInContextMenu(true);\n  };\n  const handleContextMenuSelected = useCallback((...args) => {\n    setInContextMenu(false);\n    onSelection == null ? void 0 : onSelection(...args);\n  }, [onSelection]);\n  const handleContextMenuClosed = useCallback(() => {\n    setInContextMenu(false);\n  }, []);\n  const contextMenu = useMemo(() => _jsx(ChartContextMenu, { ref: contextMenuRef, id: chartId, formData: formData, onSelection: handleContextMenuSelected, onClose: handleContextMenuClosed, displayedItems: displayedItems, additionalConfig: additionalConfig }), [\n  additionalConfig,\n  chartId,\n  displayedItems,\n  formData,\n  handleContextMenuClosed,\n  handleContextMenuSelected]\n  );\n  return { contextMenu, inContextMenu, onContextMenu };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}