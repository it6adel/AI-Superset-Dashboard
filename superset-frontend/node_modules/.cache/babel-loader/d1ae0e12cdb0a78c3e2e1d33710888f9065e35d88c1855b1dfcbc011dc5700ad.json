{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo } from 'react';\nexport const NULL_STRING = 'NULL';\nexport function useCellContentParser({ columnKeys, expandedColumns }) {\n  // columns that have complex type and were expanded into sub columns\n  const complexColumns = useMemo(() => columnKeys.reduce((obj, key) => ({\n    ...obj,\n    [key]: expandedColumns == null ? void 0 : expandedColumns.some((name) => name.startsWith(`${key}.`))\n  }), {}), [expandedColumns, columnKeys]);\n  return useCallback(({ cellData, columnKey }) => {\n    if (cellData === null) {\n      return NULL_STRING;\n    }\n    const content = String(cellData);\n    const firstCharacter = content.substring(0, 1);\n    let truncated;\n    if (firstCharacter === '[') {\n      truncated = '[…]';\n    } else\n    if (firstCharacter === '{') {\n      truncated = '{…}';\n    } else\n    {\n      truncated = '';\n    }\n    return complexColumns[columnKey] ? truncated : content;\n  }, [complexColumns]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}