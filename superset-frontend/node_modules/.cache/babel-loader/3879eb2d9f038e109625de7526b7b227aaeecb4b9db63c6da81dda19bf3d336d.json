{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Suspense } from 'react';\nimport { t } from '@superset-ui/core';\nimport backgroundStyleOptions from 'src/dashboard/util/backgroundStyleOptions';\nimport cx from 'classnames';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { Draggable } from '../dnd/DragDroppable';\nimport { COLUMN_TYPE, ROW_TYPE } from '../../util/componentTypes';\nimport WithPopoverMenu from '../menu/WithPopoverMenu';\nimport ResizableContainer from '../resizable/ResizableContainer';\nimport { BACKGROUND_TRANSPARENT, GRID_BASE_UNIT, GRID_MIN_COLUMN_COUNT } from '../../util/constants';\nimport HoverMenu from '../menu/HoverMenu';\nimport DeleteComponentButton from '../DeleteComponentButton';\nimport BackgroundStyleDropdown from '../menu/BackgroundStyleDropdown';\nimport dashboardComponents from '../../../visualizations/presets/dashboardComponents';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DynamicComponent = ({ component, parentComponent, index, depth, handleComponentDrop, editMode, columnWidth, availableColumnCount, onResizeStart, onResizeStop, onResize, deleteComponent, parentId, updateComponents, id }) => {\n  // inherit the size of parent columns\n  const widthMultiple = parentComponent.type === COLUMN_TYPE ?\n  parentComponent.meta.width || GRID_MIN_COLUMN_COUNT :\n  component.meta.width || GRID_MIN_COLUMN_COUNT;\n  const handleDeleteComponent = () => {\n    deleteComponent(id, parentId);\n  };\n  const rowStyle = backgroundStyleOptions.find((opt) => opt.value === (component.meta.background || BACKGROUND_TRANSPARENT));\n  const updateMeta = (metaKey, nextValue) => {\n    updateComponents({\n      [component.id]: {\n        ...component,\n        meta: {\n          ...component.meta,\n          [metaKey]: nextValue\n        }\n      }\n    });\n  };\n  const { Component } = dashboardComponents.get(component.meta.componentKey);\n  const dashboardData = useSelector(({ nativeFilters, dataMask }) => ({\n    nativeFilters,\n    dataMask\n  }), shallowEqual);\n  return _jsx(Draggable\n  // @ts-ignore\n  , { component: component\n    // @ts-ignore\n    , parentComponent: parentComponent, orientation: parentComponent.type === ROW_TYPE ? 'column' : 'row', index: index, depth: depth, onDrop: handleComponentDrop, editMode: editMode, children:\n    ({ dragSourceRef }) => _jsx(WithPopoverMenu, { menuItems: [\n      _jsx(BackgroundStyleDropdown, { id: `${component.id}-background`, value: component.meta.background, onChange: (value) => updateMeta('background', value) })],\n      editMode: editMode, children:\n      _jsx(\"div\", { className: cx('dashboard-component', `dashboard-${component.componentKey}`, rowStyle == null ? void 0 : rowStyle.className), id: component.id, children:\n        _jsx(ResizableContainer, { id: component.id, editMode: editMode, adjustableWidth: parentComponent.type === ROW_TYPE, widthStep: columnWidth, widthMultiple: widthMultiple, heightStep: GRID_BASE_UNIT, adjustableHeight: false, heightMultiple: component.meta.height, minWidthMultiple: GRID_MIN_COLUMN_COUNT, minHeightMultiple: GRID_MIN_COLUMN_COUNT, maxWidthMultiple: availableColumnCount + widthMultiple, onResizeStart: onResizeStart, onResize: onResize, onResizeStop: onResizeStop, children:\n          _jsxs(\"div\", { ref: dragSourceRef, className: \"dashboard-component\", children: [\n            editMode && _jsx(HoverMenu, { position: \"top\", children:\n              _jsx(DeleteComponentButton, { onDelete: handleDeleteComponent }) }\n            ),\n            _jsx(Suspense, { fallback: _jsx(\"div\", { children: t('Loading...') }), children:\n              _jsx(Component, { dashboardData: dashboardData }) }\n            )] }\n          ) }\n        ) }\n      ) }\n    ) }\n  );\n};\nexport default DynamicComponent;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}