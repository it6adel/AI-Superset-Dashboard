{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { TOOLTIP_OVERFLOW_MARGIN, TOOLTIP_POINTER_MARGIN } from '../constants';\nexport function getDefaultTooltip(refs) {\n  return {\n    appendToBody: true,\n    borderColor: 'transparent',\n    // CSS hack applied on this class to resolve https://github.com/apache/superset/issues/30058\n    className: 'echarts-tooltip',\n    position: (canvasMousePos, params, tooltipDom, rect, sizes) => {var _refs$divRef, _refs$divRef$current;\n      // algorithm partially based on this snippet:\n      // https://github.com/apache/echarts/issues/5004#issuecomment-559668309\n      // The chart canvas position\n      const divRect = (_refs$divRef = refs.divRef) == null ? void 0 : (_refs$divRef$current = _refs$divRef.current) == null ? void 0 : _refs$divRef$current.getBoundingClientRect();\n      // The mouse coordinates relative to the whole window\n      // The first parameter to the position function is the mouse position relative to the canvas\n      const mouseX = canvasMousePos[0] + ((divRect == null ? void 0 : divRect.x) || 0);\n      const mouseY = canvasMousePos[1] + ((divRect == null ? void 0 : divRect.y) || 0);\n      // The width and height of the tooltip dom element\n      const tooltipWidth = sizes.contentSize[0];\n      const tooltipHeight = sizes.contentSize[1];\n      // Start by placing the tooltip top and right relative to the mouse position\n      let xPos = mouseX + TOOLTIP_POINTER_MARGIN;\n      let yPos = mouseY - TOOLTIP_POINTER_MARGIN - tooltipHeight;\n      // The tooltip is overflowing past the right edge of the window\n      if (xPos + tooltipWidth >= document.documentElement.clientWidth) {\n        // Attempt to place the tooltip to the left of the mouse position\n        xPos = mouseX - TOOLTIP_POINTER_MARGIN - tooltipWidth;\n        // The tooltip is overflowing past the left edge of the window\n        if (xPos <= 0)\n          // Place the tooltip a fixed distance from the left edge of the window\n          xPos = TOOLTIP_OVERFLOW_MARGIN;\n      }\n      // The tooltip is overflowing past the top edge of the window\n      if (yPos <= 0) {\n        // Attempt to place the tooltip to the bottom of the mouse position\n        yPos = mouseY + TOOLTIP_POINTER_MARGIN;\n        // The tooltip is overflowing past the bottom edge of the window\n        if (yPos + tooltipHeight >= document.documentElement.clientHeight)\n          // Place the tooltip a fixed distance from the top edge of the window\n          yPos = TOOLTIP_OVERFLOW_MARGIN;\n      }\n      // Return the position (converted back to a relative position on the canvas)\n      return [xPos - ((divRect == null ? void 0 : divRect.x) || 0), yPos - ((divRect == null ? void 0 : divRect.y) || 0)];\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}