{"ast":null,"code":"/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  css,\n  DatasourceType,\n  SupersetClient,\n  styled,\n  t,\n  withTheme } from\n'@superset-ui/core';\nimport { getTemporalColumns } from '@superset-ui/chart-controls';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Menu } from 'src/components/Menu';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport {\n  ChangeDatasourceModal,\n  DatasourceModal } from\n'src/components/Datasource';\nimport Button from 'src/components/Button';\nimport ErrorAlert from 'src/components/ErrorMessage/ErrorAlert';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { URL_PARAMS } from 'src/constants';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport {\n  userHasPermission,\n  isUserAdmin } from\n'src/dashboard/util/permissionUtils';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport ViewQueryModalFooter from 'src/explore/components/controls/ViewQueryModalFooter';\nimport ViewQuery from 'src/explore/components/controls/ViewQuery';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { Link } from 'react-router-dom';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  datasource: PropTypes.object.isRequired,\n  form_data: PropTypes.object.isRequired,\n  isEditable: PropTypes.bool,\n  onDatasourceSave: PropTypes.func\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  onDatasourceSave: null,\n  value: null,\n  isEditable: true\n};\n\nconst Styles = styled.div`\n  .data-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    padding: ${({ theme }) => 4 * theme.gridUnit}px;\n    padding-right: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n  .error-alert {\n    margin: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n  .antd5-dropdown-trigger {\n    margin-left: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n  .btn-group .open .dropdown-toggle {\n    box-shadow: none;\n    &.button-default {\n      background: none;\n    }\n  }\n  i.angle {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n  svg.datasource-modal-trigger {\n    color: ${({ theme }) => theme.colors.primary.base};\n    cursor: pointer;\n  }\n  .title-select {\n    flex: 1 1 100%;\n    display: inline-block;\n    background-color: ${({ theme }) => theme.colors.grayscale.light3};\n    padding: ${({ theme }) => theme.gridUnit * 2}px;\n    border-radius: ${({ theme }) => theme.borderRadius}px;\n    text-align: center;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n  .datasource-svg {\n    margin-right: ${({ theme }) => 2 * theme.gridUnit}px;\n    flex: none;\n  }\n  span[aria-label='dataset-physical'] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n  span[aria-label='more'] {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nconst CHANGE_DATASET = 'change_dataset';\nconst VIEW_IN_SQL_LAB = 'view_in_sql_lab';\nconst EDIT_DATASET = 'edit_dataset';\nconst QUERY_PREVIEW = 'query_preview';\nconst SAVE_AS_DATASET = 'save_as_dataset';\n\n// If the string is longer than this value's number characters we add\n// a tooltip for user can see the full name by hovering over the visually truncated string in UI\nconst VISIBLE_TITLE_LENGTH = 25;\n\n// Assign icon for each DatasourceType.  If no icon assignment is found in the lookup, no icon will render\nexport const datasourceIconLookup = {\n  [DatasourceType.Query]:\n  _jsx(Icons.ConsoleSqlOutlined, { className: \"datasource-svg\" }),\n\n  [DatasourceType.Table]: _jsx(Icons.TableOutlined, { className: \"datasource-svg\" })\n};\n\n// Render title for datasource with tooltip only if text is longer than VISIBLE_TITLE_LENGTH\nexport const renderDatasourceTitle = (displayString, tooltip) =>\n(displayString == null ? void 0 : displayString.length) > VISIBLE_TITLE_LENGTH ?\n// Add a tooltip only for long names that will be visually truncated\n_jsx(Tooltip, { title: tooltip, children:\n  _jsx(\"span\", { className: \"title-select\", children: displayString }) }\n) :\n\n_jsx(\"span\", { title: tooltip, className: \"title-select\", children:\n  displayString }\n);\n\n\n// Different data source types use different attributes for the display title\nexport const getDatasourceTitle = (datasource) => {\n  if ((datasource == null ? void 0 : datasource.type) === 'query') return datasource == null ? void 0 : datasource.sql;\n  return (datasource == null ? void 0 : datasource.name) || '';\n};\n\nconst preventRouterLinkWhileMetaClicked = (evt) => {\n  if (evt.metaKey) {\n    evt.preventDefault();\n  } else {\n    evt.stopPropagation();\n  }\n};\n\nclass DatasourceControl extends PureComponent {\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n    onDatasourceSave = (datasource) => {var _this$props$form_data, _columns$find, _columns$find2;\n      this.props.actions.changeDatasource(datasource);\n      const { temporalColumns, defaultTemporalColumn } =\n      getTemporalColumns(datasource);\n      const { columns } = datasource;\n      // the current granularity_sqla might not be a temporal column anymore\n      const timeCol = (_this$props$form_data = this.props.form_data) == null ? void 0 : _this$props$form_data.granularity_sqla;\n      const isGranularitySqlaTemporal = (_columns$find = columns.find(\n        ({ column_name }) => column_name === timeCol\n      )) == null ? void 0 : _columns$find.is_dttm;\n      // the current main_dttm_col might not be a temporal column anymore\n      const isDefaultTemporal = (_columns$find2 = columns.find(\n        ({ column_name }) => column_name === defaultTemporalColumn\n      )) == null ? void 0 : _columns$find2.is_dttm;\n\n      // if the current granularity_sqla is empty or it is not a temporal column anymore\n      // let's update the control value\n      if (datasource.type === 'table' && !isGranularitySqlaTemporal) {\n        const temporalColumn = isDefaultTemporal ?\n        defaultTemporalColumn :\n        temporalColumns == null ? void 0 : temporalColumns[0];\n        this.props.actions.setControlValue(\n          'granularity_sqla',\n          temporalColumn || null\n        );\n      }\n\n      if (this.props.onDatasourceSave) {\n        this.props.onDatasourceSave(datasource);\n      }\n    };this.\n\n    toggleShowDatasource = () => {\n      this.setState(({ showDatasource }) => ({\n        showDatasource: !showDatasource\n      }));\n    };this.\n\n    toggleChangeDatasourceModal = () => {\n      this.setState(({ showChangeDatasourceModal }) => ({\n        showChangeDatasourceModal: !showChangeDatasourceModal\n      }));\n    };this.\n\n    toggleEditDatasourceModal = () => {\n      this.setState(({ showEditDatasourceModal }) => ({\n        showEditDatasourceModal: !showEditDatasourceModal\n      }));\n    };this.\n\n    toggleSaveDatasetModal = () => {\n      this.setState(({ showSaveDatasetModal }) => ({\n        showSaveDatasetModal: !showSaveDatasetModal\n      }));\n    };this.\n\n    handleMenuItemClick = ({ key }) => {\n      switch (key) {\n        case CHANGE_DATASET:\n          this.toggleChangeDatasourceModal();\n          break;\n\n        case EDIT_DATASET:\n          this.toggleEditDatasourceModal();\n          break;\n\n        case VIEW_IN_SQL_LAB:\n          {\n            const { datasource } = this.props;\n            const payload = {\n              datasourceKey: `${datasource.id}__${datasource.type}`,\n              sql: datasource.sql\n            };\n            SupersetClient.postForm('/sqllab/', {\n              form_data: safeStringify(payload)\n            });\n          }\n          break;\n\n        case SAVE_AS_DATASET:\n          this.toggleSaveDatasetModal();\n          break;\n\n        default:\n          break;\n      }\n    };this.state = { showEditDatasourceModal: false, showChangeDatasourceModal: false, showSaveDatasetModal: false };}\n\n  render() {var _datasource$owners, _extra;\n    const {\n      showChangeDatasourceModal,\n      showEditDatasourceModal,\n      showSaveDatasetModal\n    } = this.state;\n    const { datasource, onChange, theme } = this.props;\n    const isMissingDatasource = !(datasource != null && datasource.id);\n    let isMissingParams = false;\n    if (isMissingDatasource) {\n      const datasourceId = getUrlParam(URL_PARAMS.datasourceId);\n      const sliceId = getUrlParam(URL_PARAMS.sliceId);\n\n      if (!datasourceId && !sliceId) {\n        isMissingParams = true;\n      }\n    }\n\n    const { user } = this.props;\n    const allowEdit =\n    ((_datasource$owners = datasource.owners) == null ? void 0 : _datasource$owners.map((o) => o.id || o.value).includes(user.userId)) ||\n    isUserAdmin(user);\n\n    const canAccessSqlLab = userHasPermission(user, 'SQL Lab', 'menu_access');\n\n    const editText = t('Edit dataset');\n    const requestedQuery = {\n      datasourceKey: `${datasource.id}__${datasource.type}`,\n      sql: datasource.sql\n    };\n\n    const defaultDatasourceMenu =\n    _jsxs(Menu, { onClick: this.handleMenuItemClick, children: [\n      this.props.isEditable && !isMissingDatasource &&\n      _jsx(Menu.Item, {\n\n\n        disabled: !allowEdit, children:\n\n        !allowEdit ?\n        _jsx(Tooltip, {\n          title: t(\n            'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.'\n          ), children:\n\n          editText }\n        ) :\n\n        editText }, EDIT_DATASET\n\n      ),\n\n      _jsx(Menu.Item, { children: t('Swap dataset') }, CHANGE_DATASET),\n      !isMissingDatasource && canAccessSqlLab &&\n      _jsx(Menu.Item, { children:\n        _jsx(Link, {\n          to: {\n            pathname: '/sqllab',\n            state: { requestedQuery }\n          },\n          onClick: preventRouterLinkWhileMetaClicked, children:\n\n          t('View in SQL Lab') }\n        ) }, VIEW_IN_SQL_LAB\n      )] }\n\n    );\n\n\n    const queryDatasourceMenu =\n    _jsxs(Menu, { onClick: this.handleMenuItemClick, children: [\n      _jsx(Menu.Item, { children:\n        _jsx(ModalTrigger, {\n          triggerNode:\n          _jsx(\"div\", { children: t('Query preview') }),\n\n          modalTitle: t('Query preview'),\n          modalBody:\n          _jsx(ViewQuery, {\n            sql: (datasource == null ? void 0 : datasource.sql) || (datasource == null ? void 0 : datasource.select_star) || '' }\n          ),\n\n          modalFooter:\n          _jsx(ViewQueryModalFooter, {\n            changeDatasource: this.toggleSaveDatasetModal,\n            datasource: datasource }\n          ),\n\n          draggable: false,\n          resizable: false,\n          responsive: true }\n        ) }, QUERY_PREVIEW\n      ),\n      canAccessSqlLab &&\n      _jsx(Menu.Item, { children:\n        _jsx(Link, {\n          to: {\n            pathname: '/sqllab',\n            state: { requestedQuery }\n          },\n          onClick: preventRouterLinkWhileMetaClicked, children:\n\n          t('View in SQL Lab') }\n        ) }, VIEW_IN_SQL_LAB\n      ),\n\n      _jsx(Menu.Item, { children: t('Save as dataset') }, SAVE_AS_DATASET)] }\n    );\n\n\n    const { health_check_message: healthCheckMessage } = datasource;\n\n    let extra;\n    if (datasource != null && datasource.extra) {\n      if (typeof datasource.extra === 'string') {\n        try {\n          extra = JSON.parse(datasource.extra);\n        } catch {} // eslint-disable-line no-empty\n      } else {\n        extra = datasource.extra; // eslint-disable-line prefer-destructuring\n      }\n    }\n\n    const titleText = isMissingDatasource ?\n    t('Missing dataset') :\n    getDatasourceTitle(datasource);\n\n    const tooltip = titleText;\n\n    return (\n      _jsxs(Styles, { className: \"DatasourceControl\", children: [\n        _jsxs(\"div\", { className: \"data-container\", children: [\n          datasourceIconLookup[datasource == null ? void 0 : datasource.type],\n          renderDatasourceTitle(titleText, tooltip),\n          healthCheckMessage &&\n          _jsx(Tooltip, { title: healthCheckMessage, children:\n            _jsx(Icons.WarningOutlined, {\n              css: css`\n                  margin-left: ${theme.gridUnit * 2}px;\n                `,\n              iconColor: theme.colors.warning.base }\n            ) }\n          ),\n\n          ((_extra = extra) == null ? void 0 : _extra.warning_markdown) &&\n          _jsx(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown }),\n\n          _jsx(Dropdown, {\n            dropdownRender: () =>\n            datasource.type === DatasourceType.Query ?\n            queryDatasourceMenu :\n            defaultDatasourceMenu,\n\n            trigger: ['click'], children:\n\n\n            _jsx(Icons.MoreOutlined, {\n              IconSize: \"xl\",\n              iconColor: theme.colors.primary.base,\n              className: \"datasource-modal-trigger\" }\n\n            ) }\n          )] }\n        ),\n\n        isMissingDatasource && isMissingParams &&\n        _jsx(\"div\", { className: \"error-alert\", children:\n          _jsx(ErrorAlert, {\n            level: \"warning\",\n            errorType: t('Missing URL parameters'),\n            description: t(\n              'The URL is missing the dataset_id or slice_id parameters.'\n            ) }\n          ) }\n        ),\n\n        isMissingDatasource && !isMissingParams &&\n        _jsx(\"div\", { className: \"error-alert\", children:\n          _jsx(ErrorAlert, {\n            level: \"warning\",\n            errorType: t('Missing dataset'),\n            description:\n            _jsxs(_Fragment, { children: [\n              t('The dataset linked to this chart may have been deleted.'),\n              _jsx(Button, {\n                buttonStyle: \"primary\",\n                onClick: () =>\n                this.handleMenuItemClick({ key: CHANGE_DATASET }), children:\n\n\n                t('Swap dataset') }\n              )] }\n            ) }\n\n          ) }\n        ),\n\n        showEditDatasourceModal &&\n        _jsx(DatasourceModal, {\n          datasource: datasource,\n          show: showEditDatasourceModal,\n          onDatasourceSave: this.onDatasourceSave,\n          onHide: this.toggleEditDatasourceModal }\n        ),\n\n        showChangeDatasourceModal &&\n        _jsx(ChangeDatasourceModal, {\n          onDatasourceSave: this.onDatasourceSave,\n          onHide: this.toggleChangeDatasourceModal,\n          show: showChangeDatasourceModal,\n          onChange: onChange }\n        ),\n\n        showSaveDatasetModal &&\n        _jsx(SaveDatasetModal, {\n          visible: showSaveDatasetModal,\n          onHide: this.toggleSaveDatasetModal,\n          buttonTextOnSave: t('Save'),\n          buttonTextOnOverwrite: t('Overwrite'),\n          modalDescription: t(\n            'Save this query as a virtual dataset to continue exploring'\n          ),\n          datasource: getDatasourceAsSaveableDataset(datasource),\n          openWindow: false,\n          formData: this.props.form_data }\n        )] }\n\n      ));\n\n  }\n}\n\nDatasourceControl.propTypes = propTypes;\nDatasourceControl.defaultProps = defaultProps;\n\nexport default withTheme(DatasourceControl);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}