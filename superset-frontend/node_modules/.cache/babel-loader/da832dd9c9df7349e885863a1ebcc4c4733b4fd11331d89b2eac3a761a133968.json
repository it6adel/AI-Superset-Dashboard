{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport ContourPopoverTrigger from './ContourPopoverTrigger';\nimport ContourOption from './ContourOption';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DEFAULT_CONTOURS = [\n{\n  lowerThreshold: 4,\n  color: { r: 255, g: 0, b: 255, a: 100 },\n  strokeWidth: 1,\n  zIndex: 0\n},\n{\n  lowerThreshold: 5,\n  color: { r: 0, g: 255, b: 0, a: 100 },\n  strokeWidth: 2,\n  zIndex: 1\n},\n{\n  lowerThreshold: 6,\n  upperThreshold: 10,\n  color: { r: 0, g: 0, b: 255, a: 100 },\n  zIndex: 2\n}];\n\nconst NewContourFormatPlaceholder = styled('div')`\n  position: relative;\n  width: calc(100% - ${({ theme }) => theme.gridUnit}px);\n  bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  left: 0;\n`;\nconst ContourControl = ({ onChange, ...props }) => {\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [contours, setContours] = useState(props != null && props.value ? props == null ? void 0 : props.value : DEFAULT_CONTOURS);\n  useEffect(() => {\n    // add z-index to contours\n    const newContours = contours.map((contour, index) => ({\n      ...contour,\n      zIndex: (index + 1) * 10\n    }));\n    onChange == null ? void 0 : onChange(newContours);\n  }, [onChange, contours]);\n  const togglePopover = (visible) => {\n    setPopoverVisible(visible);\n  };\n  const handleClickGhostButton = () => {\n    togglePopover(true);\n  };\n  const saveContour = (contour) => {\n    setContours([...contours, contour]);\n    togglePopover(false);\n  };\n  const removeContour = (index) => {\n    const newContours = [...contours];\n    newContours.splice(index, 1);\n    setContours(newContours);\n  };\n  const onShiftContour = (hoverIndex, dragIndex) => {\n    const newContours = [...contours];\n    [newContours[hoverIndex], newContours[dragIndex]] = [\n    newContours[dragIndex],\n    newContours[hoverIndex]];\n\n    setContours(newContours);\n  };\n  const editContour = (contour, index) => {\n    const newContours = [...contours];\n    newContours[index] = contour;\n    setContours(newContours);\n  };\n  const valuesRenderer = () => contours.map((contour, index) => _jsx(ContourOption, { saveContour: (newContour) => editContour(newContour, index), contour: contour, index: index, onClose: removeContour, onShift: onShiftContour }, index));\n  const ghostButtonText = t('Click to add a contour');\n  return _jsxs(_Fragment, { children: [\n    _jsx(DndSelectLabel, { onDrop: () => {}, canDrop: () => true, valuesRenderer: valuesRenderer, accept: [], ghostButtonText: ghostButtonText, onClickGhostButton: handleClickGhostButton, ...props }),\n    _jsx(ContourPopoverTrigger, { saveContour: saveContour, isControlled: true, visible: popoverVisible, toggleVisibility: setPopoverVisible, children:\n      _jsx(NewContourFormatPlaceholder, {}) }\n    )] }\n  );\n};\nexport default ContourControl;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}