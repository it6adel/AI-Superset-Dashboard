{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useMemo } from 'react';\nimport { styled, useTruncation } from '@superset-ui/core';\nimport { Link } from 'react-router-dom';\nimport CrossLinksTooltip from './CrossLinksTooltip';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledCrossLinks = styled.div`\n  ${({ theme }) => `\n    & > span {\n      width: 100%;\n      display: flex;\n\n      .antd5-tooltip-open {\n        display: inline;\n      }\n\n      .truncated {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        display: inline-block;\n        width: 100%;\n        vertical-align: bottom;\n      }\n\n      .count {\n        cursor: pointer;\n        color: ${theme.colors.grayscale.base};\n        font-weight: ${theme.typography.weights.bold};\n      }\n    }\n  `}\n`;\nfunction CrossLinks({ crossLinks, maxLinks = 20, linkPrefix = '/superset/dashboard/' }) {\n  const [crossLinksRef, plusRef, elementsTruncated, hasHiddenElements] = useTruncation();\n  const hasMoreItems = useMemo(() => crossLinks.length > maxLinks ? crossLinks.length - maxLinks : undefined, [crossLinks, maxLinks]);\n  const links = useMemo(() => _jsx(\"span\", { className: \"truncated\", ref: crossLinksRef, children:\n    crossLinks.map((link, index) => _jsx(Link, { to: linkPrefix + link.id, children:\n      index === 0 ? link.title : `, ${link.title}` }, link.id\n    )) }\n  ), [crossLinks, crossLinksRef, linkPrefix]);\n  const tooltipLinks = useMemo(() => crossLinks.slice(0, maxLinks).map((l) => ({\n    title: l.title,\n    to: linkPrefix + l.id\n  })), [crossLinks, linkPrefix, maxLinks]);\n  return _jsx(StyledCrossLinks, { children:\n    _jsxs(CrossLinksTooltip, { moreItems: hasMoreItems, crossLinks: tooltipLinks, show: !!elementsTruncated, children: [\n      links,\n      hasHiddenElements && _jsxs(\"span\", { ref: plusRef, className: \"count\", children: [\"+\",\n        elementsTruncated] }\n      )] }\n    ) }\n  );\n}\nexport default /*#__PURE__*/memo(CrossLinks);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}