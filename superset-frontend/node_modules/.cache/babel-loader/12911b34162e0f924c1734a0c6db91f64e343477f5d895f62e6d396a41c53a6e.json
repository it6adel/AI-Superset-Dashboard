{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ensureIsArray, EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS, EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS, isDefined, isFreeFormAdhocFilter, isSimpleAdhocFilter, NO_TIME_RANGE } from '@superset-ui/core';\nimport { simpleFilterToAdhoc } from 'src/utils/simpleFilterToAdhoc';\nconst removeExtraFieldForNewCharts = (filters, isNewChart) => filters.map((filter) => {\n  if (filter.isExtra) {\n    return { ...filter, isExtra: !isNewChart };\n  }\n  return filter;\n});\nconst removeAdhocFilterDuplicates = (filters) => {\n  const isDuplicate = (adhocFilter, existingFilters) => existingFilters.some((existingFilter) => isFreeFormAdhocFilter(existingFilter) &&\n  isFreeFormAdhocFilter(adhocFilter) &&\n  existingFilter.clause === adhocFilter.clause &&\n  existingFilter.sqlExpression === adhocFilter.sqlExpression ||\n  isSimpleAdhocFilter(existingFilter) &&\n  isSimpleAdhocFilter(adhocFilter) &&\n  existingFilter.operator === adhocFilter.operator &&\n  existingFilter.subject === adhocFilter.subject && (\n  !('comparator' in existingFilter) &&\n  !('comparator' in adhocFilter) ||\n  'comparator' in existingFilter &&\n  'comparator' in adhocFilter &&\n  _isEqual(existingFilter.comparator, adhocFilter.comparator)));\n  return filters.reduce((acc, filter) => {\n    if (!isDuplicate(filter, acc)) {\n      acc.push(filter);\n    }\n    return acc;\n  }, []);\n};\nconst mergeFilterBoxToFormData = (exploreFormData, dashboardFormData) => {\n  const dateColumns = {\n    __time_range: 'time_range',\n    __time_col: 'granularity_sqla',\n    __time_grain: 'time_grain_sqla',\n    __granularity: 'granularity'\n  };\n  const appliedTimeExtras = {};\n  const filterBoxData = {};\n  ensureIsArray(dashboardFormData.extra_filters).forEach((filter) => {\n    if (dateColumns[filter.col]) {\n      if (filter.val !== NO_TIME_RANGE) {\n        filterBoxData[dateColumns[filter.col]] =\n        filter.val;\n        appliedTimeExtras[filter.col] = filter.val;\n      }\n    } else\n    {\n      const adhocFilter = simpleFilterToAdhoc({\n        ...filter,\n        isExtra: true\n      });\n      filterBoxData.adhoc_filters = [\n      ...ensureIsArray(filterBoxData.adhoc_filters),\n      adhocFilter];\n\n    }\n  });\n  filterBoxData.applied_time_extras = appliedTimeExtras;\n  return filterBoxData;\n};\nconst mergeNativeFiltersToFormData = (exploreFormData, dashboardFormData) => {\n  const nativeFiltersData = {};\n  const extraFormData = dashboardFormData.extra_form_data || {};\n  Object.entries(EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS).forEach(([srcKey, targetKey]) => {\n    const val = extraFormData[srcKey];\n    if (isDefined(val)) {\n      nativeFiltersData[targetKey] = val;\n    }\n  });\n  if ('time_grain_sqla' in extraFormData) {\n    nativeFiltersData.time_grain_sqla = extraFormData.time_grain_sqla;\n  }\n  if ('granularity_sqla' in extraFormData) {\n    nativeFiltersData.granularity_sqla = extraFormData.granularity_sqla;\n  }\n  const extras = dashboardFormData.extras || {};\n  EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS.forEach((key) => {\n    const val = extraFormData[key];\n    if (isDefined(val)) {\n      extras[key] = val;\n    }\n  });\n  if (Object.keys(extras).length) {\n    nativeFiltersData.extras = extras;\n  }\n  nativeFiltersData.adhoc_filters = ensureIsArray(extraFormData.adhoc_filters).map((filter) => ({\n    ...filter,\n    isExtra: true\n  }));\n  const appendFilters = ensureIsArray(extraFormData.filters).map((extraFilter) => simpleFilterToAdhoc({ ...extraFilter, isExtra: true }));\n  Object.keys(exploreFormData).forEach((key) => {\n    if (key.match(/adhoc_filter.*/)) {\n      nativeFiltersData[key] = [\n      ...ensureIsArray(nativeFiltersData[key]),\n      ...appendFilters];\n\n    }\n  });\n  return nativeFiltersData;\n};\nconst applyTimeRangeFilters = (dashboardFormData, adhocFilters) => {\n  const extraFormData = dashboardFormData.extra_form_data || {};\n  if ('time_range' in extraFormData) {\n    return adhocFilters.map((filter) => {\n      if (filter.operator === 'TEMPORAL_RANGE') {\n        return {\n          ...filter,\n          comparator: extraFormData.time_range,\n          isExtra: true\n        };\n      }\n      return filter;\n    });\n  }\n  return adhocFilters;\n};\nexport const getFormDataWithDashboardContext = (exploreFormData, dashboardContextFormData) => {\n  const filterBoxData = mergeFilterBoxToFormData(exploreFormData, dashboardContextFormData);\n  const nativeFiltersData = mergeNativeFiltersToFormData(exploreFormData, dashboardContextFormData);\n  const adhocFilters = [\n  ...Object.keys(exploreFormData),\n  ...Object.keys(filterBoxData),\n  ...Object.keys(nativeFiltersData)].\n\n  filter((key) => key.match(/adhoc_filter.*/)).\n  reduce((acc, key) => ({\n    ...acc,\n    [key]: removeExtraFieldForNewCharts(applyTimeRangeFilters(dashboardContextFormData, removeAdhocFilterDuplicates([\n    ...ensureIsArray(exploreFormData[key]),\n    ...ensureIsArray(filterBoxData[key]),\n    ...ensureIsArray(nativeFiltersData[key])]\n    )), exploreFormData.slice_id === 0)\n  }), {});\n  const ownColorScheme = exploreFormData.color_scheme;\n  const dashboardColorScheme = dashboardContextFormData.color_scheme;\n  const appliedColorScheme = dashboardColorScheme || ownColorScheme;\n  return {\n    ...exploreFormData,\n    ...dashboardContextFormData,\n    ...filterBoxData,\n    ...nativeFiltersData,\n    ...adhocFilters,\n    own_color_scheme: ownColorScheme,\n    color_scheme: appliedColorScheme,\n    dashboard_color_scheme: dashboardColorScheme\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}