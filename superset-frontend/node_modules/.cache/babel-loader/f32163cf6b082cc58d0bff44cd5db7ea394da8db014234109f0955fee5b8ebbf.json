{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extendedDayjs } from 'src/utils/dates';\nimport { t, styled } from '@superset-ui/core';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport { TagsList } from 'src/components/Tags';\nimport FacePile from 'src/components/FacePile';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { NumberParam, useQueryParam } from 'use-query-params';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst MAX_TAGS_TO_SHOW = 3;\nconst PAGE_SIZE = 10;\nconst AllEntitiesTableContainer = styled.div`\n  text-align: left;\n  border-radius: ${({ theme }) => theme.gridUnit * 1}px 0;\n  .table {\n    table-layout: fixed;\n  }\n  .td {\n    width: 33%;\n  }\n  .entity-title {\n    font-family: Inter;\n    font-size: ${({ theme }) => theme.typography.sizes.m}px;\n    font-weight: ${({ theme }) => theme.typography.weights.medium};\n    line-height: 17px;\n    letter-spacing: 0px;\n    text-align: left;\n    margin: ${({ theme }) => theme.gridUnit * 4}px 0;\n  }\n`;\nexport default function AllEntitiesTable({ search = '', setShowTagModal, objects }) {\n  const [tagId] = useQueryParam('id', NumberParam);\n  const showListViewObjs = objects.dashboard.length > 0 ||\n  objects.chart.length > 0 ||\n  objects.query.length > 0;\n  const renderTable = (type) => {\n    const data = objects[type].map((o) => ({\n      [type]: _jsx(\"a\", { href: o.url, children: o.name }),\n      modified: extendedDayjs.utc(o.changed_on).fromNow(),\n      tags: o.tags,\n      owners: o.owners\n    }));\n    return _jsx(TableView, { className: \"table-condensed\", emptyWrapperType: EmptyWrapperType.Small, data: data, pageSize: PAGE_SIZE, columns: [\n      {\n        accessor: type,\n        Header: 'Title'\n      },\n      {\n        Cell: ({ row: { original: { tags = [] } } }) =>\n        // Only show custom type tags\n        _jsx(TagsList, { tags: tags.filter((tag) => tag.type !== undefined &&\n          ['TagType.custom', 1].includes(tag.type) &&\n          tag.id !== tagId), maxTags: MAX_TAGS_TO_SHOW }),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true\n      },\n      {\n        Cell: ({ row: { original: { owners = [] } } }) => _jsx(FacePile, { users: owners }),\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl'\n      }] }\n    );\n  };\n  return _jsx(AllEntitiesTableContainer, { children:\n    showListViewObjs ? _jsxs(_Fragment, { children: [\n      _jsx(\"div\", { className: \"entity-title\", children: t('Dashboards') }),\n      renderTable('dashboard'),\n      _jsx(\"div\", { className: \"entity-title\", children: t('Charts') }),\n      renderTable('chart'),\n      _jsx(\"div\", { className: \"entity-title\", children: t('Queries') }),\n      renderTable('query')] }\n    ) : _jsx(EmptyState, { image: \"dashboard.svg\", size: \"large\", title: t('No entities have this tag currently assigned'), buttonAction: () => setShowTagModal(true), buttonText: t('Add tag to entities') }) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}