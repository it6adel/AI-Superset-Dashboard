{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Menu } from 'src/components/Menu';\nimport { t } from '@superset-ui/core';\n\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport DownloadMenuItems from 'src/dashboard/components/menu/DownloadMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MenuKeys } from 'src/dashboard/types';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const useHeaderActionsMenu = ({ customCss, dashboardId, dashboardInfo, refreshFrequency, shouldPersistRefreshFrequency, editMode, colorNamespace, colorScheme, layout, expandedSlices, onSave, userCanEdit, userCanShare, userCanSave, userCanCurate, isLoading, refreshLimit, refreshWarning, lastModifiedTime, addSuccessToast, addDangerToast, forceRefreshAllCharts, showPropertiesModal, showReportModal, manageEmbedded, onChange, updateCss, startPeriodicRender, setRefreshFrequency, dashboardTitle, logEvent, setCurrentReportDeleting }) => {\n  const [css, setCss] = useState(customCss || '');\n  const [showReportSubMenu, setShowReportSubMenu] = useState(null);\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const directPathToChild = useSelector((state) => state.dashboardState.directPathToChild);\n  useEffect(() => {\n    if (customCss !== css) {\n      setCss(customCss || '');\n      injectCustomCss(customCss);\n    }\n  }, [css, customCss]);\n  const handleMenuClick = useCallback(({ key }) => {\n    switch (key) {\n      case MenuKeys.RefreshDashboard:\n        forceRefreshAllCharts();\n        addSuccessToast(t('Refreshing charts'));\n        break;\n      case MenuKeys.EditProperties:\n        showPropertiesModal();\n        break;\n      case MenuKeys.ToggleFullscreen:{\n          const url = getDashboardUrl({\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: getUrlParam(URL_PARAMS.standalone)\n          });\n          window.location.replace(url);\n          break;\n        }\n      case MenuKeys.ManageEmbedded:\n        manageEmbedded();\n        break;\n      default:\n        break;\n    }\n    setIsDropdownVisible(false);\n  }, [\n  forceRefreshAllCharts,\n  addSuccessToast,\n  showPropertiesModal,\n  manageEmbedded]\n  );\n  const changeCss = useCallback((newCss) => {\n    onChange();\n    updateCss(newCss);\n  }, [onChange, updateCss]);\n  const changeRefreshInterval = useCallback((refreshInterval, isPersistent) => {\n    setRefreshFrequency(refreshInterval, isPersistent);\n    startPeriodicRender(refreshInterval * 1000);\n  }, [setRefreshFrequency, startPeriodicRender]);\n  const emailSubject = useMemo(() => `${t('Superset dashboard')} ${dashboardTitle}`, [dashboardTitle]);\n  const url = useMemo(() => getDashboardUrl({\n    pathname: window.location.pathname,\n    filters: getActiveFilters(),\n    hash: window.location.hash\n  }), []);\n  const dashboardComponentId = useMemo(() => [...(directPathToChild || [])].pop(), [directPathToChild]);\n  const menu = useMemo(() => {var _dashboardInfo$common, _dashboardInfo$common2, _dashboardInfo$metada;\n    const isEmbedded = !(dashboardInfo != null && dashboardInfo.userId);\n    const refreshIntervalOptions = (_dashboardInfo$common = dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common2 = _dashboardInfo$common.conf) == null ? void 0 : _dashboardInfo$common2.DASHBOARD_AUTO_REFRESH_INTERVALS;\n    return _jsxs(Menu, { selectable: false, onClick: handleMenuClick, children: [\n      !editMode && _jsx(Menu.Item, { disabled: isLoading, children:\n        t('Refresh dashboard') }, MenuKeys.RefreshDashboard\n      ),\n      !editMode && !isEmbedded && _jsx(Menu.Item, { children:\n        getUrlParam(URL_PARAMS.standalone) ?\n        t('Exit fullscreen') :\n        t('Enter fullscreen') }, MenuKeys.ToggleFullscreen\n      ),\n      editMode && _jsx(Menu.Item, { children:\n        t('Edit properties') }, MenuKeys.EditProperties\n      ),\n      editMode && _jsx(Menu.Item, { children:\n        _jsx(CssEditor, { triggerNode: _jsx(\"div\", { children: t('Edit CSS') }), initialCss: css, onChange: changeCss, addDangerToast: addDangerToast }) }, MenuKeys.EditCss\n      ),\n      _jsx(Menu.Divider, {}),\n      userCanSave && _jsx(Menu.Item, { children:\n        _jsx(SaveModal, { addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, dashboardId: dashboardId, dashboardTitle: dashboardTitle, dashboardInfo: dashboardInfo, saveType: SAVE_TYPE_NEWDASHBOARD, layout: layout, expandedSlices: expandedSlices, refreshFrequency: refreshFrequency, shouldPersistRefreshFrequency: shouldPersistRefreshFrequency, lastModifiedTime: lastModifiedTime, customCss: customCss, colorNamespace: colorNamespace, colorScheme: colorScheme, onSave: onSave, triggerNode: _jsx(\"div\", { children: t('Save as') }), canOverwrite: userCanEdit }) }, MenuKeys.SaveModal\n      ),\n      _jsx(DownloadMenuItems, { submenuKey: MenuKeys.Download, disabled: isLoading, title: t('Download'), pdfMenuItemTitle: t('Export to PDF'), imageMenuItemTitle: t('Download as Image'), dashboardTitle: dashboardTitle, dashboardId: dashboardId, logEvent: logEvent }),\n      userCanShare && _jsx(ShareMenuItems, { disabled: isLoading, title: t('Share'), url: url, copyMenuItemTitle: t('Copy permalink to clipboard'), emailMenuItemTitle: t('Share permalink by email'), emailSubject: emailSubject, emailBody: t('Check out this dashboard: '), addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, dashboardId: dashboardId, dashboardComponentId: dashboardComponentId }),\n      !editMode && userCanCurate && _jsx(Menu.Item, { children:\n        t('Embed dashboard') }, MenuKeys.ManageEmbedded\n      ),\n      _jsx(Menu.Divider, {}),\n      !editMode ? showReportSubMenu ? _jsxs(_Fragment, { children: [\n        _jsx(HeaderReportDropdown, { submenuTitle: t('Manage email report'), dashboardId: dashboardInfo.id, setShowReportSubMenu: setShowReportSubMenu, showReportModal: showReportModal, showReportSubMenu: showReportSubMenu, setCurrentReportDeleting: setCurrentReportDeleting, useTextMenu: true }),\n        _jsx(Menu.Divider, {})] }\n      ) : _jsx(HeaderReportDropdown, { dashboardId: dashboardInfo.id, setShowReportSubMenu: setShowReportSubMenu, showReportModal: showReportModal, setCurrentReportDeleting: setCurrentReportDeleting, useTextMenu: true }) : null,\n      editMode && !_isEmpty(dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.filter_scopes) && _jsx(Menu.Item, { children:\n        _jsx(FilterScopeModal, { triggerNode: _jsx(\"div\", { className: \"m-r-5\", children: t('Set filter mapping') }) }) }, MenuKeys.SetFilterMapping\n      ),\n      _jsx(Menu.Item, { children:\n        _jsx(RefreshIntervalModal, { addSuccessToast: addSuccessToast, refreshFrequency: refreshFrequency, refreshLimit: refreshLimit, refreshWarning: refreshWarning, onChange: changeRefreshInterval, editMode: editMode, refreshIntervalOptions: refreshIntervalOptions, triggerNode: _jsx(\"div\", { children: t('Set auto-refresh interval') }) }) }, MenuKeys.AutorefreshModal\n      )] }\n    );\n  }, [\n  css,\n  showReportSubMenu,\n  isDropdownVisible,\n  directPathToChild,\n  handleMenuClick,\n  changeCss,\n  changeRefreshInterval,\n  emailSubject,\n  url,\n  dashboardComponentId]\n  );\n  return [menu, isDropdownVisible, setIsDropdownVisible];\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}