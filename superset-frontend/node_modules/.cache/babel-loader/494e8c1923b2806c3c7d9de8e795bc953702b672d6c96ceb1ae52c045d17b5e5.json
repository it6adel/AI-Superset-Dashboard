{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeSingleton } from '../utils';\nimport TimeFormatterRegistry from './TimeFormatterRegistry';\nimport TimeFormatter from './TimeFormatter';\nimport TimeFormatsForGranularity from './TimeFormatsForGranularity';\nimport { LOCAL_PREFIX } from './TimeFormats';\nimport createTimeRangeFromGranularity from './utils/createTimeRangeFromGranularity';\nimport TimeRangeFormatter from './TimeRangeFormatter';\nconst getInstance = makeSingleton(TimeFormatterRegistry);\nexport default getInstance;\nexport function getTimeRangeFormatter(formatId) {\n  return new TimeRangeFormatter({\n    id: formatId || 'undefined',\n    formatFunc: (range) => {\n      const format = getInstance().get(formatId);\n      const [start, end] = range.map((value) => format(value));\n      return start === end ? start : [start, end].join(' â€” ');\n    },\n    useLocalTime: formatId == null ? void 0 : formatId.startsWith(LOCAL_PREFIX)\n  });\n}\nexport function formatTimeRange(formatId, range) {\n  return getTimeRangeFormatter(formatId)(range);\n}\nexport function getTimeFormatter(formatId, granularity) {\n  if (granularity) {\n    const formatString = formatId || TimeFormatsForGranularity[granularity];\n    const timeRangeFormatter = getTimeRangeFormatter(formatString);\n    return new TimeFormatter({\n      id: [formatString, granularity].join('/'),\n      formatFunc: (value) => timeRangeFormatter.format(createTimeRangeFromGranularity(value, granularity, timeRangeFormatter.useLocalTime)),\n      useLocalTime: timeRangeFormatter.useLocalTime\n    });\n  }\n  return getInstance().get(formatId);\n}\n/**\n * Syntactic sugar for backward compatibility\n * TODO: will be deprecated in a future version\n * @param granularity\n */\nexport function getTimeFormatterForGranularity(granularity) {\n  return getTimeFormatter(undefined, granularity);\n}\nexport function formatTime(formatId, value, granularity) {\n  return getTimeFormatter(formatId, granularity)(value);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}