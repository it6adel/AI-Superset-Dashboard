{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { getMetricLabel, t } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport { createCategoricalDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { unitToRadius } from '../../utils/geo';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction getPoints(data) {\n  return data.map((d) => d.position);\n}\nfunction setTooltipContent(formData, verboseMap) {\n  return (o) => {var _formData$point_radiu, _o$object, _o$object$position, _o$object2, _o$object2$position, _o$object3, _o$object4, _o$object5, _o$object6;\n    const label = (verboseMap == null ? void 0 : verboseMap[formData.point_radius_fixed.value]) ||\n    getMetricLabel((_formData$point_radiu = formData.point_radius_fixed) == null ? void 0 : _formData$point_radiu.value);\n    return _jsxs(\"div\", { className: \"deckgl-tooltip\", children: [\n      _jsx(TooltipRow\n      // eslint-disable-next-line prefer-template\n      , { label: t('Longitude and Latitude') + ': ', value: `${(_o$object = o.object) == null ? void 0 : (_o$object$position = _o$object.position) == null ? void 0 : _o$object$position[0]}, ${(_o$object2 = o.object) == null ? void 0 : (_o$object2$position = _o$object2.position) == null ? void 0 : _o$object2$position[1]}` }),\n      ((_o$object3 = o.object) == null ? void 0 : _o$object3.cat_color) && _jsx(TooltipRow\n      // eslint-disable-next-line prefer-template\n      , { label: t('Category') + ': ', value: `${(_o$object4 = o.object) == null ? void 0 : _o$object4.cat_color}` }),\n      ((_o$object5 = o.object) == null ? void 0 : _o$object5.metric) && _jsx(TooltipRow, { label: `${label}: `, value: `${(_o$object6 = o.object) == null ? void 0 : _o$object6.metric}` })] }\n    );\n  };\n}\nexport function getLayer(formData, payload, onAddFilter, setTooltip, datasource) {\n  const fd = formData;\n  const dataWithRadius = payload.data.features.map((d) => {\n    let radius = unitToRadius(fd.point_unit, d.radius) || 10;\n    if (fd.multiplier) {\n      radius *= fd.multiplier;\n    }\n    if (d.color) {\n      return { ...d, radius };\n    }\n    const c = fd.color_picker || { r: 0, g: 0, b: 0, a: 1 };\n    const color = [c.r, c.g, c.b, c.a * 255];\n    return { ...d, radius, color };\n  });\n  return new ScatterplotLayer({\n    id: `scatter-layer-${fd.slice_id}`,\n    data: dataWithRadius,\n    fp64: true,\n    getFillColor: (d) => d.color,\n    getRadius: (d) => d.radius,\n    radiusMinPixels: Number(fd.min_radius) || undefined,\n    radiusMaxPixels: Number(fd.max_radius) || undefined,\n    stroked: false,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent(fd, datasource == null ? void 0 : datasource.verboseMap))\n  });\n}\nexport default createCategoricalDeckGLComponent(getLayer, getPoints);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}