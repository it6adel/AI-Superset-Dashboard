{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { getLabelsColorMap, isDefined, makeApi, LabelsColorMapSource, t, getClientErrorObject } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport getFormDataWithExtraFilters from 'src/dashboard/util/charts/getFormDataWithExtraFilters';\nimport { getAppliedFilterValues } from 'src/dashboard/util/activeDashboardFilters';\nimport { getParsedExploreURLParams } from 'src/explore/exploreUtils/getParsedExploreURLParams';\nimport { hydrateExplore } from 'src/explore/actions/hydrateExplore';\nimport ExploreViewContainer from 'src/explore/components/ExploreViewContainer';\nimport { fallbackExploreInitialData } from 'src/explore/fixtures';\nimport { getItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { getFormDataWithDashboardContext } from 'src/explore/controlUtils/getFormDataWithDashboardContext';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst isValidResult = (rv) => {var _rv$result, _rv$result2;return (rv == null ? void 0 : (_rv$result = rv.result) == null ? void 0 : _rv$result.form_data) && (rv == null ? void 0 : (_rv$result2 = rv.result) == null ? void 0 : _rv$result2.dataset);};\nconst hasDatasetId = (rv) => {var _rv$result3, _rv$result3$dataset;return isDefined(rv == null ? void 0 : (_rv$result3 = rv.result) == null ? void 0 : (_rv$result3$dataset = _rv$result3.dataset) == null ? void 0 : _rv$result3$dataset.id);};\nconst fetchExploreData = async (exploreUrlParams) => {\n  try {var _rv$result5;\n    const rv = await makeApi({\n      method: 'GET',\n      endpoint: 'api/v1/explore/'\n    })(exploreUrlParams);\n    if (isValidResult(rv)) {var _rv$result4;\n      if (hasDatasetId(rv)) {\n        return rv;\n      }\n      // Since there's no dataset id but the API responded with a valid payload,\n      // we assume the dataset was deleted, so we preserve some values from previous\n      // state so if the user decide to swap the datasource, the chart config remains\n      fallbackExploreInitialData.form_data = {\n        ...rv.result.form_data,\n        ...fallbackExploreInitialData.form_data\n      };\n      if ((_rv$result4 = rv.result) != null && _rv$result4.slice) {\n        fallbackExploreInitialData.slice = rv.result.slice;\n      }\n    }\n    let message = t('Failed to load chart data');\n    const responseError = rv == null ? void 0 : (_rv$result5 = rv.result) == null ? void 0 : _rv$result5.message;\n    if (responseError) {\n      message = `${message}:\\n${responseError}`;\n    }\n    throw new Error(message);\n  }\n  catch (err) {\n    // todo: encapsulate the error handler\n    const clientError = await getClientErrorObject(err);\n    throw new Error(clientError.message ||\n    clientError.error ||\n    t('Failed to load chart data.'));\n  }\n};\nconst getDashboardPageContext = (pageId) => {\n  if (!pageId) {\n    return null;\n  }\n  return getItem(LocalStorageKeys.DashboardExploreContext, {})[pageId] || null;\n};\nconst getDashboardContextFormData = () => {\n  const dashboardPageId = getUrlParam(URL_PARAMS.dashboardPageId);\n  const dashboardContext = getDashboardPageContext(dashboardPageId);\n  if (dashboardContext) {\n    const sliceId = getUrlParam(URL_PARAMS.sliceId) || 0;\n    const { colorScheme, labelsColor, labelsColorMap, sharedLabelsColors, chartConfiguration, nativeFilters, filterBoxFilters, dataMask, dashboardId } = dashboardContext;\n    const dashboardContextWithFilters = getFormDataWithExtraFilters({\n      chart: { id: sliceId },\n      filters: getAppliedFilterValues(sliceId, filterBoxFilters),\n      nativeFilters,\n      chartConfiguration,\n      dataMask,\n      colorScheme,\n      labelsColor,\n      labelsColorMap,\n      sharedLabelsColors,\n      sliceId,\n      allSliceIds: [sliceId],\n      extraControls: {}\n    });\n    Object.assign(dashboardContextWithFilters, {\n      dashboardId\n    });\n    return dashboardContextWithFilters;\n  }\n  return null;\n};\nexport default function ExplorePage() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const isExploreInitialized = useRef(false);\n  const dispatch = useDispatch();\n  const location = useLocation();\n  useEffect(() => {\n    const exploreUrlParams = getParsedExploreURLParams(location);\n    const saveAction = getUrlParam(URL_PARAMS.saveAction);\n    const dashboardContextFormData = getDashboardContextFormData();\n    if (!isExploreInitialized.current || !!saveAction) {\n      fetchExploreData(exploreUrlParams).\n      then(({ result }) => {\n        const formData = !isExploreInitialized.current && dashboardContextFormData ?\n        getFormDataWithDashboardContext(result.form_data, dashboardContextFormData) :\n        result.form_data;\n        dispatch(hydrateExplore({\n          ...result,\n          form_data: formData,\n          saveAction\n        }));\n      }).\n      catch((err) => {\n        dispatch(hydrateExplore(fallbackExploreInitialData));\n        dispatch(addDangerToast(err.message));\n      }).\n      finally(() => {\n        setIsLoaded(true);\n        isExploreInitialized.current = true;\n      });\n    }\n    getLabelsColorMap().source = LabelsColorMapSource.Explore;\n  }, [dispatch, location]);\n  if (!isLoaded) {\n    return _jsx(Loading, {});\n  }\n  return _jsx(ExploreViewContainer, {});\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}