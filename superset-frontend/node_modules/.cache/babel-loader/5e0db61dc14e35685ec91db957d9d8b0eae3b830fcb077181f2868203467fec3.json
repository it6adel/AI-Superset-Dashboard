{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo } from 'react';\nimport { Global } from '@emotion/react';\nimport { css, useTheme } from '@superset-ui/core';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\nimport copyTextToClipboard from 'src/utils/copy';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { PIVOT_COL_ID, GridSize } from './constants';\nimport Header from './Header';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst gridComponents = {\n  agColumnHeader: Header\n};\nexport { GridSize };\nconst onSortChanged = ({ api }) => api.refreshCells();\nfunction GridTable({ data, columns, sortable = true, columnReorderable, height, externalFilter, showRowNumber, enableActions, size = GridSize.Middle, striped }) {\n  const theme = useTheme();\n  const isExternalFilterPresent = useCallback(() => Boolean(externalFilter), [externalFilter]);\n  const rowIndexLength = `${data.length}}`.length;\n  const onKeyDown = useCallback(({ event, column, data, value, api }) => {var _document$getSelectio;\n    if (!(document.getSelection != null && (_document$getSelectio = document.getSelection()) != null && _document$getSelectio.toString != null && _document$getSelectio.toString()) &&\n    event &&\n    event.key === 'c' && (\n    event.ctrlKey || event.metaKey)) {\n      const columns = column.getColId() === PIVOT_COL_ID ?\n      api.\n      getAllDisplayedColumns().\n      filter((column) => column.getColId() !== PIVOT_COL_ID) :\n      [column];\n      const record = column.getColId() === PIVOT_COL_ID ?\n      [\n      columns.map((column) => column.getColId()).join('\\t'),\n      columns.\n      map((column) => data == null ? void 0 : data[column.getColId()]).\n      join('\\t')].\n      join('\\n') :\n      String(value);\n      copyTextToClipboard(() => Promise.resolve(record));\n    }\n  }, []);\n  const columnDefs = useMemo(() => [\n  {\n    field: PIVOT_COL_ID,\n    valueGetter: 'node.rowIndex+1',\n    cellClass: 'locked-col',\n    width: 30 + rowIndexLength * 6,\n    suppressNavigable: true,\n    resizable: false,\n    pinned: 'left',\n    sortable: false,\n    ...(columnReorderable && { suppressMovable: true })\n  },\n  ...columns.map(({ label, headerName, width, render: cellRenderer, comparator }, index) => ({\n    field: label,\n    headerName,\n    cellRenderer,\n    sortable,\n    comparator,\n    ...(index === columns.length - 1 && {\n      flex: 1,\n      width,\n      minWidth: 150\n    })\n  }))].\n  slice(showRowNumber ? 0 : 1), [rowIndexLength, columnReorderable, columns, showRowNumber, sortable]);\n  const defaultColDef = useMemo(() => ({\n    ...(!columnReorderable && { suppressMovable: true }),\n    resizable: true,\n    sortable,\n    filter: Boolean(enableActions)\n  }), [columnReorderable, enableActions, sortable]);\n  const rowHeight = theme.gridUnit * (size === GridSize.Middle ? 9 : 7);\n  const gridOptions = useMemo(() => ({\n    enableCellTextSelection: true,\n    ensureDomOrder: true,\n    suppressFieldDotNotation: true,\n    headerHeight: rowHeight,\n    rowSelection: 'multiple',\n    rowHeight\n  }), [rowHeight]);\n  return _jsxs(ErrorBoundary, { children: [\n    _jsx(Global, { styles: () => css`\n          #grid-table.ag-theme-quartz {\n            --ag-icon-font-family: agGridMaterial;\n            --ag-grid-size: ${theme.gridUnit}px;\n            --ag-font-size: ${theme.typography.sizes[size === GridSize.Middle ? 'm' : 's']}px;\n            --ag-font-family: ${theme.typography.families.sansSerif};\n            --ag-row-height: ${rowHeight}px;\n            ${!striped &&\n      `--ag-odd-row-background-color: ${theme.colors.grayscale.light5};`}\n            --ag-border-color: ${theme.colors.grayscale.light2};\n            --ag-row-border-color: ${theme.colors.grayscale.light2};\n            --ag-header-background-color: ${theme.colors.grayscale.light4};\n          }\n          #grid-table .ag-cell {\n            -webkit-font-smoothing: antialiased;\n          }\n          .locked-col {\n            background: var(--ag-row-border-color);\n            padding: 0;\n            text-align: center;\n            font-size: calc(var(--ag-font-size) * 0.9);\n            color: var(--ag-disabled-foreground-color);\n          }\n          .ag-row-hover .locked-col {\n            background: var(--ag-row-hover-color);\n          }\n          .ag-header-cell {\n            overflow: hidden;\n          }\n          & [role='columnheader']:hover .customHeaderAction {\n            display: flex;\n          }\n        ` }),\n    _jsx(\"div\", { id: \"grid-table\", className: \"ag-theme-quartz\", css: css`\n          width: 100%;\n          height: ${height}px;\n        `, children:\n      _jsx(AgGridReact\n      // TODO: migrate to Theme API - https://www.ag-grid.com/react-data-grid/theming-migration/\n      , { rowData: data, columnDefs: columnDefs, defaultColDef: defaultColDef, onSortChanged: onSortChanged, isExternalFilterPresent: isExternalFilterPresent, doesExternalFilterPass: externalFilter, components: gridComponents, gridOptions: gridOptions, onCellKeyDown: onKeyDown }) }\n    )] }\n  );\n}\nexport default GridTable;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}