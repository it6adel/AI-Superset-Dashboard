{"ast":null,"code":"import _mergeWith from \"lodash/mergeWith\"; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport rehypeSanitize, { defaultSchema } from 'rehype-sanitize';\nimport remarkGfm from 'remark-gfm';\n\nimport { FeatureFlag, isFeatureEnabled } from '../utils';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport function getOverrideHtmlSchema(originalSchema, htmlSchemaOverrides) {\n  return _mergeWith(originalSchema, htmlSchemaOverrides, (objValue, srcValue) => Array.isArray(objValue) ? objValue.concat(srcValue) : undefined);\n}\nfunction SafeMarkdown({ source, htmlSanitization = true, htmlSchemaOverrides = {} }) {\n  const escapeHtml = isFeatureEnabled(FeatureFlag.EscapeMarkdownHtml);\n  const [rehypeRawPlugin, setRehypeRawPlugin] = useState(null);\n  const [ReactMarkdown, setReactMarkdown] = useState(null);\n  useEffect(() => {\n    Promise.all([import('rehype-raw'), import('react-markdown')]).then(([rehypeRaw, ReactMarkdown]) => {\n      setRehypeRawPlugin(() => rehypeRaw.default);\n      setReactMarkdown(() => ReactMarkdown.default);\n    });\n  }, []);\n  const rehypePlugins = useMemo(() => {\n    const rehypePlugins = [];\n    if (!escapeHtml && rehypeRawPlugin) {\n      rehypePlugins.push(rehypeRawPlugin);\n      if (htmlSanitization) {\n        const schema = getOverrideHtmlSchema(defaultSchema, htmlSchemaOverrides);\n        rehypePlugins.push([rehypeSanitize, schema]);\n      }\n    }\n    return rehypePlugins;\n  }, [escapeHtml, htmlSanitization, htmlSchemaOverrides, rehypeRawPlugin]);\n  if (!ReactMarkdown || !rehypeRawPlugin) {\n    return null;\n  }\n  // React Markdown escapes HTML by default\n  return _jsx(ReactMarkdown, { rehypePlugins: rehypePlugins, remarkPlugins: [remarkGfm], skipHtml: false, transformLinkUri: null, children:\n    source }\n  );\n}\nexport default SafeMarkdown;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}