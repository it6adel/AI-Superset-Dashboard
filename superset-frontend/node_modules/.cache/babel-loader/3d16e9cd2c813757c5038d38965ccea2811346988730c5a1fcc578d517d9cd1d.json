{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useMemo, useEffect } from 'react';\nimport { styled, t, getClientErrorMessage, getClientErrorObject } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables } from 'src/hooks/apiResources';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst REFRESH_WIDTH = 30;\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nexport const TableOption = ({ table }) => {\n  const { value, type, extra } = table;\n  return _jsxs(TableLabel, { title: value, children: [\n    type === 'view' ? _jsx(Icons.EyeOutlined, { iconSize: \"m\" }) : _jsx(Icons.InsertRowAboveOutlined, { iconSize: \"m\" }),\n    (extra == null ? void 0 : extra.certification) && _jsx(CertifiedBadge, { certifiedBy: extra.certification.certified_by, details: extra.certification.details, size: \"l\" }),\n    (extra == null ? void 0 : extra.warning_markdown) && _jsx(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown, size: \"l\", marginRight: 4 }),\n    value] }\n  );\n};\nfunction renderSelectRow(select, refreshBtn) {\n  return _jsxs(\"div\", { className: \"section\", children: [\n    _jsx(\"span\", { className: \"select\", children: select }),\n    _jsx(\"span\", { className: \"refresh\", children: refreshBtn })] }\n  );\n}\nconst TableSelector = ({ database, emptyState, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onCatalogChange, onSchemaChange, readOnly = false, onEmptyResults, catalog, schema, sqlLabMode = true, tableSelectMode = 'single', tableValue = undefined, onTableSelectChange, customTableOptionLabelRenderer }) => {\n  const { addSuccessToast } = useToasts();\n  const [currentCatalog, setCurrentCatalog] = useState(catalog);\n  const [currentSchema, setCurrentSchema] = useState(schema);\n  const [tableSelectValue, setTableSelectValue] = useState(undefined);\n  const { currentData: data, isFetching: loadingTables, refetch } = useTables({\n    dbId: database == null ? void 0 : database.id,\n    catalog: currentCatalog,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: (err) => {\n      getClientErrorObject(err).then((clientError) => {\n        handleError(getClientErrorMessage(t('There was an error loading the tables'), clientError));\n      });\n    }\n  });\n  const tableOptions = useMemo(() => data ?\n  data.options.map((table) => ({\n    value: table.value,\n    label: _jsx(TableOption, { table: table }),\n    text: table.value,\n    ...(customTableOptionLabelRenderer && {\n      customLabel: customTableOptionLabelRenderer(table)\n    })\n  })) :\n  [], [data, customTableOptionLabelRenderer]);\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentCatalog(undefined);\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(tableOptions.find((option) => option.value === tableValue));\n    } else\n    {\n      setTableSelectValue((tableOptions == null ? void 0 : tableOptions.filter((option) => option && (tableValue == null ? void 0 : tableValue.includes(option.value)))) || []);\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n  const internalTableChange = (selectedOptions) => {\n    if (currentSchema) {\n      onTableSelectChange == null ? void 0 : onTableSelectChange(Array.isArray(selectedOptions) ?\n      selectedOptions.map((option) => option == null ? void 0 : option.value) :\n      selectedOptions == null ? void 0 : selectedOptions.value, currentCatalog, currentSchema);\n    } else\n    {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n  const internalDbChange = (db) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n    setCurrentCatalog(undefined);\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n  const internalCatalogChange = (catalog) => {\n    setCurrentCatalog(catalog);\n    if (onCatalogChange) {\n      onCatalogChange(catalog);\n    }\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n  const internalSchemaChange = (schema) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n  const handleFilterOption = useMemo(() => (search, option) => {\n    const searchValue = search.trim().toLowerCase();\n    const { value } = option;\n    return value.toLowerCase().includes(searchValue);\n  }, []);\n  function renderTableSelect() {\n    const disabled = currentSchema && !formMode && readOnly || !currentSchema;\n    const header = sqlLabMode ? _jsx(FormLabel, { children: t('See table schema') }) : _jsx(FormLabel, { children: t('Table') });\n    const select = _jsx(Select, { ariaLabel: t('Select table or type to search tables'), disabled: disabled, filterOption: handleFilterOption, header: header, labelInValue: true, loading: loadingTables, name: \"select-table\", onChange: (options) => internalTableChange(options), options: tableOptions, placeholder: t('Select table or type to search tables'), showSearch: true, mode: tableSelectMode, value: tableSelectValue, allowClear: tableSelectMode === 'multiple', allowSelectAll: false });\n    const refreshLabel = !readOnly && _jsx(RefreshLabel, { onClick: () => refetch(), tooltipContent: t('Force refresh table list') });\n    return renderSelectRow(select, refreshLabel);\n  }\n  return _jsxs(TableSelectorWrapper, { children: [\n    _jsx(DatabaseSelector, { db: database, emptyState: emptyState, formMode: formMode, getDbList: getDbList, handleError: handleError, onDbChange: readOnly ? undefined : internalDbChange, onEmptyResults: onEmptyResults, onCatalogChange: readOnly ? undefined : internalCatalogChange, catalog: currentCatalog, onSchemaChange: readOnly ? undefined : internalSchemaChange, schema: currentSchema, sqlLabMode: sqlLabMode, isDatabaseSelectEnabled: isDatabaseSelectEnabled && !readOnly, readOnly: readOnly }),\n    sqlLabMode && !formMode && _jsx(\"div\", { className: \"divider\" }),\n    renderTableSelect()] }\n  );\n};\nexport const TableSelectorMultiple = (props) => _jsx(TableSelector, { tableSelectMode: \"multiple\", ...props });\nexport default TableSelector;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}