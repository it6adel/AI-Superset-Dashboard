{"ast":null,"code":"import { CategoricalColorNamespace, NumberFormats, getColumnLabel, getMetricLabel, getNumberFormatter, tooltipHtml } from '@superset-ui/core';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { getPercentFormatter } from '../utils/formatters';\nexport default function transformProps(chartProps) {\n  const refs = {};\n  const { formData, height, hooks, queriesData, width } = chartProps;\n  const { onLegendStateChanged } = hooks;\n  const { colorScheme, metric, source, target, sliceId } = formData;\n  const { data } = queriesData[0];\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const metricLabel = getMetricLabel(metric);\n  const valueFormatter = getNumberFormatter(NumberFormats.FLOAT_2_POINT);\n  const percentFormatter = getPercentFormatter(NumberFormats.PERCENT_2_POINT);\n  const links = [];\n  const set = new Set();\n  data.forEach((datum) => {\n    const sourceName = String(datum[getColumnLabel(source)]);\n    const targetName = String(datum[getColumnLabel(target)]);\n    const value = datum[metricLabel];\n    set.add(sourceName);\n    set.add(targetName);\n    links.push({\n      source: sourceName,\n      target: targetName,\n      value\n    });\n  });\n  const seriesData = Array.from(set).map((name) => ({\n    name,\n    itemStyle: {\n      color: colorFn(name, sliceId)\n    }\n  }));\n  // stores a map with the total values for each node considering the links\n  const nodeValues = new Map();\n  links.forEach((link) => {\n    const { source, target, value } = link;\n    const sourceValue = nodeValues.get(source) || 0;\n    const targetValue = nodeValues.get(target) || 0;\n    nodeValues.set(source, sourceValue + value);\n    nodeValues.set(target, targetValue + value);\n  });\n  const tooltipFormatter = (params) => {\n    const { name, data } = params;\n    const value = params.value;\n    const rows = [[metricLabel, valueFormatter.format(value)]];\n    const { source, target } = data;\n    if (source && target) {\n      rows.push([\n      `% (${source})`,\n      percentFormatter.format(value / nodeValues.get(source))]\n      );\n      rows.push([\n      `% (${target})`,\n      percentFormatter.format(value / nodeValues.get(target))]\n      );\n    }\n    return tooltipHtml(rows, name);\n  };\n  const echartOptions = {\n    series: {\n      animation: false,\n      data: seriesData,\n      lineStyle: {\n        color: 'source'\n      },\n      links,\n      type: 'sankey'\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      formatter: tooltipFormatter\n    }\n  };\n  return {\n    refs,\n    formData,\n    width,\n    height,\n    echartOptions,\n    onLegendStateChanged\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}