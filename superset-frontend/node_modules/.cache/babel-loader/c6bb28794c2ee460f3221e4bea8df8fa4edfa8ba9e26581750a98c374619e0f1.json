{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getColumnLabel, getNumberFormatter, getTimeFormatter } from '@superset-ui/core';\nimport { formatSeriesName } from './series';\nconst getCrossFilterDataMask = (selectedValues, groupby, labelMap) => (value) => {\n  const selected = Object.values(selectedValues);\n  let values;\n  if (selected.includes(value)) {\n    values = selected.filter((v) => v !== value);\n  } else\n  {\n    values = [value];\n  }\n  const groupbyValues = values.map((value) => labelMap[value]);\n  return {\n    dataMask: {\n      extraFormData: {\n        filters: values.length === 0 ?\n        [] :\n        groupby.map((col, idx) => {\n          const val = groupbyValues.map((v) => v[idx]);\n          if (val === null || val === undefined)\n          return {\n            col,\n            op: 'IS NULL'\n          };\n          return {\n            col,\n            op: 'IN',\n            val: val\n          };\n        })\n      },\n      filterState: {\n        value: groupbyValues.length ? groupbyValues : null,\n        selectedValues: values.length ? values : null\n      }\n    },\n    isCurrentValueSelected: selected.includes(value)\n  };\n};\nexport const clickEventHandler = (getCrossFilterDataMask, setDataMask, emitCrossFilters) => ({ name }) => {var _getCrossFilterDataMa;\n  if (!emitCrossFilters) {\n    return;\n  }\n  const dataMask = (_getCrossFilterDataMa = getCrossFilterDataMask(name)) == null ? void 0 : _getCrossFilterDataMa.dataMask;\n  if (dataMask) {\n    setDataMask(dataMask);\n  }\n};\nexport const contextMenuEventHandler = (groupby, onContextMenu, labelMap, getCrossFilterDataMask, formData, coltypeMapping) => (e) => {\n  if (onContextMenu) {\n    e.event.stop();\n    const pointerEvent = e.event.event;\n    const drillFilters = [];\n    if (groupby.length > 0) {\n      const values = labelMap[e.name];\n      groupby.forEach((dimension, i) => {\n        drillFilters.push({\n          col: dimension,\n          op: '==',\n          val: values[i],\n          formattedVal: formatSeriesName(values[i], {\n            timeFormatter: getTimeFormatter(formData.dateFormat),\n            numberFormatter: getNumberFormatter(formData.numberFormat),\n            coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(dimension)]\n          })\n        });\n      });\n    }\n    onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n      drillToDetail: drillFilters,\n      crossFilter: groupby.length > 0 ? getCrossFilterDataMask(e.name) : undefined,\n      drillBy: { filters: drillFilters, groupbyFieldName: 'groupby' }\n    });\n  }\n};\nexport const allEventHandlers = (transformedProps) => {\n  const { groupby, onContextMenu, setDataMask, labelMap, emitCrossFilters, selectedValues, coltypeMapping, formData } = transformedProps;\n  const eventHandlers = {\n    click: groupby.length > 0 ?\n    clickEventHandler(getCrossFilterDataMask(selectedValues, groupby, labelMap), setDataMask, emitCrossFilters) :\n    () => {},\n    contextmenu: contextMenuEventHandler(groupby, onContextMenu, labelMap, getCrossFilterDataMask(selectedValues, groupby, labelMap), formData, coltypeMapping)\n  };\n  return eventHandlers;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}