{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { css, styled } from '@superset-ui/core';\n\nimport { Draggable } from '../dnd/DragDroppable';\nimport HoverMenu from '../menu/HoverMenu';\nimport DeleteComponentButton from '../DeleteComponentButton';\nimport { componentShape } from '../../util/propShapes';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  depth: PropTypes.number.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  deleteComponent: PropTypes.func.isRequired\n};\n\nconst DividerLine = styled.div`\n  ${({ theme }) => css`\n    width: 100%;\n    padding: ${theme.gridUnit * 2}px 0; /* this is padding not margin to enable a larger mouse target */\n    background-color: transparent;\n\n    &:after {\n      content: '';\n      height: 1px;\n      width: 100%;\n      background-color: ${theme.colors.grayscale.light2};\n      display: block;\n    }\n\n    div[draggable='true'] & {\n      cursor: move;\n    }\n\n    .dashboard-component-tabs & {\n      padding-left: ${theme.gridUnit * 4}px;\n      padding-right: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nclass Divider extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleDeleteComponent = this.handleDeleteComponent.bind(this);\n  }\n\n  handleDeleteComponent() {\n    const { deleteComponent, id, parentId } = this.props;\n    deleteComponent(id, parentId);\n  }\n\n  render() {\n    const {\n      component,\n      depth,\n      parentComponent,\n      index,\n      handleComponentDrop,\n      editMode\n    } = this.props;\n\n    return (\n      _jsx(Draggable, {\n        component: component,\n        parentComponent: parentComponent,\n        orientation: \"row\",\n        index: index,\n        depth: depth,\n        onDrop: handleComponentDrop,\n        editMode: editMode, children:\n\n        ({ dragSourceRef }) =>\n        _jsxs(\"div\", { ref: dragSourceRef, children: [\n          editMode &&\n          _jsx(HoverMenu, { position: \"left\", children:\n            _jsx(DeleteComponentButton, { onDelete: this.handleDeleteComponent }) }\n          ),\n\n          _jsx(DividerLine, { className: \"dashboard-component dashboard-component-divider\" })] }\n        ) }\n\n      ));\n\n  }\n}\n\nDivider.propTypes = propTypes;\n\nexport default Divider;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}