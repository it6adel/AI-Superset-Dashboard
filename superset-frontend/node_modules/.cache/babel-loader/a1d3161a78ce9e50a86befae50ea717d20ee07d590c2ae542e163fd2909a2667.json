{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { MainNav as Menu } from 'src/components/Menu';\nimport { styled, css, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst { SubMenu } = Menu;\nconst StyledLabel = styled.div`\n  display: flex;\n  align-items: center;\n\n  & i {\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  & a {\n    display: block;\n    width: 150px;\n    word-wrap: break-word;\n    text-decoration: none;\n  }\n`;\nconst StyledFlag = styled.i`\n  margin-top: 2px;\n`;\nexport default function LanguagePicker(props) {\n  const { locale, languages, ...rest } = props;\n  const theme = useTheme();\n  return _jsx(SubMenu, { css: css`\n        [data-icon='caret-down'] {\n          color: ${theme.colors.grayscale.base};\n          font-size: ${theme.typography.sizes.xxs}px;\n          margin-left: ${theme.gridUnit}px;\n        }\n      `, \"aria-label\": \"Languages\", title: _jsx(\"div\", { className: \"f16\", children:\n      _jsx(StyledFlag, { className: `flag ${languages[locale].flag}` }) }\n    ), icon: _jsx(Icons.CaretDownOutlined, { iconSize: \"xs\" }), ...rest, children:\n    Object.keys(languages).map((langKey) => _jsx(Menu.Item, { style: { whiteSpace: 'normal', height: 'auto' }, children:\n      _jsxs(StyledLabel, { className: \"f16\", children: [\n        _jsx(\"i\", { className: `flag ${languages[langKey].flag}` }),\n        _jsx(\"a\", { href: languages[langKey].url, children: languages[langKey].name })] }\n      ) }, langKey\n    )) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}