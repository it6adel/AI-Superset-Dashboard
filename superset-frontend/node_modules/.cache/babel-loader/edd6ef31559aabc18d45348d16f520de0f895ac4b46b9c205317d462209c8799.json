{"ast":null,"code":"import _pickBy from \"lodash/pickBy\";import _pick from \"lodash/pick\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { enforceSharedLabelsColorsArray } from 'src/utils/colorScheme';\nconst EMPTY_OBJECT = {};\nexport const getDashboardContextLocalStorage = () => {\n  const dashboardsContexts = getItem(LocalStorageKeys.DashboardExploreContext, {});\n  // A new dashboard tab id is generated on each dashboard page opening.\n  // We mark ids as redundant when user leaves the dashboard, because they won't be reused.\n  // Then we remove redundant dashboard contexts from local storage in order not to clutter it\n  return _pickBy(dashboardsContexts, (value) => !value.isRedundant);\n};\nconst updateDashboardTabLocalStorage = (dashboardPageId, dashboardContext) => {\n  const dashboardsContexts = getDashboardContextLocalStorage();\n  setItem(LocalStorageKeys.DashboardExploreContext, {\n    ...dashboardsContexts,\n    [dashboardPageId]: { ...dashboardContext, dashboardPageId }\n  });\n};\nconst selectDashboardContextForExplore = createSelector([\n(state) => state.dashboardInfo.metadata,\n(state) => state.dashboardInfo.id,\n(state) => {var _state$dashboardState;return (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.colorScheme;},\n(state) => {var _state$nativeFilters;return (_state$nativeFilters = state.nativeFilters) == null ? void 0 : _state$nativeFilters.filters;},\n(state) => state.dataMask],\n(metadata, dashboardId, colorScheme, filters, dataMask) => {\n  const nativeFilters = Object.keys(filters).reduce((acc, key) => {\n    acc[key] = _pick(filters[key], ['chartsInScope']);\n    return acc;\n  }, {});\n  return {\n    labelsColor: (metadata == null ? void 0 : metadata.label_colors) || EMPTY_OBJECT,\n    labelsColorMap: (metadata == null ? void 0 : metadata.map_label_colors) || EMPTY_OBJECT,\n    sharedLabelsColors: enforceSharedLabelsColorsArray(metadata == null ? void 0 : metadata.shared_label_colors),\n    colorScheme,\n    chartConfiguration: (metadata == null ? void 0 : metadata.chart_configuration) || EMPTY_OBJECT,\n    nativeFilters,\n    dataMask,\n    dashboardId,\n    filterBoxFilters: getActiveFilters()\n  };\n});\nconst SyncDashboardState = ({ dashboardPageId }) => {\n  const dashboardContextForExplore = useSelector(selectDashboardContextForExplore);\n  useEffect(() => {\n    updateDashboardTabLocalStorage(dashboardPageId, dashboardContextForExplore);\n    return () => {\n      // mark tab id as redundant when dashboard unmounts - case when user opens\n      // Explore in the same tab\n      updateDashboardTabLocalStorage(dashboardPageId, {\n        ...dashboardContextForExplore,\n        isRedundant: true\n      });\n    };\n  }, [dashboardContextForExplore, dashboardPageId]);\n  return null;\n};\nexport default SyncDashboardState;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}