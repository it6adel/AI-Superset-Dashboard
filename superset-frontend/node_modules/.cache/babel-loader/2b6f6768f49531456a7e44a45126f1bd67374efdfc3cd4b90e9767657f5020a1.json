{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Dashboard from 'src/dashboard/components/Dashboard';\nimport { addSliceToDashboard, removeSliceFromDashboard } from 'src/dashboard/actions/dashboardState';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\nimport { triggerQuery } from 'src/components/Chart/chartAction';\nimport { logEvent } from 'src/logger/actions';\nimport { clearDataMaskState } from '../../dataMask/actions';\nfunction mapStateToProps(state) {var _dashboardInfo$common, _dashboardInfo$common2, _dashboardInfo$metada;\n  const { datasources, sliceEntities, dashboardInfo, dashboardState, dashboardLayout, impressionId } = state;\n  return {\n    timeout: (_dashboardInfo$common = dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common2 = _dashboardInfo$common.conf) == null ? void 0 : _dashboardInfo$common2.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardId: dashboardInfo.id,\n    editMode: dashboardState.editMode,\n    isPublished: dashboardState.isPublished,\n    hasUnsavedChanges: dashboardState.hasUnsavedChanges,\n    datasources,\n    chartConfiguration: (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration,\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      setDatasources,\n      clearDataMaskState,\n      addSliceToDashboard,\n      removeSliceFromDashboard,\n      triggerQuery,\n      logEvent\n    }, dispatch)\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}