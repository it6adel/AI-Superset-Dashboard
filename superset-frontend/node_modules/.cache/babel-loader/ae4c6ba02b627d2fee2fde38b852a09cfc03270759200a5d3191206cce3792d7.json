{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo } from 'react';\nimport { css, styled, t, useTheme, NO_TIME_RANGE, useCSSTextTruncation, fetchTimeRange } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport Modal from 'src/components/Modal';\nimport { Divider } from 'src/components/Divider';\nimport Icons from 'src/components/Icons';\nimport Select from 'src/components/Select/Select';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useDebouncedEffect } from 'src/explore/exploreUtils';\nimport { SLOW_DEBOUNCE } from 'src/constants';\nimport { noOp } from 'src/utils/common';\nimport ControlPopover from '../ControlPopover/ControlPopover';\nimport { DateFilterTestKey, FRAME_OPTIONS, guessFrame, useDefaultTimeFilter } from './utils';\nimport { CommonFrame, CalendarFrame, CustomFrame, AdvancedFrame, DateLabel } from './components';\nimport { CurrentCalendarFrame } from './components/CurrentCalendarFrame';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledRangeType = styled(Select)`\n  width: 272px;\n`;\nconst ContentStyleWrapper = styled.div`\n  ${({ theme }) => css`\n    .ant-row {\n      margin-top: 8px;\n    }\n\n    .antd5-input-number {\n      width: 100%;\n    }\n\n    .ant-picker {\n      padding: 4px 17px 4px;\n      border-radius: 4px;\n      width: 100%;\n    }\n\n    .antd5-divider-horizontal {\n      margin: 16px 0;\n    }\n\n    .control-label {\n      font-size: 11px;\n      font-weight: ${theme.typography.weights.medium};\n      color: ${theme.colors.grayscale.light2};\n      line-height: 16px;\n      margin: 8px 0;\n    }\n\n    .section-title {\n      font-style: normal;\n      font-weight: ${theme.typography.weights.bold};\n      font-size: 15px;\n      line-height: 24px;\n      margin-bottom: 8px;\n    }\n\n    .control-anchor-to {\n      margin-top: 16px;\n    }\n\n    .control-anchor-to-datetime {\n      width: 217px;\n    }\n\n    .footer {\n      text-align: right;\n    }\n  `}\n`;\nconst IconWrapper = styled.span`\n  span {\n    margin-right: ${({ theme }) => 2 * theme.gridUnit}px;\n    vertical-align: middle;\n  }\n  .text {\n    vertical-align: middle;\n  }\n  .error {\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n`;\nconst getTooltipTitle = (isLabelTruncated, label, range) => isLabelTruncated ? _jsxs(\"div\", { children: [\n  label && _jsx(\"strong\", { children: label }),\n  range && _jsx(\"div\", { css: (theme) => css`\n            margin-top: ${theme.gridUnit}px;\n          `, children:\n    range }\n  )] }\n) : range || null;\nexport default function DateFilterLabel(props) {var _props$value;\n  const { name, onChange, onOpenPopover = noOp, onClosePopover = noOp, overlayStyle = 'Popover', isOverflowingFilterBar = false } = props;\n  const defaultTimeFilter = useDefaultTimeFilter();\n  const value = (_props$value = props.value) != null ? _props$value : defaultTimeFilter;\n  const [actualTimeRange, setActualTimeRange] = useState(value);\n  const [show, setShow] = useState(false);\n  const guessedFrame = useMemo(() => guessFrame(value), [value]);\n  const [frame, setFrame] = useState(guessedFrame);\n  const [lastFetchedTimeRange, setLastFetchedTimeRange] = useState(value);\n  const [timeRangeValue, setTimeRangeValue] = useState(value);\n  const [validTimeRange, setValidTimeRange] = useState(false);\n  const [evalResponse, setEvalResponse] = useState(value);\n  const [tooltipTitle, setTooltipTitle] = useState(value);\n  const theme = useTheme();\n  const [labelRef, labelIsTruncated] = useCSSTextTruncation();\n  useEffect(() => {\n    if (value === NO_TIME_RANGE) {\n      setActualTimeRange(NO_TIME_RANGE);\n      setTooltipTitle(null);\n      setValidTimeRange(true);\n      return;\n    }\n    fetchTimeRange(value).then(({ value: actualRange, error }) => {\n      if (error) {\n        setEvalResponse(error || '');\n        setValidTimeRange(false);\n        setTooltipTitle(value || null);\n      } else\n      {\n        /*\n          HRT == human readable text\n          ADR == actual datetime range\n          +--------------+------+----------+--------+----------+-----------+\n          |              | Last | Previous | Custom | Advanced | No Filter |\n          +--------------+------+----------+--------+----------+-----------+\n          | control pill | HRT  | HRT      | ADR    | ADR      |   HRT     |\n          +--------------+------+----------+--------+----------+-----------+\n          | tooltip      | ADR  | ADR      | HRT    | HRT      |   ADR     |\n          +--------------+------+----------+--------+----------+-----------+\n        */\n        if (guessedFrame === 'Common' ||\n        guessedFrame === 'Calendar' ||\n        guessedFrame === 'Current' ||\n        guessedFrame === 'No filter') {\n          setActualTimeRange(value);\n          setTooltipTitle(getTooltipTitle(labelIsTruncated, value, actualRange));\n        } else\n        {\n          setActualTimeRange(actualRange || '');\n          setTooltipTitle(getTooltipTitle(labelIsTruncated, actualRange, value));\n        }\n        setValidTimeRange(true);\n      }\n      setLastFetchedTimeRange(value);\n      setEvalResponse(actualRange || value);\n    });\n  }, [guessedFrame, labelIsTruncated, labelRef, value]);\n  useDebouncedEffect(() => {\n    if (timeRangeValue === NO_TIME_RANGE) {\n      setEvalResponse(NO_TIME_RANGE);\n      setLastFetchedTimeRange(NO_TIME_RANGE);\n      setValidTimeRange(true);\n      return;\n    }\n    if (lastFetchedTimeRange !== timeRangeValue) {\n      fetchTimeRange(timeRangeValue).then(({ value: actualRange, error }) => {\n        if (error) {\n          setEvalResponse(error || '');\n          setValidTimeRange(false);\n        } else\n        {\n          setEvalResponse(actualRange || '');\n          setValidTimeRange(true);\n        }\n        setLastFetchedTimeRange(timeRangeValue);\n      });\n    }\n  }, SLOW_DEBOUNCE, [timeRangeValue]);\n  function onSave() {\n    onChange(timeRangeValue);\n    setShow(false);\n    onClosePopover();\n  }\n  function onOpen() {\n    setTimeRangeValue(value);\n    setFrame(guessedFrame);\n    setShow(true);\n    onOpenPopover();\n  }\n  function onHide() {\n    setTimeRangeValue(value);\n    setFrame(guessedFrame);\n    setShow(false);\n    onClosePopover();\n  }\n  const toggleOverlay = () => {\n    if (show) {\n      onHide();\n    } else\n    {\n      onOpen();\n    }\n  };\n  function onChangeFrame(value) {\n    if (value === NO_TIME_RANGE) {\n      setTimeRangeValue(NO_TIME_RANGE);\n    }\n    setFrame(value);\n  }\n  const overlayContent = _jsxs(ContentStyleWrapper, { children: [\n    _jsx(\"div\", { className: \"control-label\", children: t('RANGE TYPE') }),\n    _jsx(StyledRangeType, { ariaLabel: t('RANGE TYPE'), options: FRAME_OPTIONS, value: frame, onChange: onChangeFrame }),\n    frame !== 'No filter' && _jsx(Divider, {}),\n    frame === 'Common' && _jsx(CommonFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n    frame === 'Calendar' && _jsx(CalendarFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n    frame === 'Current' && _jsx(CurrentCalendarFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n    frame === 'Advanced' && _jsx(AdvancedFrame, { value: timeRangeValue, onChange: setTimeRangeValue }),\n    frame === 'Custom' && _jsx(CustomFrame, { value: timeRangeValue, onChange: setTimeRangeValue, isOverflowingFilterBar: isOverflowingFilterBar }),\n    frame === 'No filter' && _jsx(\"div\", {}),\n    _jsx(Divider, {}),\n    _jsxs(\"div\", { children: [\n      _jsx(\"div\", { className: \"section-title\", children: t('Actual time range') }),\n      validTimeRange && _jsx(\"div\", { children:\n        evalResponse === 'No filter' ? t('No filter') : evalResponse }\n      ),\n      !validTimeRange && _jsxs(IconWrapper, { className: \"warning\", children: [\n        _jsx(Icons.ExclamationCircleOutlined, { iconColor: theme.colors.error.base }),\n        _jsx(\"span\", { className: \"text error\", children: evalResponse })] }\n      )] }\n    ),\n    _jsx(Divider, {}),\n    _jsxs(\"div\", { className: \"footer\", children: [\n      _jsx(Button, { buttonStyle: \"secondary\", cta: true, onClick: onHide, children:\n        t('CANCEL') }, \"cancel\"\n      ),\n      _jsx(Button, { buttonStyle: \"primary\", cta: true, disabled: !validTimeRange, onClick: onSave, children:\n        t('APPLY') }, \"apply\"\n      )] }\n    )] }\n  );\n  const title = _jsxs(IconWrapper, { children: [\n    _jsx(Icons.EditOutlined, {}),\n    _jsx(\"span\", { className: \"text\", children: t('Edit time range') })] }\n  );\n  const popoverContent = _jsx(ControlPopover, { autoAdjustOverflow: false, trigger: \"click\", placement: \"right\", content: overlayContent, title: title, defaultOpen: show, open: show, onOpenChange: toggleOverlay, overlayStyle: { width: '600px' }, destroyTooltipOnHide: true, getPopupContainer: (nodeTrigger) => isOverflowingFilterBar ?\n    nodeTrigger.parentNode :\n    document.body, overlayClassName: \"time-range-popover\", children:\n    _jsx(Tooltip, { placement: \"top\", title: tooltipTitle, children:\n      _jsx(DateLabel, { name: name, \"aria-labelledby\": `filter-name-${props.name}`, \"aria-describedby\": `date-label-${props.name}`, label: actualTimeRange, isActive: show, isPlaceholder: actualTimeRange === NO_TIME_RANGE, ref: labelRef }) }\n    ) }\n  );\n  const modalContent = _jsxs(_Fragment, { children: [\n    _jsx(Tooltip, { placement: \"top\", title: tooltipTitle, children:\n      _jsx(DateLabel, { name: name, \"aria-labelledby\": `filter-name-${props.name}`, \"aria-describedby\": `date-label-${props.name}`, onClick: toggleOverlay, label: actualTimeRange, isActive: show, isPlaceholder: actualTimeRange === NO_TIME_RANGE, ref: labelRef }) }\n    ),\n\n    _jsx(Modal, { title: title, show: show, onHide: toggleOverlay, width: \"600px\", hideFooter: true, zIndex: 1030, children:\n      overlayContent }\n    )] }\n  );\n  return _jsxs(_Fragment, { children: [\n    _jsx(ControlHeader, { ...props }),\n    overlayStyle === 'Modal' ? modalContent : popoverContent] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}