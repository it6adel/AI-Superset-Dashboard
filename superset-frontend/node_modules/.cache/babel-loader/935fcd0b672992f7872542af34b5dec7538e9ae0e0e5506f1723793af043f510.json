{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FilterXSS, getDefaultWhiteList } from 'xss';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst xssFilter = new FilterXSS({\n  whiteList: {\n    ...getDefaultWhiteList(),\n    span: ['style', 'class', 'title'],\n    div: ['style', 'class'],\n    a: ['style', 'class', 'href', 'title', 'target'],\n    img: ['style', 'class', 'src', 'alt', 'title', 'width', 'height'],\n    video: [\n    'autoplay',\n    'controls',\n    'loop',\n    'preload',\n    'src',\n    'height',\n    'width',\n    'muted']\n\n  },\n  stripIgnoreTag: true,\n  css: false\n});\nexport function sanitizeHtml(htmlString) {\n  return xssFilter.process(htmlString);\n}\nexport function hasHtmlTagPattern(str) {\n  const htmlTagPattern = /<(html|head|body|div|span|a|p|h[1-6]|title|meta|link|script|style)/i;\n  return htmlTagPattern.test(str);\n}\nexport function isProbablyHTML(text) {\n  const cleanedStr = text.trim().toLowerCase();\n  if (cleanedStr.startsWith('<!doctype html>') &&\n  hasHtmlTagPattern(cleanedStr)) {\n    return true;\n  }\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(cleanedStr, 'text/html');\n  return Array.from(doc.body.childNodes).some(({ nodeType }) => nodeType === 1);\n}\nexport function sanitizeHtmlIfNeeded(htmlString) {\n  return isProbablyHTML(htmlString) ? sanitizeHtml(htmlString) : htmlString;\n}\nexport function safeHtmlSpan(possiblyHtmlString) {\n  const isHtml = isProbablyHTML(possiblyHtmlString);\n  if (isHtml) {\n    return _jsx(\"span\", { className: \"safe-html-wrapper\", dangerouslySetInnerHTML: { __html: sanitizeHtml(possiblyHtmlString) } });\n  }\n  return possiblyHtmlString;\n}\nexport function removeHTMLTags(str) {\n  return str.replace(/<[^>]*>/g, '');\n}\nexport function isJsonString(str) {\n  try {\n    JSON.parse(str);\n    return true;\n  }\n  catch (e) {\n    return false;\n  }\n}\nexport function getParagraphContents(str) {\n  if (!isProbablyHTML(str)) {\n    return null;\n  }\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(str, 'text/html');\n  const pTags = doc.querySelectorAll('p');\n  if (pTags.length === 0) {\n    return null;\n  }\n  const paragraphContents = {};\n  pTags.forEach((pTag, index) => {\n    paragraphContents[`p${index + 1}`] = pTag.textContent || '';\n  });\n  return paragraphContents;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}