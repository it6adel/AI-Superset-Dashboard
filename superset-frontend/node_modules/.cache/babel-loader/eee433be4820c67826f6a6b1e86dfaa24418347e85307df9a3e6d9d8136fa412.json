{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useState } from 'react';\nimport { makeApi, styled, t, getExtensionsRegistry } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport Modal from 'src/components/Modal';\nimport Loading from 'src/components/Loading';\nimport Button from 'src/components/Button';\nimport { Input } from 'src/components/Input';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { FormItem } from 'src/components/Form';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst stringToList = (stringyList) => stringyList.split(/(?:\\s|,)+/).filter((x) => x);\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n`;\nexport const DashboardEmbedControls = ({ dashboardId, onHide }) => {var _extensionsRegistry$g;\n  const { addInfoToast, addDangerToast } = useToasts();\n  const [ready, setReady] = useState(true); // whether we have initialized yet\n  const [loading, setLoading] = useState(false); // whether we are currently doing an async thing\n  const [embedded, setEmbedded] = useState(null); // the embedded dashboard config\n  const [allowedDomains, setAllowedDomains] = useState('');\n  const endpoint = `/api/v1/dashboard/${dashboardId}/embedded`;\n  // whether saveable changes have been made to the config\n  const isDirty = !embedded ||\n  stringToList(allowedDomains).join() !== embedded.allowed_domains.join();\n  const enableEmbedded = useCallback(() => {\n    setLoading(true);\n    makeApi({\n      method: 'POST',\n      endpoint\n    })({\n      allowed_domains: stringToList(allowedDomains)\n    }).\n    then(({ result }) => {\n      setEmbedded(result);\n      setAllowedDomains(result.allowed_domains.join(', '));\n      addInfoToast(t('Changes saved.'));\n    }, (err) => {\n      console.error(err);\n      addDangerToast(t(t('Sorry, something went wrong. The changes could not be saved.')));\n    }).\n    finally(() => {\n      setLoading(false);\n    });\n  }, [endpoint, allowedDomains]);\n  const disableEmbedded = useCallback(() => {\n    Modal.confirm({\n      title: t('Disable embedding?'),\n      content: t('This will remove your current embed configuration.'),\n      okType: 'danger',\n      onOk: () => {\n        setLoading(true);\n        makeApi({ method: 'DELETE', endpoint })({}).\n        then(() => {\n          setEmbedded(null);\n          setAllowedDomains('');\n          addInfoToast(t('Embedding deactivated.'));\n          onHide();\n        }, (err) => {\n          console.error(err);\n          addDangerToast(t('Sorry, something went wrong. Embedding could not be deactivated.'));\n        }).\n        finally(() => {\n          setLoading(false);\n        });\n      }\n    });\n  }, [endpoint]);\n  useEffect(() => {\n    setReady(false);\n    makeApi({\n      method: 'GET',\n      endpoint\n    })({}).\n    catch((err) => {\n      if (err.status === 404) {\n        // 404 just means the dashboard isn't currently embedded\n        return { result: null };\n      }\n      addDangerToast(t('Sorry, something went wrong. Please try again.'));\n      throw err;\n    }).\n    then(({ result }) => {\n      setReady(true);\n      setEmbedded(result);\n      setAllowedDomains(result ? result.allowed_domains.join(', ') : '');\n    });\n  }, [dashboardId]);\n  if (!ready) {\n    return _jsx(Loading, {});\n  }\n  const DocsConfigDetails = extensionsRegistry.get('embedded.documentation.configuration_details');\n  const docsDescription = extensionsRegistry.get('embedded.documentation.description');\n  const docsUrl = (_extensionsRegistry$g = extensionsRegistry.get('embedded.documentation.url')) != null ? _extensionsRegistry$g :\n  'https://www.npmjs.com/package/@superset-ui/embedded-sdk';\n  return _jsxs(_Fragment, { children: [\n    embedded ? DocsConfigDetails ? _jsx(DocsConfigDetails, { embeddedId: embedded.uuid }) : _jsxs(\"p\", { children: [\n      t('This dashboard is ready to embed. In your application, pass the following id to the SDK:'),\n      _jsx(\"br\", {}),\n      _jsx(\"code\", { children: embedded.uuid })] }\n    ) : _jsx(\"p\", { children:\n      t('Configure this dashboard to embed it into an external web application.') }\n    ),\n    _jsxs(\"p\", { children: [\n      t('For further instructions, consult the'), ' ',\n      _jsx(\"a\", { href: docsUrl, target: \"_blank\", rel: \"noreferrer\", children:\n        docsDescription ?\n        docsDescription() :\n        t('Superset Embedded SDK documentation.') }\n      )] }\n    ),\n    _jsx(\"h3\", { children: t('Settings') }),\n    _jsxs(FormItem, { children: [\n      _jsxs(\"label\", { htmlFor: \"allowed-domains\", children: [\n        t('Allowed Domains (comma separated)'), ' ',\n        _jsx(InfoTooltipWithTrigger, { tooltip: t('A list of domain names that can embed this dashboard. Leaving this field empty will allow embedding from any domain.') })] }\n      ),\n      _jsx(Input, { name: \"allowed-domains\", id: \"allowed-domains\", value: allowedDomains, placeholder: \"superset.example.com\", onChange: (event) => setAllowedDomains(event.target.value) })] }\n    ),\n    _jsx(ButtonRow, { children:\n      embedded ? _jsxs(_Fragment, { children: [\n        _jsx(Button, { onClick: disableEmbedded, buttonStyle: \"secondary\", loading: loading, children:\n          t('Deactivate') }\n        ),\n        _jsx(Button, { onClick: enableEmbedded, buttonStyle: \"primary\", disabled: !isDirty, loading: loading, children:\n          t('Save changes') }\n        )] }\n      ) : _jsx(Button, { onClick: enableEmbedded, buttonStyle: \"primary\", loading: loading, children:\n        t('Enable embedding') }\n      ) }\n    )] }\n  );\n};\nconst DashboardEmbedModal = (props) => {\n  const { show, onHide } = props;\n  const DashboardEmbedModalExtension = extensionsRegistry.get('embedded.modal');\n  return DashboardEmbedModalExtension ? _jsx(DashboardEmbedModalExtension, { ...props }) : _jsx(Modal, { show: show, onHide: onHide, title: t('Embed'), hideFooter: true, children:\n    _jsx(DashboardEmbedControls, { ...props }) }\n  );\n};\nexport default DashboardEmbedModal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}