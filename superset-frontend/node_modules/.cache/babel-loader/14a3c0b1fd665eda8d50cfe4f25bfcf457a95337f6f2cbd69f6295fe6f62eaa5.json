{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { styled, t, css } from '@superset-ui/core';\nimport { NumberParam, useQueryParam } from 'use-query-params';\nimport AllEntitiesTable from 'src/features/allEntities/AllEntitiesTable';\nimport Button from 'src/components/Button';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport TagModal from 'src/features/tags/TagModal';\nimport withToasts, { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { fetchObjectsByTagIds, fetchSingleTag } from 'src/features/tags/tags';\nimport Loading from 'src/components/Loading';\nimport getOwnerName from 'src/utils/getOwnerName';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst additionalItemsStyles = (theme) => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\nconst AllEntitiesContainer = styled.div`\n  ${({ theme }) => `\n  background-color: ${theme.colors.grayscale.light4};\n  .select-control {\n    margin-left: ${theme.gridUnit * 4}px;\n    margin-right: ${theme.gridUnit * 4}px;\n    margin-bottom: ${theme.gridUnit * 2}px;\n  }\n  .select-control-label {\n    font-size: ${theme.gridUnit * 3}px;\n    color: ${theme.colors.grayscale.base};\n    margin-bottom: ${theme.gridUnit * 1}px;\n  }\n  .entities {\n    margin: ${theme.gridUnit * 6}px; 0px;\n  }\n  .pagination-container {\n    background-color: transparent;\n  }\n  `}\n`;\nconst AllEntitiesNav = styled.div`\n  ${({ theme }) => `\n  height: ${theme.gridUnit * 12.5}px;\n  background-color: ${theme.colors.grayscale.light5};\n  margin-bottom: ${theme.gridUnit * 4}px;\n  .navbar-brand {\n    margin-left: ${theme.gridUnit * 2}px;\n    font-weight: ${theme.typography.weights.bold};\n  }\n  .header {\n    font-weight: ${theme.typography.weights.bold};\n    margin-right:  ${theme.gridUnit * 3}px;\n    text-align: left;\n    font-size: ${theme.gridUnit * 4.5}px;\n    padding: ${theme.gridUnit * 3}px;\n    display: inline-block;\n    line-height: ${theme.gridUnit * 9}px;\n  }\n  `};\n`;\nfunction AllEntities() {\n  const [tagId] = useQueryParam('id', NumberParam);\n  const [tag, setTag] = useState(null);\n  const [showTagModal, setShowTagModal] = useState(false);\n  const { addSuccessToast, addDangerToast } = useToasts();\n  const [isLoading, setLoading] = useState(false);\n  const [objects, setObjects] = useState({\n    dashboard: [],\n    chart: [],\n    query: []\n  });\n  const editableTitleProps = {\n    title: (tag == null ? void 0 : tag.name) || '',\n    placeholder: 'testing',\n    onSave: (newDatasetName) => {},\n    canEdit: false,\n    label: t('dataset name')\n  };\n  const items = [];\n  if (tag != null && tag.description) {\n    const description = {\n      type: MetadataType.Description,\n      value: (tag == null ? void 0 : tag.description) || ''\n    };\n    items.push(description);\n  }\n  const owner = {\n    type: MetadataType.Owner,\n    createdBy: getOwnerName(tag == null ? void 0 : tag.created_by),\n    createdOn: (tag == null ? void 0 : tag.created_on_delta_humanized) || ''\n  };\n  items.push(owner);\n  const lastModified = {\n    type: MetadataType.LastModified,\n    value: (tag == null ? void 0 : tag.changed_on_delta_humanized) || '',\n    modifiedBy: getOwnerName(tag == null ? void 0 : tag.changed_by)\n  };\n  items.push(lastModified);\n  const fetchTaggedObjects = () => {\n    setLoading(true);\n    if (!tag) {\n      addDangerToast('Error tag object is not referenced!');\n      return;\n    }\n    fetchObjectsByTagIds({ tagIds: (tag == null ? void 0 : tag.id) !== undefined ? [tag.id] : '', types: null }, (data) => {\n      const objects = { dashboard: [], chart: [], query: [] };\n      data.forEach(function (object) {\n        const object_type = object.type;\n        objects[object_type].push(object);\n      });\n      setObjects(objects);\n      setLoading(false);\n    }, (error) => {\n      addDangerToast('Error Fetching Tagged Objects');\n      setLoading(false);\n    });\n  };\n  const fetchTag = (tagId) => {\n    fetchSingleTag(tagId, (tag) => {\n      setTag(tag);\n      setLoading(false);\n    }, (error) => {\n      addDangerToast(t('Error Fetching Tagged Objects'));\n      setLoading(false);\n    });\n  };\n  useEffect(() => {\n    // fetch single tag met\n    if (tagId) {\n      setLoading(true);\n      fetchTag(tagId);\n    }\n  }, [tagId]);\n  useEffect(() => {\n    if (tag)\n    fetchTaggedObjects();\n  }, [tag]);\n  if (isLoading)\n  return _jsx(Loading, {});\n  return _jsxs(AllEntitiesContainer, { children: [\n    _jsx(TagModal, { show: showTagModal, onHide: () => {\n        setShowTagModal(false);\n      }, editTag: tag, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, refreshData: () => {\n        fetchTaggedObjects();\n        if (tagId)\n        fetchTag(tagId);\n      } }),\n    _jsx(AllEntitiesNav, { children:\n      _jsx(PageHeaderWithActions, { additionalActionsMenu: _jsx(_Fragment, {}), editableTitleProps: editableTitleProps, faveStarProps: { itemId: 1, saveFaveStar: () => {} }, showFaveStar: false, showTitlePanelItems: true, titlePanelAdditionalItems: _jsx(\"div\", { css: additionalItemsStyles, children:\n          _jsx(MetadataBar, { items: items, tooltipPlacement: \"bottom\" }) }\n        ), rightPanelAdditionalItems: _jsx(_Fragment, { children:\n          _jsxs(Button, { buttonStyle: \"secondary\", onClick: () => setShowTagModal(true), showMarginRight: false, children: [\n            t('Edit Tag'), ' '] }\n          ) }\n        ), menuDropdownProps: {\n          disabled: true\n        }, showMenuDropdown: false }) }\n    ),\n    _jsx(\"div\", { className: \"entities\", children:\n      _jsx(AllEntitiesTable, { search: (tag == null ? void 0 : tag.name) || '', setShowTagModal: setShowTagModal, objects: objects }) }\n    )] }\n  );\n}\nexport default withToasts(AllEntities);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}