{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useLayoutEffect, useMemo, useState } from 'react';\nimport { extent as d3Extent, max as d3Max } from 'd3-array';\nimport { FaSort } from '@react-icons/all-files/fa/FaSort';\nimport { FaSortDown as FaSortDesc } from '@react-icons/all-files/fa/FaSortDown';\nimport { FaSortUp as FaSortAsc } from '@react-icons/all-files/fa/FaSortUp';\nimport cx from 'classnames';\nimport { DTTM_ALIAS, ensureIsArray, GenericDataType, getSelectedText, getTimeFormatterForGranularity, styled, css, t, tn, useTheme } from '@superset-ui/core';\nimport { Dropdown, Menu, Tooltip } from '@superset-ui/chart-controls';\nimport { CheckOutlined, InfoCircleOutlined, DownOutlined, MinusCircleOutlined, PlusCircleOutlined, TableOutlined } from '@ant-design/icons';\n\nimport { ColorSchemeEnum } from './types';\nimport DataTable from './DataTable';\nimport Styles from './Styles';\nimport { formatColumnValue } from './utils/formatValue';\nimport { PAGE_SIZE_OPTIONS } from './consts';\nimport { updateExternalFormData } from './DataTable/utils/externalAPIs';\nimport getScrollBarSize from './DataTable/utils/getScrollBarSize';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst ACTION_KEYS = {\n  enter: 'Enter',\n  spacebar: 'Spacebar',\n  space: ' '\n};\n/**\n * Return sortType based on data type\n */\nfunction getSortTypeByDataType(dataType) {\n  if (dataType === GenericDataType.Temporal) {\n    return 'datetime';\n  }\n  if (dataType === GenericDataType.String) {\n    return 'alphanumeric';\n  }\n  return 'basic';\n}\n/**\n * Cell background width calculation for horizontal bar chart\n */\nfunction cellWidth({ value, valueRange, alignPositiveNegative }) {\n  const [minValue, maxValue] = valueRange;\n  if (alignPositiveNegative) {\n    const perc = Math.abs(Math.round(value / maxValue * 100));\n    return perc;\n  }\n  const posExtent = Math.abs(Math.max(maxValue, 0));\n  const negExtent = Math.abs(Math.min(minValue, 0));\n  const tot = posExtent + negExtent;\n  const perc2 = Math.round(Math.abs(value) / tot * 100);\n  return perc2;\n}\n/**\n * Cell left margin (offset) calculation for horizontal bar chart elements\n * when alignPositiveNegative is not set\n */\nfunction cellOffset({ value, valueRange, alignPositiveNegative }) {\n  if (alignPositiveNegative) {\n    return 0;\n  }\n  const [minValue, maxValue] = valueRange;\n  const posExtent = Math.abs(Math.max(maxValue, 0));\n  const negExtent = Math.abs(Math.min(minValue, 0));\n  const tot = posExtent + negExtent;\n  return Math.round(Math.min(negExtent + value, negExtent) / tot * 100);\n}\n/**\n * Cell background color calculation for horizontal bar chart\n */\nfunction cellBackground({ value, colorPositiveNegative = false }) {\n  const r = colorPositiveNegative && value < 0 ? 150 : 0;\n  return `rgba(${r},0,0,0.2)`;\n}\nfunction SortIcon({ column }) {\n  const { isSorted, isSortedDesc } = column;\n  let sortIcon = _jsx(FaSort, {});\n  if (isSorted) {\n    sortIcon = isSortedDesc ? _jsx(FaSortDesc, {}) : _jsx(FaSortAsc, {});\n  }\n  return sortIcon;\n}\nfunction SearchInput({ count, value, onChange }) {\n  return _jsxs(\"span\", { className: \"dt-global-filter\", children: [\n    t('Search'), ' ',\n    _jsx(\"input\", { \"aria-label\": t('Search %s records', count), className: \"form-control input-sm\", placeholder: tn('search.num_records', count), value: value, onChange: onChange })] }\n  );\n}\nfunction SelectPageSize({ options, current, onChange }) {\n  return _jsxs(\"span\", { className: \"dt-select-page-size form-inline\", role: \"group\", \"aria-label\": t('Select page size'), children: [\n    _jsx(\"label\", { htmlFor: \"pageSizeSelect\", className: \"sr-only\", children:\n      t('Select page size') }\n    ),\n    t('Show'), ' ',\n    _jsx(\"select\", { id: \"pageSizeSelect\", className: \"form-control input-sm\", value: current, onChange: (e) => {\n        onChange(Number(e.target.value));\n      }, \"aria-label\": t('Show entries per page'), children:\n      options.map((option) => {\n        const [size, text] = Array.isArray(option) ?\n        option :\n        [option, option];\n        return _jsx(\"option\", { value: size, children:\n          text }, size\n        );\n      }) }\n    ), ' ',\n    t('entries per page')] }\n  );\n}\nconst getNoResultsMessage = (filter) => filter ? t('No matching records found') : t('No records found');var _ref = process.env.NODE_ENV === \"production\" ? { name: \"tvoj80\", styles: \"display:inline-flex;align-items:flex-end\" } : { name: \"1f5n49p-Header\", styles: \"display:inline-flex;align-items:flex-end;label:Header;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nexport default function TableChart(props) {\n  const { timeGrain, height, width, data, totals, isRawRecords, rowCount = 0, columns: columnsMeta, alignPositiveNegative: defaultAlignPN = false, colorPositiveNegative: defaultColorPN = false, includeSearch = false, pageSize = 0, serverPagination = false, serverPaginationData, setDataMask, showCellBars = true, sortDesc = false, filters, sticky = true, // whether to use sticky header\n    columnColorFormatters, allowRearrangeColumns = false, allowRenderHtml = true, onContextMenu, emitCrossFilters, isUsingTimeComparison, basicColorFormatters, basicColorColumnFormatters } = props;\n  const comparisonColumns = [\n  { key: 'all', label: t('Display all') },\n  { key: '#', label: '#' },\n  { key: '△', label: '△' },\n  { key: '%', label: '%' }];\n\n  const timestampFormatter = useCallback((value) => getTimeFormatterForGranularity(timeGrain)(value), [timeGrain]);\n  const [tableSize, setTableSize] = useState({\n    width: 0,\n    height: 0\n  });\n  // keep track of whether column order changed, so that column widths can too\n  const [columnOrderToggle, setColumnOrderToggle] = useState(false);\n  const [showComparisonDropdown, setShowComparisonDropdown] = useState(false);\n  const [selectedComparisonColumns, setSelectedComparisonColumns] = useState([\n  comparisonColumns[0].key]\n  );\n  const [hideComparisonKeys, setHideComparisonKeys] = useState([]);\n  const theme = useTheme();\n  // only take relevant page size options\n  const pageSizeOptions = useMemo(() => {\n    const getServerPagination = (n) => n <= rowCount;\n    return PAGE_SIZE_OPTIONS.filter(([n]) => serverPagination ? getServerPagination(n) : n <= 2 * data.length);\n  }, [data.length, rowCount, serverPagination]);\n  const getValueRange = useCallback(function getValueRange(key, alignPositiveNegative) {var _data$;\n    if (typeof (data == null ? void 0 : (_data$ = data[0]) == null ? void 0 : _data$[key]) === 'number') {\n      const nums = data.map((row) => row[key]);\n      return alignPositiveNegative ?\n      [0, d3Max(nums.map(Math.abs))] :\n      d3Extent(nums);\n    }\n    return null;\n  }, [data]);\n  const isActiveFilterValue = useCallback(function isActiveFilterValue(key, val) {var _filters$key;\n    return !!filters && ((_filters$key = filters[key]) == null ? void 0 : _filters$key.includes(val));\n  }, [filters]);\n  const getCrossFilterDataMask = (key, value) => {\n    let updatedFilters = { ...(filters || {}) };\n    if (filters && isActiveFilterValue(key, value)) {\n      updatedFilters = {};\n    } else\n    {\n      updatedFilters = {\n        [key]: [value]\n      };\n    }\n    if (Array.isArray(updatedFilters[key]) &&\n    updatedFilters[key].length === 0) {\n      delete updatedFilters[key];\n    }\n    const groupBy = Object.keys(updatedFilters);\n    const groupByValues = Object.values(updatedFilters);\n    const labelElements = [];\n    groupBy.forEach((col) => {var _updatedFilters;\n      const isTimestamp = col === DTTM_ALIAS;\n      const filterValues = ensureIsArray((_updatedFilters = updatedFilters) == null ? void 0 : _updatedFilters[col]);\n      if (filterValues.length) {\n        const valueLabels = filterValues.map((value) => isTimestamp ? timestampFormatter(value) : value);\n        labelElements.push(`${valueLabels.join(', ')}`);\n      }\n    });\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: groupBy.length === 0 ?\n          [] :\n          groupBy.map((col) => {var _updatedFilters2;\n            const val = ensureIsArray((_updatedFilters2 = updatedFilters) == null ? void 0 : _updatedFilters2[col]);\n            if (!val.length)\n            return {\n              col,\n              op: 'IS NULL'\n            };\n            return {\n              col,\n              op: 'IN',\n              val: val.map((el) => el instanceof Date ? el.getTime() : el),\n              grain: col === DTTM_ALIAS ? timeGrain : undefined\n            };\n          })\n        },\n        filterState: {\n          label: labelElements.join(', '),\n          value: groupByValues.length ? groupByValues : null,\n          filters: updatedFilters && Object.keys(updatedFilters).length ?\n          updatedFilters :\n          null\n        }\n      },\n      isCurrentValueSelected: isActiveFilterValue(key, value)\n    };\n  };\n  const toggleFilter = useCallback(function toggleFilter(key, val) {\n    if (!emitCrossFilters) {\n      return;\n    }\n    setDataMask(getCrossFilterDataMask(key, val).dataMask);\n  }, [emitCrossFilters, getCrossFilterDataMask, setDataMask]);\n  const getSharedStyle = (column) => {\n    const { isNumeric, config = {} } = column;\n    const textAlign = config.horizontalAlign || (\n    isNumeric && !isUsingTimeComparison ? 'right' : 'left');\n    return {\n      textAlign\n    };\n  };\n  const comparisonLabels = [t('Main'), '#', '△', '%'];\n  const filteredColumnsMeta = useMemo(() => {\n    if (!isUsingTimeComparison) {\n      return columnsMeta;\n    }\n    const allColumns = comparisonColumns[0].key;\n    const main = comparisonLabels[0];\n    const showAllColumns = selectedComparisonColumns.includes(allColumns);\n    return columnsMeta.filter(({ label, key }) => {\n      // Extract the key portion after the space, assuming the format is always \"label key\"\n      const keyPortion = key.substring(label.length);\n      const isKeyHidded = hideComparisonKeys.includes(keyPortion);\n      const isLableMain = label === main;\n      return isLableMain ||\n      !isKeyHidded && (\n      !comparisonLabels.includes(label) ||\n      showAllColumns ||\n      selectedComparisonColumns.includes(label));\n    });\n  }, [\n  columnsMeta,\n  comparisonColumns,\n  comparisonLabels,\n  isUsingTimeComparison,\n  hideComparisonKeys,\n  selectedComparisonColumns]\n  );\n  const handleContextMenu = onContextMenu && !isRawRecords ?\n  (value, cellPoint, clientX, clientY) => {\n    const drillToDetailFilters = [];\n    filteredColumnsMeta.forEach((col) => {\n      if (!col.isMetric) {\n        const dataRecordValue = value[col.key];\n        drillToDetailFilters.push({\n          col: col.key,\n          op: '==',\n          val: dataRecordValue,\n          formattedVal: formatColumnValue(col, dataRecordValue)[1]\n        });\n      }\n    });\n    onContextMenu(clientX, clientY, {\n      drillToDetail: drillToDetailFilters,\n      crossFilter: cellPoint.isMetric ?\n      undefined :\n      getCrossFilterDataMask(cellPoint.key, cellPoint.value),\n      drillBy: cellPoint.isMetric ?\n      undefined :\n      {\n        filters: [\n        {\n          col: cellPoint.key,\n          op: '==',\n          val: cellPoint.value\n        }],\n\n        groupbyFieldName: 'groupby'\n      }\n    });\n  } :\n  undefined;\n  const getHeaderColumns = (columnsMeta, enableTimeComparison) => {\n    const resultMap = {};\n    if (!enableTimeComparison) {\n      return resultMap;\n    }\n    columnsMeta.forEach((element, index) => {\n      // Check if element's label is one of the comparison labels\n      if (comparisonLabels.includes(element.label)) {\n        // Extract the key portion after the space, assuming the format is always \"label key\"\n        const keyPortion = element.key.substring(element.label.length);\n        // If the key portion is not in the map, initialize it with the current index\n        if (!resultMap[keyPortion]) {\n          resultMap[keyPortion] = [index];\n        } else\n        {\n          // Add the index to the existing array\n          resultMap[keyPortion].push(index);\n        }\n      }\n    });\n    return resultMap;\n  };\n  const renderTimeComparisonDropdown = () => {\n    const allKey = comparisonColumns[0].key;\n    const handleOnClick = (data) => {\n      const { key } = data;\n      // Toggle 'All' key selection\n      if (key === allKey) {\n        setSelectedComparisonColumns([allKey]);\n      } else\n      if (selectedComparisonColumns.includes(allKey)) {\n        setSelectedComparisonColumns([key]);\n      } else\n      {\n        // Toggle selection for other keys\n        setSelectedComparisonColumns(selectedComparisonColumns.includes(key) ?\n        selectedComparisonColumns.filter((k) => k !== key) // Deselect if already selected\n        : [...selectedComparisonColumns, key]); // Select if not already selected\n      }\n    };\n    const handleOnBlur = () => {\n      if (selectedComparisonColumns.length === 3) {\n        setSelectedComparisonColumns([comparisonColumns[0].key]);\n      }\n    };\n    return _jsx(Dropdown, { placement: \"bottomRight\", visible: showComparisonDropdown, onVisibleChange: (flag) => {\n        setShowComparisonDropdown(flag);\n      }, overlay: _jsxs(Menu, { multiple: true, onClick: handleOnClick, onBlur: handleOnBlur, selectedKeys: selectedComparisonColumns, children: [\n        _jsx(\"div\", { css: css`\n                max-width: 242px;\n                padding: 0 ${theme.gridUnit * 2}px;\n                color: ${theme.colors.grayscale.base};\n                font-size: ${theme.typography.sizes.s}px;\n              `, children:\n          t('Select columns that will be displayed in the table. You can multiselect columns.') }\n        ),\n        comparisonColumns.map((column) => _jsxs(Menu.Item, { children: [\n          _jsx(\"span\", { css: css`\n                    color: ${theme.colors.grayscale.dark2};\n                  `, children:\n            column.label }\n          ),\n          _jsx(\"span\", { css: css`\n                    float: right;\n                    font-size: ${theme.typography.sizes.s}px;\n                  `, children:\n            selectedComparisonColumns.includes(column.key) && _jsx(CheckOutlined, {}) }\n          )] }, column.key\n        ))] }\n      ), trigger: ['click'], children:\n      _jsxs(\"span\", { children: [\n        _jsx(TableOutlined, {}), \" \", _jsx(DownOutlined, {})] }\n      ) }\n    );\n  };\n  const renderGroupingHeaders = () => {\n    // TODO: Make use of ColumnGroup to render the aditional headers\n    const headers = [];\n    let currentColumnIndex = 0;\n    Object.entries(groupHeaderColumns || {}).forEach(([key, value]) => {\n      // Calculate the number of placeholder columns needed before the current header\n      const startPosition = value[0];\n      const colSpan = value.length;\n      // Add placeholder <th> for columns before this header\n      for (let i = currentColumnIndex; i < startPosition; i += 1) {\n        headers.push(_jsx(\"th\", { style: { borderBottom: 0 }, \"aria-label\": `Header-${i}` }, `placeholder-${i}`));\n      }\n      // Add the current header <th>\n      headers.push(_jsxs(\"th\", { colSpan: colSpan, style: { borderBottom: 0 }, children: [\n        key,\n        _jsx(\"span\", { css: css`\n              float: right;\n              & svg {\n                color: ${theme.colors.grayscale.base} !important;\n              }\n            `, children:\n          hideComparisonKeys.includes(key) ? _jsx(PlusCircleOutlined, { onClick: () => setHideComparisonKeys(hideComparisonKeys.filter((k) => k !== key)) }) : _jsx(MinusCircleOutlined, { onClick: () => setHideComparisonKeys([...hideComparisonKeys, key]) }) }\n        )] }, `header-${key}`\n      ));\n      // Update the current column index\n      currentColumnIndex = startPosition + colSpan;\n    });\n    return _jsx(\"tr\", { css: css`\n          th {\n            border-right: 2px solid ${theme.colors.grayscale.light2};\n          }\n          th:first-child {\n            border-left: none;\n          }\n          th:last-child {\n            border-right: none;\n          }\n        `, children:\n      headers }\n    );\n  };\n  const groupHeaderColumns = useMemo(() => getHeaderColumns(filteredColumnsMeta, isUsingTimeComparison), [filteredColumnsMeta, isUsingTimeComparison]);\n  const getColumnConfigs = useCallback((column, i) => {\n    const { key, label, isNumeric, dataType, isMetric, isPercentMetric, config = {} } = column;\n    const columnWidth = Number.isNaN(Number(config.columnWidth)) ?\n    config.columnWidth :\n    Number(config.columnWidth);\n    // inline style for both th and td cell\n    const sharedStyle = getSharedStyle(column);\n    const alignPositiveNegative = config.alignPositiveNegative === undefined ?\n    defaultAlignPN :\n    config.alignPositiveNegative;\n    const colorPositiveNegative = config.colorPositiveNegative === undefined ?\n    defaultColorPN :\n    config.colorPositiveNegative;\n    const { truncateLongCells } = config;\n    const hasColumnColorFormatters = isNumeric &&\n    Array.isArray(columnColorFormatters) &&\n    columnColorFormatters.length > 0;\n    const hasBasicColorFormatters = isUsingTimeComparison &&\n    Array.isArray(basicColorFormatters) &&\n    basicColorFormatters.length > 0;\n    const valueRange = !hasBasicColorFormatters &&\n    !hasColumnColorFormatters && (\n    config.showCellBars === undefined ?\n    showCellBars :\n    config.showCellBars) && (\n    isMetric || isRawRecords || isPercentMetric) &&\n    getValueRange(key, alignPositiveNegative);\n    let className = '';\n    if (emitCrossFilters && !isMetric) {\n      className += ' dt-is-filter';\n    }\n    if (!isMetric && !isPercentMetric) {\n      className += ' right-border-only';\n    } else\n    if (comparisonLabels.includes(label)) {\n      const groupinHeader = key.substring(label.length);\n      const columnsUnderHeader = groupHeaderColumns[groupinHeader] || [];\n      if (i === columnsUnderHeader[columnsUnderHeader.length - 1]) {\n        className += ' right-border-only';\n      }\n    }\n    return {\n      id: String(i),\n      // must use custom accessor to allow `.` in column names\n      // typing is incorrect in current version of `@types/react-table`\n      // so we ask TS not to check.\n      accessor: (datum) => datum[key],\n      Cell: ({ value, row }) => {var _basicColorFormatters3;\n        const [isHtml, text] = formatColumnValue(column, value);\n        const html = isHtml && allowRenderHtml ? { __html: text } : undefined;\n        let backgroundColor;\n        let arrow = '';\n        const originKey = column.key.substring(column.label.length).trim();\n        if (!hasColumnColorFormatters && hasBasicColorFormatters) {var _basicColorFormatters, _basicColorFormatters2;\n          backgroundColor = (_basicColorFormatters =\n          basicColorFormatters[row.index][originKey]) == null ? void 0 : _basicColorFormatters.backgroundColor;\n          arrow =\n          column.label === comparisonLabels[0] ? (_basicColorFormatters2 =\n          basicColorFormatters[row.index][originKey]) == null ? void 0 : _basicColorFormatters2.mainArrow :\n          '';\n        }\n        if (hasColumnColorFormatters) {\n          columnColorFormatters.\n          filter((formatter) => formatter.column === column.key).\n          forEach((formatter) => {\n            const formatterResult = value || value === 0 ?\n            formatter.getColorFromValue(value) :\n            false;\n            if (formatterResult) {\n              backgroundColor = formatterResult;\n            }\n          });\n        }\n        if (basicColorColumnFormatters &&\n        (basicColorColumnFormatters == null ? void 0 : basicColorColumnFormatters.length) > 0) {var _basicColorColumnForm, _basicColorColumnForm2;\n          backgroundColor =\n          ((_basicColorColumnForm = basicColorColumnFormatters[row.index][column.key]) == null ? void 0 : _basicColorColumnForm.\n          backgroundColor) || backgroundColor;\n          arrow =\n          column.label === comparisonLabels[0] ? (_basicColorColumnForm2 =\n          basicColorColumnFormatters[row.index][column.key]) == null ? void 0 : _basicColorColumnForm2.mainArrow :\n          '';\n        }\n        const StyledCell = styled.td`\n            text-align: ${sharedStyle.textAlign};\n            white-space: ${value instanceof Date ? 'nowrap' : undefined};\n            position: relative;\n            background: ${backgroundColor || undefined};\n          `;\n        const cellBarStyles = css`\n            position: absolute;\n            height: 100%;\n            display: block;\n            top: 0;\n            ${valueRange &&\n        `\n                width: ${`${cellWidth({\n          value: value,\n          valueRange,\n          alignPositiveNegative\n        })}%`};\n                left: ${`${cellOffset({\n          value: value,\n          valueRange,\n          alignPositiveNegative\n        })}%`};\n                background-color: ${cellBackground({\n          value: value,\n          colorPositiveNegative\n        })};\n              `}\n          `;\n        let arrowStyles = css`\n            color: ${basicColorFormatters &&\n        ((_basicColorFormatters3 = basicColorFormatters[row.index][originKey]) == null ? void 0 : _basicColorFormatters3.arrowColor) ===\n        ColorSchemeEnum.Green ?\n        theme.colors.success.base :\n        theme.colors.error.base};\n            margin-right: ${theme.gridUnit}px;\n          `;\n        if (basicColorColumnFormatters &&\n        (basicColorColumnFormatters == null ? void 0 : basicColorColumnFormatters.length) > 0) {var _basicColorColumnForm3;\n          arrowStyles = css`\n              color: ${((_basicColorColumnForm3 = basicColorColumnFormatters[row.index][column.key]) == null ? void 0 : _basicColorColumnForm3.\n          arrowColor) === ColorSchemeEnum.Green ?\n          theme.colors.success.base :\n          theme.colors.error.base};\n              margin-right: ${theme.gridUnit}px;\n            `;\n        }\n        const cellProps = {\n          'aria-labelledby': `header-${column.key}`,\n          role: 'cell',\n          // show raw number in title in case of numeric values\n          title: typeof value === 'number' ? String(value) : undefined,\n          onClick: emitCrossFilters && !valueRange && !isMetric ?\n          () => {\n            // allow selecting text in a cell\n            if (!getSelectedText()) {\n              toggleFilter(key, value);\n            }\n          } :\n          undefined,\n          onContextMenu: (e) => {\n            if (handleContextMenu) {\n              e.preventDefault();\n              e.stopPropagation();\n              handleContextMenu(row.original, { key, value, isMetric }, e.nativeEvent.clientX, e.nativeEvent.clientY);\n            }\n          },\n          className: [\n          className,\n          value == null ? 'dt-is-null' : '',\n          isActiveFilterValue(key, value) ? ' dt-is-active-filter' : ''].\n          join(' '),\n          tabIndex: 0\n        };\n        if (html) {\n          if (truncateLongCells) {\n            // eslint-disable-next-line react/no-danger\n            return _jsx(StyledCell, { ...cellProps, children:\n              _jsx(\"div\", { className: \"dt-truncate-cell\", style: columnWidth ? { width: columnWidth } : undefined, dangerouslySetInnerHTML: html }) }\n            );\n          }\n          // eslint-disable-next-line react/no-danger\n          return _jsx(StyledCell, { ...cellProps, dangerouslySetInnerHTML: html });\n        }\n        // If cellProps renders textContent already, then we don't have to\n        // render `Cell`. This saves some time for large tables.\n        return _jsxs(StyledCell, { ...cellProps, children: [\n          valueRange && _jsx(\"div\", {\n            /* The following classes are added to support custom CSS styling */\n            className: cx('cell-bar', typeof value === 'number' && value < 0 ?\n            'negative' :\n            'positive'), css: cellBarStyles, role: \"presentation\" }),\n          truncateLongCells ? _jsxs(\"div\", { className: \"dt-truncate-cell\", style: columnWidth ? { width: columnWidth } : undefined, children: [\n            arrow && _jsx(\"span\", { css: arrowStyles, children: arrow }),\n            text] }\n          ) : _jsxs(_Fragment, { children: [\n            arrow && _jsx(\"span\", { css: arrowStyles, children: arrow }),\n            text] }\n          )] }\n        );\n      },\n      Header: ({ column: col, onClick, style, onDragStart, onDrop }) => _jsxs(\"th\", { id: `header-${column.key}`, title: t('Shift + Click to sort by multiple columns'), className: [className, col.isSorted ? 'is-sorted' : ''].join(' '), style: {\n          ...sharedStyle,\n          ...style\n        }, onKeyDown: (e) => {\n          // programatically sort column on keypress\n          if (Object.values(ACTION_KEYS).includes(e.key)) {\n            col.toggleSortBy();\n          }\n        }, role: \"columnheader button\", onClick: onClick, \"data-column-name\": col.id, ...(allowRearrangeColumns && {\n          draggable: 'true',\n          onDragStart,\n          onDragOver: (e) => e.preventDefault(),\n          onDragEnter: (e) => e.preventDefault(),\n          onDrop\n        }), tabIndex: 0, children: [\n\n        config.columnWidth ?\n        // column width hint\n        _jsx(\"div\", { style: {\n            width: columnWidth,\n            height: 0.01\n          } }) : null,\n        _jsxs(\"div\", { \"data-column-name\": col.id, css: _ref, children: [\n\n\n\n          _jsx(\"span\", { \"data-column-name\": col.id, children: label }),\n          _jsx(SortIcon, { column: col })] }\n        )] }\n      ),\n      Footer: totals ? i === 0 ? _jsx(\"th\", { children:\n        _jsxs(\"div\", { css: css`\n                  display: flex;\n                  align-items: center;\n                  & svg {\n                    margin-left: ${theme.gridUnit}px;\n                    color: ${theme.colors.grayscale.dark1} !important;\n                  }\n                `, children: [\n          t('Summary'),\n          _jsx(Tooltip, { overlay: t('Show total aggregations of selected metrics. Note that row limit does not apply to the result.'), children:\n            _jsx(InfoCircleOutlined, {}) }\n          )] }\n        ) }\n      ) : _jsx(\"td\", { style: sharedStyle, children:\n        _jsx(\"strong\", { children: formatColumnValue(column, totals[key])[1] }) }\n      ) : undefined,\n      sortDescFirst: sortDesc,\n      sortType: getSortTypeByDataType(dataType)\n    };\n  }, [\n  defaultAlignPN,\n  defaultColorPN,\n  emitCrossFilters,\n  getValueRange,\n  isActiveFilterValue,\n  isRawRecords,\n  showCellBars,\n  sortDesc,\n  toggleFilter,\n  totals,\n  columnColorFormatters,\n  columnOrderToggle]\n  );\n  const columns = useMemo(() => filteredColumnsMeta.map(getColumnConfigs), [filteredColumnsMeta, getColumnConfigs]);\n  const handleServerPaginationChange = useCallback((pageNumber, pageSize) => {\n    updateExternalFormData(setDataMask, pageNumber, pageSize);\n  }, [setDataMask]);\n  const handleSizeChange = useCallback(({ width, height }) => {\n    setTableSize({ width, height });\n  }, []);\n  useLayoutEffect(() => {\n    // After initial load the table should resize only when the new sizes\n    // Are not only scrollbar updates, otherwise, the table would twitch\n    const scrollBarSize = getScrollBarSize();\n    const { width: tableWidth, height: tableHeight } = tableSize;\n    // Table is increasing its original size\n    if (width - tableWidth > scrollBarSize ||\n    height - tableHeight > scrollBarSize) {\n      handleSizeChange({\n        width: width - scrollBarSize,\n        height: height - scrollBarSize\n      });\n    } else\n    if (tableWidth - width > scrollBarSize ||\n    tableHeight - height > scrollBarSize) {\n      // Table is decreasing its original size\n      handleSizeChange({\n        width,\n        height\n      });\n    }\n  }, [width, height, handleSizeChange, tableSize]);\n  const { width: widthFromState, height: heightFromState } = tableSize;\n  return _jsx(Styles, { children:\n    _jsx(DataTable, { columns: columns, data: data, rowCount: rowCount, tableClassName: \"table table-striped table-condensed\", pageSize: pageSize, serverPaginationData: serverPaginationData, pageSizeOptions: pageSizeOptions, width: widthFromState, height: heightFromState, serverPagination: serverPagination, onServerPaginationChange: handleServerPaginationChange, onColumnOrderChange: () => setColumnOrderToggle(!columnOrderToggle)\n      // 9 page items in > 340px works well even for 100+ pages\n      , maxPageItemCount: width > 340 ? 9 : 7, noResults: getNoResultsMessage, searchInput: includeSearch && SearchInput, selectPageSize: pageSize !== null && SelectPageSize\n      // not in use in Superset, but needed for unit tests\n      , sticky: sticky, renderGroupingHeaders: !_isEmpty(groupHeaderColumns) ? renderGroupingHeaders : undefined, renderTimeComparisonDropdown: isUsingTimeComparison ? renderTimeComparisonDropdown : undefined }) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}