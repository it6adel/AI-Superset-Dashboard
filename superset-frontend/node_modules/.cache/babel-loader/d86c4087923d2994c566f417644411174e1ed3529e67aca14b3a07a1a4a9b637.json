{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { css, t, useTheme } from '@superset-ui/core';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const VizTile = ({ isActive, isRendered, vizMeta, onTileClick }) => {var _mountedPluginMetadat;\n  const { mountedPluginMetadata } = usePluginContext();\n  const chartNameRef = useRef(null);\n  const theme = useTheme();\n  const TILE_TRANSITION_TIME = theme.transitionTiming * 2;\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const chartName = vizMeta.name ?\n  ((_mountedPluginMetadat = mountedPluginMetadata[vizMeta.name]) == null ? void 0 : _mountedPluginMetadat.name) || `${vizMeta.name}` :\n  t('Select Viz Type');\n  const handleTileClick = useCallback(() => {\n    onTileClick(vizMeta.name);\n    setIsTransitioning(true);\n    setTooltipVisible(false);\n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, TILE_TRANSITION_TIME * 1000);\n  }, [onTileClick, TILE_TRANSITION_TIME, vizMeta.name]);\n  // Antd tooltip seems to be bugged - when elements move, the tooltip sometimes\n  // stays visible even when user doesn't hover over the element.\n  // Here we manually prevent it from displaying after user triggers transition\n  useEffect(() => {\n    setShowTooltip(Boolean(!isTransitioning && (\n    !isActive ||\n    chartNameRef.current &&\n    chartNameRef.current.scrollWidth >\n    chartNameRef.current.clientWidth)));\n  }, [isActive, isTransitioning]);\n  const containerProps = useMemo(() => !isActive ?\n  { role: 'button', tabIndex: 0, onClick: handleTileClick } :\n  {}, [handleTileClick, isActive]);\n  let tooltipTitle = null;\n  if (showTooltip) {\n    tooltipTitle = isRendered ?\n    t('Currently rendered: %s', chartName) :\n    chartName;\n  }\n  return _jsx(Tooltip, { title: tooltipTitle, onOpenChange: (visible) => setTooltipVisible(visible), open: tooltipVisible && !isTransitioning, placement: \"top\", mouseEnterDelay: 0.4, children:\n    _jsxs(\"div\", { ...containerProps, css: css`\n          display: flex;\n          align-items: center;\n          color: ${theme.colors.grayscale.base};\n          font-weight: ${theme.typography.weights.bold};\n          border-radius: 6px;\n          white-space: nowrap;\n          overflow: hidden;\n          max-width: fit-content;\n          ${!isActive &&\n      css`\n            flex-shrink: 0;\n            width: ${theme.gridUnit * 6}px;\n            background-color: transparent;\n            transition: none;\n            &:hover svg path {\n              fill: ${theme.colors.primary.base};\n              transition: fill ${theme.transitionTiming}s ease-out;\n            }\n          `}\n\n          ${isActive &&\n      css`\n            width: 100%;\n            background-color: ${theme.colors.grayscale.light4};\n            transition:\n              width ${TILE_TRANSITION_TIME}s ease-out,\n              background-color ${TILE_TRANSITION_TIME}s ease-out;\n            cursor: default;\n            svg path {\n              fill: ${theme.colors.primary.base};\n            }\n          `}\n        `, children: [\n      _jsx(\"span\", { css: css`\n            padding: 0px ${theme.gridUnit}px;\n          `, children:\n        vizMeta.icon }\n      ),\n      _jsx(\"span\", { css: css`\n            overflow: hidden;\n            text-overflow: ellipsis;\n            min-width: 0;\n            padding-right: ${theme.gridUnit}px;\n          `, ref: chartNameRef, children:\n        chartName }\n      )] }\n    ) }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}