{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { ClassNames } from '@emotion/react';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst TIME_PICKER_HELPER = _jsxs(_Fragment, { children: [\n  _jsxs(\"div\", { children: [\n    _jsx(\"h3\", { children: \"DATETIME\" }),\n    _jsx(\"p\", { children: t('Return to specific datetime.') }),\n    _jsx(\"h4\", { children: t('Syntax') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: \"datetime([string])\" }) }\n    ),\n    _jsx(\"h4\", { children: t('Example') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `datetime(\"2020-03-01 12:00:00\")\ndatetime(\"now\")\ndatetime(\"last year\")` }) }\n    )] }\n  ),\n  _jsxs(\"div\", { children: [\n    _jsx(\"h3\", { children: \"DATEADD\" }),\n    _jsx(\"p\", { children: t('Moves the given set of dates by a specified interval.') }),\n    _jsx(\"h4\", { children: t('Syntax') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `dateadd([datetime], [integer], [dateunit])\ndateunit = (year | quarter | month | week | day | hour | minute | second)` }) }\n    ),\n    _jsx(\"h4\", { children: t('Example') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `dateadd(datetime(\"today\"), -13, day)\ndateadd(datetime(\"2020-03-01\"), 2, day)` }) }\n    )] }\n  ),\n  _jsxs(\"div\", { children: [\n    _jsx(\"h3\", { children: \"DATETRUNC\" }),\n    _jsx(\"p\", { children:\n      t('Truncates the specified date to the accuracy specified by the date unit.') }\n    ),\n    _jsx(\"h4\", { children: t('Syntax') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `datetrunc([datetime], [dateunit])\ndateunit = (year | quarter | month | week)` }) }\n    ),\n    _jsx(\"h4\", { children: t('Example') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `datetrunc(datetime(\"2020-03-01\"), week)\ndatetrunc(datetime(\"2020-03-01\"), month)` }) }\n    )] }\n  ),\n  _jsxs(\"div\", { children: [\n    _jsx(\"h3\", { children: \"LASTDAY\" }),\n    _jsx(\"p\", { children: t('Get the last date by the date unit.') }),\n    _jsx(\"h4\", { children: t('Syntax') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `lastday([datetime], [dateunit])\ndateunit = (year | month | week)` }) }\n    ),\n    _jsx(\"h4\", { children: t('Example') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: \"lastday(datetime(\\\"today\\\"), month)\" }) }\n    )] }\n  ),\n  _jsxs(\"div\", { children: [\n    _jsx(\"h3\", { children: \"HOLIDAY\" }),\n    _jsx(\"p\", { children: t('Get the specify date for the holiday') }),\n    _jsx(\"h4\", { children: t('Syntax') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `holiday([string])\nholiday([holiday string], [datetime])\nholiday([holiday string], [datetime], [country name])` }) }\n    ),\n    _jsx(\"h4\", { children: t('Example') }),\n    _jsx(\"pre\", { children:\n      _jsx(\"code\", { children: `holiday(\"new year\")\nholiday(\"christmas\", datetime(\"2019\"))\nholiday(\"christmas\", dateadd(datetime(\"2019\"), 1, year))\nholiday(\"christmas\", datetime(\"2 years ago\"))\nholiday(\"Easter Monday\", datetime(\"2019\"), \"UK\")` }) }\n    )] }\n  )] }\n);\nconst StyledTooltip = (props) => {\n  const theme = useTheme();\n  return _jsx(ClassNames, { children:\n    ({ css }) => _jsx(Tooltip, { overlayClassName: css`\n            .antd5-tooltip-content {\n              min-width: ${theme.gridUnit * 125}px;\n              max-height: 410px;\n              overflow-y: scroll;\n\n              .antd5-tooltip-inner {\n                max-width: ${theme.gridUnit * 125}px;\n                h3 {\n                  font-size: ${theme.typography.sizes.m}px;\n                  font-weight: ${theme.typography.weights.bold};\n                }\n                h4 {\n                  font-size: ${theme.typography.sizes.m}px;\n                  font-weight: ${theme.typography.weights.bold};\n                }\n                pre {\n                  border: none;\n                  text-align: left;\n                  word-break: break-word;\n                  font-size: ${theme.typography.sizes.s}px;\n                }\n              }\n            }\n          `, ...props }) }\n  );\n};\nexport default function DateFunctionTooltip(props) {\n  return _jsx(StyledTooltip, { title: TIME_PICKER_HELPER, ...props });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}