{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\n/**\n * Retrieves all pages of dataset results\n */\nconst useDatasetsList = (db, schema) => {\n  const [datasets, setDatasets] = useState([]);\n  const encodedSchema = schema ? encodeURIComponent(schema) : undefined;\n  const getDatasetsList = useCallback(async (filters) => {\n    let results = [];\n    let page = 0;\n    let count;\n    // If count is undefined or less than results, we need to\n    // asynchronously retrieve a page of dataset results\n    while (count === undefined || results.length < count) {\n      const queryParams = rison.encode_uri({ filters, page });\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dataset/?q=${queryParams}`\n        });\n        // Reassign local count to response's count\n        ({ count } = response.json);\n        const { json: { result } } = response;\n        results = [...results, ...result];\n        page += 1;\n      }\n      catch (error) {\n        addDangerToast(t('There was an error fetching dataset'));\n        logging.error(t('There was an error fetching dataset'), error);\n      }\n    }\n    setDatasets(results);\n  }, []);\n  useEffect(() => {\n    const filters = [\n    { col: 'database', opr: 'rel_o_m', value: db == null ? void 0 : db.id },\n    { col: 'schema', opr: 'eq', value: encodedSchema },\n    { col: 'sql', opr: 'dataset_is_null_or_empty', value: true }];\n\n    if (schema) {\n      getDatasetsList(filters);\n    }\n  }, [db == null ? void 0 : db.id, schema, encodedSchema, getDatasetsList]);\n  const datasetNames = useMemo(() => datasets == null ? void 0 : datasets.map((dataset) => dataset.table_name), [datasets]);\n  return { datasets, datasetNames };\n};\nexport default useDatasetsList;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}