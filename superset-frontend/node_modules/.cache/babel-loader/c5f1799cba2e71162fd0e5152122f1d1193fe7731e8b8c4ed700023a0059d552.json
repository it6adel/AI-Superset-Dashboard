{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, t, validateNumber } from '@superset-ui/core';\nimport { D3_FORMAT_DOCS, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_DOCS, D3_TIME_FORMAT_OPTIONS } from '@superset-ui/chart-controls';\nimport Icons from 'src/components/Icons';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst d3NumberFormat = {\n  allowNewOptions: true,\n  controlType: 'Select',\n  label: t('D3 format'),\n  description: D3_FORMAT_DOCS,\n  options: D3_FORMAT_OPTIONS.map((option) => ({\n    value: option[0],\n    label: option[1]\n  })),\n  defaultValue: D3_FORMAT_OPTIONS[0][0],\n  creatable: true,\n  minWidth: '14em',\n  debounceDelay: 500\n};\nconst d3TimeFormat = {\n  controlType: 'Select',\n  label: t('D3 format'),\n  description: D3_TIME_FORMAT_DOCS,\n  options: D3_TIME_FORMAT_OPTIONS.map((option) => ({\n    value: option[0],\n    label: option[1]\n  })),\n  defaultValue: D3_TIME_FORMAT_OPTIONS[0][0],\n  creatable: true,\n  minWidth: '10em',\n  debounceDelay: 500\n};\nconst fractionDigits = {\n  controlType: 'Slider',\n  label: t('Fraction digits'),\n  description: t('Number of decimal digits to round numbers to'),\n  min: 0,\n  step: 1,\n  max: 100,\n  defaultValue: 100\n};\nconst columnWidth = {\n  controlType: 'InputNumber',\n  label: t('Min Width'),\n  description: t(\"Default minimal column width in pixels, actual width may still be larger than this if other columns don't need much space\"),\n  width: 120,\n  placeholder: t('auto'),\n  debounceDelay: 400,\n  validators: [validateNumber]\n};\nconst horizontalAlign = {\n  controlType: 'RadioButtonControl',\n  label: t('Text align'),\n  description: t('Horizontal alignment'),\n  width: 130,\n  debounceDelay: 50,\n  defaultValue: 'left',\n  options: [\n  ['left', _jsx(Icons.AlignLeftOutlined, { iconSize: \"m\" })],\n  ['center', _jsx(Icons.AlignCenterOutlined, { iconSize: \"m\" })],\n  ['right', _jsx(Icons.AlignRightOutlined, { iconSize: \"m\" })]]\n\n};\nconst showCellBars = {\n  controlType: 'Checkbox',\n  label: t('Show cell bars'),\n  description: t('Whether to display a bar chart background in table columns'),\n  defaultValue: true,\n  debounceDelay: 200\n};\nconst alignPositiveNegative = {\n  controlType: 'Checkbox',\n  label: t('Align +/-'),\n  description: t('Whether to align positive and negative values in cell bar chart at 0'),\n  defaultValue: false,\n  debounceDelay: 200\n};\nconst colorPositiveNegative = {\n  controlType: 'Checkbox',\n  label: t('Color +/-'),\n  description: t('Whether to colorize numeric values by if they are positive or negative'),\n  defaultValue: false,\n  debounceDelay: 200\n};\nconst truncateLongCells = {\n  controlType: 'Checkbox',\n  label: t('Truncate Cells'),\n  description: t('Truncate long cells to the \"min width\" set above'),\n  defaultValue: false,\n  debounceDelay: 400\n};\nconst currencyFormat = {\n  controlType: 'CurrencyControl',\n  label: t('Currency format'),\n  description: t('Customize chart metrics or columns with currency symbols as prefixes or suffixes. Choose a symbol from dropdown or type your own.'),\n  debounceDelay: 200\n};\n/**\n * All configurable column formatting properties.\n */\nexport const SHARED_COLUMN_CONFIG_PROPS = {\n  d3NumberFormat,\n  d3SmallNumberFormat: {\n    ...d3NumberFormat,\n    label: t('Small number format'),\n    description: t('D3 number format for numbers between -1.0 and 1.0, ' +\n    'useful when you want to have different significant digits for small and large numbers')\n  },\n  d3TimeFormat,\n  fractionDigits,\n  columnWidth,\n  truncateLongCells,\n  horizontalAlign,\n  showCellBars,\n  alignPositiveNegative,\n  colorPositiveNegative,\n  currencyFormat\n};\nexport const DEFAULT_CONFIG_FORM_LAYOUT = {\n  [GenericDataType.String]: [\n  [\n  'columnWidth',\n  { name: 'horizontalAlign', override: { defaultValue: 'left' } }],\n\n  ['truncateLongCells']],\n\n  [GenericDataType.Numeric]: [\n  {\n    tab: t('Display'),\n    children: [\n    [\n    'columnWidth',\n    { name: 'horizontalAlign', override: { defaultValue: 'right' } }],\n\n    ['showCellBars'],\n    ['alignPositiveNegative'],\n    ['colorPositiveNegative']]\n\n  },\n  {\n    tab: t('Number formatting'),\n    children: [\n    ['d3NumberFormat'],\n    ['d3SmallNumberFormat'],\n    ['currencyFormat']]\n\n  }],\n\n  [GenericDataType.Temporal]: [\n  [\n  'columnWidth',\n  { name: 'horizontalAlign', override: { defaultValue: 'left' } }],\n\n  ['d3TimeFormat']],\n\n  [GenericDataType.Boolean]: [\n  [\n  'columnWidth',\n  { name: 'horizontalAlign', override: { defaultValue: 'left' } }]]\n\n\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}