{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_FORMAT_DOCS, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_OPTIONS, sections, getStandardizedControls } from '@superset-ui/chart-controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst config = {\n  controlPanelSections: [\n  sections.legacyTimeseriesTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['metrics'],\n    ['adhoc_filters'],\n    ['groupby'],\n    ['limit', 'timeseries_limit_metric'],\n    ['order_desc'],\n    [\n    {\n      name: 'contribution',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Contribution'),\n        default: false,\n        description: t('Compute the contribution to the total')\n      }\n    }],\n\n    ['row_limit', null]]\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: 'SMART_NUMBER',\n        choices: D3_FORMAT_OPTIONS,\n        description: D3_FORMAT_DOCS\n      }\n    },\n    {\n      name: 'date_time_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date Time Format'),\n        renderTrigger: true,\n        default: 'smart_date',\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: D3_FORMAT_DOCS\n      }\n    }],\n\n    [\n    {\n      name: 'rich_tooltip',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Rich Tooltip'),\n        renderTrigger: true,\n        default: true,\n        description: t('The rich tooltip shows a list of all series for that point in time')\n      }\n    },\n    {\n      name: 'rose_area_proportion',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Use Area Proportions'),\n        description: t('Check if the Rose Chart should use segment area instead of ' +\n        'segment radius for proportioning'),\n        default: false,\n        renderTrigger: true\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Advanced Analytics'),\n    tabOverride: 'data',\n    description: t('This section contains options ' +\n    'that allow for advanced analytical post processing ' +\n    'of query results'),\n    controlSetRows: [\n    // eslint-disable-next-line react/jsx-key\n    [\n    _jsx(ControlSubSectionHeader, { children:\n      t('Rolling Window') }\n    )],\n\n    [\n    {\n      name: 'rolling_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Rolling Function'),\n        default: 'None',\n        choices: [\n        ['None', t('None')],\n        ['mean', t('mean')],\n        ['sum', t('sum')],\n        ['std', t('std')],\n        ['cumsum', t('cumsum')]],\n\n        description: t('Defines a rolling window function to apply, works along ' +\n        'with the [Periods] text box')\n      }\n    }],\n\n    [\n    {\n      name: 'rolling_periods',\n      config: {\n        type: 'TextControl',\n        label: t('Periods'),\n        isInt: true,\n        description: t('Defines the size of the rolling window function, ' +\n        'relative to the time granularity selected')\n      }\n    },\n    {\n      name: 'min_periods',\n      config: {\n        type: 'TextControl',\n        label: t('Min Periods'),\n        isInt: true,\n        description: t('The minimum number of rolling periods required to show ' +\n        'a value. For instance if you do a cumulative sum on 7 days ' +\n        'you may want your \"Min Period\" to be 7, so that all data points ' +\n        'shown are the total of 7 periods. This will hide the \"ramp up\" ' +\n        'taking place over the first 7 periods')\n      }\n    }],\n\n    // eslint-disable-next-line react/jsx-key\n    [\n    _jsx(ControlSubSectionHeader, { children:\n      t('Time Comparison') }\n    )],\n\n    [\n    {\n      name: 'time_compare',\n      config: {\n        type: 'SelectControl',\n        multi: true,\n        freeForm: true,\n        label: t('Time Shift'),\n        choices: [\n        ['1 day', t('1 day')],\n        ['1 week', t('1 week')],\n        ['28 days', t('28 days')],\n        ['30 days', t('30 days')],\n        ['52 weeks', t('52 weeks')],\n        ['1 year', t('1 year')],\n        ['104 weeks', t('104 weeks')],\n        ['2 years', t('2 years')],\n        ['156 weeks', t('156 weeks')],\n        ['3 years', t('3 years')]],\n\n        description: t('Overlay one or more timeseries from a ' +\n        'relative time period. Expects relative time deltas ' +\n        'in natural language (example:  24 hours, 7 days, ' +\n        '52 weeks, 365 days). Free text is supported.')\n      }\n    },\n    {\n      name: 'comparison_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Calculation type'),\n        default: 'values',\n        choices: [\n        ['values', t('Actual Values')],\n        ['absolute', t('Difference')],\n        ['percentage', t('Percentage change')],\n        ['ratio', t('Ratio')]],\n\n        description: t('How to display time shifts: as individual lines; as the ' +\n        'difference between the main time series and each time shift; ' +\n        'as the percentage change; or as the ratio between series and time shifts.')\n      }\n    }],\n\n    [_jsx(ControlSubSectionHeader, { children: t('Resample') })],\n    [\n    {\n      name: 'resample_rule',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Rule'),\n        default: null,\n        choices: [\n        ['1T', t('1T')],\n        ['1H', t('1H')],\n        ['1D', t('1D')],\n        ['7D', t('7D')],\n        ['1M', t('1M')],\n        ['1AS', t('1AS')]],\n\n        description: t('Pandas resample rule')\n      }\n    },\n    {\n      name: 'resample_method',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Method'),\n        default: null,\n        choices: [\n        ['asfreq', t('asfreq')],\n        ['bfill', t('bfill')],\n        ['ffill', t('ffill')],\n        ['median', t('median')],\n        ['mean', t('mean')],\n        ['sum', t('sum')]],\n\n        description: t('Pandas resample method')\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    groupby: getStandardizedControls().popAllColumns(),\n    metrics: getStandardizedControls().popAllMetrics()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}