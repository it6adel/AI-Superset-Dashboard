{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useLayoutEffect } from 'react';\nimport { css, styled, SafeMarkdown } from '@superset-ui/core';\nimport InfoTooltipWithTrigger from './InfoTooltipWithTrigger';\nimport { ColumnTypeLabel } from './ColumnTypeLabel/ColumnTypeLabel';\nimport CertifiedIconWithTooltip from './CertifiedIconWithTooltip';\nimport Tooltip from './Tooltip';\nimport { getMetricTooltipNode } from './labelUtils';\nimport { SQLPopover } from './SQLPopover';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  > svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nexport function MetricOption({ metric, labelRef, openInNewWindow = false, showFormula = true, showType = false, shouldShowTooltip = true, url = '' }) {\n  const verbose = metric.verbose_name || metric.metric_name || metric.label;\n  const link = url ? _jsx(\"a\", { href: url, target: openInNewWindow ? '_blank' : '', rel: \"noreferrer\", children:\n    verbose }\n  ) : verbose;\n  const label = _jsx(\"span\", { className: \"option-label metric-option-label\", css: (theme) => css`\n        margin-right: ${theme.gridUnit}px;\n      `, ref: labelRef, children:\n    link }\n  );\n  const warningMarkdown = metric.warning_markdown || metric.warning_text || metric.error_text;\n  const [tooltipText, setTooltipText] = useState(metric.metric_name);\n  useLayoutEffect(() => {\n    setTooltipText(getMetricTooltipNode(metric, labelRef));\n  }, [labelRef, metric]);\n  return _jsxs(FlexRowContainer, { className: \"metric-option\", children: [\n    showType && _jsx(ColumnTypeLabel, { type: \"expression\" }),\n    shouldShowTooltip ? _jsx(Tooltip, { id: \"metric-name-tooltip\", title: tooltipText, children:\n      label }\n    ) : label,\n    showFormula && metric.expression && _jsx(SQLPopover, { sqlExpression: metric.expression }),\n    metric.is_certified && _jsx(CertifiedIconWithTooltip, { metricName: metric.metric_name, certifiedBy: metric.certified_by, details: metric.certification_details }),\n    warningMarkdown && _jsx(InfoTooltipWithTrigger, { className: \"text-warning\", icon: \"warning\", tooltip: _jsx(SafeMarkdown, { source: warningMarkdown }), label: `warn-${metric.metric_name}`, iconsStyle: { marginLeft: 0 }, ...(metric.error_text && {\n        className: 'text-danger',\n        icon: 'exclamation-circle'\n      }) })] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}