{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Registry from './Registry';\nexport default class RegistryWithDefaultKey extends Registry {\n\n\n\n  constructor(config = {}) {\n    super(config);this.initialDefaultKey = void 0;this.defaultKey = void 0;this.setFirstItemAsDefault = void 0;\n    const { initialDefaultKey = undefined, setFirstItemAsDefault = false } = config;\n    this.initialDefaultKey = initialDefaultKey;\n    this.defaultKey = initialDefaultKey;\n    this.setFirstItemAsDefault = setFirstItemAsDefault;\n  }\n  clear() {\n    super.clear();\n    this.defaultKey = this.initialDefaultKey;\n    return this;\n  }\n  get(key) {\n    const targetKey = key != null ? key : this.defaultKey;\n    return targetKey ? super.get(targetKey) : undefined;\n  }\n  registerValue(key, value) {\n    super.registerValue(key, value);\n    // If there is no default, set as default\n    if (this.setFirstItemAsDefault && !this.defaultKey) {\n      this.defaultKey = key;\n    }\n    return this;\n  }\n  registerLoader(key, loader) {\n    super.registerLoader(key, loader);\n    // If there is no default, set as default\n    if (this.setFirstItemAsDefault && !this.defaultKey) {\n      this.defaultKey = key;\n    }\n    return this;\n  }\n  getDefaultKey() {\n    return this.defaultKey;\n  }\n  setDefaultKey(key) {\n    this.defaultKey = key;\n    return this;\n  }\n  clearDefaultKey() {\n    this.defaultKey = undefined;\n    return this;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}