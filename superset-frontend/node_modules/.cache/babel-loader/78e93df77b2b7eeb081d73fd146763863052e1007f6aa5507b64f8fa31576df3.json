{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { t, tn } from '@superset-ui/core';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const useExploreMetadataBar = (metadata, slice) => useMemo(() => {\n  if (!metadata) {\n    return null;\n  }\n  const items = [];\n  if (metadata.dashboards) {\n    items.push({\n      type: MetadataType.Dashboards,\n      title: metadata.dashboards.length > 0 ?\n      tn('Added to 1 dashboard', 'Added to %s dashboards', metadata.dashboards.length, metadata.dashboards.length) :\n      t('Not added to any dashboard'),\n      description: metadata.dashboards.length > 0 ?\n      t('You can preview the list of dashboards in the chart settings dropdown.') :\n      undefined\n    });\n  }\n  items.push({\n    type: MetadataType.LastModified,\n    value: metadata.changed_on_humanized,\n    modifiedBy: metadata.changed_by || t('Not available')\n  });\n  items.push({\n    type: MetadataType.Owner,\n    createdBy: metadata.created_by || t('Not available'),\n    owners: metadata.owners.length > 0 ? metadata.owners : t('None'),\n    createdOn: metadata.created_on_humanized\n  });\n  if (slice != null && slice.description) {\n    items.push({\n      type: MetadataType.Description,\n      value: slice == null ? void 0 : slice.description\n    });\n  }\n  return _jsx(MetadataBar, { items: items, tooltipPlacement: \"bottom\" });\n}, [metadata, slice == null ? void 0 : slice.description]);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}