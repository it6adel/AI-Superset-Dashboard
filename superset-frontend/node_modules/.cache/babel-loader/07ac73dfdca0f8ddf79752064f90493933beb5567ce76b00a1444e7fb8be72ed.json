{"ast":null,"code":"/* eslint-disable react/sort-prop-types */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [2, {\"props\": false}] */\nimport d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport { hierarchy } from 'd3-hierarchy';\nimport {\n  getNumberFormatter,\n  getTimeFormatter,\n  CategoricalColorNamespace } from\n'@superset-ui/core';\n\n// Compute dx, dy, x, y for each node and\n// return an array of nodes in breadth-first order\nfunction init(root) {\n  const flat = [];\n  const dy = 1 / (root.height + 1);\n  let prev = null;\n  root.each((n) => {\n    n.y = dy * n.depth;\n    n.dy = dy;\n    if (n.parent) {\n      n.x = prev.depth === n.parent.depth ? 0 : prev.x + prev.dx;\n      n.dx = n.weight / n.parent.sum * n.parent.dx;\n    } else {\n      n.x = 0;\n      n.dx = 1;\n    }\n    prev = n;\n    flat.push(n);\n  });\n\n  return flat;\n}\n\n// Declare PropTypes for recursive data structures\n// https://github.com/facebook/react/issues/5676\n/* eslint-disable-next-line  no-undef */\nconst lazyFunction = (f) => () => f().apply(this, arguments);\nconst leafType = PropTypes.shape({\n  name: PropTypes.string,\n  val: PropTypes.number.isRequired\n});\nconst parentShape = {\n  name: PropTypes.string,\n  val: PropTypes.number.isRequired,\n  children: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n    PropTypes.shape(lazyFunction(() => parentShape)),\n    leafType]\n    )\n  )\n};\nconst nodeType = PropTypes.oneOfType([PropTypes.shape(parentShape), leafType]);\n\nconst propTypes = {\n  data: PropTypes.arrayOf(nodeType), // array of rootNode\n  width: PropTypes.number,\n  height: PropTypes.number,\n  colorScheme: PropTypes.string,\n  dateTimeFormat: PropTypes.string,\n  equalDateSize: PropTypes.bool,\n  levels: PropTypes.arrayOf(PropTypes.string),\n  metrics: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n  ),\n  numberFormat: PropTypes.string,\n  partitionLimit: PropTypes.number,\n  partitionThreshold: PropTypes.number,\n  timeSeriesOption: PropTypes.string,\n  useLogScale: PropTypes.bool,\n  useRichTooltip: PropTypes.bool\n};\n\nfunction getAncestors(d) {\n  const ancestors = [d];\n  let node = d;\n  while (node.parent) {\n    ancestors.push(node.parent);\n    node = node.parent;\n  }\n\n  return ancestors;\n}\n\n// This vis is based on\n// http://mbostock.github.io/d3/talk/20111018/partition.html\nfunction Icicle(element, props) {\n  const {\n    width,\n    height,\n    data,\n    colorScheme,\n    dateTimeFormat,\n    equalDateSize,\n    levels,\n    useLogScale = false,\n    metrics = [],\n    numberFormat,\n    partitionLimit,\n    partitionThreshold,\n    useRichTooltip,\n    timeSeriesOption = 'not_time',\n    sliceId\n  } = props;\n\n  const div = d3.select(element);\n  div.classed('superset-legacy-chart-partition', true);\n\n  // Chart options\n  const chartType = timeSeriesOption;\n  const hasTime = ['adv_anal', 'time_series'].includes(chartType);\n  const format = getNumberFormatter(numberFormat);\n  const timeFormat = getTimeFormatter(dateTimeFormat);\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n\n  div.selectAll('*').remove();\n  const tooltip = div.append('div').classed('partition-tooltip', true);\n\n  function hasDateNode(n) {\n    return metrics.includes(n.data.name) && hasTime;\n  }\n\n  function getCategory(depth) {\n    if (!depth) {\n      return 'Metric';\n    }\n    if (hasTime && depth === 1) {\n      return 'Date';\n    }\n\n    return levels[depth - (hasTime ? 2 : 1)];\n  }\n\n  function drawVis(i, dat) {\n    const datum = dat[i];\n    const w = width;\n    const h = height / data.length;\n    const x = d3.scale.linear().range([0, w]);\n    const y = d3.scale.linear().range([0, h]);\n\n    const viz = div.\n    append('div').\n    attr('class', 'chart').\n    style('width', `${w}px`).\n    style('height', `${h}px`).\n    append('svg:svg').\n    attr('width', w).\n    attr('height', h);\n\n    // Add padding between multiple visualizations\n    if (i !== data.length - 1 && data.length > 1) {\n      viz.style('padding-bottom', '3px');\n    }\n    if (i !== 0 && data.length > 1) {\n      viz.style('padding-top', '3px');\n    }\n\n    const root = hierarchy(datum);\n\n    // node.name is the metric/group name\n    // node.disp is the display value\n    // node.value determines sorting order\n    // node.weight determines partition height\n    // node.sum is the sum of children weights\n    root.eachAfter((n) => {\n      n.disp = n.data.val;\n      n.value = n.disp < 0 ? -n.disp : n.disp;\n      n.weight = n.value;\n      n.name = n.data.name;\n      // If the parent is a metric and we still have\n      // the time column, perform a date-time format\n      if (n.parent && hasDateNode(n.parent)) {\n        // Format timestamp values\n        n.weight = equalDateSize ? 1 : n.value;\n        n.value = n.name;\n        n.name = timeFormat(n.name);\n      }\n      if (useLogScale) n.weight = Math.log(n.weight + 1);\n      n.disp =\n      n.disp && !Number.isNaN(n.disp) && Number.isFinite(n.disp) ?\n      format(n.disp) :\n      '';\n    });\n    // Perform sort by weight\n    root.sort((a, b) => {\n      const v = b.value - a.value;\n      if (v === 0) {\n        return b.name > a.name ? 1 : -1;\n      }\n\n      return v;\n    });\n\n    // Prune data based on partition limit and threshold\n    // both are applied at the same time\n    if (partitionThreshold && partitionThreshold >= 0) {\n      // Compute weight sums as we go\n      root.each((n) => {\n        n.sum = n.children ?\n        n.children.reduce((a, v) => a + v.weight, 0) || 1 :\n        1;\n        if (n.children) {\n          // Dates are not ordered by weight\n          if (hasDateNode(n)) {\n            if (equalDateSize) {\n              return;\n            }\n            const removeIndices = [];\n            // Keep at least one child\n            for (let j = 1; j < n.children.length; j += 1) {\n              if (n.children[j].weight / n.sum < partitionThreshold) {\n                removeIndices.push(j);\n              }\n            }\n            for (let j = removeIndices.length - 1; j >= 0; j -= 1) {\n              n.children.splice(removeIndices[j], 1);\n            }\n          } else {\n            // Find first child that falls below the threshold\n            let j;\n            for (j = 1; j < n.children.length; j += 1) {\n              if (n.children[j].weight / n.sum < partitionThreshold) {\n                break;\n              }\n            }\n            n.children = n.children.slice(0, j);\n          }\n        }\n      });\n    }\n    if (partitionLimit && partitionLimit >= 0) {\n      root.each((n) => {\n        if (n.children && n.children.length > partitionLimit) {\n          if (!hasDateNode(n)) {\n            n.children = n.children.slice(0, partitionLimit);\n          }\n        }\n      });\n    }\n    // Compute final weight sums\n    root.eachAfter((n) => {\n      n.sum = n.children ?\n      n.children.reduce((a, v) => a + v.weight, 0) || 1 :\n      1;\n    });\n\n    function positionAndPopulate(tip, d) {\n      let t = '<table>';\n      if (useRichTooltip) {\n        const nodes = getAncestors(d);\n        nodes.reverse().forEach((n) => {\n          t += '<tbody>';\n          t +=\n          '<tr>' +\n          '<td>' +\n          '<div ' +\n          `style='border: 2px solid transparent;` +\n          `background-color: ${n.color};'` +\n          '></div>' +\n          '</td>' +\n          `<td>${getCategory(n.depth)}</td>` +\n          `<td>${n.name}</td>` +\n          `<td>${n.disp}</td>` +\n          '</tr>';\n        });\n      } else {\n        t +=\n        '<thead><tr><td colspan=\"3\">' +\n        `<strong>${getCategory(d.depth)}</strong>` +\n        '</td></tr></thead><tbody>';\n        t +=\n        '<tr>' +\n        '<td>' +\n        `<div style='border: thin solid grey; background-color: ${d.color};'` +\n        '></div>' +\n        '</td>' +\n        `<td>${d.name}</td>` +\n        `<td>${d.disp}</td>` +\n        '</tr>';\n      }\n      t += '</tbody></table>';\n      const [tipX, tipY] = d3.mouse(element);\n      tip.\n      html(t).\n      style('left', `${tipX + 15}px`).\n      style('top', `${tipY}px`);\n    }\n\n    const nodes = init(root);\n\n    let zoomX = w / root.dx;\n    let zoomY = h / 1;\n\n    // Keep text centered in its division\n    function transform(d) {\n      return `translate(8,${d.dx * zoomY / 2})`;\n    }\n\n    const g = viz.\n    selectAll('g').\n    data(nodes).\n    enter().\n    append('svg:g').\n    attr('transform', (d) => `translate(${x(d.y)},${y(d.x)})`).\n    on('mouseover', (d) => {\n      tooltip.interrupt().transition().duration(100).style('opacity', 0.9);\n      positionAndPopulate(tooltip, d);\n    }).\n    on('mousemove', (d) => {\n      positionAndPopulate(tooltip, d);\n    }).\n    on('mouseout', () => {\n      tooltip.interrupt().transition().duration(250).style('opacity', 0);\n    });\n\n    // When clicking a subdivision, the vis will zoom into it\n    function click(d) {\n      if (!d.children) {\n        if (d.parent) {\n          // Clicking on the rightmost level should zoom in\n          return click(d.parent);\n        }\n\n        return false;\n      }\n      zoomX = (d.y ? w - 40 : w) / (1 - d.y);\n      zoomY = h / d.dx;\n      x.domain([d.y, 1]).range([d.y ? 40 : 0, w]);\n      y.domain([d.x, d.x + d.dx]);\n\n      const t = g.\n      transition().\n      duration(d3.event.altKey ? 7500 : 750).\n      attr('transform', (nd) => `translate(${x(nd.y)},${y(nd.x)})`);\n\n      t.select('rect').\n      attr('width', d.dy * zoomX).\n      attr('height', (nd) => nd.dx * zoomY);\n\n      t.select('text').\n      attr('transform', transform).\n      style('opacity', (nd) => nd.dx * zoomY > 12 ? 1 : 0);\n\n      d3.event.stopPropagation();\n\n      return true;\n    }\n\n    g.on('click', click);\n\n    g.append('svg:rect').\n    attr('width', root.dy * zoomX).\n    attr('height', (d) => d.dx * zoomY);\n\n    g.append('svg:text').\n    attr('transform', transform).\n    attr('dy', '0.35em').\n    style('opacity', (d) => d.dx * zoomY > 12 ? 1 : 0).\n    text((d) => {\n      if (!d.disp) {\n        return d.name;\n      }\n\n      return `${d.name}: ${d.disp}`;\n    });\n\n    // Apply color scheme\n    g.selectAll('rect').style('fill', (d) => {\n      d.color = colorFn(d.name, sliceId);\n\n      return d.color;\n    });\n  }\n\n  for (let i = 0; i < data.length; i += 1) {\n    drawVis(i, data);\n  }\n}\n\nIcicle.displayName = 'Icicle';\nIcicle.propTypes = propTypes;\n\nexport default Icicle;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}