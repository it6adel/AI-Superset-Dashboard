{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { css, ensureIsArray, styled, t } from '@superset-ui/core';\nimport Table, { TableSize } from 'src/components/Table';\nimport { EmptyState } from 'src/components/EmptyState';\nimport ChartImage from 'src/assets/images/chart.svg';\nimport Icons from 'src/components/Icons';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { FilterOperator } from 'src/components/ListView';\nimport { extendedDayjs } from 'src/utils/dates';\nimport TruncatedList from 'src/components/TruncatedList';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DEFAULT_PAGE_SIZE = 25;\nconst getLinkProps = (dashboard) => ({\n  key: dashboard.id,\n  to: `/superset/dashboard/${dashboard.id}`,\n  target: '_blank',\n  rel: 'noreferer noopener',\n  children: dashboard.dashboard_title\n});\nconst tooltipItemCSS = (theme) => css`\n  color: ${theme.colors.grayscale.light5};\n  text-decoration: underline;\n  &:hover {\n    color: inherit;\n  }\n`;\nconst columns = [\n{\n  key: 'slice_name',\n  title: t('Chart'),\n  width: '320px',\n  sorter: true,\n  render: (value, record) => _jsx(Link, { to: record.url, children: record.slice_name })\n},\n{\n  key: 'owners',\n  title: t('Chart owners'),\n  width: '242px',\n  render: (value, record) => {var _record$owners$map, _record$owners;return _jsx(TruncatedList, { items: (_record$owners$map = (_record$owners = record.owners) == null ? void 0 : _record$owners.map((owner) => `${owner.first_name} ${owner.last_name}`)) != null ? _record$owners$map : [] });}\n},\n{\n  key: 'last_saved_at',\n  title: t('Chart last modified'),\n  width: '209px',\n  sorter: true,\n  defaultSortOrder: 'descend',\n  render: (value, record) => record.last_saved_at ?\n  extendedDayjs.utc(record.last_saved_at).fromNow() :\n  null\n},\n{\n  key: 'last_saved_by.first_name',\n  title: t('Chart last modified by'),\n  width: '216px',\n  sorter: true,\n  render: (value, record) => record.last_saved_by ?\n  `${record.last_saved_by.first_name} ${record.last_saved_by.last_name}` :\n  null\n},\n{\n  key: 'dashboards',\n  title: t('Dashboard usage'),\n  width: '420px',\n  render: (value, record) => _jsx(TruncatedList, { items: record.dashboards, renderVisibleItem: (dashboard) => _jsx(Link, { ...getLinkProps(dashboard) }), renderTooltipItem: (dashboard) => _jsx(Link, { ...getLinkProps(dashboard), css: tooltipItemCSS }), getKey: (dashboard) => dashboard.id })\n}];\n\nconst emptyStateTableCSS = (theme) => css`\n  && th.ant-table-cell {\n    color: ${theme.colors.grayscale.light1};\n  }\n\n  .ant-table-placeholder {\n    display: none;\n  }\n`;\nconst emptyStateButtonText = _jsxs(_Fragment, { children: [\n  _jsx(Icons.PlusOutlined, { iconSize: \"m\", css: css`\n        & > .anticon {\n          line-height: 0;\n        }\n      ` }),\n  t('Create chart with dataset')] }\n);\nconst StyledEmptyState = styled(EmptyState)`\n  margin: ${({ theme }) => 13 * theme.gridUnit}px 0;\n`;\n/**\n * Hook that uses the useListViewResource hook to retrieve records\n * based on pagination state.\n */\nconst useDatasetChartRecords = (datasetId) => {\n  const { addDangerToast } = useToasts();\n  // Always filters charts by dataset\n  const baseFilters = useMemo(() => [\n  {\n    id: 'datasource_id',\n    operator: FilterOperator.Equals,\n    value: datasetId\n  }],\n  [datasetId]);\n  // Returns request status/results and function for re-fetching\n  const { state: { loading, resourceCount, resourceCollection }, fetchData } = useListViewResource('chart', t('chart'), addDangerToast, true, [], baseFilters);\n  // Adds `key` field\n  const resourceCollectionWithKey = useMemo(() => resourceCollection.map((o) => ({ ...o, key: o.id })), [resourceCollection]);\n  // Called by table with updated table state to fetch new data\n  // @ts-ignore\n  const onChange = useCallback(\n    // @ts-ignore\n    (tablePagination, tableFilters, tableSorter) => {var _tablePagination$curr, _tablePagination$page;\n      const pageIndex = ((_tablePagination$curr = tablePagination.current) != null ? _tablePagination$curr : 1) - 1;\n      const pageSize = (_tablePagination$page = tablePagination.pageSize) != null ? _tablePagination$page : 0;\n      const sortBy = ensureIsArray(tableSorter).\n      filter(({ columnKey }) => typeof columnKey === 'string').\n      map(({ columnKey, order }) => ({\n        id: columnKey,\n        desc: order === 'descend'\n      }));\n      fetchData({ pageIndex, pageSize, sortBy, filters: [] });\n    }, [fetchData]);\n  // Initial data request\n  useEffect(() => {\n    fetchData({\n      pageIndex: 0,\n      pageSize: DEFAULT_PAGE_SIZE,\n      sortBy: [{ id: 'last_saved_at', desc: true }],\n      filters: []\n    });\n  }, [fetchData]);\n  return {\n    loading,\n    recordCount: resourceCount,\n    data: resourceCollectionWithKey,\n    onChange\n  };\n};\nconst DatasetUsage = ({ datasetId }) => {\n  const { loading, recordCount, data, onChange } = useDatasetChartRecords(datasetId);\n  const emptyStateButtonAction = useCallback(() => window.open(`/explore/?dataset_type=table&dataset_id=${datasetId}`, '_blank'), [datasetId]);\n  return _jsxs(\"div\", { css: !data.length ? emptyStateTableCSS : null, children: [\n    _jsx(Table, { columns: columns, data: data, size: TableSize.Middle, defaultPageSize: DEFAULT_PAGE_SIZE, recordCount: recordCount, loading: loading, onChange: onChange }),\n    !data.length && !loading ? _jsx(StyledEmptyState, { image: _jsx(ChartImage, {}), size: \"large\", title: t('No charts'), description: t('This dataset is not used to power any charts.'), buttonText: emptyStateButtonText, buttonAction: emptyStateButtonAction }) : null] }\n  );\n};\nexport default DatasetUsage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}