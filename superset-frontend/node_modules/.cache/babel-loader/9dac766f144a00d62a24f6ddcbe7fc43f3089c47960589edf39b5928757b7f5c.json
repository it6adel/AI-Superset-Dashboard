{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { MenuDotsDropdown } from 'src/components/Dropdown';\nimport { Menu } from 'src/components/Menu';\nimport { styled, css, t, QueryState, useTheme } from '@superset-ui/core';\nimport { removeQueryEditor, removeAllOtherQueryEditors, queryEditorSetTitle, cloneQueryToNewTab, toggleLeftBar } from 'src/SqlLab/actions/sqlLab';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst TabTitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  [aria-label='check-circle'],\n  .status-icon {\n    margin: 0px;\n  }\n`;\nconst TabTitle = styled.span`\n  margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  text-transform: none;\n`;\nconst IconContainer = styled.div`\n  ${({ theme }) => css`\n    display: inline-block;\n    margin: 0 ${theme.gridUnit * 2}px 0 0px;\n  `}\n`;\nconst STATE_ICONS = {\n  started: Icons.CircleSolid,\n  stopped: Icons.StopOutlined,\n  pending: Icons.CircleSolid,\n  scheduled: Icons.CalendarOutlined,\n  fetching: Icons.CircleSolid,\n  timedOut: Icons.FieldTimeOutlined,\n  running: Icons.CircleSolid,\n  success: Icons.CheckCircleOutlined,\n  failed: Icons.CloseCircleOutlined\n};\nconst SqlEditorTabHeader = ({ queryEditor }) => {\n  const theme = useTheme();\n  const qe = useSelector(({ sqlLab: { unsavedQueryEditor } }) => ({\n    ...queryEditor,\n    ...(queryEditor.id === (unsavedQueryEditor == null ? void 0 : unsavedQueryEditor.id) && unsavedQueryEditor)\n  }), shallowEqual);\n  const queryState = useSelector(({ sqlLab }) => {var _sqlLab$queries;return ((_sqlLab$queries = sqlLab.queries[qe.latestQueryId || '']) == null ? void 0 : _sqlLab$queries.state) || '';});\n  const StatusIcon = queryState ? STATE_ICONS[queryState] : STATE_ICONS.running;\n  const dispatch = useDispatch();\n  const actions = useMemo(() => bindActionCreators({\n    removeQueryEditor,\n    removeAllOtherQueryEditors,\n    queryEditorSetTitle,\n    cloneQueryToNewTab,\n    toggleLeftBar\n  }, dispatch), [dispatch]);\n  function renameTab() {\n    const newTitle = prompt(t('Enter a new title for the tab'));\n    if (newTitle) {\n      actions.queryEditorSetTitle(qe, newTitle, qe.id);\n    }\n  }\n  const getStatusColor = (state, theme) => {\n    const statusColors = {\n      [QueryState.Running]: theme.colors.info.base,\n      [QueryState.Success]: theme.colors.success.base,\n      [QueryState.Failed]: theme.colors.error.base,\n      [QueryState.Started]: theme.colors.primary.base,\n      [QueryState.Stopped]: theme.colors.warning.base,\n      [QueryState.Pending]: theme.colors.grayscale.light1,\n      [QueryState.Scheduled]: theme.colors.grayscale.light2,\n      [QueryState.Fetching]: theme.colors.secondary.base,\n      [QueryState.TimedOut]: theme.colors.error.dark1\n    };\n    return statusColors[state] || theme.colors.grayscale.light2;\n  };\n  return _jsxs(TabTitleWrapper, { children: [\n    _jsx(MenuDotsDropdown, { trigger: ['click'], overlay: _jsxs(Menu, { children: [\n        _jsxs(Menu.Item, { className: \"close-btn\", onClick: () => actions.removeQueryEditor(qe), children: [\n          _jsx(IconContainer, { children:\n            _jsx(Icons.CloseOutlined, { iconSize: \"l\", css: css`\n                    verticalalign: middle;\n                  ` }) }\n          ),\n          t('Close tab')] }, \"1\"\n        ),\n        _jsxs(Menu.Item, { onClick: renameTab, children: [\n          _jsx(IconContainer, { children:\n            _jsx(Icons.EditOutlined, { css: css`\n                    verticalalign: middle;\n                  `, iconSize: \"l\" }) }\n          ),\n          t('Rename tab')] }, \"2\"\n        ),\n        _jsxs(Menu.Item, { onClick: () => actions.toggleLeftBar(qe), children: [\n          _jsx(IconContainer, { children:\n            _jsx(Icons.VerticalAlignBottomOutlined, { iconSize: \"l\", css: css`\n                    rotate: ${qe.hideLeftBar ? '-90deg;' : '90deg;'};\n                  ` }) }\n          ),\n          qe.hideLeftBar ? t('Expand tool bar') : t('Hide tool bar')] }, \"3\"\n        ),\n        _jsxs(Menu.Item, { onClick: () => actions.removeAllOtherQueryEditors(qe), children: [\n          _jsx(IconContainer, { children:\n            _jsx(Icons.CloseOutlined, { iconSize: \"l\", css: css`\n                    vertical-align: middle;\n                  ` }) }\n          ),\n          t('Close all other tabs')] }, \"4\"\n        ),\n        _jsxs(Menu.Item, { onClick: () => actions.cloneQueryToNewTab(qe, false), children: [\n          _jsx(IconContainer, { children:\n            _jsx(Icons.CopyOutlined, { iconSize: \"l\", css: css`\n                    vertical-align: middle;\n                  ` }) }\n          ),\n          t('Duplicate tab')] }, \"5\"\n        )] }\n      ) }),\n    _jsx(TabTitle, { children: qe.name }),\n    _jsx(StatusIcon, { className: \"status-icon\", iconSize: \"xs\", iconColor: getStatusColor(queryState, theme) })] }\n  );\n};\nexport default SqlEditorTabHeader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}