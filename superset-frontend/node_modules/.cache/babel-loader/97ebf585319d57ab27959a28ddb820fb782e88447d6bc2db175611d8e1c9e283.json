{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { TimeGranularity } from '../types';\nimport createTime from './createTime';\nconst MS_IN_SECOND = 1000;\nconst MS_IN_MINUTE = 60 * MS_IN_SECOND;\nconst MS_IN_HOUR = 60 * MS_IN_MINUTE;\nfunction deductOneMs(time) {\n  return new Date(time.getTime() - 1);\n}\nfunction computeEndTimeFromGranularity(time, granularity, useLocalTime) {\n  const date = useLocalTime ? time.getDate() : time.getUTCDate();\n  const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n  const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n  const mode = useLocalTime ? 'local' : 'utc';\n  switch (granularity) {\n    case TimeGranularity.SECOND:\n      return new Date(time.getTime() + MS_IN_SECOND - 1);\n    case TimeGranularity.MINUTE:\n      return new Date(time.getTime() + MS_IN_MINUTE - 1);\n    case TimeGranularity.FIVE_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 5 - 1);\n    case TimeGranularity.TEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 10 - 1);\n    case TimeGranularity.FIFTEEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 15 - 1);\n    case TimeGranularity.THIRTY_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 30 - 1);\n    case TimeGranularity.HOUR:\n      return new Date(time.getTime() + MS_IN_HOUR - 1);\n    // For the day granularity and above, using Date overflow is better than adding timestamp\n    // because it will also handle daylight saving.\n    case TimeGranularity.WEEK:\n    case TimeGranularity.WEEK_STARTING_SUNDAY:\n    case TimeGranularity.WEEK_STARTING_MONDAY:\n      return deductOneMs(createTime(mode, year, month, date + 7));\n    case TimeGranularity.MONTH:\n      return deductOneMs(createTime(mode, year, month + 1));\n    case TimeGranularity.QUARTER:\n      return deductOneMs(createTime(mode, year, (Math.floor(month / 3) + 1) * 3));\n    case TimeGranularity.YEAR:\n      return deductOneMs(createTime(mode, year + 1));\n    // For the WEEK_ENDING_XXX cases,\n    // currently assume \"time\" returned from database is supposed to be the end time\n    // (in contrast to all other granularities that the returned time is start time).\n    // However, the returned \"time\" is at 00:00:00.000, so have to add 23:59:59.999.\n    case TimeGranularity.WEEK_ENDING_SATURDAY:\n    case TimeGranularity.WEEK_ENDING_SUNDAY:\n    case TimeGranularity.DATE:\n    case TimeGranularity.DAY:\n    default:\n      return deductOneMs(createTime(mode, year, month, date + 1));\n  }\n}\nexport default function createTimeRangeFromGranularity(time, granularity, useLocalTime = false) {\n  const endTime = computeEndTimeFromGranularity(time, granularity, useLocalTime);\n  if (granularity === TimeGranularity.WEEK_ENDING_SATURDAY ||\n  granularity === TimeGranularity.WEEK_ENDING_SUNDAY) {\n    const date = useLocalTime ? time.getDate() : time.getUTCDate();\n    const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n    const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n    const startTime = createTime(useLocalTime ? 'local' : 'utc', year, month, date - 6);\n    return [startTime, endTime];\n  }\n  return [time, endTime];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}