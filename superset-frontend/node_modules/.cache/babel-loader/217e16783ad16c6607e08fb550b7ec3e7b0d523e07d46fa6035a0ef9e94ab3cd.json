{"ast":null,"code":"import _pickBy from \"lodash/pickBy\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport persistState from 'redux-localstorage';\n\nimport { isFeatureEnabled, FeatureFlag } from '@superset-ui/core';\nimport { filterUnsavedQueryEditorList } from 'src/SqlLab/components/EditorAutoSync';\nimport {\n  emptyTablePersistData,\n  emptyQueryResults,\n  clearQueryEditors } from\n'../utils/reduxStateToLocalStorageHelper';\nimport { BYTES_PER_CHAR, KB_STORAGE } from '../constants';\n\nconst CLEAR_ENTITY_HELPERS_MAP = {\n  tables: emptyTablePersistData,\n  queries: emptyQueryResults,\n  queryEditors: clearQueryEditors,\n  unsavedQueryEditor: (qe) => clearQueryEditors([qe])[0]\n};\n\nconst sqlLabPersistStateConfig = {\n  paths: ['sqlLab'],\n  config: {\n    slicer: (paths) => (state) => {\n      const subset = {};\n      paths.forEach((path) => {\n        if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)) {\n          const {\n            queryEditors,\n            editorTabLastUpdatedAt,\n            unsavedQueryEditor,\n            tables,\n            queries,\n            tabHistory,\n            lastUpdatedActiveTab,\n            destroyedQueryEditors\n          } = state.sqlLab;\n          const unsavedQueryEditors = filterUnsavedQueryEditorList(\n            queryEditors,\n            unsavedQueryEditor,\n            editorTabLastUpdatedAt\n          );\n          const hasUnsavedActiveTabState =\n          tabHistory.slice(-1)[0] !== lastUpdatedActiveTab;\n          const hasUnsavedDeletedQueryEditors =\n          Object.keys(destroyedQueryEditors).length > 0;\n          if (\n          unsavedQueryEditors.length > 0 ||\n          hasUnsavedActiveTabState ||\n          hasUnsavedDeletedQueryEditors)\n          {\n            const hasFinishedMigrationFromLocalStorage =\n            unsavedQueryEditors.every(\n              ({ inLocalStorage }) => !inLocalStorage\n            );\n            subset.sqlLab = {\n              queryEditors: unsavedQueryEditors,\n              ...(!hasFinishedMigrationFromLocalStorage && {\n                tabHistory,\n                tables: tables.filter((table) => table.inLocalStorage),\n                queries: _pickBy(\n                  queries,\n                  (query) => query.inLocalStorage && !query.isDataPreview\n                )\n              }),\n              ...(hasUnsavedActiveTabState && {\n                tabHistory\n              }),\n              destroyedQueryEditors\n            };\n          }\n          return;\n        }\n        // this line is used to remove old data from browser localStorage.\n        // we used to persist all redux state into localStorage, but\n        // it caused configurations passed from server-side got override.\n        // see PR 6257 for details\n        delete state[path].common; // eslint-disable-line no-param-reassign\n        if (path === 'sqlLab') {\n          subset[path] = Object.fromEntries(\n            Object.entries(state[path]).map(([key, value]) => {var _CLEAR_ENTITY_HELPERS, _CLEAR_ENTITY_HELPERS2;return [\n              key, (_CLEAR_ENTITY_HELPERS = (_CLEAR_ENTITY_HELPERS2 =\n              CLEAR_ENTITY_HELPERS_MAP[key]) == null ? void 0 : _CLEAR_ENTITY_HELPERS2.call(CLEAR_ENTITY_HELPERS_MAP, value)) != null ? _CLEAR_ENTITY_HELPERS : value];}\n            )\n          );\n        }\n      });\n\n      const data = JSON.stringify(subset);\n      // 2 digit precision\n      const currentSize =\n      Math.round(data.length * BYTES_PER_CHAR / KB_STORAGE * 100) / 100;\n      if (state.localStorageUsageInKilobytes !== currentSize) {\n        state.localStorageUsageInKilobytes = currentSize; // eslint-disable-line no-param-reassign\n      }\n\n      return subset;\n    },\n    merge: (initialState, persistedState = {}) => {\n      const result = {\n        ...initialState,\n        ...persistedState,\n        sqlLab: {\n          ...((persistedState == null ? void 0 : persistedState.sqlLab) || {}),\n          // Overwrite initialState over persistedState for sqlLab\n          // since a logic in getInitialState overrides the value from persistedState\n          ...initialState.sqlLab\n        }\n      };\n      return result;\n    }\n  }\n};\n\n// TODO: requires redux-localstorage > 1.0 for typescript support\n/** @type {any} */\nexport const persistSqlLabStateEnhancer = persistState(\n  sqlLabPersistStateConfig.paths,\n  sqlLabPersistStateConfig.config\n);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}