{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css, styled, SupersetClient, useTheme, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport Icons from 'src/components/Icons';\nimport Select from 'src/components/Select/Select';\nimport { TextArea } from 'src/components/Input';\nimport AsyncSelect from 'src/components/Select/AsyncSelect';\nimport rison from 'rison';\nimport { LabeledErrorBoundInput } from 'src/components/Form';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport { FILTER_OPTIONS } from './constants';\nimport { FilterType } from './types';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst noMargins = css`\n  margin: 0;\n\n  .antd5-input {\n    margin: 0;\n  }\n`;\nconst StyledModal = styled(Modal)`\n  max-width: 1200px;\n  min-width: min-content;\n  width: 100%;\n  .antd5-modal-footer {\n    white-space: nowrap;\n  }\n`;\nconst StyledSectionContainer = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: column;\n    padding: ${theme.gridUnit * 3}px ${theme.gridUnit * 4}px\n      ${theme.gridUnit * 2}px;\n\n    label,\n    .control-label {\n      display: flex;\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.base};\n      align-items: center;\n    }\n\n    .info-solid-small {\n      vertical-align: middle;\n      padding-bottom: ${theme.gridUnit / 2}px;\n    }\n  `}\n`;\nconst StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: column;\n    margin: ${theme.gridUnit}px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n  `}\n`;\nconst StyledTextArea = styled(TextArea)`\n  resize: none;\n  margin-top: ${({ theme }) => theme.gridUnit}px;\n`;\nconst DEFAULT_RULE = {\n  name: '',\n  filter_type: FilterType.Regular,\n  tables: [],\n  roles: [],\n  clause: '',\n  group_key: '',\n  description: ''\n};\nfunction RowLevelSecurityModal(props) {\n  const theme = useTheme();\n  const { rule, addDangerToast, addSuccessToast, onHide, show } = props;\n  const [currentRule, setCurrentRule] = useState({\n    ...DEFAULT_RULE\n  });\n  const [disableSave, setDisableSave] = useState(true);\n  const isEditMode = rule !== null;\n  // * hooks *\n  const { state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource(`rowlevelsecurity`, t('rowlevelsecurity'), addDangerToast);\n  const updateRuleState = (name, value) => {\n    setCurrentRule((currentRuleData) => ({\n      ...currentRuleData,\n      [name]: value\n    }));\n  };\n  // * state validators *\n  const validate = () => {var _currentRule$tables;\n    if (currentRule != null && currentRule.name &&\n    currentRule != null && currentRule.clause && (_currentRule$tables =\n    currentRule.tables) != null && _currentRule$tables.length) {\n      setDisableSave(false);\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // find selected tables and roles\n  const getSelectedData = useCallback(() => {var _resource$tables, _resource$roles;\n    if (!resource) {\n      return null;\n    }\n    const tables = [];\n    const roles = [];\n    (_resource$tables = resource.tables) == null ? void 0 : _resource$tables.forEach((selectedTable) => {\n      tables.push({\n        key: selectedTable.id,\n        label: selectedTable.schema ?\n        `${selectedTable.schema}.${selectedTable.table_name}` :\n        selectedTable.table_name,\n        value: selectedTable.id\n      });\n    });\n    (_resource$roles = resource.roles) == null ? void 0 : _resource$roles.forEach((selectedRole) => {\n      roles.push({\n        key: selectedRole.id,\n        label: selectedRole.name,\n        value: selectedRole.id\n      });\n    });\n    return { tables, roles };\n  }, [resource == null ? void 0 : resource.tables, resource == null ? void 0 : resource.roles]);\n  // initialize\n  useEffect(() => {\n    if (!isEditMode) {\n      setCurrentRule({ ...DEFAULT_RULE });\n    } else\n    if ((rule == null ? void 0 : rule.id) !== null && !loading && !fetchError) {\n      fetchResource(rule.id);\n    }\n  }, [rule]);\n  useEffect(() => {\n    if (resource) {\n      setCurrentRule({ ...resource, id: rule == null ? void 0 : rule.id });\n      const selectedTableAndRoles = getSelectedData();\n      updateRuleState('tables', (selectedTableAndRoles == null ? void 0 : selectedTableAndRoles.tables) || []);\n      updateRuleState('roles', (selectedTableAndRoles == null ? void 0 : selectedTableAndRoles.roles) || []);\n    }\n  }, [resource]);\n  // validate\n  const currentRuleSafe = currentRule || {};\n  useEffect(() => {\n    validate();\n  }, [currentRuleSafe.name, currentRuleSafe.clause, currentRuleSafe == null ? void 0 : currentRuleSafe.tables]);\n  const onTextChange = (target) => {\n    updateRuleState(target.name, target.value);\n  };\n  const onFilterChange = (type) => {\n    updateRuleState('filter_type', type);\n  };\n  const onTablesChange = (tables) => {\n    updateRuleState('tables', tables || []);\n  };\n  const onRolesChange = (roles) => {\n    updateRuleState('roles', roles || []);\n  };\n  const hide = () => {\n    clearError();\n    setCurrentRule({ ...DEFAULT_RULE });\n    onHide();\n  };\n  const onSave = () => {var _currentRule$tables2, _currentRule$roles;\n    const tables = [];\n    const roles = [];\n    (_currentRule$tables2 = currentRule.tables) == null ? void 0 : _currentRule$tables2.forEach((table) => tables.push(table.key));\n    (_currentRule$roles = currentRule.roles) == null ? void 0 : _currentRule$roles.forEach((role) => roles.push(role.key));\n    const data = { ...currentRule, tables, roles };\n    if (isEditMode && currentRule.id) {\n      const updateId = currentRule.id;\n      delete data.id;\n      updateResource(updateId, data).then((response) => {\n        if (!response) {\n          return;\n        }\n        addSuccessToast(`Rule updated`);\n        hide();\n      });\n    } else\n    if (currentRule) {\n      createResource(data).then((response) => {\n        if (!response)\n        return;\n        addSuccessToast(t('Rule added'));\n        hide();\n      });\n    }\n  };\n  // * data loaders *\n  const loadTableOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/rowlevelsecurity/related/tables?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        label: item.text,\n        value: item.value\n      }));\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const loadRoleOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/rowlevelsecurity/related/roles?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        label: item.text,\n        value: item.value\n      }));\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  return _jsx(StyledModal, { className: \"no-content-padding\", responsive: true, show: show, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, width: \"30%\", maxWidth: \"1450px\", title: _jsxs(\"h4\", { children: [\n      isEditMode ? _jsx(Icons.EditOutlined, { css: css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              ` }) : _jsx(Icons.PlusOutlined, { iconSize: \"l\", css: css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              ` }),\n      isEditMode ? t('Edit Rule') : t('Add Rule')] }\n    ), children:\n    _jsx(StyledSectionContainer, { children:\n      _jsxs(\"div\", { className: \"main-section\", children: [\n        _jsx(StyledInputContainer, { children:\n          _jsx(LabeledErrorBoundInput, { id: \"name\", name: \"name\", className: \"labeled-input\", value: currentRule ? currentRule.name : '', required: true, validationMethods: {\n              onChange: ({ target }) => onTextChange(target)\n            }, css: noMargins, label: t('Rule Name'), tooltipText: t('The name of the rule must be unique'), hasTooltip: true }) }\n        ),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Filter Type'), ' ',\n            _jsx(InfoTooltip, { tooltip: t('Regular filters add where clauses to queries if a user belongs to a role referenced in the filter, base filters apply filters to all queries except the roles defined in the filter, and can be used to define what users can see if no RLS filters within a filter group apply to them.') })] }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(Select, { name: \"filter_type\", ariaLabel: t('Filter Type'), placeholder: t('Filter Type'), onChange: onFilterChange, value: currentRule == null ? void 0 : currentRule.filter_type, options: FILTER_OPTIONS }) }\n          )] }\n        ),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Datasets'), \" \", _jsx(\"span\", { className: \"required\", children: \"*\" }),\n            _jsx(InfoTooltip, { tooltip: t('These are the datasets this filter will be applied to.') })] }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(AsyncSelect, { ariaLabel: t('Tables'), mode: \"multiple\", onChange: onTablesChange, value: (currentRule == null ? void 0 : currentRule.tables) || [], options: loadTableOptions }) }\n          )] }\n        ),\n\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            currentRule.filter_type === FilterType.Base ?\n            t('Excluded roles') :\n            t('Roles'), ' ',\n            _jsx(InfoTooltip, { tooltip: t('For regular filters, these are the roles this filter will be applied to. For base filters, these are the roles that the filter DOES NOT apply to, e.g. Admin if admin should see all data.') })] }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(AsyncSelect, { ariaLabel: t('Roles'), mode: \"multiple\", onChange: onRolesChange, value: (currentRule == null ? void 0 : currentRule.roles) || [], options: loadRoleOptions }) }\n          )] }\n        ),\n        _jsx(StyledInputContainer, { children:\n          _jsx(LabeledErrorBoundInput, { id: \"group_key\", name: \"group_key\", value: currentRule ? currentRule.group_key : '', validationMethods: {\n              onChange: ({ target }) => onTextChange(target)\n            }, css: noMargins, label: t('Group Key'), hasTooltip: true, tooltipText: t(`Filters with the same group key will be ORed together within the group, while different filter groups will be ANDed together. Undefined group keys are treated as unique groups, i.e. are not grouped together. For example, if a table has three filters, of which two are for departments Finance and Marketing (group key = 'department'), and one refers to the region Europe (group key = 'region'), the filter clause would apply the filter (department = 'Finance' OR department = 'Marketing') AND (region = 'Europe').`) }) }\n        ),\n        _jsx(StyledInputContainer, { children:\n          _jsx(\"div\", { className: \"control-label\", children:\n            _jsx(LabeledErrorBoundInput, { id: \"clause\", name: \"clause\", value: currentRule ? currentRule.clause : '', required: true, validationMethods: {\n                onChange: ({ target }) => onTextChange(target)\n              }, css: noMargins, label: t('Clause'), hasTooltip: true, tooltipText: t('This is the condition that will be added to the WHERE clause. For example, to only return rows for a particular client, you might define a regular filter with the clause `client_id = 9`. To display no rows unless a user belongs to a RLS filter role, a base filter can be created with the clause `1 = 0` (always false).') }) }\n          ) }\n        ),\n        _jsxs(StyledInputContainer, { children: [\n          _jsx(\"div\", { className: \"control-label\", children: t('Description') }),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(StyledTextArea, { rows: 4, name: \"description\", value: currentRule ? currentRule.description : '', onChange: (event) => onTextChange(event.target) }) }\n          )] }\n        )] }\n      ) }\n    ) }\n  );\n}\nexport default RowLevelSecurityModal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}