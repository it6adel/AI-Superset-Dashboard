{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Fragment, useCallback, useState, useMemo, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { css, styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport DashboardComponent from 'src/dashboard/containers/DashboardComponent';\nimport DeleteComponentButton from 'src/dashboard/components/DeleteComponentButton';\nimport {\n  Draggable,\n  Droppable } from\n'src/dashboard/components/dnd/DragDroppable';\nimport DragHandle from 'src/dashboard/components/dnd/DragHandle';\nimport HoverMenu from 'src/dashboard/components/menu/HoverMenu';\nimport IconButton from 'src/dashboard/components/IconButton';\nimport ResizableContainer from 'src/dashboard/components/resizable/ResizableContainer';\nimport BackgroundStyleDropdown from 'src/dashboard/components/menu/BackgroundStyleDropdown';\nimport WithPopoverMenu from 'src/dashboard/components/menu/WithPopoverMenu';\nimport backgroundStyleOptions from 'src/dashboard/util/backgroundStyleOptions';\nimport { componentShape } from 'src/dashboard/util/propShapes';\nimport { BACKGROUND_TRANSPARENT } from 'src/dashboard/util/constants';\nimport { EMPTY_CONTAINER_Z_INDEX } from 'src/dashboard/constants';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n\n  // grid related\n  availableColumnCount: PropTypes.number.isRequired,\n  columnWidth: PropTypes.number.isRequired,\n  minColumnWidth: PropTypes.number.isRequired,\n  onResizeStart: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  onResizeStop: PropTypes.func.isRequired,\n\n  // dnd\n  deleteComponent: PropTypes.func.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired\n};\n\nconst defaultProps = {};\n\nconst ColumnStyles = styled.div`\n  ${({ theme, editMode }) => css`\n    &.grid-column {\n      width: 100%;\n      position: relative;\n\n      & > :not(.hover-menu):not(:last-child) {\n        ${!editMode && `margin-bottom: ${theme.gridUnit * 4}px;`}\n      }\n    }\n\n    .dashboard--editing &:after {\n      content: '';\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      z-index: 1;\n      pointer-events: none;\n      border: 1px dashed ${theme.colors.grayscale.light2};\n    }\n    .dashboard--editing .resizable-container--resizing:hover > &:after,\n    .dashboard--editing .hover-menu:hover + &:after {\n      border: 1px dashed ${theme.colors.primary.base};\n      z-index: 2;\n    }\n\n    & .empty-droptarget {\n      &.droptarget-edge {\n        position: absolute;\n        z-index: ${EMPTY_CONTAINER_Z_INDEX};\n        &:first-child {\n          inset-block-start: 0;\n        }\n      }\n      &:first-child:not(.droptarget-edge) {\n        position: absolute;\n        z-index: ${EMPTY_CONTAINER_Z_INDEX};\n        width: 100%;\n        height: 100%;\n      }\n    }\n  `}\n`;\n\nconst emptyColumnContentStyles = (theme) => css`\n  min-height: ${theme.gridUnit * 25}px;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${theme.colors.text.label};\n`;\n\nconst Column = (props) => {\n  const {\n    component: columnComponent,\n    parentComponent,\n    index,\n    availableColumnCount,\n    columnWidth,\n    minColumnWidth,\n    depth,\n    onResizeStart,\n    onResize,\n    onResizeStop,\n    handleComponentDrop,\n    editMode,\n    onChangeTab,\n    isComponentVisible,\n    deleteComponent,\n    id,\n    parentId,\n    updateComponents\n  } = props;\n\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleDeleteComponent = useCallback(() => {\n    deleteComponent(id, parentId);\n  }, [deleteComponent, id, parentId]);\n\n  const handleChangeFocus = useCallback((nextFocus) => {\n    setIsFocused(Boolean(nextFocus));\n  }, []);\n\n  const handleChangeBackground = useCallback(\n    (nextValue) => {\n      const metaKey = 'background';\n      if (nextValue && columnComponent.meta[metaKey] !== nextValue) {\n        updateComponents({\n          [columnComponent.id]: {\n            ...columnComponent,\n            meta: {\n              ...columnComponent.meta,\n              [metaKey]: nextValue\n            }\n          }\n        });\n      }\n    },\n    [columnComponent, updateComponents]\n  );\n\n  const columnItems = useMemo(\n    () => columnComponent.children || [],\n    [columnComponent.children]\n  );\n\n  const backgroundStyle = backgroundStyleOptions.find(\n    (opt) =>\n    opt.value === (columnComponent.meta.background || BACKGROUND_TRANSPARENT)\n  );\n\n  const renderChild = useCallback(\n    ({ dragSourceRef }) =>\n    _jsx(ResizableContainer, {\n      id: columnComponent.id,\n      adjustableWidth: true,\n      adjustableHeight: false,\n      widthStep: columnWidth,\n      widthMultiple: columnComponent.meta.width,\n      minWidthMultiple: minColumnWidth,\n      maxWidthMultiple:\n      availableColumnCount + (columnComponent.meta.width || 0),\n\n      onResizeStart: onResizeStart,\n      onResize: onResize,\n      onResizeStop: onResizeStop,\n      editMode: editMode, children:\n\n      _jsxs(WithPopoverMenu, {\n        isFocused: isFocused,\n        onChangeFocus: handleChangeFocus,\n        disableClick: true,\n        menuItems: [\n        _jsx(BackgroundStyleDropdown, {\n          id: `${columnComponent.id}-background`,\n          value: columnComponent.meta.background,\n          onChange: handleChangeBackground }\n        )],\n\n        editMode: editMode, children: [\n\n        editMode &&\n        _jsxs(HoverMenu, { innerRef: dragSourceRef, position: \"top\", children: [\n          _jsx(DragHandle, { position: \"top\" }),\n          _jsx(DeleteComponentButton, { onDelete: handleDeleteComponent }),\n          _jsx(IconButton, {\n            onClick: handleChangeFocus,\n            icon: _jsx(Icons.SettingOutlined, { iconSize: \"xl\" }) }\n          )] }\n        ),\n\n        _jsxs(ColumnStyles, {\n          className: cx('grid-column', backgroundStyle.className),\n          editMode: editMode, children: [\n\n          editMode &&\n          _jsx(Droppable, {\n            component: columnComponent,\n            parentComponent: columnComponent, ...(\n            columnItems.length === 0 ?\n            {\n              dropToChild: true\n            } :\n            {\n              component: columnItems[0]\n            }),\n            depth: depth,\n            index: 0,\n            orientation: \"column\",\n            onDrop: handleComponentDrop,\n            className: cx(\n              'empty-droptarget',\n              columnItems.length > 0 && 'droptarget-edge'\n            ),\n            editMode: true, children:\n\n            ({ dropIndicatorProps }) =>\n            dropIndicatorProps && _jsx(\"div\", { ...dropIndicatorProps }) }\n\n          ),\n\n          columnItems.length === 0 ?\n          _jsx(\"div\", { css: emptyColumnContentStyles, children: t('Empty column') }) :\n\n          columnItems.map((componentId, itemIndex) =>\n          _jsxs(Fragment, { children: [\n            _jsx(DashboardComponent, {\n              id: componentId,\n              parentId: columnComponent.id,\n              depth: depth + 1,\n              index: itemIndex,\n              availableColumnCount: columnComponent.meta.width,\n              columnWidth: columnWidth,\n              onResizeStart: onResizeStart,\n              onResize: onResize,\n              onResizeStop: onResizeStop,\n              isComponentVisible: isComponentVisible,\n              onChangeTab: onChangeTab }\n            ),\n            editMode &&\n            _jsx(Droppable, {\n              component: columnItems,\n              parentComponent: columnComponent,\n              depth: depth,\n              index: itemIndex + 1,\n              orientation: \"column\",\n              onDrop: handleComponentDrop,\n              className: cx(\n                'empty-droptarget',\n                itemIndex === columnItems.length - 1 &&\n                'droptarget-edge'\n              ),\n              editMode: true, children:\n\n              ({ dropIndicatorProps }) =>\n              dropIndicatorProps && _jsx(\"div\", { ...dropIndicatorProps }) }\n\n            )] }, componentId\n\n          )\n          )] }\n\n        )] }\n      ) }\n    ),\n\n    [\n    availableColumnCount,\n    backgroundStyle.className,\n    columnComponent,\n    columnItems,\n    columnWidth,\n    depth,\n    editMode,\n    handleChangeBackground,\n    handleChangeFocus,\n    handleComponentDrop,\n    handleDeleteComponent,\n    isComponentVisible,\n    isFocused,\n    minColumnWidth,\n    onChangeTab,\n    onResize,\n    onResizeStart,\n    onResizeStop]\n\n  );\n\n  return (\n    _jsx(Draggable, {\n      component: columnComponent,\n      parentComponent: parentComponent,\n      orientation: \"column\",\n      index: index,\n      depth: depth,\n      onDrop: handleComponentDrop,\n      editMode: editMode, children:\n\n      renderChild }\n    ));\n\n};\n\nColumn.propTypes = propTypes;\nColumn.defaultProps = defaultProps;\n\nexport default /*#__PURE__*/memo(Column);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}