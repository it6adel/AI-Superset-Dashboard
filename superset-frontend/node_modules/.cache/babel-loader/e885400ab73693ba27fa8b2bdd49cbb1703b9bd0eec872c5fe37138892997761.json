{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useMemo } from 'react';\nimport { t, useTruncation } from '@superset-ui/core';\nimport { useFilterScope } from './useFilterScope';\nimport { Row, RowLabel, RowTruncationCount, RowValue, TooltipList, TooltipSectionLabel } from './Styles';\nimport { TooltipWithTruncation } from './TooltipWithTruncation';import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst getTooltipSection = (items, label) => Array.isArray(items) && items.length > 0 ? _jsxs(_Fragment, { children: [\n  _jsxs(TooltipSectionLabel, { children: [label, \":\"] }),\n  _jsx(TooltipList, { children:\n    items.map((item) => _jsx(\"li\", { children: item })) }\n  )] }\n) : null;\nexport const ScopeRow = /*#__PURE__*/memo(({ filter }) => {\n  const scope = useFilterScope(filter);\n  const [scopeRef, plusRef, elementsTruncated, hasHiddenElements] = useTruncation();\n  const tooltipText = useMemo(() => {\n    if (elementsTruncated === 0 || !scope) {\n      return null;\n    }\n    if (scope.all) {\n      return _jsx(\"span\", { children: t('All charts') });\n    }\n    return _jsxs(\"div\", { children: [\n      getTooltipSection(scope.tabs, t('Tabs')),\n      getTooltipSection(scope.charts, t('Charts'))] }\n    );\n  }, [elementsTruncated, scope]);\n  return _jsxs(Row, { children: [\n    _jsx(RowLabel, { children: t('Scope') }),\n    _jsxs(TooltipWithTruncation, { title: tooltipText, children: [\n      _jsx(RowValue, { ref: scopeRef, children:\n        scope ?\n        Object.values(scope).\n        flat().\n        map((element, index) => _jsx(\"span\", { children:\n          index === 0 ? element : `, ${element}` }, element\n        )) :\n        t('None') }\n      ),\n      hasHiddenElements && _jsxs(RowTruncationCount, { ref: plusRef, children: [\"+\",\n        elementsTruncated] }\n      )] }\n    )] }\n  );\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}