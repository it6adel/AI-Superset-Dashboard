{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useContext, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { css, t, useTheme } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { useSelector } from 'react-redux';\nimport { DashboardPageIdContext } from 'src/dashboard/containers/DashboardPage';\nimport { findPermission } from 'src/utils/findPermission';\nimport DrillDetailPane from './DrillDetailPane';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst ModalFooter = ({ canExplore, closeModal, exploreChart }) => {\n  const theme = useTheme();\n  return _jsxs(_Fragment, { children: [\n    _jsx(Button, { buttonStyle: \"secondary\", buttonSize: \"small\", onClick: exploreChart, disabled: !canExplore, tooltip: !canExplore ?\n      t('You do not have sufficient permissions to edit the chart') :\n      undefined, children:\n      t('Edit chart') }\n    ),\n    _jsx(Button, { buttonStyle: \"primary\", buttonSize: \"small\", onClick: closeModal, css: css`\n          margin-left: ${theme.gridUnit * 2}px;\n        `, children:\n      t('Close') }\n    )] }\n  );\n};\nexport default function DrillDetailModal({ chartId, formData, initialFilters, showModal, onHideModal }) {\n  const theme = useTheme();\n  const history = useHistory();\n  const dashboardPageId = useContext(DashboardPageIdContext);\n  const { slice_name: chartName } = useSelector((state) => {var _state$sliceEntities, _state$sliceEntities$;return ((_state$sliceEntities = state.sliceEntities) == null ? void 0 : (_state$sliceEntities$ = _state$sliceEntities.slices) == null ? void 0 : _state$sliceEntities$[chartId]) || {};});\n  const canExplore = useSelector((state) => {var _state$user;return findPermission('can_explore', 'Superset', (_state$user = state.user) == null ? void 0 : _state$user.roles);});\n  const exploreUrl = useMemo(() => `/explore/?dashboard_page_id=${dashboardPageId}&slice_id=${chartId}`, [chartId, dashboardPageId]);\n  const exploreChart = useCallback(() => {\n    history.push(exploreUrl);\n  }, [exploreUrl, history]);\n  return _jsx(Modal, { show: showModal, onHide: onHideModal != null ? onHideModal : () => null, css: css`\n        .antd5-modal-body {\n          display: flex;\n          flex-direction: column;\n        }\n      `, title: t('Drill to detail: %s', chartName), footer: _jsx(ModalFooter, { exploreChart: exploreChart, canExplore: canExplore }), responsive: true, resizable: true, resizableConfig: {\n      minHeight: theme.gridUnit * 128,\n      minWidth: theme.gridUnit * 128,\n      defaultSize: {\n        width: 'auto',\n        height: '75vh'\n      }\n    }, draggable: true, destroyOnClose: true, maskClosable: false, children:\n    _jsx(DrillDetailPane, { formData: formData, initialFilters: initialFilters }) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}