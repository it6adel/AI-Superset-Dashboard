{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /* eslint-disable react/jsx-handler-names */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\n\nimport { SupersetClient, usePrevious } from '@superset-ui/core';\nimport { DeckGLContainerStyledWrapper } from '../DeckGLContainer';\nimport { getExploreLongUrl } from '../utils/explore';\nimport layerGenerators from '../layers';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst DeckMulti = (props) => {\n  const containerRef = useRef();\n  const [viewport, setViewport] = useState();\n  const [subSlicesLayers, setSubSlicesLayers] = useState({});\n  const setTooltip = useCallback((tooltip) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n  const loadLayers = useCallback((formData, payload, viewport) => {\n    setViewport(viewport);\n    setSubSlicesLayers({});\n    payload.data.slices.forEach((subslice) => {\n      // Filters applied to multi_deck are passed down to underlying charts\n      // note that dashboard contextual information (filter_immune_slices and such) aren't\n      // taken into consideration here\n      const filters = [\n      ...(subslice.form_data.filters || []),\n      ...(formData.filters || []),\n      ...(formData.extra_filters || [])];\n\n      const subsliceCopy = {\n        ...subslice,\n        form_data: {\n          ...subslice.form_data,\n          filters\n        }\n      };\n      const url = getExploreLongUrl(subsliceCopy.form_data, 'json');\n      if (url) {\n        SupersetClient.get({\n          endpoint: url\n        }).\n        then(({ json }) => {\n          // @ts-ignore TODO(hainenber): define proper type for `form_data.viz_type` and call signature for functions in layerGenerators.\n          const layer = layerGenerators[subsliceCopy.form_data.viz_type](subsliceCopy.form_data, json, props.onAddFilter, setTooltip, props.datasource, [], props.onSelect);\n          setSubSlicesLayers((subSlicesLayers) => ({\n            ...subSlicesLayers,\n            [subsliceCopy.slice_id]: layer\n          }));\n        }).\n        catch(() => {});\n      }\n    });\n  }, [props.datasource, props.onAddFilter, props.onSelect, setTooltip]);\n  const prevDeckSlices = usePrevious(props.formData.deck_slices);\n  useEffect(() => {\n    const { formData, payload } = props;\n    const hasChanges = !_isEqual(prevDeckSlices, formData.deck_slices);\n    if (hasChanges) {\n      loadLayers(formData, payload);\n    }\n  }, [loadLayers, prevDeckSlices, props]);\n  const { payload, formData, setControlValue, height, width } = props;\n  const layers = Object.values(subSlicesLayers);\n  return _jsx(DeckGLContainerStyledWrapper, { ref: containerRef, mapboxApiAccessToken: payload.data.mapboxApiKey, viewport: viewport || props.viewport, layers: layers, mapStyle: formData.mapbox_style, setControlValue: setControlValue, onViewportChange: setViewport, height: height, width: width });\n};\nexport default /*#__PURE__*/memo(DeckMulti);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}