{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isRequired, Plugin } from '../..';\nimport getChartMetadataRegistry from '../registries/ChartMetadataRegistrySingleton';\nimport getChartBuildQueryRegistry from '../registries/ChartBuildQueryRegistrySingleton';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartControlPanelRegistry from '../registries/ChartControlPanelRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nfunction IDENTITY(x) {\n  return x;\n}\nconst EMPTY = {};\n/**\n * Loaders of the form `() => import('foo')` may return esmodules\n * which require the value to be extracted as `module.default`\n * */\nfunction sanitizeLoader(loader) {\n  return () => {\n    const loaded = loader();\n    return loaded instanceof Promise ?\n    loaded.then((module) => 'default' in module && module.default || module) :\n    loaded;\n  };\n}\nexport default class ChartPlugin extends Plugin {\n\n\n\n\n\n  constructor(config) {\n    super();this.controlPanel = void 0;this.metadata = void 0;this.loadBuildQuery = void 0;this.loadTransformProps = void 0;this.loadChart = void 0;\n    const { metadata, buildQuery, loadBuildQuery, transformProps = IDENTITY, loadTransformProps, Chart, loadChart, controlPanel = EMPTY } = config;\n    this.controlPanel = controlPanel;\n    this.metadata = metadata;\n    this.loadBuildQuery =\n    loadBuildQuery && sanitizeLoader(loadBuildQuery) ||\n    buildQuery && sanitizeLoader(() => buildQuery) ||\n    undefined;\n    this.loadTransformProps = sanitizeLoader(loadTransformProps != null ? loadTransformProps : () => transformProps);\n    if (loadChart) {\n      this.loadChart = sanitizeLoader(loadChart);\n    } else\n    if (Chart) {\n      this.loadChart = () => Chart;\n    } else\n    {\n      throw new Error('Chart or loadChart is required');\n    }\n  }\n  register() {\n    const key = this.config.key || isRequired('config.key');\n    getChartMetadataRegistry().registerValue(key, this.metadata);\n    getChartComponentRegistry().registerLoader(key, this.loadChart);\n    getChartControlPanelRegistry().registerValue(key, this.controlPanel);\n    getChartTransformPropsRegistry().registerLoader(key, this.loadTransformProps);\n    if (this.loadBuildQuery) {\n      getChartBuildQueryRegistry().registerLoader(key, this.loadBuildQuery);\n    }\n    return this;\n  }\n  unregister() {\n    const key = this.config.key || isRequired('config.key');\n    getChartMetadataRegistry().remove(key);\n    getChartComponentRegistry().remove(key);\n    getChartControlPanelRegistry().remove(key);\n    getChartTransformPropsRegistry().remove(key);\n    getChartBuildQueryRegistry().remove(key);\n    return this;\n  }\n  configure(config, replace) {\n    super.configure(config, replace);\n    return this;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}