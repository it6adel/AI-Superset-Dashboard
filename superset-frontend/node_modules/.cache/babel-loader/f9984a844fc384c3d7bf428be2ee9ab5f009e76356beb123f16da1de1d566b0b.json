{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/jsx-sort-default-props, react/sort-prop-types */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { extent as d3Extent } from 'd3-array';\nimport { ensureIsArray, styled } from '@superset-ui/core';\nimport HorizonRow, { DEFAULT_COLORS } from './HorizonRow';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  className: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  seriesHeight: PropTypes.number,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.arrayOf(PropTypes.string),\n      values: PropTypes.arrayOf(\n        PropTypes.shape({\n          y: PropTypes.number\n        })\n      )\n    })\n  ).isRequired,\n  // number of bands in each direction (positive / negative)\n  bands: PropTypes.number,\n  colors: PropTypes.arrayOf(PropTypes.string),\n  colorScale: PropTypes.string,\n  mode: PropTypes.string,\n  offsetX: PropTypes.number\n};\nconst defaultProps = {\n  className: '',\n  width: 800,\n  height: 600,\n  seriesHeight: 20,\n  bands: Math.floor(DEFAULT_COLORS.length / 2),\n  colors: DEFAULT_COLORS,\n  colorScale: 'series',\n  mode: 'offset',\n  offsetX: 0\n};\n\nconst StyledDiv = styled.div`\n  ${({ theme }) => `\n    .superset-legacy-chart-horizon {\n      overflow: auto;\n      position: relative;\n    }\n\n    .superset-legacy-chart-horizon .horizon-row {\n      border-bottom: solid 1px ${theme.colors.grayscale.light2};\n      border-top: 0;\n      padding: 0;\n      margin: 0;\n    }\n\n    .superset-legacy-chart-horizon .horizon-row span.title {\n      position: absolute;\n      color: ${theme.colors.grayscale.dark1};\n      font-size: ${theme.typography.sizes.s}px;\n      margin: 0;\n    }\n  `}\n`;\n\nclass HorizonChart extends PureComponent {\n  render() {\n    const {\n      className,\n      width,\n      height,\n      data,\n      seriesHeight,\n      bands,\n      colors,\n      colorScale,\n      mode,\n      offsetX\n    } = this.props;\n\n    let yDomain;\n    if (colorScale === 'overall') {\n      const allValues = data.reduce(\n        (acc, current) => acc.concat(current.values),\n        []\n      );\n      yDomain = d3Extent(allValues, (d) => d.y);\n    }\n\n    return (\n      _jsx(StyledDiv, { children:\n        _jsx(\"div\", {\n          className: `superset-legacy-chart-horizon ${className}`,\n          style: { height }, children:\n\n          data.map((row) =>\n          _jsx(HorizonRow, {\n\n            width: width,\n            height: seriesHeight,\n            title: ensureIsArray(row.key).join(', '),\n            data: row.values,\n            bands: bands,\n            colors: colors,\n            colorScale: colorScale,\n            mode: mode,\n            offsetX: offsetX,\n            yDomain: yDomain }, row.key\n          )\n          ) }\n        ) }\n      ));\n\n  }\n}\n\nHorizonChart.propTypes = propTypes;\nHorizonChart.defaultProps = defaultProps;\n\nexport default HorizonChart;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}