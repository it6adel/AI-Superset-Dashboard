{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { css, ensureIsArray, styled } from '@superset-ui/core';\nimport { AntdBreadcrumb } from 'src/components/index';\nimport { noOp } from 'src/utils/common';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst BreadcrumbItem = styled(AntdBreadcrumb.Item)`\n  ${({ theme, isClickable, isHidden }) => css`\n    cursor: ${isClickable ? 'pointer' : 'auto'};\n    color: ${theme.colors.grayscale.light1};\n    transition: color ease-in ${theme.transitionTiming}s;\n    .ant-breadcrumb > span:last-child > & {\n      color: ${theme.colors.grayscale.dark1};\n    }\n    &:hover {\n      color: ${isClickable ? theme.colors.grayscale.dark1 : 'inherit'};\n    }\n    visibility: ${isHidden ? 'hidden' : 'visible'};\n  `}\n`;\nexport const useDrillByBreadcrumbs = (breadcrumbsData, onBreadcrumbClick = noOp) => useMemo(() => {\n  // the last breadcrumb is not clickable\n  const isClickable = (index) => index < breadcrumbsData.length - 1;\n  const isHidden = (breadcumb) => ensureIsArray(breadcumb.groupby).length === 0 &&\n  ensureIsArray(breadcumb.filters).length === 0;\n  const getBreadcrumbText = (breadcrumb) => `${ensureIsArray(breadcrumb.groupby).\n  map((column) => column.verbose_name || column.column_name).\n  join(', ')} ${breadcrumb.filters ?\n  `(${breadcrumb.filters.\n  map((filter) => filter.formattedVal || filter.val).\n  join(', ')})` :\n  ''}`;\n  return _jsx(AntdBreadcrumb, { css: (theme) => css`\n          margin: ${theme.gridUnit * 2}px 0 ${theme.gridUnit * 4}px;\n        `, children:\n    breadcrumbsData.\n    map((breadcrumb, index) => _jsx(BreadcrumbItem, { isClickable: isClickable(index), isHidden: isHidden(breadcrumb), onClick: isClickable(index) ?\n      () => onBreadcrumbClick(breadcrumb, index) :\n      noOp, children:\n      getBreadcrumbText(breadcrumb) }, index\n    )).\n    filter((item) => item.props.isHidden === false) }\n  );\n}, [breadcrumbsData, onBreadcrumbClick]);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}