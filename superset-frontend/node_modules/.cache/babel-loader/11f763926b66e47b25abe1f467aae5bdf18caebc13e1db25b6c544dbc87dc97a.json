{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ControlHeader } from '@superset-ui/chart-controls';\nimport { css, styled, t } from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport { Form, Tag } from 'antd'; // TODO: Remove antd\nimport { useState } from 'react';\nimport { isZoomConfigsLinear, isZoomConfigsExp } from './typeguards';\nimport { computeConfigValues, toFixedConfig, toLinearConfig, toExpConfig } from './zoomUtil';\nimport ZoomConfigsChart from './ZoomConfigsChart';\nimport { ControlFormItem } from '../ColumnConfigControl/ControlForm';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const StyledControlFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n  `}\n`;\nexport const ZoomConfigControl = ({ value, onChange = () => {}, name, label, description, renderTrigger, hovered, validationErrors }) => {\n  const initBaseWidth = value ? value.configs.width : 0;\n  const initBaseHeight = value ? value.configs.height : 0;\n  const initBaseSlope = (value == null ? void 0 : value.configs.slope) !== undefined ? value.configs.slope : 0;\n  const initBaseExponent = (value == null ? void 0 : value.configs.exponent) !== undefined ? value.configs.exponent : 0;\n  const [baseWidth, setBaseWidth] = useState(initBaseWidth);\n  const [baseHeight, setBaseHeight] = useState(initBaseHeight);\n  const [baseSlope, setBaseSlope] = useState(initBaseSlope);\n  const [baseExponent, setBaseExponent] = useState(initBaseExponent);\n  const onChartChange = (newConfig) => {\n    onChange(newConfig);\n  };\n  const onBaseWidthChange = (width) => {\n    console.log('now in onbasewidthcahnge');\n    setBaseWidth(width);\n    if (!value) {\n      return;\n    }\n    const newValue = { ...value };\n    newValue.configs.width = width;\n    newValue.values = computeConfigValues(newValue);\n    onChange(newValue);\n  };\n  const onBaseHeightChange = (height) => {\n    setBaseHeight(height);\n    if (!value) {\n      return;\n    }\n    const newValue = { ...value };\n    newValue.configs.height = height;\n    newValue.values = computeConfigValues(newValue);\n    onChange(newValue);\n  };\n  const onBaseSlopeChange = (slope) => {\n    setBaseSlope(slope);\n    if (value && isZoomConfigsLinear(value)) {\n      const newValue = { ...value };\n      newValue.configs.slope = slope;\n      newValue.values = computeConfigValues(newValue);\n      onChange(newValue);\n    }\n  };\n  const onBaseExponentChange = (exponent) => {\n    setBaseExponent(exponent);\n    if (value && isZoomConfigsExp(value)) {\n      const newValue = { ...value };\n      newValue.configs.exponent = exponent;\n      newValue.values = computeConfigValues(newValue);\n      onChange(newValue);\n    }\n  };\n  const onShapeChange = (shape) => {\n    if (!value)\n    return;\n    const baseValues = {\n      width: baseWidth,\n      height: baseHeight,\n      slope: baseSlope,\n      exponent: baseExponent,\n      zoom: value == null ? void 0 : value.configs.zoom\n    };\n    switch (shape) {\n      case 'FIXED':{\n          const newFixedConfig = toFixedConfig(baseValues);\n          onChange(newFixedConfig);\n          break;\n        }\n      case 'LINEAR':{\n          const newLinearConfig = toLinearConfig(baseValues);\n          onChange(newLinearConfig);\n          break;\n        }\n      case 'EXP':{\n          const newLogConfig = toExpConfig(baseValues);\n          onChange(newLogConfig);\n          break;\n        }\n      default:\n        break;\n    }\n  };\n  const controlHeaderProps = {\n    name,\n    label,\n    description,\n    renderTrigger,\n    hovered,\n    validationErrors\n  };\n  const shapeLabel = t('Shape');\n  const shapeDescription = t('Select shape for computing values. \"FIXED\" sets all zoom levels to the same size. \"LINEAR\" increases sizes linearly based on specified slope. \"EXP\" increases sizes exponentially based on specified exponent');\n  const baseWidthLabel = t('Base width');\n  const baseWidthDescription = t('The width of the current zoom level to compute all widths from');\n  const baseHeightLabel = t('Base height');\n  const baseHeightDescription = t('The height of the current zoom level to compute all heights from');\n  const baseSlopeLabel = t('Base slope');\n  const baseSlopeDescription = t('The slope to compute all sizes from. \"LINEAR\" only');\n  const baseExponentLabel = t('Base exponent');\n  const baseExponentDescription = t('The exponent to compute all sizes from. \"EXP\" only');\n  return _jsxs(\"div\", { children: [\n    _jsx(ControlHeader, { ...controlHeaderProps }),\n    _jsxs(Form, { children: [\n      _jsx(StyledControlFormItem, { controlType: \"RadioButtonControl\", label: shapeLabel, description: shapeDescription, options: [\n        ['FIXED', 'FIXED'],\n        ['LINEAR', 'LINEAR'],\n        ['EXP', 'EXP']],\n        value: value ? value.type : undefined, name: \"shape\", onChange: onShapeChange }),\n      _jsx(StyledControlFormItem, { controlType: \"Slider\", label: baseWidthLabel, description: baseWidthDescription, value: baseWidth, name: \"baseWidth\"\n        // @ts-ignore\n        , onAfterChange: onBaseWidthChange, step: 1, min: 0, max: 500 }),\n      _jsx(StyledControlFormItem, { controlType: \"Slider\", label: baseHeightLabel, description: baseHeightDescription, value: baseHeight, name: \"baseHeight\"\n        // @ts-ignore\n        , onAfterChange: onBaseHeightChange, step: 1, min: 0, max: 500 }),\n      _jsx(StyledControlFormItem, { controlType: \"Slider\", label: baseSlopeLabel, description: baseSlopeDescription, value: baseSlope, name: \"slope\"\n        // @ts-ignore\n        , onAfterChange: onBaseSlopeChange, disabled: !!(value && !isZoomConfigsLinear(value)), step: 1, min: 0, max: 100 }),\n      _jsx(StyledControlFormItem, { controlType: \"Slider\", label: baseExponentLabel, description: baseExponentDescription, value: baseExponent, name: \"exponent\"\n        // @ts-ignore\n        , onAfterChange: onBaseExponentChange, disabled: !!(value && !isZoomConfigsExp(value)), step: 0.2, min: 0, max: 3 }),\n      _jsxs(Tag, { children: [\"Current Zoom: \", value == null ? void 0 : value.configs.zoom] })] }\n    ),\n    _jsx(ZoomConfigsChart, { name: \"zoomlevels\", value: value, onChange: onChartChange })] }\n  );\n};\nexport default ZoomConfigControl;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}