{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent, Fragment } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { ParentSize } from '@visx/responsive';\nimport { createSelector } from 'reselect';\nimport { withTheme } from '@emotion/react';\nimport { parseLength } from '../../dimension';\nimport getChartMetadataRegistry from '../registries/ChartMetadataRegistrySingleton';\nimport SuperChartCore from './SuperChartCore';\nimport DefaultFallbackComponent from './FallbackComponent';\nimport ChartProps from '../models/ChartProps';\nimport NoResultsComponent from './NoResultsComponent';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst defaultProps = {\n  FallbackComponent: DefaultFallbackComponent,\n  height: 400,\n  width: '100%',\n  enableNoResults: true\n};\nclass SuperChart extends PureComponent {constructor(...args) {super(...args);\n    /**\n     * SuperChart's core\n     */this.\n    core = void 0;this.\n    createChartProps = ChartProps.createSelector();this.\n    parseDimension = createSelector([\n    ({ width }) => width,\n    ({ height }) => height],\n    (width, height) => {\n      // Parse them in case they are % or 'auto'\n      const widthInfo = parseLength(width);\n      const heightInfo = parseLength(height);\n      const boxHeight = heightInfo.isDynamic ?\n      `${heightInfo.multiplier * 100}%` :\n      heightInfo.value;\n      const boxWidth = widthInfo.isDynamic ?\n      `${widthInfo.multiplier * 100}%` :\n      widthInfo.value;\n      const style = {\n        height: boxHeight,\n        width: boxWidth\n      };\n      // bounding box will ensure that when one dimension is not dynamic\n      // e.g. height = 300\n      // the auto size will be bound to that value instead of being 100% by default\n      // e.g. height: 300 instead of height: '100%'\n      const BoundingBox = widthInfo.isDynamic &&\n      heightInfo.isDynamic &&\n      widthInfo.multiplier === 1 &&\n      heightInfo.multiplier === 1 ?\n      Fragment :\n      ({ children }) => _jsx(\"div\", { style: style, children: children });\n      return { BoundingBox, heightInfo, widthInfo };\n    });this.\n\n    setRef = (core) => {\n      this.core = core;\n    };this.\n    getQueryCount = () => {var _getChartMetadataRegi, _getChartMetadataRegi2;return (_getChartMetadataRegi = (_getChartMetadataRegi2 = getChartMetadataRegistry().get(this.props.chartType)) == null ? void 0 : _getChartMetadataRegi2.queryObjectCount) != null ? _getChartMetadataRegi : 1;};}\n  renderChart(width, height) {\n    const { id, className, chartType, preTransformProps, overrideTransformProps, postTransformProps, onRenderSuccess, onRenderFailure, disableErrorBoundary, FallbackComponent, onErrorBoundary, Wrapper, queriesData, enableNoResults, noResults, theme, ...rest } = this.props;\n    const chartProps = this.createChartProps({\n      ...rest,\n      queriesData,\n      height,\n      width,\n      theme\n    });\n    let chart;\n    // Render the no results component if the query data is null or empty\n    const noResultQueries = enableNoResults && (\n    !queriesData ||\n    queriesData.\n    slice(0, this.getQueryCount()).\n    every(({ data }) => !data || Array.isArray(data) && data.length === 0));\n    if (noResultQueries) {\n      chart = noResults || _jsx(NoResultsComponent, { id: id, className: className, height: height, width: width });\n    } else\n    {\n      const chartWithoutWrapper = _jsx(SuperChartCore, { ref: this.setRef, id: id, className: className, chartType: chartType, chartProps: chartProps, preTransformProps: preTransformProps, overrideTransformProps: overrideTransformProps, postTransformProps: postTransformProps, onRenderSuccess: onRenderSuccess, onRenderFailure: onRenderFailure });\n      chart = Wrapper ? _jsx(Wrapper, { width: width, height: height, children:\n        chartWithoutWrapper }\n      ) : chartWithoutWrapper;\n    }\n    // Include the error boundary by default unless it is specifically disabled.\n    return disableErrorBoundary === true ? chart : _jsx(ErrorBoundary, { FallbackComponent: (props) => _jsx(FallbackComponent, { width: width, height: height, ...props }), onError: onErrorBoundary, children:\n      chart }\n    );\n  }\n  render() {\n    const { heightInfo, widthInfo, BoundingBox } = this.parseDimension(this.props);\n    // If any of the dimension is dynamic, get parent's dimension\n    if (widthInfo.isDynamic || heightInfo.isDynamic) {\n      const { debounceTime } = this.props;\n      return _jsx(BoundingBox, { children:\n        _jsx(ParentSize, { debounceTime: debounceTime, children:\n          ({ width, height }) => this.renderChart(widthInfo.isDynamic ? Math.floor(width) : widthInfo.value, heightInfo.isDynamic ? Math.floor(height) : heightInfo.value) }\n        ) }\n      );\n    }\n    return this.renderChart(widthInfo.value, heightInfo.value);\n  }\n}SuperChart.defaultProps = defaultProps;\nexport default withTheme(SuperChart);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}