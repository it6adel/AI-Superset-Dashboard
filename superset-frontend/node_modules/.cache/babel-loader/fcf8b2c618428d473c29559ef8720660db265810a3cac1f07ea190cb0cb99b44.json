{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getColumnLabel, getNumberFormatter, getTimeFormatter } from '@superset-ui/core';\nimport Echart from '../components/Echart';\nimport { formatSeriesName } from '../utils/series';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport default function EchartsGraph({ height, width, echartOptions, formData, onContextMenu, setDataMask, filterState, emitCrossFilters, refs, coltypeMapping }) {\n  const getCrossFilterDataMask = (node) => {\n    if (!(node != null && node.name) || !(node != null && node.col)) {\n      return undefined;\n    }\n    const { name, col } = node;\n    const selected = Object.values((filterState == null ? void 0 : filterState.selectedValues) || {});\n    let values;\n    if (selected.includes(name)) {\n      values = selected.filter((v) => v !== name);\n    } else\n    {\n      values = [name];\n    }\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length ?\n          [\n          {\n            col,\n            op: 'IN',\n            val: values\n          }] :\n\n          []\n        },\n        filterState: {\n          value: values.length ? values : null,\n          selectedValues: values.length ? values : null\n        }\n      },\n      isCurrentValueSelected: selected.includes(name)\n    };\n  };\n  const eventHandlers = {\n    click: (e) => {var _getCrossFilterDataMa;\n      if (!emitCrossFilters || !setDataMask) {\n        return;\n      }\n      e.event.stop();\n      const data = echartOptions.series[0].data;\n      const node = data.find((item) => item.id === e.data.id);\n      const dataMask = (_getCrossFilterDataMa = getCrossFilterDataMask(node)) == null ? void 0 : _getCrossFilterDataMa.dataMask;\n      if (dataMask) {\n        setDataMask(dataMask);\n      }\n    },\n    contextmenu: (e) => {\n      const handleNodeClick = (data) => {\n        const node = data.find((item) => item.id === e.data.id);\n        if (node != null && node.name) {\n          return [\n          {\n            col: node.col,\n            op: '==',\n            val: node.name,\n            formattedVal: node.name\n          }];\n\n        }\n        return undefined;\n      };\n      const handleEdgeClick = (data) => {var _data$find, _data$find2;\n        const sourceValue = (_data$find = data.find((item) => item.id === e.data.source)) == null ? void 0 : _data$find.name;\n        const targetValue = (_data$find2 = data.find((item) => item.id === e.data.target)) == null ? void 0 : _data$find2.name;\n        if (sourceValue && targetValue) {\n          return [\n          {\n            col: formData.source,\n            op: '==',\n            val: sourceValue,\n            formattedVal: sourceValue\n          },\n          {\n            col: formData.target,\n            op: '==',\n            val: targetValue,\n            formattedVal: targetValue\n          }];\n\n        }\n        return undefined;\n      };\n      if (onContextMenu) {\n        e.event.stop();\n        const pointerEvent = e.event.event;\n        const data = echartOptions.series[0].data;\n        const drillToDetailFilters = e.dataType === 'node' ? handleNodeClick(data) : handleEdgeClick(data);\n        const node = data.find((item) => item.id === e.data.id);\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(node),\n          drillBy: node && {\n            filters: [\n            {\n              col: node.col,\n              op: '==',\n              val: node.name,\n              formattedVal: formatSeriesName(node.name, {\n                timeFormatter: getTimeFormatter(formData.dateFormat),\n                numberFormatter: getNumberFormatter(formData.numberFormat),\n                coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(node.col)]\n              })\n            }],\n\n            groupbyFieldName: node.col === formData.source ? 'source' : 'target'\n          }\n        });\n      }\n    }\n  };\n  return _jsx(Echart, { refs: refs, height: height, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}