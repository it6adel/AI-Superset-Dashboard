{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '../translation';\nimport { removeDuplicates } from '../utils';\nimport getColumnLabel from './getColumnLabel';\nimport getMetricLabel from './getMetricLabel';\nimport { QueryMode } from './types/QueryFormData';\n/**\n * Extra SQL query related fields from chart form data.\n * Consolidate field values into arrays.\n *\n * @param formData - the (partial) form data obtained from chart controls.\n * @param aliases - additional field aliases that maps arbitrary field names to\n *                  query field names.\n */\nexport default function extractQueryFields(formData, aliases) {\n  const queryFieldAliases = {\n    /** These are predefined for backward compatibility */\n    metric: 'metrics',\n    metric_2: 'metrics',\n    secondary_metric: 'metrics',\n    x: 'metrics',\n    y: 'metrics',\n    size: 'metrics',\n    all_columns: 'columns',\n    series: 'groupby',\n    order_by_cols: 'orderby',\n    ...aliases\n  };\n  const { query_mode: queryMode, ...restFormData } = formData;\n  let columns = [];\n  let metrics = [];\n  let orderby = [];\n  Object.entries(restFormData).forEach(([key, value]) => {\n    // ignore `null` or `undefined` value\n    if (value == null) {\n      return;\n    }\n    let normalizedKey = queryFieldAliases[key] || key;\n    // ignore columns when (specifically) in aggregate mode.\n    // For charts that support both aggregate and raw records mode,\n    // we store both `groupby` and `columns` in `formData`, so users can\n    // switch between modes while retaining the selected options for each.\n    if (queryMode === QueryMode.Aggregate && normalizedKey === 'columns') {\n      return;\n    }\n    // for the same reason, ignore groupby and metrics in raw records mode\n    if (queryMode === QueryMode.Raw && (\n    normalizedKey === 'groupby' || normalizedKey === 'metrics')) {\n      return;\n    }\n    // groupby has been deprecated in QueryObject: https://github.com/apache/superset/pull/9366\n    if (normalizedKey === 'groupby') {\n      normalizedKey = 'columns';\n    }\n    if (normalizedKey === 'metrics') {\n      metrics = metrics.concat(value);\n    } else\n    if (normalizedKey === 'columns') {\n      // currently the columns field only accept pre-defined columns (string shortcut)\n      columns = columns.concat(value);\n    } else\n    if (normalizedKey === 'orderby') {\n      orderby = orderby.concat(value);\n    }\n  });\n  return {\n    columns: removeDuplicates(columns.filter((col) => col !== ''), getColumnLabel),\n    metrics: queryMode === QueryMode.Raw ?\n    undefined :\n    removeDuplicates(metrics, getMetricLabel),\n    orderby: orderby.length > 0 ?\n    orderby.map((item) => {\n      // value can be in the format of `['[\"col1\", true]', '[\"col2\", false]'],\n      // where the option strings come directly from `order_by_choices`.\n      if (typeof item === 'string') {\n        try {\n          return JSON.parse(item);\n        }\n        catch (error) {\n          throw new Error(t('Found invalid orderby options'));\n        }\n      }\n      return item;\n    }) :\n    undefined\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}