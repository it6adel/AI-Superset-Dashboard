{"ast":null,"code":"import _reject from \"lodash/reject\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { isFeatureEnabled, FeatureFlag, getExtensionsRegistry, styled, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport Collapse from 'src/components/Collapse';\n\nimport { dangerouslyGetItemDoNotUse, dangerouslySetItemDoNotUse, getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport ListViewCard from 'src/components/ListViewCard';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { CardContainer, createErrorHandler, getRecentActivityObjs, getUserOwnedObjects, loadingCardCount, mq } from 'src/views/CRUD/utils';\nimport { Switch } from 'src/components/Switch';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { TableTab } from 'src/views/CRUD/types';\nimport SubMenu from 'src/features/home/SubMenu';\nimport { userHasPermission } from 'src/dashboard/util/permissionUtils';\nimport ActivityTable from 'src/features/home/ActivityTable';\nimport ChartTable from 'src/features/home/ChartTable';\nimport SavedQueries from 'src/features/home/SavedQueries';\nimport DashboardTable from 'src/features/home/DashboardTable';import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst DEFAULT_TAB_ARR = ['2', '3'];\nconst WelcomeContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.grayscale.light4};\n  .ant-row.menu {\n    margin-top: -15px;\n    background-color: ${({ theme }) => theme.colors.grayscale.light4};\n    &:after {\n      content: '';\n      display: block;\n      border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      margin: 0px ${({ theme }) => theme.gridUnit * 6}px;\n      position: relative;\n      width: 100%;\n      ${mq[1]} {\n        margin-top: 5px;\n        margin: 0px 2px;\n      }\n    }\n    button {\n      padding: 3px 21px;\n    }\n  }\n  .antd5-card-meta-description {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n  .antd5-card.ant-card-bordered {\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n  .ant-collapse-item .ant-collapse-content {\n    margin-bottom: ${({ theme }) => theme.gridUnit * -6}px;\n  }\n  div.ant-collapse-item:last-child.ant-collapse-item-active\n    .ant-collapse-header {\n    padding-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  }\n  div.ant-collapse-item:last-child .ant-collapse-header {\n    padding-bottom: ${({ theme }) => theme.gridUnit * 9}px;\n  }\n  .loading-cards {\n    margin-top: ${({ theme }) => theme.gridUnit * 8}px;\n    .antd5-card-cover > div {\n      height: 168px;\n    }\n  }\n`;\nconst WelcomeNav = styled.div`\n  ${({ theme }) => `\n    .switch {\n      display: flex;\n      flex-direction: row;\n      margin: ${theme.gridUnit * 4}px;\n      span {\n        display: block;\n        margin: ${theme.gridUnit}px;\n        line-height: ${theme.gridUnit * 3.5}px;\n      }\n    }\n  `}\n`;\nconst bootstrapData = getBootstrapData();\nexport const LoadingCards = ({ cover }) => _jsx(CardContainer, { showThumbnails: cover, className: \"loading-cards\", children:\n  [...new Array(loadingCardCount)].map((_, index) => _jsx(ListViewCard, { cover: cover ? false : _jsx(_Fragment, {}), description: \"\", loading: true }, index)) }\n);\nfunction Welcome({ user, addDangerToast }) {\n  const canReadSavedQueries = userHasPermission(user, 'SavedQuery', 'can_read');\n  const userid = user.userId;\n  const id = userid.toString(); // confident that user is not a guest user\n  const params = rison.encode({ page_size: 24, distinct: false });\n  const recent = `/api/v1/log/recent_activity/?q=${params}`;\n  const [activeChild, setActiveChild] = useState('Loading');\n  const userKey = dangerouslyGetItemDoNotUse(id, null);\n  let defaultChecked = false;\n  const isThumbnailsEnabled = isFeatureEnabled(FeatureFlag.Thumbnails);\n  if (isThumbnailsEnabled) {\n    defaultChecked =\n    (userKey == null ? void 0 : userKey.thumbnails) === undefined ? true : userKey == null ? void 0 : userKey.thumbnails;\n  }\n  const [checked, setChecked] = useState(defaultChecked);\n  const [activityData, setActivityData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [queryData, setQueryData] = useState(null);\n  const [dashboardData, setDashboardData] = useState(null);\n  const [isFetchingActivityData, setIsFetchingActivityData] = useState(true);\n  const collapseState = getItem(LocalStorageKeys.HomepageCollapseState, []);\n  const [activeState, setActiveState] = useState(collapseState);\n  const handleCollapse = (state) => {\n    setActiveState(state);\n    setItem(LocalStorageKeys.HomepageCollapseState, state);\n  };\n  const SubmenuExtension = extensionsRegistry.get('home.submenu');\n  const WelcomeMessageExtension = extensionsRegistry.get('welcome.message');\n  const WelcomeTopExtension = extensionsRegistry.get('welcome.banner');\n  const WelcomeMainExtension = extensionsRegistry.get('welcome.main.replacement');\n  const [otherTabTitle, otherTabFilters] = useMemo(() => {var _bootstrapData$common;\n    const lastTab = (_bootstrapData$common = bootstrapData.common) == null ? void 0 : _bootstrapData$common.conf.\n    WELCOME_PAGE_LAST_TAB;\n    const [customTitle, customFilter] = Array.isArray(lastTab) ?\n    lastTab :\n    [undefined, undefined];\n    if (customTitle && customFilter) {\n      return [t(customTitle), customFilter];\n    }\n    if (lastTab === 'all') {\n      return [t('All'), []];\n    }\n    return [\n    t('Examples'),\n    [\n    {\n      col: 'created_by',\n      opr: 'rel_o_m',\n      value: 0\n    }]];\n\n\n  }, []);\n  useEffect(() => {\n    if (!otherTabFilters || WelcomeMainExtension) {\n      return;\n    }\n    const activeTab = getItem(LocalStorageKeys.HomepageActivityFilter, null);\n    setActiveState(collapseState.length > 0 ? collapseState : DEFAULT_TAB_ARR);\n    getRecentActivityObjs(user.userId, recent, addDangerToast, otherTabFilters).\n    then((res) => {\n      const data = {};\n      data[TableTab.Other] = res.other;\n      if (res.viewed) {\n        const filtered = _reject(res.viewed, ['item_url', null]).map((r) => r);\n        data[TableTab.Viewed] = filtered;\n        if (!activeTab && data[TableTab.Viewed]) {\n          setActiveChild(TableTab.Viewed);\n        } else\n        if (!activeTab && !data[TableTab.Viewed]) {\n          setActiveChild(TableTab.Created);\n        } else\n\n        setActiveChild(activeTab || TableTab.Created);\n      } else\n      if (!activeTab)\n      setActiveChild(TableTab.Created);else\n\n      setActiveChild(activeTab);\n      setActivityData((activityData) => ({ ...activityData, ...data }));\n    }).\n    catch(createErrorHandler((errMsg) => {\n      setActivityData((activityData) => ({\n        ...activityData,\n        [TableTab.Viewed]: []\n      }));\n      addDangerToast(t('There was an issue fetching your recent activity: %s', errMsg));\n    }));\n    // Sets other activity data in parallel with recents api call\n    const ownSavedQueryFilters = [\n    {\n      col: 'created_by',\n      opr: 'rel_o_m',\n      value: `${id}`\n    }];\n\n    Promise.all([\n    getUserOwnedObjects(id, 'dashboard').\n    then((r) => {\n      setDashboardData(r);\n      return Promise.resolve();\n    }).\n    catch((err) => {\n      setDashboardData([]);\n      addDangerToast(t('There was an issue fetching your dashboards: %s', err));\n      return Promise.resolve();\n    }),\n    getUserOwnedObjects(id, 'chart').\n    then((r) => {\n      setChartData(r);\n      return Promise.resolve();\n    }).\n    catch((err) => {\n      setChartData([]);\n      addDangerToast(t('There was an issue fetching your chart: %s', err));\n      return Promise.resolve();\n    }),\n    canReadSavedQueries ?\n    getUserOwnedObjects(id, 'saved_query', ownSavedQueryFilters).\n    then((r) => {\n      setQueryData(r);\n      return Promise.resolve();\n    }).\n    catch((err) => {\n      setQueryData([]);\n      addDangerToast(t('There was an issue fetching your saved queries: %s', err));\n      return Promise.resolve();\n    }) :\n    Promise.resolve()]\n    ).then(() => {\n      setIsFetchingActivityData(false);\n    });\n  }, [otherTabFilters]);\n  const handleToggle = () => {\n    setChecked(!checked);\n    dangerouslySetItemDoNotUse(id, { thumbnails: !checked });\n  };\n  useEffect(() => {\n    if (!collapseState && queryData != null && queryData.length) {\n      setActiveState((activeState) => [...activeState, '4']);\n    }\n    setActivityData((activityData) => ({\n      ...activityData,\n      Created: [\n      ...((chartData == null ? void 0 : chartData.slice(0, 3)) || []),\n      ...((dashboardData == null ? void 0 : dashboardData.slice(0, 3)) || []),\n      ...((queryData == null ? void 0 : queryData.slice(0, 3)) || [])]\n\n    }));\n  }, [chartData, queryData, dashboardData]);\n  useEffect(() => {var _activityData$TableTa;\n    if (!collapseState && activityData != null && (_activityData$TableTa = activityData[TableTab.Viewed]) != null && _activityData$TableTa.length) {\n      setActiveState((activeState) => ['1', ...activeState]);\n    }\n  }, [activityData]);\n  const isRecentActivityLoading = !(activityData != null && activityData[TableTab.Other]) && !(activityData != null && activityData[TableTab.Viewed]);\n  const menuData = {\n    activeChild: 'Home',\n    name: t('Home')\n  };\n  if (isThumbnailsEnabled) {\n    menuData.buttons = [\n    {\n      name: _jsx(WelcomeNav, { children:\n        _jsxs(\"div\", { className: \"switch\", children: [\n          _jsx(Switch, { checked: checked, onClick: handleToggle }),\n          _jsx(\"span\", { children: t('Thumbnails') })] }\n        ) }\n      ),\n      onClick: handleToggle,\n      buttonStyle: 'link'\n    }];\n\n  }\n  return _jsxs(_Fragment, { children: [\n    SubmenuExtension ? _jsx(SubmenuExtension, { ...menuData }) : _jsx(SubMenu, { ...menuData }),\n    _jsxs(WelcomeContainer, { children: [\n      WelcomeMessageExtension && _jsx(WelcomeMessageExtension, {}),\n      WelcomeTopExtension && _jsx(WelcomeTopExtension, {}),\n      WelcomeMainExtension && _jsx(WelcomeMainExtension, {}),\n      (!WelcomeTopExtension || !WelcomeMainExtension) && _jsx(_Fragment, { children:\n        _jsxs(Collapse, { activeKey: activeState, onChange: handleCollapse, ghost: true, bigger: true, children: [\n          _jsx(Collapse.Panel, { header: t('Recents'), children:\n            activityData && (\n            activityData[TableTab.Viewed] ||\n            activityData[TableTab.Other] ||\n            activityData[TableTab.Created]) &&\n            activeChild !== 'Loading' ? _jsx(ActivityTable, { user: { userId: user.userId } // user is definitely not a guest user on this page\n              , activeChild: activeChild, setActiveChild: setActiveChild, activityData: activityData, isFetchingActivityData: isFetchingActivityData }) : _jsx(LoadingCards, {}) }, \"1\"\n          ),\n          _jsx(Collapse.Panel, { header: t('Dashboards'), children:\n            !dashboardData || isRecentActivityLoading ? _jsx(LoadingCards, { cover: checked }) : _jsx(DashboardTable, { user: user, mine: dashboardData, showThumbnails: checked, otherTabData: activityData == null ? void 0 : activityData[TableTab.Other], otherTabFilters: otherTabFilters, otherTabTitle: otherTabTitle }) }, \"2\"\n          ),\n          _jsx(Collapse.Panel, { header: t('Charts'), children:\n            !chartData || isRecentActivityLoading ? _jsx(LoadingCards, { cover: checked }) : _jsx(ChartTable, { showThumbnails: checked, user: user, mine: chartData, otherTabData: activityData == null ? void 0 : activityData[TableTab.Other], otherTabFilters: otherTabFilters, otherTabTitle: otherTabTitle }) }, \"3\"\n          ),\n          canReadSavedQueries && _jsx(Collapse.Panel, { header: t('Saved queries'), children:\n            !queryData ? _jsx(LoadingCards, { cover: checked }) : _jsx(SavedQueries, { showThumbnails: checked, user: user, mine: queryData, featureFlag: isThumbnailsEnabled }) }, \"4\"\n          )] }\n        ) }\n      )] }\n    )] }\n  );\n}\nexport default withToasts(Welcome);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}