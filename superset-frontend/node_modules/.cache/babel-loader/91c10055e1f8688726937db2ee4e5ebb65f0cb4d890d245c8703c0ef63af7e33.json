{"ast":null,"code":"import { SUPERSET_TABLE_COLUMN } from 'src/components/Table';\nimport { withinRange } from './utils';\nexport default class InteractiveTableUtils {\n\n\n\n\n\n\n\n\n  constructor(tableRef, derivedColumns, setDerivedColumns) {this.tableRef = void 0;this.columnRef = void 0;this.setDerivedColumns = void 0;this.isDragging = void 0;this.resizable = void 0;this.reorderable = void 0;this.derivedColumns = void 0;this.RESIZE_INDICATOR_THRESHOLD = void 0;this.\n\n\n\n\n\n\n\n\n\n    clearListeners = () => {\n      document.removeEventListener('mouseup', this.handleMouseup);\n      this.initializeResizableColumns(false, this.tableRef);\n      this.initializeDragDropColumns(false, this.tableRef);\n    };this.\n    setTableRef = (table) => {\n      this.tableRef = table;\n    };this.\n    getColumnIndex = () => {var _this$columnRef;\n      let index = -1;\n      const parent = (_this$columnRef = this.columnRef) == null ? void 0 : _this$columnRef.parentNode;\n      if (parent) {\n        index = Array.prototype.indexOf.call(parent.children, this.columnRef);\n      }\n      return index;\n    };this.\n    handleColumnDragStart = (ev) => {var _ev$dataTransfer;\n      const target = ev == null ? void 0 : ev.currentTarget;\n      if (target) {\n        this.columnRef = target;\n      }\n      this.isDragging = true;\n      const index = this.getColumnIndex();\n      const columnData = this.derivedColumns[index];\n      const dragData = { index, columnData };\n      ev == null ? void 0 : (_ev$dataTransfer = ev.dataTransfer) == null ? void 0 : _ev$dataTransfer.setData(SUPERSET_TABLE_COLUMN, JSON.stringify(dragData));\n    };this.\n    handleDragDrop = (ev) => {var _ev$dataTransfer2;\n      const data = (_ev$dataTransfer2 = ev.dataTransfer) == null ? void 0 : _ev$dataTransfer2.getData == null ? void 0 : _ev$dataTransfer2.getData(SUPERSET_TABLE_COLUMN);\n      if (data) {var _ev$currentTarget;\n        ev.preventDefault();\n        const parent = (_ev$currentTarget = ev.currentTarget) == null ? void 0 : _ev$currentTarget.\n        parentNode;\n        const dropIndex = Array.prototype.indexOf.call(parent.children, ev.currentTarget);\n        const dragIndex = this.getColumnIndex();\n        const columnsCopy = [...this.derivedColumns];\n        const removedItem = columnsCopy.slice(dragIndex, dragIndex + 1);\n        columnsCopy.splice(dragIndex, 1);\n        columnsCopy.splice(dropIndex, 0, removedItem[0]);\n        this.derivedColumns = [...columnsCopy];\n        this.setDerivedColumns(columnsCopy);\n      }\n    };this.\n    allowDrop = (ev) => {\n      ev.preventDefault();\n    };this.\n    handleMouseDown = (event) => {\n      const target = event == null ? void 0 : event.currentTarget;\n      if (target) {\n        this.columnRef = target;\n        if (event &&\n        withinRange(event.offsetX, target.offsetWidth, this.RESIZE_INDICATOR_THRESHOLD)) {\n          target.mouseDown = true;\n          target.oldX = event.x;\n          target.oldWidth = target.offsetWidth;\n          target.draggable = false;\n        } else\n        if (this.reorderable) {\n          target.draggable = true;\n        }\n      }\n    };this.\n    handleMouseMove = (event) => {\n      if (this.resizable === true && !this.isDragging) {\n        const target = event.currentTarget;\n        if (event &&\n        withinRange(event.offsetX, target.offsetWidth, this.RESIZE_INDICATOR_THRESHOLD)) {\n          target.style.cursor = 'col-resize';\n        } else\n        {\n          target.style.cursor = 'default';\n        }\n        const column = this.columnRef;\n        if (column != null && column.mouseDown) {\n          let width = column.oldWidth;\n          const diff = event.x - column.oldX;\n          if (column.oldWidth + (event.x - column.oldX) > 0) {\n            width = column.oldWidth + diff;\n          }\n          const colIndex = this.getColumnIndex();\n          if (!Number.isNaN(colIndex)) {\n            const columnDef = { ...this.derivedColumns[colIndex] };\n            columnDef.width = width;\n            this.derivedColumns[colIndex] = columnDef;\n            this.setDerivedColumns([...this.derivedColumns]);\n          }\n        }\n      }\n    };this.\n    handleMouseup = () => {\n      if (this.columnRef) {\n        this.columnRef.mouseDown = false;\n        this.columnRef.style.cursor = 'default';\n        this.columnRef.draggable = false;\n      }\n      this.isDragging = false;\n    };this.\n    initializeResizableColumns = (resizable = false, table) => {var _this$tableRef, _this$tableRef$rows;\n      this.tableRef = table;\n      const header = (_this$tableRef = this.tableRef) == null ? void 0 : (_this$tableRef$rows = _this$tableRef.rows) == null ? void 0 : _this$tableRef$rows[0];\n      if (header) {\n        const { cells } = header;\n        const len = cells.length;\n        for (let i = 0; i < len; i += 1) {\n          const cell = cells[i];\n          if (resizable === true) {\n            this.resizable = true;\n            cell.addEventListener('mousedown', this.handleMouseDown);\n            cell.addEventListener('mousemove', this.handleMouseMove, true);\n          } else\n          {\n            this.resizable = false;\n            cell.removeEventListener('mousedown', this.handleMouseDown);\n            cell.removeEventListener('mousemove', this.handleMouseMove, true);\n          }\n        }\n      }\n    };this.\n    initializeDragDropColumns = (reorderable = false, table) => {var _this$tableRef2, _this$tableRef2$rows;\n      this.tableRef = table;\n      const header = (_this$tableRef2 = this.tableRef) == null ? void 0 : (_this$tableRef2$rows = _this$tableRef2.rows) == null ? void 0 : _this$tableRef2$rows[0];\n      if (header) {\n        const { cells } = header;\n        const len = cells.length;\n        for (let i = 0; i < len; i += 1) {\n          const cell = cells[i];\n          if (reorderable === true) {\n            this.reorderable = true;\n            cell.addEventListener('mousedown', this.handleMouseDown);\n            cell.addEventListener('dragover', this.allowDrop);\n            cell.addEventListener('dragstart', this.handleColumnDragStart);\n            cell.addEventListener('drop', this.handleDragDrop);\n          } else\n          {\n            this.reorderable = false;\n            cell.draggable = false;\n            cell.removeEventListener('mousedown', this.handleMouseDown);\n            cell.removeEventListener('dragover', this.allowDrop);\n            cell.removeEventListener('dragstart', this.handleColumnDragStart);\n            cell.removeEventListener('drop', this.handleDragDrop);\n          }\n        }\n      }\n    };this.setDerivedColumns = setDerivedColumns;this.tableRef = tableRef;this.isDragging = false;this.RESIZE_INDICATOR_THRESHOLD = 8;this.resizable = false;this.reorderable = false;this.derivedColumns = [...derivedColumns];document.addEventListener('mouseup', this.handleMouseup);}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}