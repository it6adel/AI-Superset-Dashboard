{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getTextDimension from './getTextDimension';\nfunction decreaseSizeUntil(startSize, computeDimension, condition) {\n  let size = startSize;\n  let dimension = computeDimension(size);\n  while (!condition(dimension)) {\n    size -= 1;\n    // Here if the size goes below zero most likely is because it\n    // has additional style applied in which case we assume the user\n    // knows what it's doing and we just let them use that.\n    // Visually it works, although it could have another\n    // check in place.\n    if (size < 0) {\n      size = startSize;\n      break;\n    }\n    dimension = computeDimension(size);\n  }\n  return size;\n}\nexport default function computeMaxFontSize(input) {\n  const { idealFontSize, maxWidth, maxHeight, style, ...rest } = input;\n  let size;\n  if (idealFontSize !== undefined && idealFontSize !== null) {\n    size = idealFontSize;\n  } else\n  if (maxHeight === undefined || maxHeight === null) {\n    throw new Error('You must specify at least one of maxHeight or idealFontSize');\n  } else\n  {\n    size = Math.floor(maxHeight);\n  }\n  function computeDimension(fontSize) {\n    return getTextDimension({\n      ...rest,\n      style: { ...style, fontSize: `${fontSize}px` }\n    });\n  }\n  if (maxWidth !== undefined && maxWidth !== null) {\n    size = decreaseSizeUntil(size, computeDimension, (dim) => dim.width > 0 && dim.width <= maxWidth);\n  }\n  if (maxHeight !== undefined && maxHeight !== null) {\n    size = decreaseSizeUntil(size, computeDimension, (dim) => dim.height > 0 && dim.height <= maxHeight);\n  }\n  return size;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}