{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef } from 'react';\nimport { css } from '@superset-ui/core';\nimport RowCountLabel from 'src/explore/components/RowCountLabel';\nimport CachedLabel from 'src/components/CachedLabel';\nimport Timer from 'src/components/Timer';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst CHART_STATUS_MAP = {\n  failed: 'danger',\n  loading: 'warning',\n  success: 'success'\n};\nexport const ChartPills = /*#__PURE__*/forwardRef(({ queriesResponse, chartStatus, chartUpdateStartTime, chartUpdateEndTime, refreshCachedQuery, rowLimit }, ref) => {\n  const isLoading = chartStatus === 'loading';\n  const firstQueryResponse = queriesResponse == null ? void 0 : queriesResponse[0];\n  return _jsx(\"div\", { ref: ref, children:\n    _jsxs(\"div\", { css: (theme) => css`\n            display: flex;\n            justify-content: flex-end;\n            padding-bottom: ${theme.gridUnit * 4}px;\n            & .ant-tag:last-of-type {\n              margin: 0;\n            }\n          `, children: [\n      !isLoading && firstQueryResponse && _jsx(RowCountLabel, { rowcount: Number(firstQueryResponse.sql_rowcount) || 0, limit: Number(rowLimit) || 0 }),\n      !isLoading && (firstQueryResponse == null ? void 0 : firstQueryResponse.is_cached) && _jsx(CachedLabel, { onClick: refreshCachedQuery, cachedTimestamp: firstQueryResponse.cached_dttm }),\n      _jsx(Timer, { startTime: chartUpdateStartTime, endTime: chartUpdateEndTime, isRunning: isLoading, status: CHART_STATUS_MAP[chartStatus] })] }\n    ) }\n  );\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}