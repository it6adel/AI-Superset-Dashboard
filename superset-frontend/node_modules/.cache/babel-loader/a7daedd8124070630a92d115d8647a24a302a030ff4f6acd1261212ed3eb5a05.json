{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nconst { enableEmptyFilter, inverseSelection, multiSelect, defaultToFirstItem, searchAllOptions, sortAscending } = DEFAULT_FORM_DATA;\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'groupby',\n      config: {\n        ...sharedControls.groupby,\n        label: t('Column'),\n        required: true\n      }\n    }]]\n\n\n  },\n  {\n    label: t('UI Configuration'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'sortAscending',\n      config: {\n        type: 'CheckboxControl',\n        renderTrigger: true,\n        label: t('Sort ascending'),\n        default: sortAscending,\n        description: t('Check for sorting ascending')\n      }\n    }],\n\n    [\n    {\n      name: 'multiSelect',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Can select multiple values'),\n        default: multiSelect,\n        resetConfig: true,\n        affectsDataMask: true,\n        renderTrigger: true\n      }\n    }],\n\n    [\n    {\n      name: 'enableEmptyFilter',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Filter value is required'),\n        default: enableEmptyFilter,\n        renderTrigger: true,\n        description: t('User must select a value before applying the filter')\n      }\n    }],\n\n    [\n    {\n      name: 'defaultToFirstItem',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Select first filter value by default'),\n        default: defaultToFirstItem,\n        resetConfig: true,\n        affectsDataMask: true,\n        renderTrigger: true,\n        requiredFirst: true,\n        description: t('When using this option, default value canâ€™t be set. Using this option may impact the load times for your dashboard.')\n      }\n    }],\n\n    [\n    {\n      name: 'inverseSelection',\n      config: {\n        type: 'CheckboxControl',\n        renderTrigger: true,\n        affectsDataMask: true,\n        label: t('Inverse selection'),\n        default: inverseSelection,\n        description: t('Exclude selected values')\n      }\n    }],\n\n    [\n    {\n      name: 'searchAllOptions',\n      config: {\n        type: 'CheckboxControl',\n        renderTrigger: true,\n        affectsDataMask: true,\n        label: t('Dynamically search all filter values'),\n        default: searchAllOptions,\n        description: t('By default, each filter loads at most 1000 choices at the initial page load. ' +\n        'Check this box if you have more than 1000 filter values and want to enable dynamically ' +\n        'searching that loads filter values as users type (may add stress to your database).')\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    groupby: {\n      multi: false,\n      validators: [validateNonEmpty]\n    }\n  }\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}