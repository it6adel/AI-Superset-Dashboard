{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useState, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { css, QueryState, styled, SupersetClient, t, useTheme } from '@superset-ui/core';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler, shortenSQL } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport Label from 'src/components/Label';\nimport SubMenu from 'src/features/home/SubMenu';\nimport Popover from 'src/components/Popover';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { Tooltip } from 'src/components/Tooltip';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport { DATETIME_WITH_TIME_ZONE, TIME_WITH_MS } from 'src/constants';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport Icons from 'src/components/Icons';\nimport QueryPreviewModal from 'src/features/queries/QueryPreviewModal';\nimport { addSuccessToast } from 'src/components/MessageToasts/actions';\nimport getOwnerName from 'src/utils/getOwnerName';\nimport { extendedDayjs } from 'src/utils/dates';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nconst SQL_PREVIEW_MAX_LINES = 4;\nconst TopAlignedListView = styled(ListView)`\n  table .table-cell {\n    vertical-align: top;\n  }\n`;\nSyntaxHighlighter.registerLanguage('sql', sql);\nconst StyledSyntaxHighlighter = styled(SyntaxHighlighter)`\n  height: ${({ theme }) => theme.gridUnit * 26}px;\n  overflow: hidden !important; /* needed to override inline styles */\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\nconst TimerLabel = styled(Label)`\n  text-align: left;\n  font-family: ${({ theme }) => theme.typography.families.monospace};\n`;\nfunction QueryList({ addDangerToast }) {\n  const { state: { loading, resourceCount: queryCount, resourceCollection: queries }, fetchData } = useListViewResource('query', t('Query history'), addDangerToast, false);\n  const [queryCurrentlyPreviewing, setQueryCurrentlyPreviewing] = useState();\n  const theme = useTheme();\n  const history = useHistory();\n  const handleQueryPreview = useCallback((id) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/query/${id}`\n    }).then(({ json = {} }) => {\n      setQueryCurrentlyPreviewing({ ...json.result });\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue previewing the selected query. %s', errMsg))));\n  }, [addDangerToast]);\n  const menuData = {\n    activeChild: 'Query history',\n    ...commonMenuData\n  };\n  const initialSort = [{ id: QueryObjectColumns.StartTime, desc: true }];\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { status } } }) => {\n      const statusConfig = {\n        name: null,\n        label: ''\n      };\n      if (status === QueryState.Success) {\n        statusConfig.name = _jsx(Icons.CheckOutlined, { iconSize: \"m\", iconColor: theme.colors.success.base, css: css`\n                  vertical-align: -webkit-baseline-middle;\n                ` });\n        statusConfig.label = t('Success');\n      } else\n      if (status === QueryState.Failed ||\n      status === QueryState.Stopped) {\n        statusConfig.name = _jsx(Icons.CloseOutlined, { iconSize: \"xs\", iconColor: status === QueryState.Failed ?\n          theme.colors.error.base :\n          theme.colors.grayscale.base });\n        statusConfig.label = t('Failed');\n      } else\n      if (status === QueryState.Running) {\n        statusConfig.name = _jsx(Icons.Running, { iconColor: theme.colors.primary.base });\n        statusConfig.label = t('Running');\n      } else\n      if (status === QueryState.TimedOut) {\n        statusConfig.name = _jsx(Icons.CircleSolid, { iconColor: theme.colors.grayscale.light1 });\n        statusConfig.label = t('Offline');\n      } else\n      if (status === QueryState.Scheduled ||\n      status === QueryState.Pending) {\n        statusConfig.name = _jsx(Icons.Queued, {});\n        statusConfig.label = t('Scheduled');\n      }\n      return _jsx(Tooltip, { title: statusConfig.label, placement: \"bottom\", children:\n        _jsx(\"span\", { children: statusConfig.name }) }\n      );\n    },\n    accessor: QueryObjectColumns.Status,\n    size: 'xs',\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.StartTime,\n    Header: t('Time'),\n    size: 'xl',\n    Cell: ({ row: { original: { start_time } } }) => {\n      const start = extendedDayjs.utc(start_time).local();\n      const formattedStartTimeData = start.\n      format(DATETIME_WITH_TIME_ZONE).\n      split(' ');\n      const formattedStartTime = _jsxs(_Fragment, { children: [\n        formattedStartTimeData[0], \" \", _jsx(\"br\", {}),\n        formattedStartTimeData[1]] }\n      );\n      return formattedStartTime;\n    }\n  },\n  {\n    Header: t('Duration'),\n    size: 'xl',\n    Cell: ({ row: { original: { status, start_time, end_time } } }) => {\n      const timerType = status === QueryState.Failed ? 'danger' : status;\n      const timerTime = end_time ?\n      extendedDayjs(extendedDayjs.utc(end_time - start_time)).format(TIME_WITH_MS) :\n      '00:00:00.000';\n      return _jsx(TimerLabel, { type: timerType, role: \"timer\", children:\n        timerTime }\n      );\n    }\n  },\n  {\n    accessor: QueryObjectColumns.TabName,\n    Header: t('Tab name'),\n    size: 'xl'\n  },\n  {\n    accessor: QueryObjectColumns.DatabaseName,\n    Header: t('Database'),\n    size: 'xl'\n  },\n  {\n    accessor: QueryObjectColumns.Database,\n    hidden: true\n  },\n  {\n    accessor: QueryObjectColumns.Schema,\n    Header: t('Schema'),\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original: { sql_tables: tables = [] } } }) => {\n      const names = tables.map((table) => table.table);\n      const main = names.length > 0 ? names.shift() : '';\n      if (names.length) {\n        return _jsxs(StyledTableLabel, { children: [\n          _jsx(\"span\", { children: main }),\n          _jsx(Popover, { placement: \"right\", title: t('TABLES'), trigger: \"click\", content: _jsx(_Fragment, { children:\n              names.map((name) => _jsx(StyledPopoverItem, { children: name }, name)) }\n            ), children:\n            _jsxs(\"span\", { className: \"count\", children: [\"(+\", names.length, \")\"] }) }\n          )] }\n        );\n      }\n      return main;\n    },\n    accessor: QueryObjectColumns.SqlTables,\n    Header: t('Tables'),\n    size: 'xl',\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.UserFirstName,\n    Header: t('User'),\n    size: 'xl',\n    Cell: ({ row: { original: { user } } }) => getOwnerName(user)\n  },\n  {\n    accessor: QueryObjectColumns.User,\n    hidden: true\n  },\n  {\n    accessor: QueryObjectColumns.Rows,\n    Header: t('Rows'),\n    size: 'md'\n  },\n  {\n    accessor: QueryObjectColumns.Sql,\n    Header: t('SQL'),\n    Cell: ({ row: { original, id } }) => _jsx(\"div\", { tabIndex: 0, role: \"button\", onClick: () => setQueryCurrentlyPreviewing(original), children:\n      _jsx(StyledSyntaxHighlighter, { language: \"sql\", style: github, children:\n        shortenSQL(original.sql, SQL_PREVIEW_MAX_LINES) }\n      ) }\n    )\n  },\n  {\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true,\n    Cell: ({ row: { original: { id } } }) => _jsx(Tooltip, { title: t('Open query in SQL Lab'), placement: \"bottom\", children:\n      _jsx(Link, { to: `/sqllab?queryId=${id}`, children:\n        _jsx(Icons.Full, { iconSize: \"l\" }) }\n      ) }\n    )\n  }],\n  []);\n  const filters = useMemo(() => [\n  {\n    Header: t('Database'),\n    key: 'database',\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('query', 'database', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching database values: %s', errMsg)))),\n    paginate: true\n  },\n  {\n    Header: t('State'),\n    key: 'state',\n    id: 'status',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('query', 'status', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching schema values: %s', errMsg)))),\n    paginate: true\n  },\n  {\n    Header: t('User'),\n    key: 'user',\n    id: 'user',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('query', 'user', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching user values: %s', errMsg)))),\n    paginate: true\n  },\n  {\n    Header: t('Time range'),\n    key: 'start_time',\n    id: 'start_time',\n    input: 'datetime_range',\n    operator: FilterOperator.Between\n  },\n  {\n    Header: t('Search by query text'),\n    key: 'sql',\n    id: 'sql',\n    input: 'search',\n    operator: FilterOperator.Contains\n  }],\n  [addDangerToast]);\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { ...menuData }),\n    queryCurrentlyPreviewing && _jsx(QueryPreviewModal, { onHide: () => setQueryCurrentlyPreviewing(undefined), query: queryCurrentlyPreviewing, queries: queries, fetchData: handleQueryPreview, openInSqlLab: (id) => history.push(`/sqllab?queryId=${id}`), show: true }),\n    _jsx(TopAlignedListView, { className: \"query-history-list-view\", columns: columns, count: queryCount, data: queries, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, highlightRowId: queryCurrentlyPreviewing == null ? void 0 : queryCurrentlyPreviewing.id, refreshData: () => {}, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast })] }\n  );\n}\nexport default withToasts(QueryList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}