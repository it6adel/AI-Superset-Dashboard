{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useContext, useMemo, useState } from 'react';\nimport { createHtmlPortalNode, InPortal, OutPortal } from 'react-reverse-portal';\nimport { styled, truncationCSS } from '@superset-ui/core';\nimport { FormItem as StyledFormItem, Form } from 'src/components/Form';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport { checkIsMissingRequiredValue } from '../utils';\nimport FilterValue from './FilterValue';\nimport { FilterCard } from '../../FilterCard';\nimport { FilterBarScrollContext } from '../Vertical';\nimport { FilterCardPlacement } from '../../FilterCard/types';\nimport { useIsFilterInScope } from '../../state';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst FilterStyledIcon = styled.div`\n  position: absolute;\n  right: 0;\n`;\nconst VerticalFilterControlTitle = styled.h4`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n  margin: 0;\n  overflow-wrap: anywhere;\n`;\nconst HorizontalFilterControlTitle = styled(VerticalFilterControlTitle)`\n  font-weight: ${({ theme }) => theme.typography.weights.normal};\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  ${truncationCSS};\n`;\nconst HorizontalOverflowFilterControlTitle = styled(HorizontalFilterControlTitle)`\n  max-width: none;\n`;\nconst VerticalFilterControlTitleBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${({ theme }) => theme.gridUnit}px;\n`;\nconst HorizontalFilterControlTitleBox = styled(VerticalFilterControlTitleBox)`\n  margin-bottom: unset;\n`;\nconst HorizontalOverflowFilterControlTitleBox = styled(VerticalFilterControlTitleBox)`\n  width: 100%;\n`;\nconst VerticalFilterControlContainer = styled(Form)`\n  width: 100%;\n  && .ant-form-item-label > label {\n    text-transform: none;\n    width: 100%;\n    padding-right: ${({ theme }) => theme.gridUnit * 11}px;\n  }\n  .ant-form-item-tooltip {\n    margin-bottom: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst HorizontalFilterControlContainer = styled(Form)`\n  && .ant-form-item-label > label {\n    margin-bottom: 0;\n    text-transform: none;\n  }\n  .ant-form-item-tooltip {\n    margin-bottom: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst HorizontalOverflowFilterControlContainer = styled(VerticalFilterControlContainer)`\n  && .ant-form-item-label {\n    line-height: 1;\n    & > label {\n      padding-right: unset;\n    }\n  }\n`;\nconst VerticalFormItem = styled(StyledFormItem)`\n  .ant-form-item-label {\n    overflow: visible;\n    label.ant-form-item-required:not(.ant-form-item-required-mark-optional) {\n      &::after {\n        display: none;\n      }\n    }\n  }\n`;\nconst HorizontalFormItem = styled(StyledFormItem)`\n  && {\n    margin-bottom: 0;\n    align-items: center;\n  }\n\n  .ant-form-item-label {\n    overflow: visible;\n    padding-bottom: 0;\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    label.ant-form-item-required:not(.ant-form-item-required-mark-optional) {\n      &::after {\n        display: none;\n      }\n    }\n\n    & > label::after {\n      display: none;\n    }\n  }\n\n  .ant-form-item-control {\n    width: ${({ theme }) => theme.gridUnit * 41}px;\n  }\n`;\nconst HorizontalOverflowFormItem = VerticalFormItem;\nconst useFilterControlDisplay = (orientation, overflow) => useMemo(() => {\n  if (orientation === FilterBarOrientation.Horizontal) {\n    if (overflow) {\n      return {\n        FilterControlContainer: HorizontalOverflowFilterControlContainer,\n        FormItem: HorizontalOverflowFormItem,\n        FilterControlTitleBox: HorizontalOverflowFilterControlTitleBox,\n        FilterControlTitle: HorizontalOverflowFilterControlTitle\n      };\n    }\n    return {\n      FilterControlContainer: HorizontalFilterControlContainer,\n      FormItem: HorizontalFormItem,\n      FilterControlTitleBox: HorizontalFilterControlTitleBox,\n      FilterControlTitle: HorizontalFilterControlTitle\n    };\n  }\n  return {\n    FilterControlContainer: VerticalFilterControlContainer,\n    FormItem: VerticalFormItem,\n    FilterControlTitleBox: VerticalFilterControlTitleBox,\n    FilterControlTitle: VerticalFilterControlTitle\n  };\n}, [orientation, overflow]);\nconst ToolTipContainer = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.m}px;\n  display: flex;\n`;\nconst RequiredFieldIndicator = () => _jsx(\"span\", { css: (theme) => ({\n    color: theme.colors.error.base,\n    fontSize: `${theme.typography.sizes.s}px`,\n    paddingLeft: '1px'\n  }), children: \"*\" }\n\n);\nconst DescriptionToolTip = ({ description }) => _jsx(ToolTipContainer, { children:\n  _jsx(Tooltip, { title: description, placement: \"right\", overlayInnerStyle: {\n      display: '-webkit-box',\n      WebkitLineClamp: 10,\n      WebkitBoxOrient: 'vertical',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'normal'\n    }, children:\n\n\n    _jsx(\"i\", { className: \"fa fa-info-circle text-muted\", css: (theme) => ({\n        paddingLeft: `${theme.gridUnit}px`,\n        cursor: 'pointer'\n      }) }) }\n  ) }\n);\nconst FilterControl = ({ dataMaskSelected, filter, icon, onFilterSelectionChange, inView, showOverflow, parentRef, orientation = FilterBarOrientation.Vertical, overflow = false }) => {var _filter$dataMask, _filter$controlValues, _filter$controlValues2;\n  const portalNode = useMemo(() => createHtmlPortalNode(), []);\n  const [isFilterActive, setIsFilterActive] = useState(false);\n  const { name = '<undefined>' } = filter;\n  const isFilterInScope = useIsFilterInScope();\n  const isMissingRequiredValue = isFilterInScope(filter) &&\n  checkIsMissingRequiredValue(filter, (_filter$dataMask = filter.dataMask) == null ? void 0 : _filter$dataMask.filterState);\n  const validateStatus = isMissingRequiredValue ? 'error' : undefined;\n  const isRequired = !!((_filter$controlValues = filter.controlValues) != null && _filter$controlValues.enableEmptyFilter);\n  const { FilterControlContainer, FormItem, FilterControlTitleBox, FilterControlTitle } = useFilterControlDisplay(orientation, overflow);\n  const label = useMemo(() => {var _filter$description;return _jsxs(FilterControlTitleBox, { children: [\n      _jsx(FilterControlTitle, { id: `filter-name-${filter.id}`, children:\n        name }\n      ),\n      isRequired && _jsx(RequiredFieldIndicator, {}),\n      ((_filter$description = filter.description) == null ? void 0 : _filter$description.trim()) && _jsx(DescriptionToolTip, { description: filter.description }),\n      _jsx(FilterStyledIcon, { children: icon })] }\n    );}, [\n  FilterControlTitleBox,\n  FilterControlTitle,\n  name,\n  isRequired,\n  filter.description,\n  icon]\n  );\n  const isScrolling = useContext(FilterBarScrollContext);\n  const filterCardPlacement = useMemo(() => {\n    if (orientation === FilterBarOrientation.Horizontal) {\n      if (overflow) {\n        return FilterCardPlacement.Left;\n      }\n      return FilterCardPlacement.Bottom;\n    }\n    return FilterCardPlacement.Right;\n  }, [orientation, overflow]);\n  return _jsxs(_Fragment, { children: [\n    _jsx(InPortal, { node: portalNode, children:\n      _jsx(FilterValue, { dataMaskSelected: dataMaskSelected, filter: filter, showOverflow: showOverflow, onFilterSelectionChange: onFilterSelectionChange, inView: inView, parentRef: parentRef, setFilterActive: setIsFilterActive, orientation: orientation, overflow: overflow, validateStatus: validateStatus }) }\n    ),\n    _jsx(FilterControlContainer, { layout: orientation === FilterBarOrientation.Horizontal && !overflow ?\n      'horizontal' :\n      'vertical', children:\n      _jsx(FilterCard, { filter: filter, isVisible: !isFilterActive && !isScrolling, placement: filterCardPlacement, children:\n        _jsx(\"div\", { children:\n          _jsx(FormItem, { label: label, htmlFor: filter.id, required: filter == null ? void 0 : (_filter$controlValues2 = filter.controlValues) == null ? void 0 : _filter$controlValues2.enableEmptyFilter, validateStatus: validateStatus, children:\n            _jsx(OutPortal, { node: portalNode }) }\n          ) }\n        ) }\n      ) }\n    )] }\n  );\n};\nexport default /*#__PURE__*/memo(FilterControl);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}