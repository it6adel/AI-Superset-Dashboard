{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { getNumberFormatter, NumberFormats } from '../number-format';\nexport const getCurrencySymbol = (currency) => {var _Intl$NumberFormat$fo;return (_Intl$NumberFormat$fo = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency.symbol\n  }).\n  formatToParts(1).\n  find((x) => x.type === 'currency')) == null ? void 0 : _Intl$NumberFormat$fo.value;};\nclass CurrencyFormatter extends ExtensibleFunction {\n\n\n\n  constructor(config) {\n    super((value) => this.format(value));this.d3Format = void 0;this.locale = void 0;this.currency = void 0;\n    this.d3Format = config.d3Format || NumberFormats.SMART_NUMBER;\n    this.currency = config.currency;\n    this.locale = config.locale || 'en-US';\n  }\n  hasValidCurrency() {var _this$currency;\n    return Boolean((_this$currency = this.currency) == null ? void 0 : _this$currency.symbol);\n  }\n  getNormalizedD3Format() {\n    return this.d3Format.replace(/\\$|%/g, '');\n  }\n  format(value) {\n    const formattedValue = getNumberFormatter(this.getNormalizedD3Format())(value);\n    if (!this.hasValidCurrency()) {\n      return formattedValue;\n    }\n    if (this.currency.symbolPosition === 'prefix') {\n      return `${getCurrencySymbol(this.currency)} ${formattedValue}`;\n    }\n    return `${formattedValue} ${getCurrencySymbol(this.currency)}`;\n  }\n}\nexport default CurrencyFormatter;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}