{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, customTimeRangeDecode } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { Col, Row } from 'src/components';\nimport { InputNumber } from 'src/components/Input';\nimport { DatePicker } from 'src/components/DatePicker';\nimport { Radio } from 'src/components/Radio';\nimport Select from 'src/components/Select/Select';\nimport { SINCE_GRAIN_OPTIONS, SINCE_MODE_OPTIONS, UNTIL_GRAIN_OPTIONS, UNTIL_MODE_OPTIONS, DAYJS_FORMAT, MIDNIGHT, customTimeRangeEncode, dttmToDayjs } from 'src/explore/components/controls/DateFilterControl/utils';\nimport Loading from 'src/components/Loading';\nimport { AntdThemeProvider } from 'src/components/AntdThemeProvider';\nimport { useLocale } from 'src/hooks/useLocale';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport function CustomFrame(props) {\n  const { customRange, matchedFlag } = customTimeRangeDecode(props.value);\n  const datePickerLocale = useLocale();\n  if (!matchedFlag) {\n    props.onChange(customTimeRangeEncode(customRange));\n  }\n  const { sinceDatetime, sinceMode, sinceGrain, sinceGrainValue, untilDatetime, untilMode, untilGrain, untilGrainValue, anchorValue, anchorMode } = { ...customRange };\n  function onChange(control, value) {\n    props.onChange(customTimeRangeEncode({\n      ...customRange,\n      [control]: value\n    }));\n  }\n  function onGrainValue(control, value) {\n    // only positive values in grainValue controls\n    if (typeof value === 'number' && Number.isInteger(value) && value > 0) {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        [control]: value\n      }));\n    }\n  }\n  function onAnchorMode(option) {\n    const radioValue = option.target.value;\n    if (radioValue === 'now') {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        anchorValue: 'now',\n        anchorMode: radioValue\n      }));\n    } else\n    {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        anchorValue: MIDNIGHT,\n        anchorMode: radioValue\n      }));\n    }\n  }\n  if (datePickerLocale === null) {\n    return _jsx(Loading, { position: \"inline-centered\" });\n  }\n  return _jsx(AntdThemeProvider, { locale: datePickerLocale, children:\n    _jsxs(\"div\", { children: [\n      _jsx(\"div\", { className: \"section-title\", children: t('Configure custom time range') }),\n      _jsxs(Row, { gutter: 24, children: [\n        _jsxs(Col, { span: 12, children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('START (INCLUSIVE)'), ' ',\n            _jsx(InfoTooltipWithTrigger, { tooltip: t('Start date included in time range'), placement: \"right\" })] }\n          ),\n          _jsx(Select, { ariaLabel: t('START (INCLUSIVE)'), options: SINCE_MODE_OPTIONS, value: sinceMode, onChange: (value) => onChange('sinceMode', value) }),\n          sinceMode === 'specific' && _jsx(Row, { children:\n            _jsx(DatePicker, { showTime: true, defaultValue: dttmToDayjs(sinceDatetime), onChange: (datetime) => onChange('sinceDatetime', datetime.format(DAYJS_FORMAT)), allowClear: false, getPopupContainer: (triggerNode) => props.isOverflowingFilterBar ?\n              triggerNode.parentNode :\n              document.body }) }\n          ),\n          sinceMode === 'relative' && _jsxs(Row, { gutter: 8, children: [\n            _jsx(Col, { span: 11, children:\n\n              _jsx(InputNumber, { placeholder: t('Relative quantity'), value: Math.abs(sinceGrainValue), min: 1, defaultValue: 1, onChange: (value) => onGrainValue('sinceGrainValue', value || 1), onStep: (value) => onGrainValue('sinceGrainValue', value || 1) }) }\n            ),\n            _jsx(Col, { span: 13, children:\n              _jsx(Select, { ariaLabel: t('Relative period'), options: SINCE_GRAIN_OPTIONS, value: sinceGrain, onChange: (value) => onChange('sinceGrain', value) }) }\n            )] }\n          )] }\n        ),\n        _jsxs(Col, { span: 12, children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('END (EXCLUSIVE)'), ' ',\n            _jsx(InfoTooltipWithTrigger, { tooltip: t('End date excluded from time range'), placement: \"right\" })] }\n          ),\n          _jsx(Select, { ariaLabel: t('END (EXCLUSIVE)'), options: UNTIL_MODE_OPTIONS, value: untilMode, onChange: (value) => onChange('untilMode', value) }),\n          untilMode === 'specific' && _jsx(Row, { children:\n            _jsx(DatePicker, { showTime: true, defaultValue: dttmToDayjs(untilDatetime), onChange: (datetime) => onChange('untilDatetime', datetime.format(DAYJS_FORMAT)), allowClear: false, getPopupContainer: (triggerNode) => props.isOverflowingFilterBar ?\n              triggerNode.parentNode :\n              document.body }) }\n          ),\n          untilMode === 'relative' && _jsxs(Row, { gutter: 8, children: [\n            _jsx(Col, { span: 11, children:\n              _jsx(InputNumber, { placeholder: t('Relative quantity'), value: untilGrainValue, min: 1, defaultValue: 1, onChange: (value) => onGrainValue('untilGrainValue', value || 1), onStep: (value) => onGrainValue('untilGrainValue', value || 1) }) }\n            ),\n            _jsx(Col, { span: 13, children:\n              _jsx(Select, { ariaLabel: t('Relative period'), options: UNTIL_GRAIN_OPTIONS, value: untilGrain, onChange: (value) => onChange('untilGrain', value) }) }\n            )] }\n          )] }\n        )] }\n      ),\n      sinceMode === 'relative' && untilMode === 'relative' && _jsxs(\"div\", { className: \"control-anchor-to\", children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Anchor to') }),\n        _jsxs(Row, { align: \"middle\", children: [\n          _jsx(Col, { children:\n            _jsx(Radio.GroupWrapper, { options: [\n              { value: 'now', label: t('Now') },\n              { value: 'specific', label: t('Date/Time') }],\n              onChange: onAnchorMode, defaultValue: \"now\", value: anchorMode }) }\n          ),\n          anchorMode !== 'now' && _jsx(Col, { children:\n            _jsx(DatePicker, { showTime: true, defaultValue: dttmToDayjs(anchorValue), onChange: (datetime) => onChange('anchorValue', datetime.format(DAYJS_FORMAT)), allowClear: false, className: \"control-anchor-to-datetime\", getPopupContainer: (triggerNode) => props.isOverflowingFilterBar ?\n              triggerNode.parentNode :\n              document.body }) }\n          )] }\n        )] }\n      )] }\n    ) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}