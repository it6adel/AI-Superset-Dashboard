{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css, styled, t } from '@superset-ui/core';\nimport { Form } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport { useEffect, useState } from 'react';\nimport { mix } from 'polished';\nimport { ControlFormItem } from '../ColumnConfigControl/ControlForm';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const StyledButtonContainer = styled.div`\n  display: flex;\n  margin: 8px;\n`;\nexport const StyledCloseButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-right: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.light4};\n    color: ${theme.colors.primary.dark1};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${mix(0.1, theme.colors.primary.base, theme.colors.primary.light4)};\n      color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nexport const StyledControlNumberFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n    width: 100%;\n  `}\n`;\nexport const StyledSaveButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-left: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.base};\n    color: ${theme.colors.grayscale.light5};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nexport const MapViewPopoverContent = ({ onClose = () => {}, onSave = () => {}, mapViewConf }) => {\n  // This is needed to force mounting the form every time\n  // we get a new layerConf prop. Otherwise the input fields\n  // will not be updated properly, since ControlFormItem only\n  // recognises the `value` property once and then handles the\n  // values in its on state. Remounting creates a new component\n  // and thereby starts with a fresh state.\n  const [formKey, setFormKey] = useState(0);\n  const [currentMapViewConf, setCurrentMapViewConf] = useState(mapViewConf);\n  useEffect(() => {\n    setFormKey((oldFormKey) => oldFormKey + 1);\n    setCurrentMapViewConf({ ...mapViewConf });\n  }, [mapViewConf]);\n  const onCloseClick = () => {\n    // reset form\n    setFormKey((oldFormKey) => oldFormKey + 1);\n    setCurrentMapViewConf({ ...mapViewConf });\n    onClose();\n  };\n  const onSaveClick = () => {\n    onSave(currentMapViewConf);\n  };\n  const onZoomChange = (zoom) => {\n    setCurrentMapViewConf({\n      ...currentMapViewConf,\n      fixedZoom: zoom\n    });\n  };\n  const onLatitudeChange = (latitude) => {\n    setCurrentMapViewConf({\n      ...currentMapViewConf,\n      fixedLatitude: latitude\n    });\n  };\n  const onLongitudeChange = (longitude) => {\n    setCurrentMapViewConf({\n      ...currentMapViewConf,\n      fixedLongitude: longitude\n    });\n  };\n  const zoomLabel = t('Zoom');\n  const latitudeLabel = t('Latitude');\n  const longitudeLabel = t('Longitude');\n  const closeButtonText = t('close');\n  const saveButtonText = t('save');\n  return _jsx(\"div\", { children:\n    _jsxs(Form, { children: [\n      _jsx(StyledControlNumberFormItem, { controlType: \"InputNumber\", label: zoomLabel, value: currentMapViewConf ? currentMapViewConf.fixedZoom : undefined, name: \"zoom\", description: \"\", min: 0, max: 28, step: 1, onChange: onZoomChange }),\n      _jsx(StyledControlNumberFormItem, { controlType: \"InputNumber\", label: latitudeLabel, value: currentMapViewConf ? currentMapViewConf.fixedLatitude : undefined, name: \"latitude\", description: \"\", onChange: onLatitudeChange, min: -90, max: 90 }),\n      _jsx(StyledControlNumberFormItem, { controlType: \"InputNumber\", label: longitudeLabel, value: currentMapViewConf ? currentMapViewConf.fixedLongitude : undefined, name: \"longitude\", description: \"\", onChange: onLongitudeChange, min: -180, max: 180 }),\n      _jsxs(StyledButtonContainer, { children: [\n        _jsx(StyledCloseButton, { type: \"default\", onClick: onCloseClick, children:\n          closeButtonText }\n        ),\n        _jsx(StyledSaveButton, { type: \"primary\", onClick: onSaveClick, children:\n          saveButtonText }\n        )] }\n      )] }, JSON.stringify(formKey)\n    ) }\n  );\n};\nexport default MapViewPopoverContent;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}