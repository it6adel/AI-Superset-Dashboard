{"ast":null,"code":"import { css, styled, t, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport DatasourcePanelDragOption from './DatasourcePanelDragOption';\nimport { DndItemType } from '../DndItemType';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const DEFAULT_MAX_COLUMNS_LENGTH = 50;\nexport const DEFAULT_MAX_METRICS_LENGTH = 50;\nexport const ITEM_HEIGHT = 30;\nconst Button = styled.button`\n  background: none;\n  border: none;\n  text-decoration: underline;\n  color: ${({ theme }) => theme.colors.primary.dark1};\n`;\nconst ButtonContainer = styled.div`\n  text-align: center;\n  padding-top: 2px;\n`;\nconst LabelWrapper = styled.div`\n  ${({ theme }) => css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: ${theme.typography.sizes.s}px;\n    background-color: ${theme.colors.grayscale.light4};\n    margin: ${theme.gridUnit * 2}px 0;\n    border-radius: 4px;\n    padding: 0 ${theme.gridUnit}px;\n\n    &:first-of-type {\n      margin-top: 0;\n    }\n    &:last-of-type {\n      margin-bottom: 0;\n    }\n\n    padding: 0;\n    cursor: pointer;\n    &:hover {\n      background-color: ${theme.colors.grayscale.light3};\n    }\n\n    & > span {\n      white-space: nowrap;\n    }\n\n    .option-label {\n      display: inline;\n    }\n\n    .metric-option {\n      & > svg {\n        min-width: ${theme.gridUnit * 4}px;\n      }\n      & > .option-label {\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  `}\n`;\nconst SectionHeaderButton = styled.button`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: none;\n  background: transparent;\n  width: 100%;\n  padding-inline: 0px;\n`;\nconst SectionHeader = styled.span`\n  ${({ theme }) => `\n    font-size: ${theme.typography.sizes.m}px;\n    line-height: 1.3;\n  `}\n`;\nconst Box = styled.div`\n  ${({ theme }) => `\n    border: 1px ${theme.colors.grayscale.light4} solid;\n    border-radius: ${theme.gridUnit}px;\n    font-size: ${theme.typography.sizes.s}px;\n    padding: ${theme.gridUnit}px;\n    color: ${theme.colors.grayscale.light1};\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  `}\n`;\nconst DatasourcePanelItem = ({ index, style, data }) => {\n  const { metricSlice: _metricSlice, columnSlice, totalMetrics, totalColumns, width, showAllMetrics, onShowAllMetricsChange, showAllColumns, onShowAllColumnsChange, collapseMetrics, onCollapseMetricsChange, collapseColumns, onCollapseColumnsChange, hiddenMetricCount, hiddenColumnCount } = data;\n  const metricSlice = collapseMetrics ? [] : _metricSlice;\n  const EXTRA_LINES = collapseMetrics ? 1 : 2;\n  const isColumnSection = collapseMetrics ?\n  index >= 1 :\n  index > metricSlice.length + EXTRA_LINES;\n  const HEADER_LINE = isColumnSection ?\n  metricSlice.length + EXTRA_LINES + 1 :\n  0;\n  const SUBTITLE_LINE = HEADER_LINE + 1;\n  const BOTTOM_LINE = (isColumnSection ? columnSlice.length : metricSlice.length) + (\n  collapseMetrics ? HEADER_LINE : SUBTITLE_LINE) +\n  1;\n  const collapsed = isColumnSection ? collapseColumns : collapseMetrics;\n  const setCollapse = isColumnSection ?\n  onCollapseColumnsChange :\n  onCollapseMetricsChange;\n  const showAll = isColumnSection ? showAllColumns : showAllMetrics;\n  const setShowAll = isColumnSection ?\n  onShowAllColumnsChange :\n  onShowAllMetricsChange;\n  const theme = useTheme();\n  const hiddenCount = isColumnSection ? hiddenColumnCount : hiddenMetricCount;\n  return _jsxs(\"div\", { style: style, css: css`\n        padding: 0 ${theme.gridUnit * 4}px;\n      `, children: [\n    index === HEADER_LINE && _jsxs(SectionHeaderButton, { onClick: () => setCollapse(!collapsed), children: [\n      _jsx(SectionHeader, { children:\n        isColumnSection ? t('Columns') : t('Metrics') }\n      ),\n      collapsed ? _jsx(Icons.DownOutlined, { iconSize: \"s\" }) : _jsx(Icons.UpOutlined, { iconSize: \"s\" })] }\n    ),\n    index === SUBTITLE_LINE && !collapsed && _jsxs(\"div\", { css: css`\n            display: flex;\n            gap: ${theme.gridUnit * 2}px;\n            justify-content: space-between;\n            align-items: baseline;\n          `, children: [\n      _jsx(\"div\", { className: \"field-length\", css: css`\n              flex-shrink: 0;\n            `, children:\n        isColumnSection ?\n        t(`Showing %s of %s`, columnSlice == null ? void 0 : columnSlice.length, totalColumns) :\n        t(`Showing %s of %s`, metricSlice == null ? void 0 : metricSlice.length, totalMetrics) }\n      ),\n      hiddenCount > 0 && _jsx(Box, { children: t(`%s ineligible item(s) are hidden`, hiddenCount) })] }\n    ),\n    index > SUBTITLE_LINE && index < BOTTOM_LINE && _jsx(LabelWrapper, {\n\n\n      className: \"column\", children:\n      _jsx(DatasourcePanelDragOption, { value: isColumnSection ?\n        columnSlice[index - SUBTITLE_LINE - 1] :\n        metricSlice[index - SUBTITLE_LINE - 1], type: isColumnSection ? DndItemType.Column : DndItemType.Metric }) }, (isColumnSection ? columnSlice[index - SUBTITLE_LINE - 1].column_name : metricSlice[index - SUBTITLE_LINE - 1].metric_name) + String(width)\n    ),\n    index === BOTTOM_LINE &&\n    !collapsed && (\n    isColumnSection ?\n    totalColumns > DEFAULT_MAX_COLUMNS_LENGTH :\n    totalMetrics > DEFAULT_MAX_METRICS_LENGTH) && _jsx(ButtonContainer, { children:\n      _jsx(Button, { onClick: () => setShowAll(!showAll), children:\n        showAll ? t('Show less...') : t('Show all...') }\n      ) }\n    )] }\n  );\n};\nexport default DatasourcePanelItem;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}