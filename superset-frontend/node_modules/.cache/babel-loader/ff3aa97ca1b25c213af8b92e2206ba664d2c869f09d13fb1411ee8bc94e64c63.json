{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DragLayer } from 'react-dnd';\nimport AddSliceCard from '../AddSliceCard';\nimport { NEW_COMPONENT_SOURCE_TYPE, CHART_TYPE } from '../../util/componentTypes';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst staticCardStyles = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  top: 0,\n  left: 0,\n  zIndex: 101,\n  width: 376 - 2 * 16\n};\nconst AddSliceDragPreview = ({ dragItem, slices, isDragging, currentOffset }) => {\n  if (!isDragging || !currentOffset || !dragItem || !slices)\n  return null;\n  const slice = slices[dragItem.index];\n  // make sure it's a new component and a chart\n  const shouldRender = slice &&\n  dragItem.parentType === NEW_COMPONENT_SOURCE_TYPE &&\n  dragItem.type === CHART_TYPE;\n  return !shouldRender ? null : _jsx(AddSliceCard, { style: {\n      ...staticCardStyles,\n      transform: `translate(${currentOffset.x}px, ${currentOffset.y}px)`\n    }, sliceName: slice.slice_name, lastModified: slice.changed_on_humanized, visType: slice.viz_type, datasourceUrl: slice.datasource_url, datasourceName: slice.datasource_name });\n};\n// This injects these props into the component\nexport default DragLayer((monitor) => ({\n  dragItem: monitor.getItem(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging()\n}))(AddSliceDragPreview);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}