{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, VizType } from '@superset-ui/core';\nimport { ControlSubSectionHeader, DEFAULT_SORT_SERIES_DATA, SORT_SERIES_CHOICES, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_LEGEND_FORM_DATA, StackControlOptions } from './constants';\nimport { DEFAULT_FORM_DATA } from './Timeseries/constants';\nimport { defaultXAxis } from './defaults';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { legendMargin, legendOrientation, legendType, showLegend } = DEFAULT_LEGEND_FORM_DATA;\nexport const showLegendControl = {\n  name: 'show_legend',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show legend'),\n    renderTrigger: true,\n    default: showLegend,\n    description: t('Whether to display a legend for the chart')\n  }\n};\nconst legendMarginControl = {\n  name: 'legendMargin',\n  config: {\n    type: 'TextControl',\n    label: t('Margin'),\n    renderTrigger: true,\n    isInt: true,\n    default: legendMargin,\n    description: t('Additional padding for legend.'),\n    visibility: ({ controls }) => {var _controls$show_legend;return Boolean(controls == null ? void 0 : (_controls$show_legend = controls.show_legend) == null ? void 0 : _controls$show_legend.value);}\n  }\n};\nconst legendTypeControl = {\n  name: 'legendType',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Type'),\n    choices: [\n    ['scroll', t('Scroll')],\n    ['plain', t('Plain')]],\n\n    default: legendType,\n    renderTrigger: true,\n    description: t('Legend type'),\n    visibility: ({ controls }) => {var _controls$show_legend2;return Boolean(controls == null ? void 0 : (_controls$show_legend2 = controls.show_legend) == null ? void 0 : _controls$show_legend2.value);}\n  }\n};\nconst legendOrientationControl = {\n  name: 'legendOrientation',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Orientation'),\n    choices: [\n    ['top', t('Top')],\n    ['bottom', t('Bottom')],\n    ['left', t('Left')],\n    ['right', t('Right')]],\n\n    default: legendOrientation,\n    renderTrigger: true,\n    description: t('Legend Orientation'),\n    visibility: ({ controls }) => {var _controls$show_legend3;return Boolean(controls == null ? void 0 : (_controls$show_legend3 = controls.show_legend) == null ? void 0 : _controls$show_legend3.value);}\n  }\n};\nexport const legendSection = [\n[_jsx(ControlSubSectionHeader, { children: t('Legend') })],\n[showLegendControl],\n[legendTypeControl],\n[legendOrientationControl],\n[legendMarginControl]];\n\nexport const showValueControl = {\n  name: 'show_value',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show Value'),\n    default: false,\n    renderTrigger: true,\n    description: t('Show series values on the chart')\n  }\n};\nexport const stackControl = {\n  name: 'stack',\n  config: {\n    type: 'SelectControl',\n    label: t('Stacked Style'),\n    renderTrigger: true,\n    choices: StackControlOptions,\n    default: null,\n    description: t('Stack series on top of each other')\n  }\n};\nexport const onlyTotalControl = {\n  name: 'only_total',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Only Total'),\n    default: true,\n    renderTrigger: true,\n    description: t('Only show the total value on the stacked chart, and not show on the selected category'),\n    visibility: ({ controls }) => {var _controls$show_value, _controls$stack;return Boolean(controls == null ? void 0 : (_controls$show_value = controls.show_value) == null ? void 0 : _controls$show_value.value) && Boolean(controls == null ? void 0 : (_controls$stack = controls.stack) == null ? void 0 : _controls$stack.value);}\n  }\n};\nexport const percentageThresholdControl = {\n  name: 'percentage_threshold',\n  config: {\n    type: 'TextControl',\n    label: t('Percentage threshold'),\n    renderTrigger: true,\n    isFloat: true,\n    default: DEFAULT_FORM_DATA.percentageThreshold,\n    description: t('Minimum threshold in percentage points for showing labels.'),\n    visibility: ({ controls }) => {var _controls$show_value2, _controls$stack2, _controls$only_total;return Boolean(controls == null ? void 0 : (_controls$show_value2 = controls.show_value) == null ? void 0 : _controls$show_value2.value) &&\n      Boolean(controls == null ? void 0 : (_controls$stack2 = controls.stack) == null ? void 0 : _controls$stack2.value) &&\n      Boolean(!(controls != null && (_controls$only_total = controls.only_total) != null && _controls$only_total.value));}\n  }\n};\nexport const showValueSection = [\n[showValueControl],\n[stackControl],\n[onlyTotalControl],\n[percentageThresholdControl]];\n\nexport const showValueSectionWithoutStack = [\n[showValueControl],\n[onlyTotalControl]];\n\nconst richTooltipControl = {\n  name: 'rich_tooltip',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Rich tooltip'),\n    renderTrigger: true,\n    default: true,\n    description: t('Shows a list of all series available at that point in time')\n  }\n};\nconst tooltipTimeFormatControl = {\n  name: 'tooltipTimeFormat',\n  config: {\n    ...sharedControls.x_axis_time_format,\n    label: t('Tooltip time format'),\n    default: 'smart_date',\n    clearable: false\n  }\n};\nconst tooltipSortByMetricControl = {\n  name: 'tooltipSortByMetric',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Tooltip sort by metric'),\n    renderTrigger: true,\n    default: false,\n    description: t('Whether to sort tooltip by the selected metric in descending order.'),\n    visibility: ({ controls }) => {var _controls$rich_toolti;return Boolean(controls == null ? void 0 : (_controls$rich_toolti = controls.rich_tooltip) == null ? void 0 : _controls$rich_toolti.value);}\n  }\n};\nconst tooltipTotalControl = {\n  name: 'showTooltipTotal',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show total'),\n    renderTrigger: true,\n    default: true,\n    description: t('Whether to display the total value in the tooltip'),\n    visibility: ({ controls, form_data }) => {var _controls$rich_toolti2;return Boolean(controls == null ? void 0 : (_controls$rich_toolti2 = controls.rich_tooltip) == null ? void 0 : _controls$rich_toolti2.value) &&\n      form_data.viz_type !== VizType.MixedTimeseries;}\n  }\n};\nconst tooltipPercentageControl = {\n  name: 'showTooltipPercentage',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show percentage'),\n    renderTrigger: true,\n    default: false,\n    description: t('Whether to display the percentage value in the tooltip'),\n    visibility: ({ controls, form_data }) => {var _controls$rich_toolti3, _controls$contributio;return Boolean(controls == null ? void 0 : (_controls$rich_toolti3 = controls.rich_tooltip) == null ? void 0 : _controls$rich_toolti3.value) &&\n      !(controls != null && (_controls$contributio = controls.contributionMode) != null && _controls$contributio.value) &&\n      form_data.viz_type !== VizType.MixedTimeseries;}\n  }\n};\nexport const richTooltipSection = [\n[_jsx(ControlSubSectionHeader, { children: t('Tooltip') })],\n[richTooltipControl],\n[tooltipTotalControl],\n[tooltipPercentageControl],\n[tooltipSortByMetricControl],\n[tooltipTimeFormatControl]];\n\nconst sortSeriesType = {\n  name: 'sort_series_type',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Sort Series By'),\n    choices: SORT_SERIES_CHOICES,\n    default: DEFAULT_SORT_SERIES_DATA.sort_series_type,\n    renderTrigger: true,\n    description: t('Based on what should series be ordered on the chart and legend')\n  }\n};\nconst sortSeriesAscending = {\n  name: 'sort_series_ascending',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Sort Series Ascending'),\n    default: DEFAULT_SORT_SERIES_DATA.sort_series_ascending,\n    renderTrigger: true,\n    description: t('Sort series in ascending order')\n  }\n};\nexport const xAxisLabelRotation = {\n  name: 'xAxisLabelRotation',\n  config: {\n    type: 'SelectControl',\n    freeForm: true,\n    clearable: false,\n    label: t('Rotate x axis label'),\n    choices: [\n    [0, '0째'],\n    [45, '45째'],\n    [90, '90째']],\n\n    default: defaultXAxis.xAxisLabelRotation,\n    renderTrigger: true,\n    description: t('Input field supports custom rotation. e.g. 30 for 30째')\n  }\n};\nexport const seriesOrderSection = [\n[_jsx(ControlSubSectionHeader, { children: t('Series Order') })],\n[sortSeriesType],\n[sortSeriesAscending]];\n\nexport const truncateXAxis = {\n  name: 'truncateXAxis',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Truncate X Axis'),\n    default: DEFAULT_FORM_DATA.truncateXAxis,\n    renderTrigger: true,\n    description: t('Truncate X Axis. Can be overridden by specifying a min or max bound. Only applicable for numerical X axis.')\n  }\n};\nexport const xAxisBounds = {\n  name: 'xAxisBounds',\n  config: {\n    type: 'BoundsControl',\n    label: t('X Axis Bounds'),\n    renderTrigger: true,\n    default: DEFAULT_FORM_DATA.xAxisBounds,\n    description: t('Bounds for numerical X axis. Not applicable for temporal or categorical axes. ' +\n    'When left empty, the bounds are dynamically defined based on the min/max of the data. ' +\n    \"Note that this feature will only expand the axis range. It won't \" +\n    \"narrow the data's extent.\"),\n    visibility: ({ controls }) => {var _controls$truncateXAx;return Boolean(controls == null ? void 0 : (_controls$truncateXAx = controls.truncateXAxis) == null ? void 0 : _controls$truncateXAx.value);}\n  }\n};\nexport const minorTicks = {\n  name: 'minorTicks',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Minor ticks'),\n    default: false,\n    renderTrigger: true,\n    description: t('Show minor ticks on axes.')\n  }\n};\nexport const forceCategorical = {\n  name: 'forceCategorical',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Force categorical'),\n    default: false,\n    renderTrigger: true,\n    description: t('Make the x-axis categorical')\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}