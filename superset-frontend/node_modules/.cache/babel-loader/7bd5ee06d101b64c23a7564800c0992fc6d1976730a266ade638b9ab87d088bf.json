{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t, isAdhocColumn } from '@superset-ui/core';\nimport { isColumnMeta } from '@superset-ui/chart-controls';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport ColumnSelectPopover from './ColumnSelectPopover';\nimport { DndColumnSelectPopoverTitle } from './DndColumnSelectPopoverTitle';\nimport ControlPopover from '../ControlPopover/ControlPopover';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst defaultPopoverLabel = t('My column');\nconst editableTitleTab = 'sqlExpression';\nconst ColumnSelectPopoverTrigger = ({ columns, editedColumn, onColumnEdit, isControlledComponent, children, isTemporal, disabledTabs, ...props }) => {\n  // @ts-ignore\n  const datasource = useSelector((state) => state.explore.datasource);\n  const [popoverLabel, setPopoverLabel] = useState(defaultPopoverLabel);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [isTitleEditDisabled, setIsTitleEditDisabled] = useState(true);\n  const [hasCustomLabel, setHasCustomLabel] = useState(false);\n  const [showDatasetModal, setDatasetModal] = useState(false);\n  let initialPopoverLabel = defaultPopoverLabel;\n  if (editedColumn && isColumnMeta(editedColumn)) {\n    initialPopoverLabel = editedColumn.verbose_name || editedColumn.column_name;\n  } else\n  if (editedColumn && isAdhocColumn(editedColumn)) {\n    initialPopoverLabel = editedColumn.label || defaultPopoverLabel;\n  }\n  useEffect(() => {\n    setPopoverLabel(initialPopoverLabel);\n  }, [initialPopoverLabel, popoverVisible]);\n  const togglePopover = useCallback((visible) => {\n    setPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n  const { visible, handleTogglePopover, handleClosePopover } = isControlledComponent ?\n  {\n    visible: props.visible,\n    handleTogglePopover: props.togglePopover,\n    handleClosePopover: props.closePopover\n  } :\n  {\n    visible: popoverVisible,\n    handleTogglePopover: togglePopover,\n    handleClosePopover: closePopover\n  };\n  const getCurrentTab = useCallback((tab) => {\n    setIsTitleEditDisabled(tab !== editableTitleTab);\n  }, []);\n  const overlayContent = useMemo(() => _jsx(ExplorePopoverContent, { children:\n    _jsx(ColumnSelectPopover, { editedColumn: editedColumn, columns: columns, setDatasetModal: setDatasetModal, onClose: handleClosePopover, onChange: onColumnEdit, hasCustomLabel: hasCustomLabel, label: popoverLabel, setLabel: setPopoverLabel, getCurrentTab: getCurrentTab, isTemporal: isTemporal, disabledTabs: disabledTabs }) }\n  ), [\n  columns,\n  editedColumn,\n  getCurrentTab,\n  hasCustomLabel,\n  handleClosePopover,\n  isTemporal,\n  onColumnEdit,\n  popoverLabel,\n  disabledTabs]\n  );\n  const onLabelChange = useCallback((e) => {\n    setPopoverLabel(e.target.value);\n    setHasCustomLabel(true);\n  }, [setPopoverLabel, setHasCustomLabel]);\n  const popoverTitle = useMemo(() => _jsx(DndColumnSelectPopoverTitle, { title: popoverLabel, onChange: onLabelChange, isEditDisabled: isTitleEditDisabled, hasCustomLabel: hasCustomLabel }), [hasCustomLabel, isTitleEditDisabled, onLabelChange, popoverLabel]);\n  return _jsxs(_Fragment, { children: [\n    showDatasetModal && _jsx(SaveDatasetModal, { visible: showDatasetModal, onHide: () => setDatasetModal(false), buttonTextOnSave: t('Save'), buttonTextOnOverwrite: t('Overwrite'), modalDescription: t('Save this query as a virtual dataset to continue exploring'), datasource: datasource }),\n    _jsx(ControlPopover, { trigger: \"click\", content: overlayContent, defaultOpen: visible, open: visible, onOpenChange: handleTogglePopover, title: popoverTitle, destroyTooltipOnHide: true, children:\n      children }\n    )] }\n  );\n};\nexport default ColumnSelectPopoverTrigger;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}