{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { styled, ensureIsArray, t, getClientErrorObject } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport ViewQuery from 'src/explore/components/controls/ViewQuery';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst ViewQueryModalContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\nconst ViewQueryModal = (props) => {\n  const [result, setResult] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const loadChartData = (resultType) => {\n    setIsLoading(true);\n    getChartDataRequest({\n      formData: props.latestQueryFormData,\n      resultFormat: 'json',\n      resultType\n    }).\n    then(({ json }) => {\n      setResult(ensureIsArray(json.result));\n      setIsLoading(false);\n      setError(null);\n    }).\n    catch((response) => {\n      getClientErrorObject(response).then(({ error, message }) => {\n        setError(error ||\n        message ||\n        response.statusText ||\n        t('Sorry, An error occurred'));\n        setIsLoading(false);\n      });\n    });\n  };\n  useEffect(() => {\n    loadChartData('query');\n  }, [JSON.stringify(props.latestQueryFormData)]);\n  if (isLoading) {\n    return _jsx(Loading, {});\n  }\n  if (error) {\n    return _jsx(\"pre\", { children: error });\n  }\n  return _jsx(ViewQueryModalContainer, { children:\n    result.map((item) => item.query ? _jsx(ViewQuery, { sql: item.query, language: item.language || undefined }) : null) }\n  );\n};\nexport default ViewQueryModal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}