{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  Fragment,\n  useState,\n  useCallback,\n  useRef,\n  useEffect,\n  useMemo,\n  memo } from\n'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  css,\n  FAST_DEBOUNCE,\n  FeatureFlag,\n  isFeatureEnabled,\n  styled,\n  t } from\n'@superset-ui/core';\n\nimport {\n  Draggable,\n  Droppable } from\n'src/dashboard/components/dnd/DragDroppable';\nimport DragHandle from 'src/dashboard/components/dnd/DragHandle';\nimport DashboardComponent from 'src/dashboard/containers/DashboardComponent';\nimport DeleteComponentButton from 'src/dashboard/components/DeleteComponentButton';\nimport HoverMenu from 'src/dashboard/components/menu/HoverMenu';\nimport Icons from 'src/components/Icons';\nimport IconButton from 'src/dashboard/components/IconButton';\nimport BackgroundStyleDropdown from 'src/dashboard/components/menu/BackgroundStyleDropdown';\nimport WithPopoverMenu from 'src/dashboard/components/menu/WithPopoverMenu';\nimport { componentShape } from 'src/dashboard/util/propShapes';\nimport backgroundStyleOptions from 'src/dashboard/util/backgroundStyleOptions';\nimport { BACKGROUND_TRANSPARENT } from 'src/dashboard/util/constants';\nimport { EMPTY_CONTAINER_Z_INDEX } from 'src/dashboard/constants';\nimport { isCurrentUserBot } from 'src/utils/isBot';\nimport { useDebouncedEffect } from '../../../explore/exploreUtils';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n\n  // grid related\n  availableColumnCount: PropTypes.number.isRequired,\n  columnWidth: PropTypes.number.isRequired,\n  occupiedColumnCount: PropTypes.number.isRequired,\n  onResizeStart: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  onResizeStop: PropTypes.func.isRequired,\n  maxChildrenHeight: PropTypes.number.isRequired,\n\n  // dnd\n  handleComponentDrop: PropTypes.func.isRequired,\n  deleteComponent: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired\n};\n\nconst GridRow = styled.div`\n  ${({ theme, editMode }) => css`\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: flex-start;\n    width: 100%;\n    height: fit-content;\n\n    & > :not(:last-child):not(.hover-menu) {\n      ${!editMode && `margin-right: ${theme.gridUnit * 4}px;`}\n    }\n\n    & .empty-droptarget {\n      position: relative;\n      align-self: center;\n      &.empty-droptarget--vertical {\n        min-width: ${theme.gridUnit * 4}px;\n        &:not(:last-child) {\n          width: ${theme.gridUnit * 4}px;\n        }\n        &:first-child:not(.droptarget-side) {\n          z-index: ${EMPTY_CONTAINER_Z_INDEX};\n          position: absolute;\n          width: 100%;\n          height: 100%;\n        }\n      }\n      &.droptarget-side {\n        z-index: ${EMPTY_CONTAINER_Z_INDEX};\n        position: absolute;\n        width: ${theme.gridUnit * 4}px;\n        &:first-child {\n          inset-inline-start: 0;\n        }\n      }\n    }\n\n    &.grid-row--empty {\n      min-height: ${theme.gridUnit * 25}px;\n    }\n  `}\n`;\n\nconst emptyRowContentStyles = (theme) => css`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${theme.colors.text.label};\n`;\n\nconst Row = (props) => {\n  const {\n    component: rowComponent,\n    parentComponent,\n    index,\n    availableColumnCount,\n    columnWidth,\n    occupiedColumnCount,\n    depth,\n    onResizeStart,\n    onResize,\n    onResizeStop,\n    handleComponentDrop,\n    editMode,\n    onChangeTab,\n    isComponentVisible,\n    updateComponents,\n    deleteComponent,\n    parentId\n  } = props;\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const [hoverMenuHovered, setHoverMenuHovered] = useState(false);\n  const [containerHeight, setContainerHeight] = useState(null);\n  const containerRef = useRef();\n  const isComponentVisibleRef = useRef(isComponentVisible);\n\n  useEffect(() => {\n    isComponentVisibleRef.current = isComponentVisible;\n  }, [isComponentVisible]);\n\n  // if chart not rendered - render it if it's less than 1 view height away from current viewport\n  // if chart rendered - remove it if it's more than 4 view heights away from current viewport\n  useEffect(() => {\n    let observerEnabler;\n    let observerDisabler;\n    if (\n    isFeatureEnabled(FeatureFlag.DashboardVirtualization) &&\n    !isCurrentUserBot())\n    {\n      observerEnabler = new IntersectionObserver(\n        ([entry]) => {\n          if (entry.isIntersecting && isComponentVisibleRef.current) {\n            setIsInView(true);\n          }\n        },\n        {\n          rootMargin: '100% 0px'\n        }\n      );\n      observerDisabler = new IntersectionObserver(\n        ([entry]) => {\n          if (!entry.isIntersecting && isComponentVisibleRef.current) {\n            setIsInView(false);\n          }\n        },\n        {\n          rootMargin: '400% 0px'\n        }\n      );\n      const element = containerRef.current;\n      if (element) {\n        observerEnabler.observe(element);\n        observerDisabler.observe(element);\n      }\n    }\n    return () => {var _observerEnabler, _observerDisabler;\n      (_observerEnabler = observerEnabler) == null ? void 0 : _observerEnabler.disconnect();\n      (_observerDisabler = observerDisabler) == null ? void 0 : _observerDisabler.disconnect();\n    };\n  }, []);\n\n  useDebouncedEffect(\n    () => {var _containerRef$current;\n      const updatedHeight = (_containerRef$current = containerRef.current) == null ? void 0 : _containerRef$current.clientHeight;\n      if (\n      editMode &&\n      containerRef.current &&\n      updatedHeight !== containerHeight)\n      {\n        setContainerHeight(updatedHeight);\n      }\n    },\n    FAST_DEBOUNCE,\n    [editMode, containerHeight]\n  );\n\n  const handleChangeFocus = useCallback((nextFocus) => {\n    setIsFocused(Boolean(nextFocus));\n  }, []);\n\n  const handleChangeBackground = useCallback(\n    (nextValue) => {\n      const metaKey = 'background';\n      if (nextValue && rowComponent.meta[metaKey] !== nextValue) {\n        updateComponents({\n          [rowComponent.id]: {\n            ...rowComponent,\n            meta: {\n              ...rowComponent.meta,\n              [metaKey]: nextValue\n            }\n          }\n        });\n      }\n    },\n    [updateComponents, rowComponent]\n  );\n\n  const handleDeleteComponent = useCallback(() => {\n    deleteComponent(rowComponent.id, parentId);\n  }, [deleteComponent, rowComponent, parentId]);\n\n  const handleMenuHover = useCallback((hovered) => {\n    const { isHovered } = hovered;\n    setHoverMenuHovered(isHovered);\n  }, []);\n\n  const rowItems = useMemo(\n    () => rowComponent.children || [],\n    [rowComponent.children]\n  );\n\n  const backgroundStyle = backgroundStyleOptions.find(\n    (opt) =>\n    opt.value === (rowComponent.meta.background || BACKGROUND_TRANSPARENT)\n  );\n  const remainColumnCount = availableColumnCount - occupiedColumnCount;\n  const renderChild = useCallback(\n    ({ dragSourceRef }) =>\n    _jsxs(WithPopoverMenu, {\n      isFocused: isFocused,\n      onChangeFocus: handleChangeFocus,\n      disableClick: true,\n      menuItems: [\n      _jsx(BackgroundStyleDropdown, {\n        id: `${rowComponent.id}-background`,\n        value: backgroundStyle.value,\n        onChange: handleChangeBackground }\n      )],\n\n      editMode: editMode, children: [\n\n      editMode &&\n      _jsxs(HoverMenu, {\n        onHover: handleMenuHover,\n        innerRef: dragSourceRef,\n        position: \"left\", children: [\n\n        _jsx(DragHandle, { position: \"left\" }),\n        _jsx(DeleteComponentButton, { onDelete: handleDeleteComponent }),\n        _jsx(IconButton, {\n          onClick: handleChangeFocus,\n          icon: _jsx(Icons.SettingOutlined, { iconSize: \"xl\" }) }\n        )] }\n      ),\n\n      _jsxs(GridRow, {\n        className: cx(\n          'grid-row',\n          rowItems.length === 0 && 'grid-row--empty',\n          hoverMenuHovered && 'grid-row--hovered',\n          backgroundStyle.className\n        ),\n\n        ref: containerRef,\n        editMode: editMode, children: [\n\n        editMode &&\n        _jsx(Droppable, { ...(\n          rowItems.length === 0 ?\n          {\n            component: rowComponent,\n            parentComponent: rowComponent,\n            dropToChild: true\n          } :\n          {\n            component: rowItems[0],\n            parentComponent: rowComponent\n          }),\n          depth: depth,\n          index: 0,\n          orientation: \"row\",\n          onDrop: handleComponentDrop,\n          className: cx(\n            'empty-droptarget',\n            'empty-droptarget--vertical',\n            rowItems.length > 0 && 'droptarget-side'\n          ),\n          editMode: true,\n          style: {\n            height: rowItems.length > 0 ? containerHeight : '100%',\n            ...(rowItems.length > 0 && { width: 16 })\n          }, children:\n\n          ({ dropIndicatorProps }) =>\n          dropIndicatorProps && _jsx(\"div\", { ...dropIndicatorProps }) }\n\n        ),\n\n        rowItems.length === 0 &&\n        _jsx(\"div\", { css: emptyRowContentStyles, children: t('Empty row') }),\n\n        rowItems.length > 0 &&\n        rowItems.map((componentId, itemIndex) =>\n        _jsxs(Fragment, { children: [\n          _jsx(DashboardComponent, {\n\n            id: componentId,\n            parentId: rowComponent.id,\n            depth: depth + 1,\n            index: itemIndex,\n            availableColumnCount: remainColumnCount,\n            columnWidth: columnWidth,\n            onResizeStart: onResizeStart,\n            onResize: onResize,\n            onResizeStop: onResizeStop,\n            isComponentVisible: isComponentVisible,\n            onChangeTab: onChangeTab,\n            isInView: isInView }, componentId\n          ),\n          editMode &&\n          _jsx(Droppable, {\n            component: rowItems,\n            parentComponent: rowComponent,\n            depth: depth,\n            index: itemIndex + 1,\n            orientation: \"row\",\n            onDrop: handleComponentDrop,\n            className: cx(\n              'empty-droptarget',\n              'empty-droptarget--vertical',\n              remainColumnCount === 0 &&\n              itemIndex === rowItems.length - 1 &&\n              'droptarget-side'\n            ),\n            editMode: true,\n            style: {\n              height: containerHeight,\n              ...(remainColumnCount === 0 &&\n              itemIndex === rowItems.length - 1 && { width: 16 })\n            }, children:\n\n            ({ dropIndicatorProps }) =>\n            dropIndicatorProps && _jsx(\"div\", { ...dropIndicatorProps }) }\n\n          )] }, componentId\n\n        )\n        )] }\n      )] }\n    ),\n\n    [\n    backgroundStyle.className,\n    backgroundStyle.value,\n    columnWidth,\n    containerHeight,\n    depth,\n    editMode,\n    handleChangeBackground,\n    handleChangeFocus,\n    handleComponentDrop,\n    handleDeleteComponent,\n    handleMenuHover,\n    hoverMenuHovered,\n    isComponentVisible,\n    isFocused,\n    isInView,\n    onChangeTab,\n    onResize,\n    onResizeStart,\n    onResizeStop,\n    remainColumnCount,\n    rowComponent,\n    rowItems]\n\n  );\n\n  return (\n    _jsx(Draggable, {\n      component: rowComponent,\n      parentComponent: parentComponent,\n      orientation: \"row\",\n      index: index,\n      depth: depth,\n      onDrop: handleComponentDrop,\n      editMode: editMode, children:\n\n      renderChild }\n    ));\n\n};\n\nRow.propTypes = propTypes;\n\nexport default /*#__PURE__*/memo(Row);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}