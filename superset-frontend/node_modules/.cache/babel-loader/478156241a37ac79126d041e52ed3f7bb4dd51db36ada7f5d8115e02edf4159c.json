{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useState } from 'react';\nimport { isFeatureEnabled, FeatureFlag, t, useTheme, css } from '@superset-ui/core';\nimport { Actions, createErrorHandler, createFetchRelated } from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu from 'src/features/home/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Icons from 'src/components/Icons';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Link } from 'react-router-dom';\nimport { deleteTags } from 'src/features/tags/tags';\n// eslint-disable-next-line no-restricted-imports\nimport { Tag as AntdTag } from 'antd'; // TODO: Remove antd\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport TagModal from 'src/features/tags/TagModal';\nimport FaveStar from 'src/components/FaveStar';\nimport { ModifiedInfo } from 'src/components/AuditInfo';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nfunction TagList(props) {\n  const { addDangerToast, addSuccessToast, user } = props;\n  const { userId } = user;\n  const theme = useTheme();\n  const initialFilters = useMemo(() => [\n  {\n    id: 'type',\n    operator: 'custom_tag',\n    value: true\n  }],\n  []);\n  const { state: { loading, resourceCount: tagCount, resourceCollection: tags, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('tag', t('tag'), addDangerToast, undefined, undefined, initialFilters);\n  const [showTagModal, setShowTagModal] = useState(false);\n  const [tagToEdit, setTagToEdit] = useState(null);\n  const tagIds = useMemo(() => tags.map((c) => c.id), [tags]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('tag', tagIds, addDangerToast);\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId == null ? void 0 : userId.toString(), null);\n  const canDelete = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  function handleTagsDelete(tags) {\n    deleteTags(tags, (msg) => {\n      addSuccessToast(msg);\n      refreshData();\n    }, (msg) => {\n      addDangerToast(msg);\n      refreshData();\n    });\n  }\n  const handleTagEdit = (tag) => {\n    setShowTagModal(true);\n    setTagToEdit(tag);\n  };\n  const emptyState = {\n    title: t('No Tags created'),\n    image: 'dashboard.svg',\n    description: 'Create a new tag and assign it to existing entities like charts or dashboards',\n    buttonAction: () => setShowTagModal(true),\n    buttonText: _jsxs(_Fragment, { children: [\n      _jsx(Icons.PlusOutlined, { iconSize: \"m\", iconColor: theme.colors.primary.light5, css: css`\n            margin: auto ${theme.gridUnit * 2}px auto 0;\n            vertical-align: text-top;\n          ` }), \"Create a new Tag\"] }\n\n    )\n  };\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { id } } }) => userId && _jsx(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] }),\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs',\n    hidden: !userId\n  },\n  {\n    Cell: ({ row: { original: { id, name: tagName } } }) => _jsx(AntdTag, { children:\n      _jsx(Link, { to: `/superset/all_entities/?id=${id}`, children: tagName }) }\n    ),\n    Header: t('Name'),\n    accessor: 'name'\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => _jsx(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleTagEdit(original);\n      return _jsxs(Actions, { className: \"actions\", children: [\n        canDelete && _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: _jsxs(_Fragment, { children: [\n            t('Are you sure you want to delete'), ' ',\n            _jsx(\"b\", { children: original.dashboard_title }), \"?\"] }\n          ), onConfirm: () => handleTagsDelete([original]), children:\n          (confirmDelete) => _jsx(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\", children:\n            _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete, children:\n              _jsx(Icons.DeleteOutlined, { iconSize: \"l\" }) }\n            ) }\n          ) }\n        ),\n        canEdit && _jsx(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit, children:\n            _jsx(Icons.EditOutlined, { iconSize: \"l\" }) }\n          ) }\n        )] }\n      );\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canDelete,\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [userId, canDelete, refreshData, addSuccessToast, addDangerToast]);\n  const filters = useMemo(() => {\n    const filters_list = [\n    {\n      Header: t('Name'),\n      id: 'name',\n      input: 'search',\n      operator: FilterOperator.Contains\n    },\n    {\n      Header: t('Modified by'),\n      key: 'changed_by',\n      id: 'changed_by',\n      input: 'select',\n      operator: FilterOperator.RelationOneMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('tag', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n      paginate: true\n    }];\n\n    return filters_list;\n  }, [addDangerToast, props.user]);\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'name',\n    label: t('Alphabetical'),\n    value: 'alphabetical'\n  },\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified'\n  },\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified'\n  }];\n\n  const subMenuButtons = [];\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n\n      onClick: toggleBulkSelect\n    });\n  }\n  // render new 'New Tag' btn\n  subMenuButtons.push({\n    name: _jsxs(_Fragment, { children: [\n      _jsx(Icons.PlusOutlined, { css: css`\n            vertical-align: text-top;\n          `, iconSize: \"m\", iconColor: theme.colors.primary.light5 }), ' ',\n      t('Tag')] }\n    ),\n    buttonStyle: 'primary',\n\n    onClick: () => setShowTagModal(true)\n  });\n  const handleBulkDelete = (tagsToDelete) => handleTagsDelete(tagsToDelete);\n  return _jsxs(_Fragment, { children: [\n    _jsx(TagModal, { show: showTagModal, onHide: () => {\n        setShowTagModal(false);\n        setTagToEdit(null);\n      }, editTag: tagToEdit, refreshData: refreshData, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, clearOnHide: true }),\n    _jsx(SubMenu, { name: t('Tags'), buttons: subMenuButtons }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected tags?'), onConfirm: handleBulkDelete, children:\n      (confirmDelete) => {\n        const bulkActions = [];\n        if (canDelete) {\n          bulkActions.push({\n            key: 'delete',\n            name: t('Delete'),\n            type: 'danger',\n            onSelect: confirmDelete\n          });\n        }\n        return _jsx(_Fragment, { children:\n          _jsx(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"tags-list-view\", columns: columns, count: tagCount, data: tags, disableBulkSelect: toggleBulkSelect, refreshData: refreshData, emptyState: emptyState, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, pageSize: PAGE_SIZE, showThumbnails: userKey ?\n            userKey.thumbnails :\n            isFeatureEnabled(FeatureFlag.Thumbnails), defaultViewMode: isFeatureEnabled(FeatureFlag.ListviewsDefaultCardView) ?\n            'card' :\n            'table' }) }\n        );\n      } }\n    )] }\n  );\n}\nexport default withToasts(TagList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}