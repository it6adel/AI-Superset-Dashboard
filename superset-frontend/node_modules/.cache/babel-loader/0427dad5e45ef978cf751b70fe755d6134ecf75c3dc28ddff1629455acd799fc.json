{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { FAST_DEBOUNCE, css, styled } from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport { useDragDropManager } from 'react-dnd';\nimport classNames from 'classnames';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst StyledDiv = styled.div`\n  ${({ theme }) => css`\n    position: relative;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr;\n    flex: 1;\n    /* Special cases */\n\n    &.dragdroppable--dragging {\n      &\n        .dashboard-component-tabs-content\n        > .empty-droptarget.empty-droptarget--full {\n        height: 100%;\n      }\n      & .empty-droptarget:before {\n        display: block;\n        border-color: ${theme.colors.primary.light1};\n        background-color: ${theme.colors.primary.light3};\n      }\n      & .grid-row:after {\n        border-style: hidden;\n      }\n      & .droptarget-side:last-child {\n        inset-inline-end: 0;\n      }\n      & .droptarget-edge:last-child {\n        inset-block-end: 0;\n      }\n    }\n\n    /* A row within a column has inset hover menu */\n    .dragdroppable-column .dragdroppable-row .hover-menu--left {\n      left: ${theme.gridUnit * -3}px;\n      background: ${theme.colors.grayscale.light5};\n      border: 1px solid ${theme.colors.grayscale.light2};\n    }\n\n    .dashboard-component-tabs {\n      position: relative;\n    }\n\n    /* A column within a column or tabs has inset hover menu */\n    .dragdroppable-column .dragdroppable-column .hover-menu--top,\n    .dashboard-component-tabs .dragdroppable-column .hover-menu--top {\n      top: ${theme.gridUnit * -3}px;\n      background: ${theme.colors.grayscale.light5};\n      border: 1px solid ${theme.colors.grayscale.light2};\n    }\n\n    /* move Tabs hover menu to top near actual Tabs */\n    .dashboard-component-tabs > .hover-menu-container > .hover-menu--left {\n      top: 0;\n      transform: unset;\n      background: transparent;\n    }\n\n    /* push Chart actions to upper right */\n    .dragdroppable-column .dashboard-component-chart-holder .hover-menu--top,\n    .dragdroppable .dashboard-component-header .hover-menu--top {\n      right: ${theme.gridUnit * 2}px;\n      top: ${theme.gridUnit * 2}px;\n      background: transparent;\n      border: none;\n      transform: unset;\n      left: unset;\n    }\n    div:hover > .hover-menu-container .hover-menu,\n    .hover-menu-container .hover-menu:hover {\n      opacity: 1;\n    }\n\n    p {\n      margin: 0 0 ${theme.gridUnit * 2}px 0;\n    }\n\n    i.danger {\n      color: ${theme.colors.error.base};\n    }\n\n    i.warning {\n      color: ${theme.colors.warning.base};\n    }\n  `}\n`;\nconst DashboardWrapper = ({ children }) => {\n  const editMode = useSelector((state) => state.dashboardState.editMode);\n  const dragDropManager = useDragDropManager();\n  const [isDragged, setIsDragged] = useState(dragDropManager.getMonitor().isDragging());\n  useEffect(() => {\n    const monitor = dragDropManager.getMonitor();\n    const debouncedSetIsDragged = _debounce(setIsDragged, FAST_DEBOUNCE);\n    const unsub = monitor.subscribeToStateChange(() => {\n      const isDragging = monitor.isDragging();\n      if (isDragging) {\n        // set a debounced function to prevent HTML5 drag source\n        // from interfering with the drop zone highlighting\n        debouncedSetIsDragged(true);\n      } else\n      {\n        debouncedSetIsDragged.cancel();\n        setIsDragged(false);\n      }\n    });\n    return () => {\n      unsub();\n      debouncedSetIsDragged.cancel();\n    };\n  }, [dragDropManager]);\n  return _jsx(StyledDiv, { className: classNames({\n      'dragdroppable--dragging': editMode && isDragged\n    }), children:\n    children }\n  );\n};\nexport default DashboardWrapper;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}