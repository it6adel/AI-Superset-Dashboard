{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isSimpleAdhocFilter } from './types/Filter';\nimport convertFilter from './convertFilter';\nfunction sanitizeClause(clause) {\n  let sanitizedClause = clause;\n  if (clause.includes('--')) {\n    sanitizedClause = `${clause}\\n`;\n  }\n  return `(${sanitizedClause})`;\n}\n/** Logic formerly in viz.py's process_query_filters */\nexport default function processFilters(formData) {\n  // Split adhoc_filters into four fields according to\n  // (1) clause (WHERE or HAVING)\n  // (2) expressionType\n  //     2.1 SIMPLE (subject + operator + comparator)\n  //     2.2 SQL (freeform SQL expression))\n  const { adhoc_filters, extras = {}, filters = [], where } = formData;\n  const simpleWhere = filters;\n  const freeformWhere = [];\n  if (where)\n  freeformWhere.push(where);\n  const freeformHaving = [];\n  (adhoc_filters || []).forEach((filter) => {\n    const { clause } = filter;\n    if (isSimpleAdhocFilter(filter)) {\n      const filterClause = convertFilter(filter);\n      if (clause === 'WHERE') {\n        simpleWhere.push(filterClause);\n      }\n    } else\n    {\n      const { sqlExpression } = filter;\n      if (clause === 'WHERE') {\n        freeformWhere.push(sqlExpression);\n      } else\n      {\n        freeformHaving.push(sqlExpression);\n      }\n    }\n  });\n  // some filter-related fields need to go in `extras`\n  extras.having = freeformHaving.map(sanitizeClause).join(' AND ');\n  extras.where = freeformWhere.map(sanitizeClause).join(' AND ');\n  return {\n    filters: simpleWhere,\n    extras\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}