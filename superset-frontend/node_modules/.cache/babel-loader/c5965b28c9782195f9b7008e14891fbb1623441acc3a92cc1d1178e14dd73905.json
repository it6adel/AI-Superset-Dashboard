{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { css, GenericDataType, getTimeFormatter, safeHtmlSpan, styled, t, TimeFormats, useTheme } from '@superset-ui/core';\n\nimport { Input } from 'src/components/Input';\nimport { BOOL_FALSE_DISPLAY, BOOL_TRUE_DISPLAY, NULL_DISPLAY, SLOW_DEBOUNCE } from 'src/constants';\nimport { Radio } from 'src/components/Radio';\nimport Icons from 'src/components/Icons';\nimport Button from 'src/components/Button';\nimport Popover from 'src/components/Popover';\nimport { prepareCopyToClipboardTabularData } from 'src/utils/common';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { getTimeColumns, setTimeColumns } from './utils';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const CellNull = styled('span')`\n  color: ${({ theme }) => theme.colors.grayscale.light1};\n`;\nexport const CopyButton = styled(Button)`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n\n  // needed to override button's first-of-type margin: 0\n  && {\n    margin: 0 ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  i {\n    padding: 0 ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nexport const CopyToClipboardButton = ({ data, columns }) => _jsx(CopyToClipboard, { text: data && columns ? prepareCopyToClipboardTabularData(data, columns) : '', wrapped: false, copyNode: _jsx(Icons.CopyOutlined, { iconSize: \"l\", \"aria-label\": t('Copy'), role: \"button\", css: css`\n          &.anticon > * {\n            line-height: 0;\n          }\n        ` }) });\nexport const FilterInput = ({ onChangeHandler, shouldFocus = false }) => {\n  const inputRef = useRef(null);\n  useEffect(() => {\n    // Focus the input element when the component mounts\n    if (inputRef.current && shouldFocus) {\n      inputRef.current.focus();\n    }\n  }, []);\n  const theme = useTheme();\n  const debouncedChangeHandler = _debounce(onChangeHandler, SLOW_DEBOUNCE);\n  return _jsx(Input, { prefix: _jsx(Icons.SearchOutlined, { iconSize: \"l\" }), placeholder: t('Search'), onChange: (event) => {\n      const filterText = event.target.value;\n      debouncedChangeHandler(filterText);\n    }, css: css`\n        width: 200px;\n        margin-right: ${theme.gridUnit * 2}px;\n      `, ref: inputRef });\n};\nvar FormatPickerValue;\n(function (FormatPickerValue) {\n  FormatPickerValue[\"Formatted\"] = \"formatted\";\n  FormatPickerValue[\"Original\"] = \"original\";\n})(FormatPickerValue || (FormatPickerValue = {}));\nconst FormatPicker = ({ onChange, value }) => _jsx(Radio.GroupWrapper, { spaceConfig: {\n    direction: 'vertical',\n    align: 'start',\n    size: 15,\n    wrap: false\n  }, size: \"large\", value: value, onChange: onChange, options: [\n  { label: t('Formatted date'), value: FormatPickerValue.Formatted },\n  { label: t('Original value'), value: FormatPickerValue.Original }] }\n);\nconst FormatPickerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\nconst FormatPickerLabel = styled.span`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst DataTableTemporalHeaderCell = ({ columnName, onTimeColumnChange, datasourceId, isOriginalTimeColumn }) => {\n  const theme = useTheme();\n  const onChange = (e) => {\n    onTimeColumnChange(columnName, e.target.value);\n  };\n  const overlayContent = useMemo(() => datasourceId ? // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n  _jsxs(FormatPickerContainer, { onClick: (e) => e.stopPropagation(), children: [\n\n    _jsx(FormatPickerLabel, { children: t('Column Formatting') }),\n    _jsx(FormatPicker, { onChange: onChange, value: isOriginalTimeColumn ?\n      FormatPickerValue.Original :\n      FormatPickerValue.Formatted })] }\n  ) : null, [datasourceId, isOriginalTimeColumn]);\n  return datasourceId ? _jsxs(\"span\", { children: [\n    _jsx(Popover, { trigger: \"click\", content: overlayContent, placement: \"bottomLeft\", arrow: { pointAtCenter: true }, children:\n      _jsx(Icons.SettingOutlined, { iconSize: \"m\", iconColor: theme.colors.grayscale.light1, css: /*#__PURE__*/_css({ marginRight: `${theme.gridUnit}px` }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:DataTableTemporalHeaderCell;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), onClick: (e) => e.stopPropagation() }) }\n    ),\n    columnName] }\n  ) : _jsx(\"span\", { children: columnName });\n};\nexport const useFilteredTableData = (filterText, data) => {\n  const rowsAsStrings = useMemo(() => {var _data$map;return (_data$map = data == null ? void 0 : data.map((row) => Object.values(row).map((value) => value ? value.toString().toLowerCase() : t('N/A')))) != null ? _data$map : [];}, [data]);\n  return useMemo(() => {\n    if (!(data != null && data.length)) {\n      return [];\n    }\n    return data.filter((_, index) => rowsAsStrings[index].some((value) => value == null ? void 0 : value.includes(filterText.toLowerCase())));\n  }, [data, filterText, rowsAsStrings]);\n};\nconst timeFormatter = getTimeFormatter(TimeFormats.DATABASE_DATETIME);\nexport const useTableColumns = (colnames, coltypes, data, datasourceId, isVisible, moreConfigs, allowHTML) => {\n  const [originalFormattedTimeColumns, setOriginalFormattedTimeColumns] = useState(getTimeColumns(datasourceId));\n  const onTimeColumnChange = (columnName, columnType) => {\n    if (!datasourceId) {\n      return;\n    }\n    if (columnType === FormatPickerValue.Original &&\n    !originalFormattedTimeColumns.includes(columnName)) {\n      const cols = getTimeColumns(datasourceId);\n      cols.push(columnName);\n      setTimeColumns(datasourceId, cols);\n      setOriginalFormattedTimeColumns(cols);\n    } else\n    if (columnType === FormatPickerValue.Formatted &&\n    originalFormattedTimeColumns.includes(columnName)) {\n      const cols = getTimeColumns(datasourceId);\n      cols.splice(cols.indexOf(columnName), 1);\n      setTimeColumns(datasourceId, cols);\n      setOriginalFormattedTimeColumns(cols);\n    }\n  };\n  useEffect(() => {\n    if (isVisible) {\n      setOriginalFormattedTimeColumns(getTimeColumns(datasourceId));\n    }\n  }, [datasourceId, isVisible]);\n  return useMemo(() => colnames && data != null && data.length ?\n  colnames.\n  filter((column) => Object.keys(data[0]).includes(column)).\n  map((key, index) => {\n    const colType = coltypes == null ? void 0 : coltypes[index];\n    const firstValue = data[0][key];\n    const originalFormattedTimeColumnIndex = colType === GenericDataType.Temporal ?\n    originalFormattedTimeColumns.indexOf(key) :\n    -1;\n    const isOriginalTimeColumn = originalFormattedTimeColumns.includes(key);\n    return {\n      // react-table requires a non-empty id, therefore we introduce a fallback value in case the key is empty\n      id: key || index,\n      accessor: (row) => row[key],\n      Header: colType === GenericDataType.Temporal &&\n      typeof firstValue !== 'string' ? _jsx(DataTableTemporalHeaderCell, { columnName: key, datasourceId: datasourceId, onTimeColumnChange: onTimeColumnChange, isOriginalTimeColumn: isOriginalTimeColumn }) : key,\n      Cell: ({ value }) => {\n        if (value === true) {\n          return BOOL_TRUE_DISPLAY;\n        }\n        if (value === false) {\n          return BOOL_FALSE_DISPLAY;\n        }\n        if (value === null) {\n          return _jsx(CellNull, { children: NULL_DISPLAY });\n        }\n        if (colType === GenericDataType.Temporal &&\n        originalFormattedTimeColumnIndex === -1 &&\n        typeof value === 'number') {\n          return timeFormatter(value);\n        }\n        if (typeof value === 'string' && allowHTML) {\n          return safeHtmlSpan(value);\n        }\n        return String(value);\n      },\n      ...(moreConfigs == null ? void 0 : moreConfigs[key])\n    };\n  }) :\n  [], [\n  colnames,\n  data,\n  coltypes,\n  datasourceId,\n  moreConfigs,\n  originalFormattedTimeColumns]\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}