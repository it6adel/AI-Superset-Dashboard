{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DatasourceType, t, VizType } from '@superset-ui/core';\nimport { ColumnOption } from '@superset-ui/chart-controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const controlPanelSectionsChartOptions = [\nnull,\n{\n  label: t('Chart Options'),\n  expanded: true,\n  controlSetRows: [\n  [\n  'color_scheme',\n  {\n    name: 'rose_area_proportion',\n    config: {\n      type: 'CheckboxControl',\n      label: t('Use Area Proportions'),\n      description: t('Check if the Rose Chart should use segment area instead of ' +\n      'segment radius for proportioning'),\n      default: false,\n      renderTrigger: true\n    }\n  }],\n\n  [\n  {\n    name: 'stacked_style',\n    config: {\n      type: 'SelectControl',\n      label: t('Stacked Style'),\n      renderTrigger: true,\n      choices: [\n      ['stack', t('stack')],\n      ['stream', t('stream')],\n      ['expand', t('expand')]],\n\n      default: 'stack',\n      description: ''\n    }\n  }]]\n\n\n}];\n\nexport const controlPanelSectionsChartOptionsOnlyColorScheme = [\n{\n  label: t('Chart Options'),\n  expanded: true,\n  controlSetRows: [['color_scheme']]\n}];\n\nexport const controlPanelSectionsChartOptionsTable = [\n{\n  label: t('Chart Options'),\n  expanded: true,\n  controlSetRows: [\n  [\n  'metric',\n  'metrics',\n  {\n    name: 'all_columns',\n    config: {\n      type: 'SelectControl',\n      multi: true,\n      label: t('Columns'),\n      default: [],\n      description: t('Columns to display'),\n      optionRenderer: (c) => _jsx(ColumnOption, { column: c, showType: true }),\n      valueKey: 'column_name',\n      mapStateToProps: (stateRef) => {var _stateRef$datasource;return {\n          options: ((_stateRef$datasource = stateRef.datasource) == null ? void 0 : _stateRef$datasource.columns) || []\n        };},\n      freeForm: true\n    }\n  }]]\n\n\n}];\n\nexport const exploreInitialData = {\n  form_data: {\n    datasource: '8__table',\n    metric: 'count',\n    slice_id: 371,\n    viz_type: VizType.Table\n  },\n  slice: {\n    cache_timeout: null,\n    description: null,\n    slice_id: 371,\n    slice_name: 'Age distribution of respondents',\n    is_managed_externally: false,\n    form_data: {\n      datasource: '8__table',\n      metric: 'count',\n      slice_id: 371,\n      viz_type: VizType.Table\n    }\n  },\n  dataset: {\n    id: 8,\n    type: DatasourceType.Table,\n    columns: [{ column_name: 'a' }],\n    metrics: [{ metric_name: 'first' }, { metric_name: 'second' }],\n    column_formats: {},\n    currency_formats: {},\n    verbose_map: {},\n    main_dttm_col: '',\n    datasource_name: '8__table',\n    description: null\n  }\n};\nexport const fallbackExploreInitialData = {\n  form_data: {\n    datasource: '0__table',\n    viz_type: VizType.Table\n  },\n  dataset: {\n    id: 0,\n    type: DatasourceType.Table,\n    columns: [],\n    metrics: [],\n    column_formats: {},\n    currency_formats: {},\n    verbose_map: {},\n    main_dttm_col: '',\n    owners: [],\n    datasource_name: 'missing_datasource',\n    name: 'missing_datasource',\n    description: null\n  },\n  slice: null\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}