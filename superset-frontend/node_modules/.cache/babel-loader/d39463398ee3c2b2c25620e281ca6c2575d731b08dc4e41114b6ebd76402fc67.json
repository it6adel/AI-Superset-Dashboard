{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport { CategoricalColorNamespace, NumberFormats, getColumnLabel, getValueFormatter, tooltipHtml } from '@superset-ui/core';\nimport { LegendOrientation, LegendType } from '../types';\nimport { defaultGrid, defaultYAxis } from '../defaults';\nimport { getLegendProps } from '../utils/series';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { getPercentFormatter } from '../utils/formatters';\nexport default function transformProps(chartProps) {\n  const refs = {};\n  let focusedSeries;\n  const { datasource: { currencyFormats = {}, columnFormats = {} }, formData, height, hooks, legendState = {}, queriesData, theme, width } = chartProps;\n  const { onLegendStateChanged } = hooks;\n  const { colorScheme, column, groupby = [], normalize, showLegend, showValue, sliceId, xAxisFormat, xAxisTitle, yAxisTitle, yAxisFormat } = formData;\n  const { data } = queriesData[0];\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const formatter = (format) => getValueFormatter(column, currencyFormats, columnFormats, format, undefined);\n  const xAxisFormatter = formatter(xAxisFormat);\n  const yAxisFormatter = formatter(yAxisFormat);\n  const percentFormatter = getPercentFormatter(NumberFormats.PERCENT_2_POINT);\n  const groupbySet = new Set(groupby);\n  const xAxisData = Object.keys(data[0]).\n  filter((key) => !groupbySet.has(key)).\n  map((key) => {\n    const array = key.split(' - ').map((value) => parseFloat(value));\n    return `${xAxisFormatter(array[0])} '-' ${xAxisFormatter(array[1])}`;\n  });\n  const barSeries = data.map((datum) => {\n    const seriesName = groupby.length > 0 ?\n    groupby.map((key) => datum[getColumnLabel(key)]).join(', ') :\n    getColumnLabel(column);\n    const seriesData = Object.keys(datum).\n    filter((key) => groupbySet.has(key) === false).\n    map((key) => datum[key]);\n    return {\n      name: seriesName,\n      type: 'bar',\n      data: seriesData,\n      itemStyle: {\n        color: colorFn(seriesName, sliceId)\n      },\n      label: {\n        show: showValue,\n        position: 'top',\n        formatter: (params) => {\n          const { value } = params;\n          return yAxisFormatter.format(value);\n        }\n      }\n    };\n  });\n  const legendOptions = barSeries.map((series) => series.name);\n  if (_isEmpty(legendState)) {\n    legendOptions.forEach((legend) => {\n      legendState[legend] = true;\n    });\n  }\n  const tooltipFormatter = (params) => {\n    const title = params[0].name;\n    const rows = params.map((param) => {\n      const { marker, seriesName, value } = param;\n      return [`${marker}${seriesName}`, yAxisFormatter.format(value)];\n    });\n    if (groupby.length > 0) {\n      const total = params.reduce((acc, param) => acc + param.value, 0);\n      if (!normalize) {\n        rows.forEach((row, i) => row.push(percentFormatter.format(params[i].value / (total || 1))));\n      }\n      const totalRow = ['Total', yAxisFormatter.format(total)];\n      if (!normalize) {\n        totalRow.push(percentFormatter.format(1));\n      }\n      rows.push(totalRow);\n    }\n    return tooltipHtml(rows, title, focusedSeries);\n  };\n  const onFocusedSeries = (index) => {\n    focusedSeries = index;\n  };\n  const echartOptions = {\n    grid: {\n      ...defaultGrid,\n      left: '5%',\n      right: '5%',\n      top: '10%',\n      bottom: '10%'\n    },\n    xAxis: {\n      data: xAxisData,\n      name: xAxisTitle,\n      nameGap: 35,\n      type: 'category',\n      nameLocation: 'middle'\n    },\n    yAxis: {\n      ...defaultYAxis,\n      name: yAxisTitle,\n      nameGap: normalize ? 55 : 40,\n      type: 'value',\n      nameLocation: 'middle',\n      axisLabel: {\n        formatter: (value) => yAxisFormatter.format(value)\n      }\n    },\n    series: barSeries,\n    legend: {\n      ...getLegendProps(LegendType.Scroll, LegendOrientation.Top, showLegend, theme, false, legendState),\n      data: legendOptions\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      trigger: 'axis',\n      formatter: tooltipFormatter\n    }\n  };\n  return {\n    refs,\n    formData,\n    width,\n    height,\n    echartOptions,\n    onFocusedSeries,\n    onLegendStateChanged\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}