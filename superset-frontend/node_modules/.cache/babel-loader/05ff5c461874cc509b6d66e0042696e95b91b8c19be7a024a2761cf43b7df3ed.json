{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { extendedDayjs } from 'src/utils/dates';\nimport { styled, t } from '@superset-ui/core';\nimport { setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { Link } from 'react-router-dom';\nimport ListViewCard from 'src/components/ListViewCard';\nimport { TableTab } from 'src/views/CRUD/types';\nimport { LoadingCards } from 'src/pages/Home';\nimport { CardContainer, CardStyles, getEditedObjects } from 'src/views/CRUD/utils';\nimport Icons from 'src/components/Icons';\nimport SubMenu from './SubMenu';\nimport EmptyState from './EmptyState';\nimport { WelcomeTable } from './types';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Styles = styled.div`\n  .recentCards {\n    max-height: none;\n    grid-gap: ${({ theme }) => `${theme.gridUnit * 4}px`};\n  }\n`;\nconst UNTITLED = t('[Untitled]');\nconst UNKNOWN_TIME = t('Unknown');\nconst getEntityTitle = (entity) => {\n  if ('dashboard_title' in entity)\n  return entity.dashboard_title || UNTITLED;\n  if ('slice_name' in entity)\n  return entity.slice_name || UNTITLED;\n  if ('label' in entity)\n  return entity.label || UNTITLED;\n  return entity.item_title || UNTITLED;\n};\nconst getEntityIcon = (entity) => {\n  if ('sql' in entity)\n  return _jsx(Icons.ConsoleSqlOutlined, {});\n  const url = 'item_url' in entity ? entity.item_url : entity.url;\n  if (url != null && url.includes('dashboard')) {\n    return _jsx(Icons.DashboardOutlined, {});\n  }\n  if (url != null && url.includes('explore')) {\n    return _jsx(Icons.BarChartOutlined, {});\n  }\n  return null;\n};\nconst getEntityUrl = (entity) => {\n  if ('sql' in entity)\n  return `/sqllab?savedQueryId=${entity.id}`;\n  if ('url' in entity)\n  return entity.url;\n  return entity.item_url;\n};\nconst getEntityLastActionOn = (entity) => {\n  if ('time' in entity) {\n    return t('Viewed %s', extendedDayjs(entity.time).fromNow());\n  }\n  let time;\n  if ('changed_on' in entity)\n  time = entity.changed_on;\n  if ('changed_on_utc' in entity)\n  time = entity.changed_on_utc;\n  return t('Modified %s', time == null ? UNKNOWN_TIME : extendedDayjs(time).fromNow());\n};\nexport default function ActivityTable({ activeChild, setActiveChild, activityData, user, isFetchingActivityData }) {var _activityData$activeC;\n  const [editedCards, setEditedCards] = useState();\n  const [isFetchingEditedCards, setIsFetchingEditedCards] = useState(false);\n  const getEditedCards = () => {\n    setIsFetchingEditedCards(true);\n    getEditedObjects(user.userId).then((r) => {\n      setEditedCards([...r.editedChart, ...r.editedDash]);\n      setIsFetchingEditedCards(false);\n    });\n  };\n  useEffect(() => {\n    if (activeChild === TableTab.Edited) {\n      getEditedCards();\n    }\n  }, [activeChild]);\n  const tabs = [\n  {\n    name: TableTab.Edited,\n    label: t('Edited'),\n    onClick: () => {\n      setActiveChild(TableTab.Edited);\n      setItem(LocalStorageKeys.HomepageActivityFilter, TableTab.Edited);\n    }\n  },\n  {\n    name: TableTab.Created,\n    label: t('Created'),\n    onClick: () => {\n      setActiveChild(TableTab.Created);\n      setItem(LocalStorageKeys.HomepageActivityFilter, TableTab.Created);\n    }\n  }];\n\n  if (activityData != null && activityData[TableTab.Viewed]) {\n    tabs.unshift({\n      name: TableTab.Viewed,\n      label: t('Viewed'),\n      onClick: () => {\n        setActiveChild(TableTab.Viewed);\n        setItem(LocalStorageKeys.HomepageActivityFilter, TableTab.Viewed);\n      }\n    });\n  }\n  const renderActivity = () => {var _ref;\n    const activities = (_ref = activeChild === TableTab.Edited ?\n    editedCards :\n    activityData[activeChild]) != null ? _ref : [];\n    return activities.map((entity) => {\n      const url = getEntityUrl(entity);\n      const lastActionOn = getEntityLastActionOn(entity);\n      return _jsx(CardStyles, { children:\n        _jsx(Link, { to: url, children:\n          _jsx(ListViewCard, { cover: _jsx(_Fragment, {}), url: url, title: getEntityTitle(entity), description: lastActionOn, avatar: getEntityIcon(entity), actions: null }) }\n        ) }, url\n      );\n    });\n  };\n  if (isFetchingEditedCards && !editedCards || isFetchingActivityData) {\n    return _jsx(LoadingCards, {});\n  }\n  return _jsxs(Styles, { children: [\n    _jsx(SubMenu, { activeChild: activeChild, tabs: tabs }),\n    Number((_activityData$activeC = activityData[activeChild]) == null ? void 0 : _activityData$activeC.length) > 0 ||\n    activeChild === TableTab.Edited && editedCards != null && editedCards.length ? _jsx(CardContainer, { className: \"recentCards\", children:\n      renderActivity() }\n    ) : _jsx(EmptyState, { tableName: WelcomeTable.Recents, tab: activeChild })] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}