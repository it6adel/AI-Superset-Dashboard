{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo } from 'react';\nimport { t } from '@superset-ui/core';\nimport { formatSelectOptions } from '@superset-ui/chart-controls';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction DefaultSelectRenderer({ current, options, onChange }) {\n  return _jsxs(\"span\", { className: \"dt-select-page-size form-inline\", children: [\n    t('Show'), ' ',\n    _jsx(\"select\", { className: \"form-control input-sm\", value: current, onBlur: () => {}, onChange: (e) => {\n        onChange(Number(e.target.value));\n      }, children:\n      options.map((option) => {\n        const [size, text] = Array.isArray(option) ?\n        option :\n        [option, option];\n        const sizeLabel = size === 0 ? t('all') : size;\n        return _jsx(\"option\", { \"aria-label\": t('Show %s entries', sizeLabel), value: size, children:\n          text }, size\n        );\n      }) }\n    ), ' ',\n    t('entries')] }\n  );\n}\nfunction getOptionValue(x) {\n  return Array.isArray(x) ? x[0] : x;\n}\nexport default /*#__PURE__*/memo(function SelectPageSize({ total, options: sizeOptions, current: currentSize, selectRenderer, onChange }) {\n  const sizeOptionValues = sizeOptions.map(getOptionValue);\n  let options = [...sizeOptions];\n  // insert current size to list\n  if (currentSize !== undefined && (\n  currentSize !== total || !sizeOptionValues.includes(0)) &&\n  !sizeOptionValues.includes(currentSize)) {\n    options = [...sizeOptions];\n    options.splice(sizeOptionValues.findIndex((x) => x > currentSize), 0, formatSelectOptions([currentSize])[0]);\n  }\n  const current = currentSize === undefined ? sizeOptionValues[0] : currentSize;\n  const SelectRenderer = selectRenderer || DefaultSelectRenderer;\n  return _jsx(SelectRenderer, { current: current, options: options, onChange: onChange });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}