{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState } from 'react';\nimport { css } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport { Input } from 'src/components/Input';\nimport { FormItem } from 'src/components/Form';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst LABELS = {\n  CLIENT_ID: 'Client ID',\n  SECRET: 'Client Secret',\n  AUTH_URI: 'Authorization Request URI',\n  TOKEN_URI: 'Token Request URI',\n  SCOPE: 'Scope'\n};\nconst collapseStyle = (theme) => css`\n  .ant-collapse-header {\n    padding-bottom: ${theme.gridUnit * 1.5}px !important;\n    padding-top: ${theme.gridUnit * 1.5}px !important;\n  }\n  .anticon.ant-collapse-arrow {\n    top: 0 !important;\n  }\n`;\nexport const OAuth2ClientField = ({ changeMethods, db, default_value: defaultValue }) => {var _encryptedExtra$oauth, _encryptedExtra$oauth2, _encryptedExtra$oauth3, _encryptedExtra$oauth4, _encryptedExtra$oauth5;\n  const encryptedExtra = JSON.parse((db == null ? void 0 : db.masked_encrypted_extra) || '{}');\n  const [oauth2ClientInfo, setOauth2ClientInfo] = useState({\n    id: ((_encryptedExtra$oauth = encryptedExtra.oauth2_client_info) == null ? void 0 : _encryptedExtra$oauth.id) || '',\n    secret: ((_encryptedExtra$oauth2 = encryptedExtra.oauth2_client_info) == null ? void 0 : _encryptedExtra$oauth2.secret) || '',\n    authorization_request_uri: ((_encryptedExtra$oauth3 = encryptedExtra.oauth2_client_info) == null ? void 0 : _encryptedExtra$oauth3.authorization_request_uri) || (\n    defaultValue == null ? void 0 : defaultValue.authorization_request_uri) ||\n    '',\n    token_request_uri: ((_encryptedExtra$oauth4 = encryptedExtra.oauth2_client_info) == null ? void 0 : _encryptedExtra$oauth4.token_request_uri) || (\n    defaultValue == null ? void 0 : defaultValue.token_request_uri) ||\n    '',\n    scope: ((_encryptedExtra$oauth5 = encryptedExtra.oauth2_client_info) == null ? void 0 : _encryptedExtra$oauth5.scope) || (defaultValue == null ? void 0 : defaultValue.scope) || ''\n  });\n  const handleChange = (key) => (e) => {\n    const updatedInfo = {\n      ...oauth2ClientInfo,\n      [key]: e.target.value\n    };\n    setOauth2ClientInfo(updatedInfo);\n    const event = {\n      target: {\n        type: 'object',\n        name: 'oauth2_client_info',\n        value: updatedInfo\n      }\n    };\n    changeMethods.onParametersChange(event);\n  };\n  return _jsx(Collapse, { children:\n    _jsxs(Collapse.Panel, { header: \"OAuth2 client information\", css: collapseStyle, children: [\n      _jsx(FormItem, { label: LABELS.CLIENT_ID, children:\n        _jsx(Input, { value: oauth2ClientInfo.id, onChange: handleChange('id') }) }\n      ),\n      _jsx(FormItem, { label: LABELS.SECRET, children:\n        _jsx(Input, { type: \"password\", value: oauth2ClientInfo.secret, onChange: handleChange('secret') }) }\n      ),\n      _jsx(FormItem, { label: LABELS.AUTH_URI, children:\n        _jsx(Input, { placeholder: \"https://\", value: oauth2ClientInfo.authorization_request_uri, onChange: handleChange('authorization_request_uri') }) }\n      ),\n      _jsx(FormItem, { label: LABELS.TOKEN_URI, children:\n        _jsx(Input, { placeholder: \"https://\", value: oauth2ClientInfo.token_request_uri, onChange: handleChange('token_request_uri') }) }\n      ),\n      _jsx(FormItem, { label: LABELS.SCOPE, children:\n        _jsx(Input, { value: oauth2ClientInfo.scope, onChange: handleChange('scope') }) }\n      )] }, \"1\"\n    ) }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}