{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\nimport rison from 'rison';\nimport Modal from 'src/components/Modal';\nimport AsyncSelect from 'src/components/Select/AsyncSelect';\nimport { FormLabel } from 'src/components/Form';\nimport { t, styled, SupersetClient } from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport { Input } from 'antd'; // TODO: Remove antd\nimport { Divider } from 'src/components/Divider';\nimport Button from 'src/components/Button';\nimport { fetchObjectsByTagIds } from 'src/features/tags/tags';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledModalBody = styled.div`\n  .ant-select-dropdown {\n    max-height: ${({ theme }) => theme.gridUnit * 40}px;\n  }\n  .tag-input {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  }\n`;\nexport var TaggableResources;\n(function (TaggableResources) {\n  TaggableResources[\"Chart\"] = \"chart\";\n  TaggableResources[\"Dashboard\"] = \"dashboard\";\n  TaggableResources[\"SavedQuery\"] = \"query\";\n})(TaggableResources || (TaggableResources = {}));\nconst TagModal = ({ show, onHide, editTag, refreshData, addSuccessToast, addDangerToast, clearOnHide = false }) => {\n  const [dashboardsToTag, setDashboardsToTag] = useState([]);\n  const [chartsToTag, setChartsToTag] = useState([]);\n  const [savedQueriesToTag, setSavedQueriesToTag] = useState([]);\n  const [tagName, setTagName] = useState('');\n  const [description, setDescription] = useState('');\n  const isEditMode = !!editTag;\n  const modalTitle = isEditMode ? 'Edit Tag' : 'Create Tag';\n  const clearResources = () => {\n    setDashboardsToTag([]);\n    setChartsToTag([]);\n    setSavedQueriesToTag([]);\n  };\n  const clearTagForm = () => {\n    setTagName('');\n    setDescription('');\n    setDashboardsToTag([]);\n    setChartsToTag([]);\n    setSavedQueriesToTag([]);\n  };\n  useEffect(() => {\n    const resourceMap = {\n      [TaggableResources.Dashboard]: [],\n      [TaggableResources.Chart]: [],\n      [TaggableResources.SavedQuery]: []\n    };\n    const updateResourceOptions = ({ id, name, type }) => {\n      const resourceOptions = resourceMap[type];\n      if (resourceOptions) {\n        resourceOptions.push({\n          value: id,\n          label: name,\n          key: id\n        });\n      }\n    };\n    clearResources();\n    if (isEditMode) {\n      fetchObjectsByTagIds({ tagIds: [editTag.id], types: null }, (data) => {\n        data.forEach(updateResourceOptions);\n        setDashboardsToTag(resourceMap[TaggableResources.Dashboard]);\n        setChartsToTag(resourceMap[TaggableResources.Chart]);\n        setSavedQueriesToTag(resourceMap[TaggableResources.SavedQuery]);\n      }, (error) => {\n        addDangerToast('Error Fetching Tagged Objects');\n      });\n      setTagName(editTag.name);\n      setDescription(editTag.description);\n    }\n  }, [editTag]);\n  const loadData = async (search, page, pageSize, columns, filterColumn, orderColumn, endpoint) => {\n    const queryParams = rison.encode({\n      columns,\n      filters: [\n      {\n        col: filterColumn,\n        opr: 'ct',\n        value: search\n      }],\n\n      page,\n      order_column: orderColumn\n    });\n    const { json } = await SupersetClient.get({\n      endpoint: `/api/v1/${endpoint}/?q=${queryParams}`\n    });\n    const { result, count } = json;\n    return {\n      data: result.map((item) => ({\n        value: item.id,\n        label: item[filterColumn]\n      })),\n      totalCount: count\n    };\n  };\n  const loadCharts = async (search, page, pageSize) => loadData(search, page, pageSize, ['id', 'slice_name'], 'slice_name', 'slice_name', 'chart');\n  const loadDashboards = async (search, page, pageSize) => loadData(search, page, pageSize, ['id', 'dashboard_title'], 'dashboard_title', 'dashboard_title', 'dashboard');\n  const loadQueries = async (search, page, pageSize) => loadData(search, page, pageSize, ['id', 'label'], 'label', 'label', 'saved_query');\n  const handleOptionChange = (resource, data) => {\n    if (resource === TaggableResources.Dashboard)\n    setDashboardsToTag(data);else\n    if (resource === TaggableResources.Chart)\n    setChartsToTag(data);else\n    if (resource === TaggableResources.SavedQuery)\n    setSavedQueriesToTag(data);\n  };\n  const handleTagNameChange = (ev) => setTagName(ev.target.value);\n  const handleDescriptionChange = (ev) => setDescription(ev.target.value);\n  const onSave = () => {\n    const dashboards = dashboardsToTag.map((dash) => ['dashboard', dash.value]);\n    const charts = chartsToTag.map((chart) => ['chart', chart.value]);\n    const savedQueries = savedQueriesToTag.map((q) => ['query', q.value]);\n    if (isEditMode) {\n      SupersetClient.put({\n        endpoint: `/api/v1/tag/${editTag.id}`,\n        jsonPayload: {\n          description,\n          name: tagName,\n          objects_to_tag: [...dashboards, ...charts, ...savedQueries]\n        }\n      }).\n      then(({ json = {} }) => {\n        refreshData();\n        clearTagForm();\n        addSuccessToast(t('Tag updated'));\n        onHide();\n      }).\n      catch((err) => {\n        addDangerToast(err.message || 'Error Updating Tag');\n      });\n    } else\n    {\n      SupersetClient.post({\n        endpoint: `/api/v1/tag/`,\n        jsonPayload: {\n          description,\n          name: tagName,\n          objects_to_tag: [...dashboards, ...charts, ...savedQueries]\n        }\n      }).\n      then(({ json = {} }) => {\n        refreshData();\n        clearTagForm();\n        addSuccessToast(t('Tag created'));\n        onHide();\n      }).\n      catch((err) => addDangerToast(err.message || 'Error Creating Tag'));\n    }\n  };\n  return _jsx(Modal, { title: modalTitle, onHide: () => {\n      if (clearOnHide)\n      clearTagForm();\n      onHide();\n    }, show: show, footer: _jsxs(\"div\", { children: [\n      _jsx(Button, { buttonStyle: \"secondary\", onClick: onHide, children:\n        t('Cancel') }\n      ),\n      _jsx(Button, { buttonStyle: \"primary\", onClick: onSave, children:\n        t('Save') }\n      )] }\n    ), children:\n    _jsxs(StyledModalBody, { children: [\n      _jsx(FormLabel, { children: t('Tag name') }),\n      _jsx(Input, { className: \"tag-input\", onChange: handleTagNameChange, placeholder: t('Name of your tag'), value: tagName }),\n      _jsx(FormLabel, { children: t('Description') }),\n      _jsx(Input, { className: \"tag-input\", onChange: handleDescriptionChange, placeholder: t('Add description of your tag'), value: description }),\n      _jsx(Divider, {}),\n      _jsx(AsyncSelect, { className: \"tag-input\", ariaLabel: t('Select dashboards'), mode: \"multiple\", name: \"dashboards\"\n        // @ts-ignore\n        , value: dashboardsToTag, options: loadDashboards, onChange: (value) => handleOptionChange(TaggableResources.Dashboard, value), header: _jsx(FormLabel, { children: t('Dashboards') }), allowClear: true }),\n      _jsx(AsyncSelect, { className: \"tag-input\", ariaLabel: t('Select charts'), mode: \"multiple\", name: \"charts\"\n        // @ts-ignore\n        , value: chartsToTag, options: loadCharts, onChange: (value) => handleOptionChange(TaggableResources.Chart, value), header: _jsx(FormLabel, { children: t('Charts') }), allowClear: true }),\n      _jsx(AsyncSelect, { className: \"tag-input\", ariaLabel: t('Select saved queries'), mode: \"multiple\", name: \"savedQueries\"\n        // @ts-ignore\n        , value: savedQueriesToTag, options: loadQueries, onChange: (value) => handleOptionChange(TaggableResources.SavedQuery, value), header: _jsx(FormLabel, { children: t('Saved queries') }), allowClear: true })] }\n    ) }\n  );\n};\nexport default TagModal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}