{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createRef, PureComponent } from 'react';\nimport Select from 'src/components/Select/Select';\nimport { t, styled } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport Button from 'src/components/Button';\nimport { Input } from 'src/components/Input';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { FormLabel } from 'src/components/Form';\nimport { propertyComparator } from 'src/components/Select/utils';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledModalTrigger = styled(ModalTrigger)`\n  .antd5-modal-body {\n    overflow: visible;\n  }\n`;\nconst RefreshWarningContainer = styled.div`\n  margin-top: ${({ theme }) => theme.gridUnit * 6}px;\n`;\nconst StyledDiv = styled.div`\n  display: flex;\n  margin-top: ${({ theme }) => theme.gridUnit * 3}px;\n`;\nconst InnerStyledDiv = styled.div`\n  width: 30%;\n  margin: auto;\n`;\nclass RefreshIntervalModal extends PureComponent {\n\n\n\n\n\n  constructor(props) {\n    super(props);this.modalRef = void 0;\n    this.modalRef = /*#__PURE__*/createRef();\n    this.state = {\n      refreshFrequency: props.refreshFrequency,\n      custom_hour: 0,\n      custom_min: 0,\n      custom_sec: 0,\n      custom_block: false\n    };\n    this.handleFrequencyChange = this.handleFrequencyChange.bind(this);\n    this.onSave = this.onSave.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n  }\n  onSave() {var _this$modalRef, _this$modalRef$curren;\n    this.props.onChange(this.state.refreshFrequency, this.props.editMode);\n    (_this$modalRef = this.modalRef) == null ? void 0 : (_this$modalRef$curren = _this$modalRef.current) == null ? void 0 : _this$modalRef$curren.close();\n    this.props.addSuccessToast(t('Refresh interval saved'));\n  }\n  onCancel() {var _this$modalRef2, _this$modalRef2$curre;\n    this.setState({\n      refreshFrequency: this.props.refreshFrequency\n    });\n    (_this$modalRef2 = this.modalRef) == null ? void 0 : (_this$modalRef2$curre = _this$modalRef2.current) == null ? void 0 : _this$modalRef2$curre.close();\n  }\n  handleFrequencyChange(value) {\n    const { refreshIntervalOptions } = this.props;\n    this.setState({\n      refreshFrequency: value || refreshIntervalOptions[0][0]\n    });\n    this.setState({\n      custom_block: value === -1\n    });\n    if (value === -1) {\n      this.setState({\n        custom_hour: 0,\n        custom_min: 0,\n        custom_sec: 0\n      });\n    }\n  }\n  onSaveValue(value) {var _this$modalRef3, _this$modalRef3$curre;\n    this.props.onChange(value, this.props.editMode);\n    (_this$modalRef3 = this.modalRef) == null ? void 0 : (_this$modalRef3$curre = _this$modalRef3.current) == null ? void 0 : _this$modalRef3$curre.close();\n    this.props.addSuccessToast(t('Refresh interval saved'));\n  }\n  createIntervalOptions(refreshIntervalOptions) {\n    const refresh_options = [];\n    refresh_options.push({ value: -1, label: t('Custom interval') });\n    refresh_options.push(...refreshIntervalOptions.map((option) => ({\n      value: option[0],\n      label: t(option[1])\n    })));\n    return refresh_options;\n  }\n  min_sec_options(min_or_sec) {\n    return Array.from({ length: 60 }, (_, i) => ({\n      value: i,\n      label: `${i} ${min_or_sec}`\n    }));\n  }\n  refresh_custom_val(custom_block, custom_hour, custom_min, custom_sec) {\n    if (custom_block === true) {\n      // Get hour value\n      const hour_value = custom_hour;\n      // Get minutes value\n      const minute_value = custom_min;\n      // Get seconds value\n      const second_value = custom_sec;\n      if (hour_value < 0 ||\n      minute_value < 0 ||\n      second_value < 0 ||\n      minute_value >= 60 ||\n      second_value >= 60) {\n        this.props.addSuccessToast(t('Put positive values and valid minute and second value less than 60'));\n      }\n      // Convert given input to seconds\n      const value = hour_value * 60 * 60 + minute_value * 60 + second_value;\n      if (value === 0) {\n        this.props.addSuccessToast(t('Put some positive value greater than 0'));\n        return;\n      }\n      this.handleFrequencyChange(value);\n      this.onSaveValue(value);\n    } else\n\n    this.onSave();\n  }\n  render() {\n    const { refreshLimit = 0, refreshWarning, editMode, refreshIntervalOptions } = this.props;\n    const { refreshFrequency = 0, custom_hour = 0, custom_min = 0, custom_sec = 0, custom_block = false } = this.state;\n    const showRefreshWarning = !!refreshFrequency && !!refreshWarning && refreshFrequency < refreshLimit;\n    return _jsx(StyledModalTrigger, { ref: this.modalRef, triggerNode: this.props.triggerNode, modalTitle: t('Refresh interval'), modalBody: _jsxs(\"div\", { children: [\n        _jsxs(\"div\", { id: \"refresh_from_dropdown\", children: [\n          _jsx(FormLabel, { children:\n            _jsx(\"b\", { children: t('Refresh frequency') }) }\n          ),\n          _jsx(Select, { ariaLabel: t('Refresh interval'), options: this.createIntervalOptions(refreshIntervalOptions), value: refreshFrequency, onChange: this.handleFrequencyChange, sortComparator: propertyComparator('value') })] }\n        ),\n        custom_block && _jsxs(StyledDiv, { children: [\n          _jsxs(InnerStyledDiv, { children: [\n            _jsx(FormLabel, { children:\n              _jsx(\"b\", { children: t('HOUR') }) }\n            ), ' ',\n            _jsx(\"br\", {}),\n            _jsx(Input, { type: \"number\", min: \"0\", className: \"form-control input-sm\", placeholder: t('Type a number'), onChange: (event) => {\n                this.setState({\n                  custom_hour: Number(event.target.value)\n                });\n              }, value: custom_hour })] }\n          ),\n          _jsxs(InnerStyledDiv, { children: [\n            _jsx(FormLabel, { children:\n              _jsx(\"b\", { children: t('MINUTE') }) }\n            ), ' ',\n            _jsx(\"br\", {}),\n            _jsx(Select, { ariaLabel: t('Minutes value'), options: this.min_sec_options('minutes'), value: custom_min, onChange: (value) => {\n                this.setState({\n                  custom_min: value\n                });\n              }, sortComparator: propertyComparator('value') })] }\n          ),\n          _jsxs(InnerStyledDiv, { children: [\n            _jsx(FormLabel, { children:\n              _jsx(\"b\", { children: t('SECOND') }) }\n            ), ' ',\n            _jsx(\"br\", {}),\n            _jsx(Select, { ariaLabel: t('Seconds value'), options: this.min_sec_options('seconds'), value: custom_sec, onChange: (value) => {\n                this.setState({\n                  custom_sec: value\n                });\n              }, sortComparator: propertyComparator('value') })] }\n          )] }\n        ),\n        showRefreshWarning && _jsx(RefreshWarningContainer, { children:\n          _jsx(Alert, { type: \"warning\", message: _jsxs(_Fragment, { children: [\n              _jsx(\"div\", { children: refreshWarning }),\n              _jsx(\"br\", {}),\n              _jsx(\"strong\", { children: t('Are you sure you want to proceed?') })] }\n            ) }) }\n        )] }\n      ), modalFooter: _jsxs(_Fragment, { children: [\n        _jsx(Button, { onClick: this.onCancel, buttonSize: \"small\", children:\n          t('Cancel') }\n        ),\n        _jsx(Button, { buttonStyle: \"primary\", buttonSize: \"small\", onClick: () => this.refresh_custom_val(custom_block, custom_hour, custom_min, custom_sec), children:\n          editMode ? t('Save') : t('Save for this session') }\n        )] }\n      ) });\n  }\n}RefreshIntervalModal.defaultProps = { refreshLimit: 0, refreshWarning: null };\nexport default RefreshIntervalModal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}