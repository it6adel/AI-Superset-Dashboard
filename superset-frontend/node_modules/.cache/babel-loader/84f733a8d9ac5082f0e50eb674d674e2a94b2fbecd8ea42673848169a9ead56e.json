{"ast":null,"code":"import { HexagonLayer } from '@deck.gl/aggregation-layers';\nimport { t, CategoricalColorNamespace } from '@superset-ui/core';\nimport { commonLayerProps, getAggFunc } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction setTooltipContent(o) {\n  return _jsxs(\"div\", { className: \"deckgl-tooltip\", children: [\n    _jsx(TooltipRow, { label: t('Centroid (Longitude and Latitude): '), value: `(${o.coordinate[0]}, ${o.coordinate[1]})` }),\n    _jsx(TooltipRow\n    // eslint-disable-next-line prefer-template\n    , { label: t('Height') + ': ', value: `${o.object.elevationValue}` })] }\n  );\n}\nexport function getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const appliedScheme = fd.color_scheme;\n  const colorScale = CategoricalColorNamespace.getScale(appliedScheme);\n  const colorRange = colorScale.\n  range().\n  map((color) => hexToRGB(color));\n  let data = payload.data.features;\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n  const aggFunc = getAggFunc(fd.js_agg_function, (p) => p == null ? void 0 : p.weight);\n  return new HexagonLayer({\n    id: `hex-layer-${fd.slice_id}`,\n    data,\n    radius: fd.grid_size,\n    extruded: fd.extruded,\n    colorRange,\n    outline: false,\n    // @ts-ignore\n    getElevationValue: aggFunc,\n    // @ts-ignore\n    getColorValue: aggFunc,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent)\n  });\n}\nfunction getPoints(data) {\n  return data.map((d) => d.position);\n}\nexport default createDeckGLComponent(getLayer, getPoints);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}