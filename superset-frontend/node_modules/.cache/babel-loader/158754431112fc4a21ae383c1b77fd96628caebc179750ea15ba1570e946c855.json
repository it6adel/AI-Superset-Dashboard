{"ast":null,"code":"import _uniqWith from \"lodash/uniqWith\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useRef, useState, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport cx from 'classnames';\nimport { styled, t, usePrevious } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { useChartLayoutItems } from 'src/dashboard/util/useChartLayoutItems';\nimport Badge from 'src/components/Badge';\nimport DetailsPanelPopover from './DetailsPanel';\nimport { IndicatorStatus, selectIndicatorsForChart, selectNativeIndicatorsForChart } from '../nativeFilters/selectors';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledFilterCount = styled.div`\n  ${({ theme }) => `\n    display: flex;\n    justify-items: center;\n    align-items: center;\n    cursor: pointer;\n    margin-right: ${theme.gridUnit}px;\n    padding-left: ${theme.gridUnit * 2}px;\n    padding-right: ${theme.gridUnit * 2}px;\n    background: ${theme.colors.grayscale.light4};\n    border-radius: 4px;\n    height: 100%;\n    .anticon {\n      vertical-align: middle;\n      color: ${theme.colors.grayscale.base};\n      &:hover {\n        color: ${theme.colors.grayscale.light1};\n      }\n    }\n\n    .incompatible-count {\n      font-size: ${theme.typography.sizes.s}px;\n    }\n    &:focus-visible {\n      outline: 2px solid ${theme.colors.primary.dark2};\n    }\n  `}\n`;\nconst StyledBadge = styled(Badge)`\n  ${({ theme }) => `\n    margin-left: ${theme.gridUnit * 2}px;\n    &>sup.antd5-badge-count {\n      padding: 0 ${theme.gridUnit}px;\n      min-width: ${theme.gridUnit * 4}px;\n      height: ${theme.gridUnit * 4}px;\n      line-height: 1.5;\n      font-weight: ${theme.typography.weights.medium};\n      font-size: ${theme.typography.sizes.s - 1}px;\n      box-shadow: none;\n      padding: 0 ${theme.gridUnit}px;\n    }\n  `}\n`;\nconst sortByStatus = (indicators) => {\n  const statuses = [\n  IndicatorStatus.Applied,\n  IndicatorStatus.Unset,\n  IndicatorStatus.Incompatible];\n\n  return indicators.sort((a, b) => statuses.indexOf(a.status) -\n  statuses.indexOf(b.status));\n};\nconst indicatorsInitialState = [];\nexport const FiltersBadge = ({ chartId }) => {\n  const dispatch = useDispatch();\n  const datasources = useSelector((state) => state.datasources);\n  const dashboardFilters = useSelector((state) => state.dashboardFilters);\n  const nativeFilters = useSelector((state) => {var _state$nativeFilters;return (_state$nativeFilters = state.nativeFilters) == null ? void 0 : _state$nativeFilters.filters;});\n  const chartConfiguration = useSelector((state) => {var _state$dashboardInfo$;return (_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.chart_configuration;});\n  const chart = useSelector((state) => state.charts[chartId]);\n  const chartLayoutItems = useChartLayoutItems();\n  const dataMask = useSelector((state) => state.dataMask);\n  const [nativeIndicators, setNativeIndicators] = useState(indicatorsInitialState);\n  const [dashboardIndicators, setDashboardIndicators] = useState(indicatorsInitialState);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const popoverContentRef = useRef(null);\n  const popoverTriggerRef = useRef(null);\n  const onHighlightFilterSource = useCallback((path) => {\n    dispatch(setDirectPathToChild(path));\n  }, [dispatch]);\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      setPopoverVisible(true);\n    }\n  };\n  const prevChart = usePrevious(chart);\n  const prevChartStatus = prevChart == null ? void 0 : prevChart.chartStatus;\n  const prevDashboardFilters = usePrevious(dashboardFilters);\n  const prevDatasources = usePrevious(datasources);\n  const showIndicators = (chart == null ? void 0 : chart.chartStatus) && ['rendered', 'success'].includes(chart.chartStatus);\n  useEffect(() => {\n    if (popoverVisible) {\n      setTimeout(() => {var _popoverContentRef$cu;\n        popoverContentRef == null ? void 0 : (_popoverContentRef$cu = popoverContentRef.current) == null ? void 0 : _popoverContentRef$cu.focus({ preventScroll: true });\n      });\n    }\n  }, [popoverVisible]);\n  useEffect(() => {\n    if (!showIndicators && dashboardIndicators.length > 0) {\n      setDashboardIndicators(indicatorsInitialState);\n    } else\n    if (prevChartStatus !== 'success') {var _chart$queriesRespons, _chart$queriesRespons2, _prevChart$queriesRes, _prevChart$queriesRes2, _chart$queriesRespons3, _chart$queriesRespons4, _prevChart$queriesRes3, _prevChart$queriesRes4;\n      if ((chart == null ? void 0 : (_chart$queriesRespons = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons2 = _chart$queriesRespons[0]) == null ? void 0 : _chart$queriesRespons2.rejected_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes2 = _prevChart$queriesRes[0]) == null ? void 0 : _prevChart$queriesRes2.rejected_filters) ||\n      (chart == null ? void 0 : (_chart$queriesRespons3 = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons4 = _chart$queriesRespons3[0]) == null ? void 0 : _chart$queriesRespons4.applied_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes3 = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes4 = _prevChart$queriesRes3[0]) == null ? void 0 : _prevChart$queriesRes4.applied_filters) ||\n      dashboardFilters !== prevDashboardFilters ||\n      datasources !== prevDatasources) {\n        setDashboardIndicators(selectIndicatorsForChart(chartId, dashboardFilters, datasources, chart));\n      }\n    }\n  }, [\n  chart,\n  chartId,\n  dashboardFilters,\n  dashboardIndicators.length,\n  datasources,\n  prevChart == null ? void 0 : prevChart.queriesResponse,\n  prevChartStatus,\n  prevDashboardFilters,\n  prevDatasources,\n  showIndicators]\n  );\n  const prevNativeFilters = usePrevious(nativeFilters);\n  const prevChartLayoutItems = usePrevious(chartLayoutItems);\n  const prevDataMask = usePrevious(dataMask);\n  const prevChartConfig = usePrevious(chartConfiguration);\n  useEffect(() => {\n    if (!showIndicators && nativeIndicators.length > 0) {\n      setNativeIndicators(indicatorsInitialState);\n    } else\n    if (prevChartStatus !== 'success') {var _chart$queriesRespons5, _chart$queriesRespons6, _prevChart$queriesRes5, _prevChart$queriesRes6, _chart$queriesRespons7, _chart$queriesRespons8, _prevChart$queriesRes7, _prevChart$queriesRes8;\n      if ((chart == null ? void 0 : (_chart$queriesRespons5 = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons6 = _chart$queriesRespons5[0]) == null ? void 0 : _chart$queriesRespons6.rejected_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes5 = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes6 = _prevChart$queriesRes5[0]) == null ? void 0 : _prevChart$queriesRes6.rejected_filters) ||\n      (chart == null ? void 0 : (_chart$queriesRespons7 = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons8 = _chart$queriesRespons7[0]) == null ? void 0 : _chart$queriesRespons8.applied_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes7 = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes8 = _prevChart$queriesRes7[0]) == null ? void 0 : _prevChart$queriesRes8.applied_filters) ||\n      nativeFilters !== prevNativeFilters ||\n      chartLayoutItems !== prevChartLayoutItems ||\n      dataMask !== prevDataMask ||\n      prevChartConfig !== chartConfiguration) {\n        setNativeIndicators(selectNativeIndicatorsForChart(nativeFilters, dataMask, chartId, chart, chartLayoutItems, chartConfiguration));\n      }\n    }\n  }, [\n  chart,\n  chartId,\n  chartConfiguration,\n  dataMask,\n  nativeFilters,\n  nativeIndicators.length,\n  prevChart == null ? void 0 : prevChart.queriesResponse,\n  prevChartConfig,\n  prevChartStatus,\n  prevDataMask,\n  prevNativeFilters,\n  showIndicators,\n  chartLayoutItems,\n  prevChartLayoutItems]\n  );\n  const indicators = useMemo(() => _uniqWith(sortByStatus([...dashboardIndicators, ...nativeIndicators]), (ind1, ind2) => ind1.column === ind2.column &&\n  ind1.name === ind2.name && (\n  ind1.status !== IndicatorStatus.Applied ||\n  ind2.status !== IndicatorStatus.Applied)), [dashboardIndicators, nativeIndicators]);\n  const appliedCrossFilterIndicators = useMemo(() => indicators.filter((indicator) => indicator.status === IndicatorStatus.CrossFilterApplied), [indicators]);\n  const appliedIndicators = useMemo(() => indicators.filter((indicator) => indicator.status === IndicatorStatus.Applied), [indicators]);\n  const filterCount = appliedIndicators.length + appliedCrossFilterIndicators.length;\n  if (!appliedCrossFilterIndicators.length && !appliedIndicators.length) {\n    return null;\n  }\n  return _jsx(DetailsPanelPopover, { appliedCrossFilterIndicators: appliedCrossFilterIndicators, appliedIndicators: appliedIndicators, onHighlightFilterSource: onHighlightFilterSource, setPopoverVisible: setPopoverVisible, popoverVisible: popoverVisible, popoverContentRef: popoverContentRef, popoverTriggerRef: popoverTriggerRef, children:\n    _jsxs(StyledFilterCount, { \"aria-label\": t('Applied filters (%s)', filterCount), \"aria-haspopup\": \"true\", role: \"button\", ref: popoverTriggerRef, className: cx('filter-counts', !!appliedCrossFilterIndicators.length && 'has-cross-filters'), tabIndex: 0, onKeyDown: handleKeyDown, children: [\n      _jsx(Icons.FilterOutlined, { iconSize: \"m\" }),\n      _jsx(StyledBadge, { className: \"applied-count\", count: filterCount, showZero: true })] }\n    ) }\n  );\n};\nexport default /*#__PURE__*/memo(FiltersBadge);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}