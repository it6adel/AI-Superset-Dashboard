{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo } from 'react';\n\nimport { Behavior, css, extractQueryFields, getChartMetadataRegistry, removeHTMLTags, styled, t } from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport { Menu } from 'src/components/Menu';\nimport { getSubmenuYOffset } from '../utils';\nimport { MenuItemTooltip } from '../DisabledMenuItemTooltip';\nimport { MenuItemWithTruncation } from '../MenuItemWithTruncation';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst DRILL_TO_DETAIL = t('Drill to detail');\nconst DRILL_TO_DETAIL_BY = t('Drill to detail by');\nconst DISABLED_REASONS = {\n  DATABASE: t('Drill to detail is disabled for this database. Change the database settings to enable it.'),\n  NO_AGGREGATIONS: t('Drill to detail is disabled because this chart does not group data by dimension value.'),\n  NO_FILTERS: t('Right-click on a dimension value to drill to detail by that value.'),\n  NOT_SUPPORTED: t('Drill to detail by value is not yet supported for this chart type.')\n};\nconst DisabledMenuItem = ({ children, menuKey, ...rest }) => _jsx(Menu.Item, { disabled: true, ...rest, children:\n  _jsx(\"div\", { css: css`\n        white-space: normal;\n        max-width: 160px;\n      `, children:\n    children }\n  ) }, menuKey\n);\nconst Filter = ({ children, stripHTML = false }) => {\n  const content = stripHTML && typeof children === 'string' ?\n  removeHTMLTags(children) :\n  children;\n  return _jsx(\"span\", { children: content });\n};\nconst StyledFilter = styled(Filter)`\n  ${({ theme }) => `\n     font-weight: ${theme.typography.weights.bold};\n     color: ${theme.colors.primary.base};\n   `}\n`;\nconst DrillDetailMenuItems = ({ formData, filters = [], isContextMenu = false, contextMenuY = 0, onSelection = () => null, onClick = () => null, submenuIndex = 0, setFilters, setShowModal, key, ...props }) => {\n  const drillToDetailDisabled = useSelector(({ datasources }) => {var _datasources$formData, _datasources$formData2;return (_datasources$formData = datasources[formData.datasource]) == null ? void 0 : (_datasources$formData2 = _datasources$formData.database) == null ? void 0 : _datasources$formData2.disable_drill_to_detail;});\n  const openModal = useCallback((filters, event) => {\n    onClick(event);\n    onSelection();\n    setFilters(filters);\n    setShowModal(true);\n  }, [onClick, onSelection]);\n  // Check for Behavior.DRILL_TO_DETAIL to tell if plugin handles the `contextmenu`\n  // event for dimensions.  If it doesn't, tell the user that drill to detail by\n  // dimension is not supported.  If it does, and the `contextmenu` handler didn't\n  // pass any filters, tell the user that they didn't select a dimension.\n  const handlesDimensionContextMenu = useMemo(() => {var _getChartMetadataRegi;return (_getChartMetadataRegi = getChartMetadataRegistry().\n    get(formData.viz_type)) == null ? void 0 : _getChartMetadataRegi.\n    behaviors.find((behavior) => behavior === Behavior.DrillToDetail);}, [formData.viz_type]);\n  // Check metrics to see if chart's current configuration lacks\n  // aggregations, in which case Drill to Detail should be disabled.\n  const noAggregations = useMemo(() => {\n    const { metrics } = extractQueryFields(formData);\n    return _isEmpty(metrics);\n  }, [formData]);\n  // Ensure submenu doesn't appear offscreen\n  const submenuYOffset = useMemo(() => getSubmenuYOffset(contextMenuY, filters.length > 1 ? filters.length + 1 : filters.length, submenuIndex), [contextMenuY, filters.length, submenuIndex]);\n  let drillDisabled;\n  let drillByDisabled;\n  if (drillToDetailDisabled) {\n    drillDisabled = DISABLED_REASONS.DATABASE;\n    drillByDisabled = DISABLED_REASONS.DATABASE;\n  } else\n  if (handlesDimensionContextMenu) {\n    if (noAggregations) {\n      drillDisabled = DISABLED_REASONS.NO_AGGREGATIONS;\n      drillByDisabled = DISABLED_REASONS.NO_AGGREGATIONS;\n    } else\n    if (!(filters != null && filters.length)) {\n      drillByDisabled = DISABLED_REASONS.NO_FILTERS;\n    }\n  } else\n  {\n    drillByDisabled = DISABLED_REASONS.NOT_SUPPORTED;\n  }\n  const drillToDetailMenuItem = drillDisabled ? _jsxs(DisabledMenuItem, { menuKey: \"drill-to-detail-disabled\", ...props, children: [\n    DRILL_TO_DETAIL,\n    _jsx(MenuItemTooltip, { title: drillDisabled })] }\n  ) : _jsx(Menu.Item, { onClick: openModal.bind(null, []), children:\n    DRILL_TO_DETAIL }, \"drill-to-detail\"\n  );\n  const drillToDetailByMenuItem = drillByDisabled ? _jsxs(DisabledMenuItem, { menuKey: \"drill-to-detail-by-disabled\", ...props, children: [\n    DRILL_TO_DETAIL_BY,\n    _jsx(MenuItemTooltip, { title: drillByDisabled })] }\n  ) : _jsx(Menu.SubMenu, { popupOffset: [0, submenuYOffset], popupClassName: \"chart-context-submenu\", title: DRILL_TO_DETAIL_BY, ...props, children:\n    _jsxs(\"div\", { children: [\n      filters.map((filter, i) => _jsxs(MenuItemWithTruncation, { tooltipText: `${DRILL_TO_DETAIL_BY} ${filter.formattedVal}`, menuKey: `drill-detail-filter-${i}`, onClick: openModal.bind(null, [filter]), children: [\n        `${DRILL_TO_DETAIL_BY} `,\n        _jsx(StyledFilter, { stripHTML: true, children: filter.formattedVal })] }\n      )),\n      filters.length > 1 && _jsx(Menu.Item, { onClick: openModal.bind(null, filters), children:\n        _jsxs(\"div\", { children: [\n          `${DRILL_TO_DETAIL_BY} `,\n          _jsx(StyledFilter, { stripHTML: false, children: t('all') })] }\n        ) }, \"drill-detail-filter-all\"\n      )] }\n    ) }, key\n  );\n  return _jsxs(_Fragment, { children: [\n    drillToDetailMenuItem,\n    isContextMenu && drillToDetailByMenuItem] }\n  );\n};\nexport default DrillDetailMenuItems;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}