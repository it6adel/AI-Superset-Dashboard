{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef, useState } from 'react';\nimport { t } from '@superset-ui/core';\nimport { Button, AntdSelect } from 'src/components';\nimport FormLabel from 'src/components/Form/FormLabel';\nimport Icons from 'src/components/Icons';\nimport { infoTooltip, CredentialInfoForm } from '../styles';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nvar CredentialInfoOptions;\n(function (CredentialInfoOptions) {\n  CredentialInfoOptions[CredentialInfoOptions[\"JsonUpload\"] = 0] = \"JsonUpload\";\n  CredentialInfoOptions[CredentialInfoOptions[\"CopyPaste\"] = 1] = \"CopyPaste\";\n})(CredentialInfoOptions || (CredentialInfoOptions = {}));\n// These are the columns that are going to be added to encrypted extra, they differ in name based\n// on the engine, however we want to use the same component for each of them. Make sure to add the\n// the engine specific name here.\nexport const encryptedCredentialsMap = {\n  gsheets: 'service_account_info',\n  bigquery: 'credentials_info'\n};\nexport const EncryptedField = ({ changeMethods, isEditMode, db, editNewDb }) => {var _db$parameters;\n  const selectedFileInputRef = useRef(null);\n  const [uploadOption, setUploadOption] = useState(CredentialInfoOptions.JsonUpload.valueOf());\n  const [fileToUpload, setFileToUpload] = useState(null);\n  const showCredentialsInfo = !isEditMode;\n  const encryptedField = (db == null ? void 0 : db.engine) &&\n  encryptedCredentialsMap[db.engine];\n  const paramValue = db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters[encryptedField];\n  const encryptedValue = paramValue && typeof paramValue === 'object' ?\n  JSON.stringify(paramValue) :\n  paramValue;\n  return _jsxs(CredentialInfoForm, { children: [\n    showCredentialsInfo && _jsxs(_Fragment, { children: [\n      _jsx(FormLabel, { children:\n        t('How do you want to enter service account credentials?') }\n      ),\n      _jsxs(AntdSelect, { defaultValue: uploadOption, style: { width: '100%' }, onChange: (option) => setUploadOption(option), children: [\n        _jsx(AntdSelect.Option, { value: CredentialInfoOptions.JsonUpload, children:\n          t('Upload JSON file') }\n        ),\n\n        _jsx(AntdSelect.Option, { value: CredentialInfoOptions.CopyPaste, children:\n          t('Copy and Paste JSON credentials') }\n        )] }\n      )] }\n    ),\n    uploadOption === CredentialInfoOptions.CopyPaste ||\n    isEditMode ||\n    editNewDb ? _jsxs(\"div\", { className: \"input-container\", children: [\n      _jsx(FormLabel, { children: t('Service Account') }),\n      _jsx(\"textarea\", { className: \"input-form\", name: encryptedField, value: typeof encryptedValue === 'boolean' ?\n        String(encryptedValue) :\n        encryptedValue, onChange: changeMethods.onParametersChange, placeholder: t('Paste content of service credentials JSON file here') })] }\n    ) : showCredentialsInfo && _jsxs(\"div\", { className: \"input-container\", css: (theme) => infoTooltip(theme), children: [\n      !fileToUpload && _jsxs(Button, { onClick: () => {var _selectedFileInputRef;return (_selectedFileInputRef = selectedFileInputRef.current) == null ? void 0 : _selectedFileInputRef.click();}, children: [\n        _jsx(Icons.LinkOutlined, { iconSize: \"m\" }),\n        t('Upload credentials')] }\n      ),\n      fileToUpload && _jsxs(\"div\", { className: \"credentials-uploaded\", children: [\n        _jsxs(Button, { block: true, disabled: true, children: [\n          _jsx(Icons.LinkOutlined, { iconSize: \"m\" }),\n          t('Credentials uploaded')] }\n        ),\n        _jsx(Icons.DeleteFilled, { iconSize: \"m\", onClick: () => {\n            setFileToUpload(null);\n            changeMethods.onParametersChange({\n              target: {\n                name: encryptedField,\n                value: ''\n              }\n            });\n          } })] }\n      ),\n\n      _jsx(\"input\", { ref: selectedFileInputRef, id: \"selectedFile\", accept: \".json\", className: \"input-upload\", type: \"file\", onChange: async (event) => {var _file, _file2;\n          let file;\n          if (event.target.files) {\n            file = event.target.files[0];\n          }\n          setFileToUpload((_file = file) == null ? void 0 : _file.name);\n          changeMethods.onParametersChange({\n            target: {\n              type: null,\n              name: encryptedField,\n              value: await ((_file2 = file) == null ? void 0 : _file2.text()),\n              checked: false\n            }\n          });\n          if (selectedFileInputRef.current) {\n            selectedFileInputRef.current.value = null;\n          }\n        } })] }\n    )] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}