{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  t,\n  useTheme,\n  VizType } from\n'@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { Menu } from 'src/components/Menu';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport Button from 'src/components/Button';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { exportChart, getChartKey } from 'src/explore/exploreUtils';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport { getChartPermalink } from 'src/utils/urlUtils';\nimport copyTextToClipboard from 'src/utils/copy';\nimport HeaderReportDropDown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport { logEvent } from 'src/logger/actions';\nimport {\n  LOG_ACTIONS_CHART_DOWNLOAD_AS_IMAGE,\n  LOG_ACTIONS_CHART_DOWNLOAD_AS_JSON,\n  LOG_ACTIONS_CHART_DOWNLOAD_AS_CSV,\n  LOG_ACTIONS_CHART_DOWNLOAD_AS_CSV_PIVOTED,\n  LOG_ACTIONS_CHART_DOWNLOAD_AS_XLS } from\n'src/logger/LogUtils';\nimport ViewQueryModal from '../controls/ViewQueryModal';\nimport EmbedCodeContent from '../EmbedCodeContent';\nimport DashboardsSubMenu from './DashboardsSubMenu';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst MENU_KEYS = {\n  EDIT_PROPERTIES: 'edit_properties',\n  DASHBOARDS_ADDED_TO: 'dashboards_added_to',\n  DOWNLOAD_SUBMENU: 'download_submenu',\n  EXPORT_TO_CSV: 'export_to_csv',\n  EXPORT_TO_CSV_PIVOTED: 'export_to_csv_pivoted',\n  EXPORT_TO_JSON: 'export_to_json',\n  EXPORT_TO_XLSX: 'export_to_xlsx',\n  DOWNLOAD_AS_IMAGE: 'download_as_image',\n  SHARE_SUBMENU: 'share_submenu',\n  COPY_PERMALINK: 'copy_permalink',\n  EMBED_CODE: 'embed_code',\n  SHARE_BY_EMAIL: 'share_by_email',\n  REPORT_SUBMENU: 'report_submenu',\n  SET_UP_REPORT: 'set_up_report',\n  SET_REPORT_ACTIVE: 'set_report_active',\n  EDIT_REPORT: 'edit_report',\n  DELETE_REPORT: 'delete_report',\n  VIEW_QUERY: 'view_query',\n  RUN_IN_SQL_LAB: 'run_in_sql_lab'\n};\n\nconst VIZ_TYPES_PIVOTABLE = [VizType.PivotTable];\n\nexport const MenuItemWithCheckboxContainer = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    align-items: center;\n\n    & svg {\n      width: ${theme.gridUnit * 3}px;\n      height: ${theme.gridUnit * 3}px;\n    }\n\n    & span[role='checkbox'] {\n      display: inline-flex;\n      margin-right: ${theme.gridUnit}px;\n    }\n  `}\n`;\n\nexport const MenuTrigger = styled(Button)`\n  ${({ theme }) => css`\n    width: ${theme.gridUnit * 8}px;\n    height: ${theme.gridUnit * 8}px;\n    padding: 0;\n    border: 1px solid ${theme.colors.primary.dark2};\n\n    &.antd5-btn > span.anticon {\n      line-height: 0;\n      transition: inherit;\n    }\n\n    &:hover:not(:focus) > span.anticon {\n      color: ${theme.colors.primary.light1};\n    }\n  `}\n`;\n\nexport const useExploreAdditionalActionsMenu = (\nlatestQueryFormData,\ncanDownloadCSV,\nslice,\nonOpenInEditor,\nonOpenPropertiesModal,\nownState,\ndashboards,\nshowReportModal,\nsetCurrentReportDeleting,\n...rest) =>\n{\n  const theme = useTheme();\n  const { addDangerToast, addSuccessToast } = useToasts();\n  const dispatch = useDispatch();\n  const [showReportSubMenu, setShowReportSubMenu] = useState(null);\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const chart = useSelector(\n    (state) => {var _state$charts;return (_state$charts = state.charts) == null ? void 0 : _state$charts[getChartKey(state.explore)];}\n  );\n\n  const { datasource } = latestQueryFormData;\n\n  const shareByEmail = useCallback(async () => {\n    try {\n      const subject = t('Superset Chart');\n      const url = await getChartPermalink(latestQueryFormData);\n      const body = encodeURIComponent(t('%s%s', 'Check out this chart: ', url));\n      window.location.href = `mailto:?Subject=${subject}%20&Body=${body}`;\n    } catch (error) {\n      addDangerToast(t('Sorry, something went wrong. Try again later.'));\n    }\n  }, [addDangerToast, latestQueryFormData]);\n\n  const exportCSV = useCallback(\n    () =>\n    canDownloadCSV ?\n    exportChart({\n      formData: latestQueryFormData,\n      ownState,\n      resultType: 'full',\n      resultFormat: 'csv'\n    }) :\n    null,\n    [canDownloadCSV, latestQueryFormData]\n  );\n\n  const exportCSVPivoted = useCallback(\n    () =>\n    canDownloadCSV ?\n    exportChart({\n      formData: latestQueryFormData,\n      resultType: 'post_processed',\n      resultFormat: 'csv'\n    }) :\n    null,\n    [canDownloadCSV, latestQueryFormData]\n  );\n\n  const exportJson = useCallback(\n    () =>\n    canDownloadCSV ?\n    exportChart({\n      formData: latestQueryFormData,\n      resultType: 'results',\n      resultFormat: 'json'\n    }) :\n    null,\n    [canDownloadCSV, latestQueryFormData]\n  );\n\n  const exportExcel = useCallback(\n    () =>\n    canDownloadCSV ?\n    exportChart({\n      formData: latestQueryFormData,\n      resultType: 'results',\n      resultFormat: 'xlsx'\n    }) :\n    null,\n    [canDownloadCSV, latestQueryFormData]\n  );\n\n  const copyLink = useCallback(async () => {\n    try {\n      if (!latestQueryFormData) {\n        throw new Error();\n      }\n      await copyTextToClipboard(() => getChartPermalink(latestQueryFormData));\n      addSuccessToast(t('Copied to clipboard!'));\n    } catch (error) {\n      addDangerToast(t('Sorry, something went wrong. Try again later.'));\n    }\n  }, [addDangerToast, addSuccessToast, latestQueryFormData]);\n\n  const handleMenuClick = useCallback(\n    ({ key, domEvent }) => {var _slice$slice_name;\n      switch (key) {\n        case MENU_KEYS.EDIT_PROPERTIES:\n          onOpenPropertiesModal();\n          setIsDropdownVisible(false);\n          break;\n        case MENU_KEYS.EXPORT_TO_CSV:\n          exportCSV();\n          setIsDropdownVisible(false);\n          dispatch(\n            logEvent(LOG_ACTIONS_CHART_DOWNLOAD_AS_CSV, {\n              chartId: slice == null ? void 0 : slice.slice_id,\n              chartName: slice == null ? void 0 : slice.slice_name\n            })\n          );\n          break;\n        case MENU_KEYS.EXPORT_TO_CSV_PIVOTED:\n          exportCSVPivoted();\n          setIsDropdownVisible(false);\n          dispatch(\n            logEvent(LOG_ACTIONS_CHART_DOWNLOAD_AS_CSV_PIVOTED, {\n              chartId: slice == null ? void 0 : slice.slice_id,\n              chartName: slice == null ? void 0 : slice.slice_name\n            })\n          );\n          break;\n        case MENU_KEYS.EXPORT_TO_JSON:\n          exportJson();\n          setIsDropdownVisible(false);\n          dispatch(\n            logEvent(LOG_ACTIONS_CHART_DOWNLOAD_AS_JSON, {\n              chartId: slice == null ? void 0 : slice.slice_id,\n              chartName: slice == null ? void 0 : slice.slice_name\n            })\n          );\n          break;\n        case MENU_KEYS.EXPORT_TO_XLSX:\n          exportExcel();\n          setIsDropdownVisible(false);\n          dispatch(\n            logEvent(LOG_ACTIONS_CHART_DOWNLOAD_AS_XLS, {\n              chartId: slice == null ? void 0 : slice.slice_id,\n              chartName: slice == null ? void 0 : slice.slice_name\n            })\n          );\n          break;\n        case MENU_KEYS.DOWNLOAD_AS_IMAGE:\n          downloadAsImage(\n            '.panel-body .chart-container',\n            // eslint-disable-next-line camelcase\n            (_slice$slice_name = slice == null ? void 0 : slice.slice_name) != null ? _slice$slice_name : t('New chart'),\n            true\n          )(domEvent);\n          setIsDropdownVisible(false);\n          dispatch(\n            logEvent(LOG_ACTIONS_CHART_DOWNLOAD_AS_IMAGE, {\n              chartId: slice == null ? void 0 : slice.slice_id,\n              chartName: slice == null ? void 0 : slice.slice_name\n            })\n          );\n          break;\n        case MENU_KEYS.COPY_PERMALINK:\n          copyLink();\n          setIsDropdownVisible(false);\n          break;\n        case MENU_KEYS.EMBED_CODE:\n          setIsDropdownVisible(false);\n          break;\n        case MENU_KEYS.SHARE_BY_EMAIL:\n          shareByEmail();\n          setIsDropdownVisible(false);\n          break;\n        case MENU_KEYS.VIEW_QUERY:\n          setIsDropdownVisible(false);\n          break;\n        case MENU_KEYS.RUN_IN_SQL_LAB:\n          onOpenInEditor(latestQueryFormData, domEvent.metaKey);\n          setIsDropdownVisible(false);\n          break;\n        default:\n          break;\n      }\n    },\n    [\n    copyLink,\n    exportCSV,\n    exportCSVPivoted,\n    exportJson,\n    latestQueryFormData,\n    onOpenInEditor,\n    onOpenPropertiesModal,\n    shareByEmail,\n    slice == null ? void 0 : slice.slice_name]\n\n  );\n\n  const menu = useMemo(\n    () =>\n    _jsxs(Menu, { onClick: handleMenuClick, selectable: false, ...rest, children: [\n      _jsxs(_Fragment, { children: [\n        slice &&\n        _jsx(Menu.Item, { children:\n          t('Edit chart properties') }, MENU_KEYS.EDIT_PROPERTIES\n        ),\n\n        _jsx(Menu.SubMenu, {\n          title: t('On dashboards'), children:\n\n\n          _jsx(DashboardsSubMenu, {\n            chartId: slice == null ? void 0 : slice.slice_id,\n            dashboards: dashboards }\n          ) }, MENU_KEYS.DASHBOARDS_ADDED_TO\n        ),\n        _jsx(Menu.Divider, {})] }\n      ),\n      _jsxs(Menu.SubMenu, { title: t('Download'), children: [\n        VIZ_TYPES_PIVOTABLE.includes(latestQueryFormData.viz_type) ?\n        _jsxs(_Fragment, { children: [\n          _jsx(Menu.Item, {\n\n            icon: _jsx(Icons.FileOutlined, {}),\n            disabled: !canDownloadCSV, children:\n\n            t('Export to original .CSV') }, MENU_KEYS.EXPORT_TO_CSV\n          ),\n          _jsx(Menu.Item, {\n\n            icon: _jsx(Icons.FileOutlined, {}),\n            disabled: !canDownloadCSV, children:\n\n            t('Export to pivoted .CSV') }, MENU_KEYS.EXPORT_TO_CSV_PIVOTED\n          )] }\n        ) :\n\n        _jsx(Menu.Item, {\n\n          icon: _jsx(Icons.FileOutlined, {}),\n          disabled: !canDownloadCSV, children:\n\n          t('Export to .CSV') }, MENU_KEYS.EXPORT_TO_CSV\n        ),\n\n        _jsx(Menu.Item, {\n\n          icon: _jsx(Icons.FileOutlined, {}),\n          disabled: !canDownloadCSV, children:\n\n          t('Export to .JSON') }, MENU_KEYS.EXPORT_TO_JSON\n        ),\n        _jsx(Menu.Item, {\n\n          icon: _jsx(Icons.FileImageOutlined, {}), children:\n\n          t('Download as image') }, MENU_KEYS.DOWNLOAD_AS_IMAGE\n        ),\n        _jsx(Menu.Item, {\n\n          icon: _jsx(Icons.FileOutlined, {}),\n          disabled: !canDownloadCSV, children:\n\n          t('Export to Excel') }, MENU_KEYS.EXPORT_TO_XLSX\n        )] }, MENU_KEYS.DOWNLOAD_SUBMENU\n      ),\n      _jsxs(Menu.SubMenu, { title: t('Share'), children: [\n        _jsx(Menu.Item, { children:\n          t('Copy permalink to clipboard') }, MENU_KEYS.COPY_PERMALINK\n        ),\n        _jsx(Menu.Item, { children:\n          t('Share chart by email') }, MENU_KEYS.SHARE_BY_EMAIL\n        ),\n        isFeatureEnabled(FeatureFlag.EmbeddableCharts) ?\n        _jsx(Menu.Item, { children:\n          _jsx(ModalTrigger, {\n            triggerNode:\n            _jsx(\"div\", { children: t('Embed code') }),\n\n            modalTitle: t('Embed code'),\n            modalBody:\n            _jsx(EmbedCodeContent, {\n              formData: latestQueryFormData,\n              addDangerToast: addDangerToast }\n            ),\n\n            maxWidth: `${theme.gridUnit * 100}px`,\n            destroyOnClose: true,\n            responsive: true }\n          ) }, MENU_KEYS.EMBED_CODE\n        ) :\n        null] }, MENU_KEYS.SHARE_SUBMENU\n      ),\n      _jsx(Menu.Divider, {}),\n      showReportSubMenu ?\n      _jsxs(_Fragment, { children: [\n        _jsx(HeaderReportDropDown, {\n          submenuTitle: t('Manage email report'),\n          chart: chart,\n          setShowReportSubMenu: setShowReportSubMenu,\n          showReportSubMenu: showReportSubMenu,\n          showReportModal: showReportModal,\n          setCurrentReportDeleting: setCurrentReportDeleting,\n          useTextMenu: true }\n        ),\n        _jsx(Menu.Divider, {})] }\n      ) :\n\n      _jsx(HeaderReportDropDown, {\n        chart: chart,\n        setShowReportSubMenu: setShowReportSubMenu,\n        showReportModal: showReportModal,\n        setCurrentReportDeleting: setCurrentReportDeleting,\n        useTextMenu: true }\n      ),\n\n      _jsx(Menu.Item, { children:\n        _jsx(ModalTrigger, {\n          triggerNode:\n          _jsx(\"div\", { children: t('View query') }),\n\n          modalTitle: t('View query'),\n          modalBody:\n          _jsx(ViewQueryModal, { latestQueryFormData: latestQueryFormData }),\n\n          draggable: true,\n          resizable: true,\n          responsive: true }\n        ) }, MENU_KEYS.VIEW_QUERY\n      ),\n      datasource &&\n      _jsx(Menu.Item, { children:\n        t('Run in SQL Lab') }, MENU_KEYS.RUN_IN_SQL_LAB\n      )] }\n\n    ),\n\n    [\n    addDangerToast,\n    canDownloadCSV,\n    chart,\n    dashboards,\n    handleMenuClick,\n    isDropdownVisible,\n    latestQueryFormData,\n    showReportSubMenu,\n    slice,\n    theme.gridUnit]\n\n  );\n  return [menu, isDropdownVisible, setIsDropdownVisible];\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}