{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\nimport { css, styled, t, useTheme } from '@superset-ui/core';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport { RangePicker } from 'src/components/DatePicker';\nimport { extendedDayjs } from 'src/utils/dates';\nimport Icons from 'src/components/Icons';\nimport Modal from 'src/components/Modal';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledAnnotationTitle = styled.div`\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n`;\nconst StyledJsonEditor = styled(JsonEditor)`\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ theme }) => theme.colors.secondary.light2};\n`;\nconst AnnotationContainer = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 5}px;\n\n  .control-label {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  textarea {\n    flex: 1 1 auto;\n    height: ${({ theme }) => theme.gridUnit * 17}px;\n    resize: none;\n    width: 100%;\n  }\n\n  textarea,\n  input[type='text'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  input[type='text'] {\n    width: 65%;\n  }\n`;\nconst AnnotationModal = ({ addDangerToast, addSuccessToast, annotationLayerId, annotation = null, onAnnotationAdd, onHide, show }) => {var _currentAnnotation$st2, _currentAnnotation$en2;\n  const theme = useTheme();\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentAnnotation, setCurrentAnnotation] = useState(null);\n  const isEditMode = annotation !== null;\n  // annotation fetch logic\n  const { state: { loading, resource }, fetchResource, createResource, updateResource } = useSingleViewResource(`annotation_layer/${annotationLayerId}/annotation`, t('annotation'), addDangerToast);\n  const resetAnnotation = () => {\n    // Reset annotation\n    setCurrentAnnotation({\n      short_descr: '',\n      start_dttm: '',\n      end_dttm: '',\n      json_metadata: '',\n      long_descr: ''\n    });\n  };\n  const hide = () => {\n    if (isEditMode) {\n      setCurrentAnnotation(resource);\n    } else\n    {\n      resetAnnotation();\n    }\n    onHide();\n  };\n  const onSave = () => {\n    if (isEditMode) {\n      // Edit\n      if (currentAnnotation != null && currentAnnotation.id) {\n        const update_id = currentAnnotation.id;\n        delete currentAnnotation.id;\n        delete currentAnnotation.created_by;\n        delete currentAnnotation.changed_by;\n        delete currentAnnotation.changed_on_delta_humanized;\n        delete currentAnnotation.layer;\n        updateResource(update_id, currentAnnotation).then((response) => {\n          // No response on error\n          if (!response) {\n            return;\n          }\n          if (onAnnotationAdd) {\n            onAnnotationAdd();\n          }\n          hide();\n          addSuccessToast(t('The annotation has been updated'));\n        });\n      }\n    } else\n    if (currentAnnotation) {\n      // Create\n      createResource(currentAnnotation).then((response) => {\n        if (!response) {\n          return;\n        }\n        if (onAnnotationAdd) {\n          onAnnotationAdd();\n        }\n        hide();\n        addSuccessToast(t('The annotation has been saved'));\n      });\n    }\n  };\n  const onAnnotationTextChange = (event) => {\n    const { target } = event;\n    const data = {\n      ...currentAnnotation,\n      end_dttm: currentAnnotation ? currentAnnotation.end_dttm : '',\n      short_descr: currentAnnotation ? currentAnnotation.short_descr : '',\n      start_dttm: currentAnnotation ? currentAnnotation.start_dttm : ''\n    };\n    data[target.name] = target.value;\n    setCurrentAnnotation(data);\n  };\n  const onJsonChange = (json) => {\n    const data = {\n      ...currentAnnotation,\n      end_dttm: currentAnnotation ? currentAnnotation.end_dttm : '',\n      json_metadata: json,\n      short_descr: currentAnnotation ? currentAnnotation.short_descr : '',\n      start_dttm: currentAnnotation ? currentAnnotation.start_dttm : ''\n    };\n    setCurrentAnnotation(data);\n  };\n  const onDateChange = (dates, dateString) => {var _currentAnnotation$sh2;\n    if (!(dates != null && dates[0]) || !(dates != null && dates[1])) {var _currentAnnotation$sh;\n      const data = {\n        ...currentAnnotation,\n        start_dttm: '',\n        end_dttm: '',\n        short_descr: (_currentAnnotation$sh = currentAnnotation == null ? void 0 : currentAnnotation.short_descr) != null ? _currentAnnotation$sh : ''\n      };\n      setCurrentAnnotation(data);\n      return;\n    }\n    const data = {\n      ...currentAnnotation,\n      start_dttm: dates[0].format('YYYY-MM-DD HH:mm'),\n      end_dttm: dates[1].format('YYYY-MM-DD HH:mm'),\n      short_descr: (_currentAnnotation$sh2 = currentAnnotation == null ? void 0 : currentAnnotation.short_descr) != null ? _currentAnnotation$sh2 : ''\n    };\n    setCurrentAnnotation(data);\n  };\n  const validate = () => {var _currentAnnotation$sh3, _currentAnnotation$st, _currentAnnotation$en;\n    if (currentAnnotation != null && (_currentAnnotation$sh3 = currentAnnotation.short_descr) != null && _currentAnnotation$sh3.length &&\n    currentAnnotation != null && (_currentAnnotation$st = currentAnnotation.start_dttm) != null && _currentAnnotation$st.length &&\n    currentAnnotation != null && (_currentAnnotation$en = currentAnnotation.end_dttm) != null && _currentAnnotation$en.length) {\n      setDisableSave(false);\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !(currentAnnotation != null && currentAnnotation.id) ||\n    annotation && annotation.id !== currentAnnotation.id ||\n    show)) {\n      if ((annotation == null ? void 0 : annotation.id) !== null && !loading) {\n        const id = annotation.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentAnnotation || currentAnnotation.id || show)) {\n      resetAnnotation();\n    }\n  }, [annotation]);\n  useEffect(() => {\n    if (resource) {\n      setCurrentAnnotation(resource);\n    }\n  }, [resource]);\n  // Validation\n  useEffect(() => {\n    validate();\n  }, [\n  currentAnnotation ? currentAnnotation.short_descr : '',\n  currentAnnotation ? currentAnnotation.start_dttm : '',\n  currentAnnotation ? currentAnnotation.end_dttm : '']\n  );\n  return _jsxs(Modal, { disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), show: show, width: \"55%\", title: _jsxs(\"h4\", { children: [\n      isEditMode ? _jsx(Icons.EditOutlined, { iconSize: \"l\", css: css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              ` }) : _jsx(Icons.PlusOutlined, { iconSize: \"l\", css: css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              ` }),\n      isEditMode ? t('Edit annotation') : t('Add annotation')] }\n    ), children: [\n    _jsx(StyledAnnotationTitle, { children:\n      _jsx(\"h4\", { children: t('Basic information') }) }\n    ),\n    _jsxs(AnnotationContainer, { children: [\n      _jsxs(\"div\", { className: \"control-label\", children: [\n        t('Name'),\n        _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n      ),\n      _jsx(\"input\", { name: \"short_descr\", onChange: onAnnotationTextChange, type: \"text\", value: currentAnnotation == null ? void 0 : currentAnnotation.short_descr })] }\n    ),\n    _jsxs(AnnotationContainer, { children: [\n      _jsxs(\"div\", { className: \"control-label\", children: [\n        t('date'),\n        _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n      ),\n      _jsx(RangePicker, { placeholder: [t('Start date'), t('End date')], format: \"YYYY-MM-DD HH:mm\", onCalendarChange: onDateChange, showTime: { format: 'hh:mm a' }, use12Hours: true, value: currentAnnotation != null && (_currentAnnotation$st2 = currentAnnotation.start_dttm) != null && _currentAnnotation$st2.length ||\n        currentAnnotation != null && (_currentAnnotation$en2 = currentAnnotation.end_dttm) != null && _currentAnnotation$en2.length ?\n        [\n        extendedDayjs(currentAnnotation.start_dttm),\n        extendedDayjs(currentAnnotation.end_dttm)] :\n\n        null })] }\n    ),\n    _jsx(StyledAnnotationTitle, { children:\n      _jsx(\"h4\", { children: t('Additional information') }) }\n    ),\n    _jsxs(AnnotationContainer, { children: [\n      _jsx(\"div\", { className: \"control-label\", children: t('description') }),\n      _jsx(\"textarea\", { name: \"long_descr\", value: currentAnnotation ? currentAnnotation.long_descr : '', placeholder: t('Description (this can be seen in the list)'), onChange: onAnnotationTextChange })] }\n    ),\n    _jsxs(AnnotationContainer, { children: [\n      _jsx(\"div\", { className: \"control-label\", children: t('JSON metadata') }),\n      _jsx(StyledJsonEditor, { onChange: onJsonChange, value: currentAnnotation != null && currentAnnotation.json_metadata ?\n        currentAnnotation.json_metadata :\n        '', width: \"100%\", height: \"120px\" })] }\n    )] }\n  );\n};\nexport default withToasts(AnnotationModal);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}