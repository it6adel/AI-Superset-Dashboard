{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, getClientErrorObject } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { updateFormDataByDatasource } from './exploreActions';\nexport const SET_DATASOURCE = 'SET_DATASOURCE';\nexport function setDatasource(datasource) {\n  return { type: SET_DATASOURCE, datasource };\n}\nexport function changeDatasource(newDatasource) {\n  return function (dispatch, getState) {\n    const { explore: { datasource: prevDatasource } } = getState();\n    dispatch(setDatasource(newDatasource));\n    dispatch(updateFormDataByDatasource(prevDatasource, newDatasource));\n  };\n}\nexport function saveDataset({ schema, sql, database, templateParams, datasourceName, columns }) {\n  return async function (dispatch) {\n    // Create a dataset object\n    try {\n      const { json: { data } } = await SupersetClient.post({\n        endpoint: '/api/v1/dataset/',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          database: database == null ? void 0 : database.id,\n          table_name: datasourceName,\n          schema,\n          sql,\n          template_params: templateParams,\n          columns\n        })\n      });\n      // Update form_data to point to new dataset\n      dispatch(changeDatasource(data));\n      return data;\n    }\n    catch (error) {\n      getClientErrorObject(error).then((e) => {\n        dispatch(addDangerToast(e.error));\n      });\n      throw error;\n    }\n  };\n}\nexport const datasourcesActions = {\n  setDatasource,\n  changeDatasource,\n  saveDataset\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}