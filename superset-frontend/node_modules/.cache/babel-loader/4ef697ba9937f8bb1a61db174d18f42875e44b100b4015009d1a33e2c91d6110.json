{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { Switch } from 'src/components/Switch';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport { toggleStyle, infoTooltip } from '../styles';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const hostField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters;return _jsx(ValidatedInput, { id: \"host\", name: \"host\", value: db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters.host, required: required, hasTooltip: true, tooltipText: t('This can be either an IP address (e.g. 127.0.0.1) or a domain name (e.g. mydatabase.com).'), validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.host, placeholder: t('e.g. 127.0.0.1'), className: \"form-group-w-50\", label: t('Host'), onChange: changeMethods.onParametersChange });};\nexport const portField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters2;return _jsx(_Fragment, { children:\n    _jsx(ValidatedInput, { id: \"port\", name: \"port\", type: \"number\", required: required, value: db == null ? void 0 : (_db$parameters2 = db.parameters) == null ? void 0 : _db$parameters2.port, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.port, placeholder: t('e.g. 5432'), className: \"form-group-w-50\", label: t('Port'), onChange: changeMethods.onParametersChange }) }\n  );};\nexport const httpPath = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _extraJson$engine_par, _extraJson$engine_par2;\n  const extraJson = JSON.parse((db == null ? void 0 : db.extra) || '{}');\n  return _jsx(ValidatedInput, { id: \"http_path\", name: \"http_path\", required: required, value: (_extraJson$engine_par = extraJson.engine_params) == null ? void 0 : (_extraJson$engine_par2 = _extraJson$engine_par.connect_args) == null ? void 0 : _extraJson$engine_par2.http_path, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.http_path, placeholder: t('e.g. sql/protocolv1/o/12345'), label: \"HTTP Path\", onChange: changeMethods.onExtraInputChange, helpText: t('Copy the name of the HTTP Path of your cluster.') });\n};\nexport const databaseField = ({ required, changeMethods, getValidation, validationErrors, placeholder, db }) => {var _db$parameters3;return _jsx(ValidatedInput, { id: \"database\", name: \"database\", required: required, value: db == null ? void 0 : (_db$parameters3 = db.parameters) == null ? void 0 : _db$parameters3.database, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database, placeholder: placeholder != null ? placeholder : t('e.g. world_population'), label: t('Database name'), onChange: changeMethods.onParametersChange, helpText: t('Copy the name of the database you are trying to connect to.') });};\nexport const defaultCatalogField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters4;return _jsx(ValidatedInput, { id: \"default_catalog\", name: \"default_catalog\", required: required, value: db == null ? void 0 : (_db$parameters4 = db.parameters) == null ? void 0 : _db$parameters4.default_catalog, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.default_catalog, placeholder: t('e.g. hive_metastore'), label: t('Default Catalog'), onChange: changeMethods.onParametersChange, helpText: t('The default catalog that should be used for the connection.') });};\nexport const defaultSchemaField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters5;return _jsx(ValidatedInput, { id: \"default_schema\", name: \"default_schema\", required: required, value: db == null ? void 0 : (_db$parameters5 = db.parameters) == null ? void 0 : _db$parameters5.default_schema, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.default_schema, placeholder: t('e.g. default'), label: t('Default Schema'), onChange: changeMethods.onParametersChange, helpText: t('The default schema that should be used for the connection.') });};\nexport const httpPathField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters6;return _jsx(ValidatedInput, { id: \"http_path_field\", name: \"http_path_field\", required: required, value: db == null ? void 0 : (_db$parameters6 = db.parameters) == null ? void 0 : _db$parameters6.http_path_field, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.http_path, placeholder: t('e.g. sql/protocolv1/o/12345'), label: \"HTTP Path\", onChange: changeMethods.onParametersChange, helpText: t('Copy the name of the HTTP Path of your cluster.') });};\nexport const usernameField = ({ required, changeMethods, getValidation, validationErrors, db }) => {var _db$parameters7;return _jsx(ValidatedInput, { id: \"username\", name: \"username\", required: required, value: db == null ? void 0 : (_db$parameters7 = db.parameters) == null ? void 0 : _db$parameters7.username, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.username, placeholder: t('e.g. Analytics'), label: t('Username'), onChange: changeMethods.onParametersChange });};\nexport const passwordField = ({ required, changeMethods, getValidation, validationErrors, db, isEditMode }) => {var _db$parameters8;return _jsx(ValidatedInput, { id: \"password\", name: \"password\", required: required, visibilityToggle: !isEditMode, value: db == null ? void 0 : (_db$parameters8 = db.parameters) == null ? void 0 : _db$parameters8.password, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.password, placeholder: t('e.g. ********'), label: t('Password'), onChange: changeMethods.onParametersChange });};\nexport const accessTokenField = ({ required, changeMethods, getValidation, validationErrors, db, isEditMode, default_value, description }) => {var _db$parameters9;return _jsx(ValidatedInput, { id: \"access_token\", name: \"access_token\", required: required, visibilityToggle: !isEditMode, value: db == null ? void 0 : (_db$parameters9 = db.parameters) == null ? void 0 : _db$parameters9.access_token, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.access_token, placeholder: t('Paste your access token here'), get_url: typeof default_value === 'string' && default_value.includes('https://') ?\n    default_value :\n    null, description: description, label: t('Access token'), onChange: changeMethods.onParametersChange });};\nexport const displayField = ({ changeMethods, getValidation, validationErrors, db }) => _jsx(_Fragment, { children:\n  _jsx(ValidatedInput, { id: \"database_name\", name: \"database_name\", required: true, value: db == null ? void 0 : db.database_name, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database_name, placeholder: \"\", label: t('Display Name'), onChange: changeMethods.onChange, helpText: t('Pick a nickname for how the database will display in Superset.') }) }\n);\nexport const queryField = ({ required, changeMethods, getValidation, validationErrors, db }) => _jsx(ValidatedInput, { id: \"query_input\", name: \"query_input\", required: required, value: (db == null ? void 0 : db.query_input) || '', validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.query, placeholder: t('e.g. param1=value1&param2=value2'), label: t('Additional Parameters'), onChange: changeMethods.onQueryChange, helpText: t('Add additional custom parameters') });\nexport const forceSSLField = ({ isEditMode, changeMethods, db, sslForced }) => {var _db$parameters10;return _jsxs(\"div\", { css: (theme) => infoTooltip(theme), children: [\n    _jsx(Switch, { disabled: sslForced && !isEditMode, checked: (db == null ? void 0 : (_db$parameters10 = db.parameters) == null ? void 0 : _db$parameters10.encryption) || sslForced, onChange: (changed) => {\n        changeMethods.onParametersChange({\n          target: {\n            type: 'toggle',\n            name: 'encryption',\n            checked: true,\n            value: changed\n          }\n        });\n      } }),\n    _jsx(\"span\", { css: toggleStyle, children: \"SSL\" }),\n    _jsx(InfoTooltip, { tooltip: t('SSL Mode \"require\" will be used.'), placement: \"right\", viewBox: \"0 -5 24 24\" })] }\n  );};\nexport const projectIdfield = ({ changeMethods, getValidation, validationErrors, db }) => {var _db$parameters11;return _jsx(_Fragment, { children:\n    _jsx(ValidatedInput, { id: \"project_id\", name: \"project_id\", required: true, value: db == null ? void 0 : (_db$parameters11 = db.parameters) == null ? void 0 : _db$parameters11.project_id, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.project_id, placeholder: \"your-project-1234-a1\", label: t('Project Id'), onChange: changeMethods.onParametersChange, helpText: t('Enter the unique project id for your database.') }) }\n  );};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}