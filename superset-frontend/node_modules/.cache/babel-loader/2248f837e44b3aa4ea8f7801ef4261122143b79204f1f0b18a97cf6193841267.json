{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useCallback } from 'react';\nimport { t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { CronPicker } from 'src/components/CronPicker';\nimport { StyledInputContainer } from '../AlertReportModal';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nvar ScheduleType;\n(function (ScheduleType) {\n  ScheduleType[\"Picker\"] = \"picker\";\n  ScheduleType[\"Input\"] = \"input\";\n})(ScheduleType || (ScheduleType = {}));\nconst SCHEDULE_TYPE_OPTIONS = [\n{\n  label: t('Recurring (every)'),\n  value: ScheduleType.Picker\n},\n{\n  label: t('CRON Schedule'),\n  value: ScheduleType.Input\n}];\n\nexport const AlertReportCronScheduler = ({ value, onChange }) => {\n  const theme = useTheme();\n  const [scheduleFormat, setScheduleFormat] = useState(ScheduleType.Picker);\n  const customSetValue = useCallback((newValue) => {\n    onChange(newValue);\n  }, [onChange]);\n  const handleBlur = useCallback((event) => {\n    onChange(event.target.value);\n  }, [onChange]);\n  const handlePressEnter = useCallback(() => {\n    onChange(value || '');\n  }, [onChange, value]);\n  const [error, onError] = useState();\n  return _jsxs(_Fragment, { children: [\n    _jsxs(StyledInputContainer, { children: [\n      _jsxs(\"div\", { className: \"control-label\", children: [\n        t('Schedule type'),\n        _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n      ),\n      _jsx(\"div\", { className: \"input-container\", children:\n        _jsx(Select, { ariaLabel: t('Schedule type'), placeholder: t('Schedule type'), onChange: (e) => {\n            setScheduleFormat(e);\n          }, value: scheduleFormat, options: SCHEDULE_TYPE_OPTIONS }) }\n      )] }\n    ),\n\n    _jsxs(StyledInputContainer, { className: \"styled-input\", children: [\n      _jsxs(\"div\", { className: \"control-label\", children: [\n        t('Schedule'),\n        _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n      ),\n      scheduleFormat === ScheduleType.Input && _jsx(Input, { type: \"text\", name: \"crontab\", style: error ? { borderColor: theme.colors.error.base } : {}, placeholder: t('CRON expression'), value: value, onBlur: handleBlur, onChange: (e) => customSetValue(e.target.value), onPressEnter: handlePressEnter }),\n      scheduleFormat === ScheduleType.Picker && _jsx(CronPicker, { clearButton: false, value: value, setValue: customSetValue, displayError: scheduleFormat === ScheduleType.Picker, onError: onError })] }\n    )] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}