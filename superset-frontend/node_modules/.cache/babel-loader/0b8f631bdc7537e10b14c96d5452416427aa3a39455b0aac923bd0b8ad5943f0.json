{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport Alert from 'src/components/Alert';\nimport Table, { TableSize } from 'src/components/Table';\n// @ts-ignore\nimport LOADING_GIF from 'src/assets/images/loading.gif';\nimport MessageContent from './MessageContent';\n/**\n * Enum defining CSS position options\n */import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nvar EPosition;\n(function (EPosition) {\n  EPosition[\"ABSOLUTE\"] = \"absolute\";\n  EPosition[\"RELATIVE\"] = \"relative\";\n})(EPosition || (EPosition = {}));\nconst LOADER_WIDTH = 200;\nconst SPINNER_WIDTH = 120;\nconst HALF = 0.5;\nconst MARGIN_MULTIPLIER = 3;\nconst StyledHeader = styled.div`\n  ${({ theme, position }) => `\n  position: ${position};\n  margin: ${theme.gridUnit * (MARGIN_MULTIPLIER + 1)}px\n    ${theme.gridUnit * MARGIN_MULTIPLIER}px\n    ${theme.gridUnit * MARGIN_MULTIPLIER}px\n    ${theme.gridUnit * (MARGIN_MULTIPLIER + 3)}px;\n  font-size: ${theme.gridUnit * 6}px;\n  font-weight: ${theme.typography.weights.medium};\n  padding-bottom: ${theme.gridUnit * MARGIN_MULTIPLIER}px;\n\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  .anticon:first-of-type {\n    margin-right: ${theme.gridUnit * 2}px;\n    vertical-align: text-top;\n  }\n\n  `}\n`;\nconst StyledTitle = styled.div`\n  ${({ theme }) => `\n  margin-left: ${theme.gridUnit * (MARGIN_MULTIPLIER + 3)}px;\n  margin-bottom: ${theme.gridUnit * MARGIN_MULTIPLIER}px;\n  font-weight: ${theme.typography.weights.bold};\n  `}\n`;\nconst LoaderContainer = styled.div`\n  ${({ theme }) => `\n  padding: ${theme.gridUnit * 8}px\n    ${theme.gridUnit * 6}px;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  `}\n`;\nconst StyledLoader = styled.div`\n  ${({ theme }) => `\n  max-width: 50%;\n  width: ${LOADER_WIDTH}px;\n\n  img {\n    width: ${SPINNER_WIDTH}px;\n    margin-left: ${(LOADER_WIDTH - SPINNER_WIDTH) * HALF}px;\n  }\n\n  div {\n    width: 100%;\n    margin-top: ${theme.gridUnit * MARGIN_MULTIPLIER}px;\n    text-align: center;\n    font-weight: ${theme.typography.weights.normal};\n    font-size: ${theme.typography.sizes.l}px;\n    color: ${theme.colors.grayscale.light1};\n  }\n  `}\n`;\nconst TableContainerWithBanner = styled.div`\n  ${({ theme }) => `\n  position: relative;\n  margin: ${theme.gridUnit * MARGIN_MULTIPLIER}px;\n  margin-left: ${theme.gridUnit * (MARGIN_MULTIPLIER + 3)}px;\n  height: calc(100% - ${theme.gridUnit * 60}px);\n  overflow: auto;\n  `}\n`;\nconst TableContainerWithoutBanner = styled.div`\n  ${({ theme }) => `\n  position: relative;\n  margin: ${theme.gridUnit * MARGIN_MULTIPLIER}px;\n  margin-left: ${theme.gridUnit * (MARGIN_MULTIPLIER + 3)}px;\n  height: calc(100% - ${theme.gridUnit * 30}px);\n  overflow: auto;\n  `}\n`;\nconst TableScrollContainer = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n`;\nconst StyledAlert = styled(Alert)`\n  ${({ theme }) => `\n  border: 1px solid ${theme.colors.info.base};\n  padding: ${theme.gridUnit * 4}px;\n  margin: ${theme.gridUnit * 6}px ${theme.gridUnit * 6}px\n    ${theme.gridUnit * 8}px;\n  .view-dataset-button {\n    position: absolute;\n    top: ${theme.gridUnit * 4}px;\n    right: ${theme.gridUnit * 4}px;\n    font-weight: ${theme.typography.weights.normal};\n\n    &:hover {\n      color: ${theme.colors.secondary.dark3};\n      text-decoration: underline;\n    }\n  }\n  `}\n`;\nexport const REFRESHING = t('Refreshing columns');\nexport const COLUMN_TITLE = t('Table columns');\nexport const ALT_LOADING = t('Loading');\nconst pageSizeOptions = ['5', '10', '15', '25'];\nconst DEFAULT_PAGE_SIZE = 25;\n// Define the columns for Table instance\nexport const tableColumnDefinition = [\n{\n  title: 'Column Name',\n  dataIndex: 'name',\n  key: 'name',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n},\n{\n  title: 'Datatype',\n  dataIndex: 'type',\n  key: 'type',\n  width: '100px',\n  sorter: (a, b) => a.name.localeCompare(b.name)\n}];\n\nconst EXISTING_DATASET_DESCRIPTION = t('This table already has a dataset associated with it. You can only associate one dataset with a table.\\n');\nconst VIEW_DATASET = t('View Dataset');\nconst renderExistingDatasetAlert = (dataset) => _jsx(StyledAlert, { closable: false, type: \"info\", showIcon: true, message: t('This table already has a dataset'), description: _jsxs(_Fragment, { children: [\n    EXISTING_DATASET_DESCRIPTION,\n    _jsx(\"span\", { role: \"button\", onClick: () => {\n        window.open(dataset == null ? void 0 : dataset.explore_url, '_blank', 'noreferrer noopener popup=false');\n      }, tabIndex: 0, className: \"view-dataset-button\", children:\n      VIEW_DATASET }\n    )] }\n  ) });\nconst DatasetPanel = ({ tableName, columnList, loading, hasError, datasets }) => {\n  const hasColumns = Boolean((columnList == null ? void 0 : columnList.length) > 0);\n  const datasetNames = datasets == null ? void 0 : datasets.map((dataset) => dataset.table_name);\n  const tableWithDataset = datasets == null ? void 0 : datasets.find((dataset) => dataset.table_name === tableName);\n  let component;\n  let loader;\n  if (loading) {\n    loader = _jsx(LoaderContainer, { children:\n      _jsxs(StyledLoader, { children: [\n        _jsx(\"img\", { alt: ALT_LOADING, src: LOADING_GIF }),\n        _jsx(\"div\", { children: REFRESHING })] }\n      ) }\n    );\n  }\n  if (!loading) {\n    if (!loading && tableName && hasColumns && !hasError) {\n      component = _jsxs(_Fragment, { children: [\n        _jsx(StyledTitle, { children: COLUMN_TITLE }),\n        tableWithDataset ? _jsx(TableContainerWithBanner, { children:\n          _jsx(TableScrollContainer, { children:\n            _jsx(Table, { loading: loading, size: TableSize.Small, columns: tableColumnDefinition, data: columnList, pageSizeOptions: pageSizeOptions, defaultPageSize: DEFAULT_PAGE_SIZE }) }\n          ) }\n        ) : _jsx(TableContainerWithoutBanner, { children:\n          _jsx(TableScrollContainer, { children:\n            _jsx(Table, { loading: loading, size: TableSize.Small, columns: tableColumnDefinition, data: columnList, pageSizeOptions: pageSizeOptions, defaultPageSize: DEFAULT_PAGE_SIZE }) }\n          ) }\n        )] }\n      );\n    } else\n    {\n      component = _jsx(MessageContent, { hasColumns: hasColumns, hasError: hasError, tableName: tableName });\n    }\n  }\n  return _jsxs(_Fragment, { children: [\n    tableName && _jsxs(_Fragment, { children: [\n      (datasetNames == null ? void 0 : datasetNames.includes(tableName)) &&\n      renderExistingDatasetAlert(tableWithDataset),\n      _jsxs(StyledHeader, { position: !loading && hasColumns ? EPosition.RELATIVE : EPosition.ABSOLUTE, title: tableName || '', children: [\n        _jsx(Icons.InsertRowAboveOutlined, {}),\n        tableName] }\n      )] }\n    ),\n    component,\n    loader] }\n  );\n};\nexport default DatasetPanel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}