{"ast":null,"code":"import { ensureIsArray, QueryMode, t } from '@superset-ui/core';\nexport function getQueryMode(controls) {var _controls$query_mode, _controls$all_columns;\n  const mode = controls == null ? void 0 : (_controls$query_mode = controls.query_mode) == null ? void 0 : _controls$query_mode.value;\n  if (mode === QueryMode.Aggregate || mode === QueryMode.Raw) {\n    return mode;\n  }\n  const rawColumns = controls == null ? void 0 : (_controls$all_columns = controls.all_columns) == null ? void 0 : _controls$all_columns.value;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.Raw : QueryMode.Aggregate;\n}\n/**\n * Visibility check\n */\nexport function isQueryMode(mode) {\n  return ({ controls }) => getQueryMode(controls) === mode;\n}\nexport const isAggMode = isQueryMode(QueryMode.Aggregate);\nexport const isRawMode = isQueryMode(QueryMode.Raw);\nexport const validateAggControlValues = (controls, values) => {\n  const areControlsEmpty = values.every((val) => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls }) ?\n  [t('Group By, Metrics or Percentage Metrics must have a value')] :\n  [];\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}