{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { normalizeTimestamp } from '@superset-ui/core';\n/**\n * Extended Date object with a custom formatter, and retains the original input\n * when the formatter is simple `String(..)`.\n */\nexport default class DateWithFormatter extends Date {\n\n\n  constructor(input, { formatter = String } = {}) {\n    let value = input;\n    // assuming timestamps without a timezone is in UTC time\n    if (typeof value === 'string') {\n      value = normalizeTimestamp(value);\n    }\n    super(value);this.formatter = void 0;this.input = void 0;\n    this.input = input;\n    this.formatter = formatter;\n    this.toString = () => {\n      if (this.formatter === String) {\n        return String(this.input);\n      }\n      return this.formatter ? this.formatter(this) : Date.toString.call(this);\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}