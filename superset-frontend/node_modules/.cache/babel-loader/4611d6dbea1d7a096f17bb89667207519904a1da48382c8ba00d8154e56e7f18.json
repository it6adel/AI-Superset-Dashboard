{"ast":null,"code":"import { Resizable } from 're-resizable';\nimport { styled } from '@superset-ui/core';\nimport useStoredSidebarWidth from './useStoredSidebarWidth';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst ResizableWrapper = styled.div`\n  position: absolute;\n  height: 100%;\n\n  :hover .sidebar-resizer::after {\n    background-color: ${({ theme }) => theme.colors.primary.base};\n  }\n\n  .sidebar-resizer {\n    // @z-index-above-sticky-header (100) + 1 = 101\n    z-index: 101;\n  }\n\n  .sidebar-resizer::after {\n    display: block;\n    content: '';\n    width: 1px;\n    height: 100%;\n    margin: 0 auto;\n  }\n`;\nconst ResizableSidebar = ({ id, initialWidth, minWidth, maxWidth, enable, children }) => {\n  const [width, setWidth] = useStoredSidebarWidth(id, initialWidth);\n  return _jsxs(_Fragment, { children: [\n    _jsx(ResizableWrapper, { children:\n      _jsx(Resizable, { enable: { right: enable }, handleClasses: {\n          right: 'sidebar-resizer',\n          bottom: 'hidden',\n          bottomRight: 'hidden',\n          bottomLeft: 'hidden'\n        }, size: { width, height: '100%' }, minWidth: minWidth, maxWidth: maxWidth, onResizeStop: (e, direction, ref, d) => setWidth(width + d.width) }) }\n    ),\n    children(width)] }\n  );\n};\nexport default ResizableSidebar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}