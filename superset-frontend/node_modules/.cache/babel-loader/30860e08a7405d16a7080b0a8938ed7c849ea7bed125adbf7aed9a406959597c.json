{"ast":null,"code":"import _pickBy from \"lodash/pickBy\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { LatestQueryEditorVersion } from 'src/SqlLab/types';\nimport { api } from './queryApi';\nconst sqlEditorApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    updateSqlEditorTab: builder.mutation({\n      query: ({ queryEditor: { version = LatestQueryEditorVersion, id, dbId, catalog, schema, queryLimit, sql, name, latestQueryId, hideLeftBar, templateParams, autorun, updatedAt }, extra }) => ({\n        method: 'PUT',\n        endpoint: encodeURI(`/tabstateview/${id}`),\n        postPayload: _pickBy({\n          database_id: dbId,\n          catalog,\n          schema,\n          sql,\n          label: name,\n          query_limit: queryLimit,\n          latest_query_id: latestQueryId,\n          template_params: templateParams,\n          hide_left_bar: hideLeftBar,\n          autorun,\n          extra_json: JSON.stringify({ updatedAt, version, ...extra })\n        }, (value) => value !== undefined)\n      })\n    }),\n    updateCurrentSqlEditorTab: builder.mutation({\n      query: (queryEditorId) => ({\n        method: 'POST',\n        endpoint: encodeURI(`/tabstateview/${queryEditorId}/activate`),\n        transformResponse: () => queryEditorId\n      })\n    }),\n    deleteSqlEditorTab: builder.mutation({\n      query: (queryEditorId) => ({\n        method: 'DELETE',\n        endpoint: encodeURI(`/tabstateview/${queryEditorId}`),\n        transformResponse: () => queryEditorId\n      })\n    })\n  })\n});\nexport const { useUpdateSqlEditorTabMutation, useUpdateCurrentSqlEditorTabMutation, useDeleteSqlEditorTabMutation } = sqlEditorApi;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}