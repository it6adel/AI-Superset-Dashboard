{"ast":null,"code":"import { t } from '@superset-ui/core';\nimport getErrorMessageComponentRegistry from './getErrorMessageComponentRegistry';\nimport ErrorAlert from './ErrorAlert';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DEFAULT_TITLE = t('Unexpected error');\nexport default function ErrorMessageWithStackTrace({ title = DEFAULT_TITLE, error, subtitle, link, stackTrace, source, description, descriptionDetails, fallback, compact }) {\n  // Check if a custom error message component was registered for this message\n  if (error) {\n    const ErrorMessageComponent = getErrorMessageComponentRegistry().get(error.error_type);\n    if (ErrorMessageComponent) {\n      return _jsx(ErrorMessageComponent, { compact: compact, error: error, source: source, subtitle: subtitle });\n    }\n  }\n  if (fallback) {\n    return _jsx(_Fragment, { children: fallback });\n  }\n  const computedDescriptionDetails = descriptionDetails || (\n  link || stackTrace ? _jsxs(_Fragment, { children: [\n    link && _jsx(\"a\", { href: link, target: \"_blank\", rel: \"noopener noreferrer\", children:\n      t('Request Access') }\n    ),\n    _jsx(\"br\", {}),\n    stackTrace && _jsx(\"pre\", { children: stackTrace })] }\n  ) : undefined);\n  return _jsx(ErrorAlert, { type: \"error\", errorType: title, message: subtitle, description: description, descriptionDetails: computedDescriptionDetails, compact: compact });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}