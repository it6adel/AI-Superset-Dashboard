{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getExtensionsRegistry, styled, SupersetClient, t, useTheme, css } from '@superset-ui/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport rison from 'rison';\nimport { useSelector } from 'react-redux';\nimport { useQueryParams, BooleanParam } from 'use-query-params';\nimport { LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport Loading from 'src/components/Loading';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler, createFetchRelated, uploadUserPerms } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SubMenu from 'src/features/home/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport handleResourceExport from 'src/utils/export';\nimport DatabaseModal from 'src/features/databases/DatabaseModal';\nimport UploadDataModal from 'src/features/databases/UploadDataModel';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatabaseDeleteRelatedExtension = extensionsRegistry.get('database.delete.related');\nconst dbConfigExtraExtension = extensionsRegistry.get('databaseconnection.extraOption');\nconst PAGE_SIZE = 25;\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .action-button {\n    display: inline-block;\n    height: 100%;\n  }\n`;\nfunction BooleanDisplay({ value }) {\n  const theme = useTheme();\n  return value ? _jsx(Icons.CheckOutlined, { iconSize: \"s\", iconColor: theme.colors.grayscale.dark1 }) : _jsx(Icons.CloseOutlined, { iconSize: \"s\", iconColor: theme.colors.grayscale.light1 });\n}\nfunction DatabaseList({ addDangerToast, addInfoToast, addSuccessToast, user }) {\n  const theme = useTheme();\n  const { state: { loading, resourceCount: databaseCount, resourceCollection: databases }, hasPerm, fetchData, refreshData } = useListViewResource('database', t('database'), addDangerToast);\n  const fullUser = useSelector((state) => state.user);\n  const shouldSyncPermsInAsyncMode = useSelector((state) => {var _state$common;return (_state$common = state.common) == null ? void 0 : _state$common.conf.SYNC_DB_PERMISSIONS_IN_ASYNC_MODE;});\n  const showDatabaseModal = getUrlParam(URL_PARAMS.showDatabaseModal);\n  const [query, setQuery] = useQueryParams({\n    databaseAdded: BooleanParam\n  });\n  const [databaseModalOpen, setDatabaseModalOpen] = useState(showDatabaseModal || false);\n  const [databaseCurrentlyDeleting, setDatabaseCurrentlyDeleting] = useState(null);\n  const [currentDatabase, setCurrentDatabase] = useState(null);\n  const [csvUploadDataModalOpen, setCsvUploadDataModalOpen] = useState(false);\n  const [excelUploadDataModalOpen, setExcelUploadDataModalOpen] = useState(false);\n  const [columnarUploadDataModalOpen, setColumnarUploadDataModalOpen] = useState(false);\n  const [allowUploads, setAllowUploads] = useState(false);\n  const isAdmin = isUserAdmin(fullUser);\n  const showUploads = allowUploads || isAdmin;\n  const [preparingExport, setPreparingExport] = useState(false);\n  const { roles } = fullUser;\n  const { CSV_EXTENSIONS, COLUMNAR_EXTENSIONS, EXCEL_EXTENSIONS, ALLOWED_EXTENSIONS } = useSelector((state) => state.common.conf);\n  useEffect(() => {\n    if (query != null && query.databaseAdded) {\n      setQuery({ databaseAdded: undefined });\n      refreshData();\n    }\n  }, [query, setQuery, refreshData]);\n  const openDatabaseDeleteModal = (database) => SupersetClient.get({\n    endpoint: `/api/v1/database/${database.id}/related_objects/`\n  }).\n  then(({ json = {} }) => {\n    setDatabaseCurrentlyDeleting({\n      ...database,\n      charts: json.charts,\n      dashboards: json.dashboards,\n      sqllab_tab_count: json.sqllab_tab_states.count\n    });\n  }).\n  catch(createErrorHandler((errMsg) => t('An error occurred while fetching database related data: %s', errMsg)));\n  function handleDatabaseDelete(database) {\n    const { id, database_name: dbName } = database;\n    SupersetClient.delete({\n      endpoint: `/api/v1/database/${id}`\n    }).then(() => {\n      refreshData();\n      addSuccessToast(t('Deleted: %s', dbName));\n      // Remove any extension-related data\n      if (dbConfigExtraExtension != null && dbConfigExtraExtension.onDelete) {\n        dbConfigExtraExtension.onDelete(database);\n      }\n      // Delete user-selected db from local storage\n      setItem(LocalStorageKeys.Database, null);\n      // Close delete modal\n      setDatabaseCurrentlyDeleting(null);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', dbName, errMsg))));\n  }\n  function handleDatabaseEditModal({ database = null, modalOpen = false } = {}) {\n    // Set database and modal\n    setCurrentDatabase(database);\n    setDatabaseModalOpen(modalOpen);\n  }\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n  const { canUploadCSV, canUploadColumnar, canUploadExcel } = uploadUserPerms(roles, CSV_EXTENSIONS, COLUMNAR_EXTENSIONS, EXCEL_EXTENSIONS, ALLOWED_EXTENSIONS);\n  const isDisabled = isAdmin && !allowUploads;\n  const uploadDropdownMenu = [\n  {\n    label: t('Upload file to database'),\n    childs: [\n    {\n      label: t('Upload CSV'),\n      name: 'Upload CSV file',\n      url: '#',\n      onClick: () => {\n        setCsvUploadDataModalOpen(true);\n      },\n      perm: canUploadCSV && showUploads,\n      disable: isDisabled\n    },\n    {\n      label: t('Upload Excel'),\n      name: 'Upload Excel file',\n      url: '#',\n      onClick: () => {\n        setExcelUploadDataModalOpen(true);\n      },\n      perm: canUploadExcel && showUploads,\n      disable: isDisabled\n    },\n    {\n      label: t('Upload Columnar'),\n      name: 'Upload columnar file',\n      url: '#',\n      onClick: () => {\n        setColumnarUploadDataModalOpen(true);\n      },\n      perm: canUploadColumnar && showUploads,\n      disable: isDisabled\n    }]\n\n  }];\n\n  const hasFileUploadEnabled = () => {\n    const payload = {\n      filters: [\n      { col: 'allow_file_upload', opr: 'upload_is_enabled', value: true }]\n\n    };\n    SupersetClient.get({\n      endpoint: `/api/v1/database/?q=${rison.encode(payload)}`\n    }).then(({ json }) => {var _json$result;\n      // There might be some existing Gsheets and Clickhouse DBs\n      // with allow_file_upload set as True which is not possible from now on\n      const allowedDatabasesWithFileUpload = (json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _json$result.filter((database) => {var _database$engine_info;return database == null ? void 0 : (_database$engine_info = database.engine_information) == null ? void 0 : _database$engine_info.supports_file_upload;})) || [];\n      setAllowUploads((allowedDatabasesWithFileUpload == null ? void 0 : allowedDatabasesWithFileUpload.length) >= 1);\n    });\n  };\n  useEffect(() => hasFileUploadEnabled(), [databaseModalOpen]);\n  const filteredDropDown = uploadDropdownMenu.reduce((prev, cur) => {\n    // eslint-disable-next-line no-param-reassign\n    cur.childs = cur.childs.filter((item) => item.perm);\n    if (!cur.childs.length)\n    return prev;\n    prev.push(cur);\n    return prev;\n  }, []);\n  const menuData = {\n    activeChild: 'Databases',\n    dropDownLinks: filteredDropDown,\n    name: t('Databases')\n  };\n  if (canCreate) {\n    menuData.buttons = [\n    {\n\n      name: _jsxs(_Fragment, { children: [\n        _jsx(Icons.PlusOutlined, { css: css`\n                vertical-align: text-top;\n              `, iconColor: theme.colors.primary.light5, iconSize: \"m\" }),\n        t('Database')] }\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        // Ensure modal will be opened in add mode\n        handleDatabaseEditModal({ modalOpen: true });\n      }\n    }];\n\n  }\n  function handleDatabaseExport(database) {\n    if (database.id === undefined) {\n      return;\n    }\n    handleResourceExport('database', [database.id], () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  }\n  function handleDatabasePermSync(database) {\n    if (shouldSyncPermsInAsyncMode) {\n      addInfoToast(t('Validating connectivity for %s', database.database_name));\n    } else\n    {\n      addInfoToast(t('Syncing permissions for %s', database.database_name));\n    }\n    SupersetClient.post({\n      endpoint: `/api/v1/database/${database.id}/sync_permissions/`\n    }).then(({ response }) => {\n      // Sync request\n      if (response.status === 200) {\n        addSuccessToast(t('Permissions successfully synced for %s', database.database_name));\n      }\n      // Async request\n      else {\n        addInfoToast(t('Syncing permissions for %s in the background', database.database_name));\n      }\n    }, createErrorHandler((errMsg) => addDangerToast(t('An error occurred while syncing permissions for %s: %s', database.database_name, errMsg))));\n  }\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'database_name',\n    Header: t('Name')\n  },\n  {\n    accessor: 'backend',\n    Header: t('Backend'),\n    size: 'lg',\n    disableSortBy: true // TODO: api support for sorting by 'backend'\n  },\n  {\n    accessor: 'allow_run_async',\n    Header: _jsx(Tooltip, { id: \"allow-run-async-header-tooltip\", title: t('Asynchronous query execution'), placement: \"top\", children:\n      _jsx(\"span\", { children: t('AQE') }) }\n    ),\n    Cell: ({ row: { original: { allow_run_async: allowRunAsync } } }) => _jsx(BooleanDisplay, { value: allowRunAsync }),\n    size: 'sm'\n  },\n  {\n    accessor: 'allow_dml',\n    Header: _jsx(Tooltip, { id: \"allow-dml-header-tooltip\", title: t('Allow data manipulation language'), placement: \"top\", children:\n      _jsx(\"span\", { children: t('DML') }) }\n    ),\n    Cell: ({ row: { original: { allow_dml: allowDML } } }) => _jsx(BooleanDisplay, { value: allowDML }),\n    size: 'sm'\n  },\n  {\n    accessor: 'allow_file_upload',\n    Header: t('File upload'),\n    Cell: ({ row: { original: { allow_file_upload: allowFileUpload } } }) => _jsx(BooleanDisplay, { value: allowFileUpload }),\n    size: 'md'\n  },\n  {\n    accessor: 'expose_in_sqllab',\n    Header: t('Expose in SQL Lab'),\n    Cell: ({ row: { original: { expose_in_sqllab: exposeInSqllab } } }) => _jsx(BooleanDisplay, { value: exposeInSqllab }),\n    size: 'md'\n  },\n  {\n    Cell: ({ row: { original: { changed_by: changedBy, changed_on_delta_humanized: changedOn } } }) => _jsx(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleDatabaseEditModal({ database: original, modalOpen: true });\n      const handleDelete = () => openDatabaseDeleteModal(original);\n      const handleExport = () => handleDatabaseExport(original);\n      const handleSync = () => handleDatabasePermSync(original);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return _jsxs(Actions, { className: \"actions\", children: [\n        canDelete && _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDelete, children:\n          _jsx(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete database'), placement: \"bottom\", children:\n            _jsx(Icons.DeleteOutlined, { iconSize: \"l\" }) }\n          ) }\n        ),\n        canExport && _jsx(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport, children:\n            _jsx(Icons.UploadOutlined, { iconSize: \"l\" }) }\n          ) }\n        ),\n        canEdit && _jsx(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit, children:\n            _jsx(Icons.EditOutlined, { iconSize: \"l\" }) }\n          ) }\n        ),\n        canEdit && _jsx(Tooltip, { id: \"sync-action-tooltip\", title: t('Sync Permissions'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleSync, children:\n            _jsx(Icons.SyncOutlined, { iconSize: \"l\" }) }\n          ) }\n        )] }\n      );\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete,\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [canDelete, canEdit, canExport]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Name'),\n    key: 'search',\n    id: 'database_name',\n    input: 'search',\n    operator: FilterOperator.Contains\n  },\n  {\n    Header: t('Expose in SQL Lab'),\n    key: 'expose_in_sql_lab',\n    id: 'expose_in_sqllab',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: t('All'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }]\n\n  },\n  {\n    Header: _jsx(Tooltip, { id: \"allow-run-async-filter-header-tooltip\", title: t('Asynchronous query execution'), placement: \"top\", children:\n      _jsx(\"span\", { children: t('AQE') }) }\n    ),\n    key: 'allow_run_async',\n    id: 'allow_run_async',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: t('All'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }]\n\n  },\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('database', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  []);\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { ...menuData }),\n    _jsx(DatabaseModal, { databaseId: currentDatabase == null ? void 0 : currentDatabase.id, show: databaseModalOpen, onHide: handleDatabaseEditModal, onDatabaseAdd: () => {\n        refreshData();\n      } }),\n    _jsx(UploadDataModal, { addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onHide: () => {\n        setCsvUploadDataModalOpen(false);\n      }, show: csvUploadDataModalOpen, allowedExtensions: CSV_EXTENSIONS, type: \"csv\" }),\n    _jsx(UploadDataModal, { addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onHide: () => {\n        setExcelUploadDataModalOpen(false);\n      }, show: excelUploadDataModalOpen, allowedExtensions: EXCEL_EXTENSIONS, type: \"excel\" }),\n    _jsx(UploadDataModal, { addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onHide: () => {\n        setColumnarUploadDataModalOpen(false);\n      }, show: columnarUploadDataModalOpen, allowedExtensions: COLUMNAR_EXTENSIONS, type: \"columnar\" }),\n    databaseCurrentlyDeleting && _jsx(DeleteModal, { description: _jsxs(_Fragment, { children: [\n        _jsxs(\"p\", { children: [\n          t('The database'), ' ',\n          _jsx(\"b\", { children: databaseCurrentlyDeleting.database_name }), ' ',\n          t('is linked to %s charts that appear on %s dashboards and users have %s SQL Lab tabs using this database open. Are you sure you want to continue? Deleting the database will break those objects.', databaseCurrentlyDeleting.charts.count, databaseCurrentlyDeleting.dashboards.count, databaseCurrentlyDeleting.sqllab_tab_count)] }\n        ),\n        databaseCurrentlyDeleting.dashboards.count >= 1 && _jsxs(_Fragment, { children: [\n          _jsx(\"h4\", { children: t('Affected Dashboards') }),\n          _jsxs(\"ul\", { children: [\n            databaseCurrentlyDeleting.dashboards.result.\n            slice(0, 10).\n            map((result, index) => _jsx(\"li\", { children:\n              _jsx(\"a\", { href: `/superset/dashboard/${result.id}`, target: \"_atRiskItem\", children:\n                result.title }\n              ) }, result.id\n            )),\n            databaseCurrentlyDeleting.dashboards.result.length >\n            10 && _jsx(\"li\", { children:\n              t('... and %s others', databaseCurrentlyDeleting.dashboards.result.length -\n              10) }\n            )] }\n          )] }\n        ),\n        databaseCurrentlyDeleting.charts.count >= 1 && _jsxs(_Fragment, { children: [\n          _jsx(\"h4\", { children: t('Affected Charts') }),\n          _jsxs(\"ul\", { children: [\n            databaseCurrentlyDeleting.charts.result.slice(0, 10).map((result, index) => _jsx(\"li\", { children:\n              _jsx(\"a\", { href: `/explore/?slice_id=${result.id}`, target: \"_atRiskItem\", children:\n                result.slice_name }\n              ) }, result.id\n            )),\n            databaseCurrentlyDeleting.charts.result.length > 10 && _jsx(\"li\", { children:\n              t('... and %s others', databaseCurrentlyDeleting.charts.result.length - 10) }\n            )] }\n          )] }\n        ),\n        DatabaseDeleteRelatedExtension && _jsx(DatabaseDeleteRelatedExtension, { database: databaseCurrentlyDeleting })] }\n      ), onConfirm: () => {\n        if (databaseCurrentlyDeleting) {\n          handleDatabaseDelete(databaseCurrentlyDeleting);\n        }\n      }, onHide: () => setDatabaseCurrentlyDeleting(null), open: true, title: t('Delete Database?') }),\n\n    _jsx(ListView, { className: \"database-list-view\", columns: columns, count: databaseCount, data: databases, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: () => {}, pageSize: PAGE_SIZE }),\n\n    preparingExport && _jsx(Loading, {})] }\n  );\n}\nexport default withToasts(DatabaseList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}