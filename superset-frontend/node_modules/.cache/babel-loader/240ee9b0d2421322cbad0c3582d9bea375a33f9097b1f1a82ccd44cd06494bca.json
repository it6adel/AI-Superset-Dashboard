{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { sharedControls, InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { t, useTheme } from '@superset-ui/core';\nimport { CodeEditor } from '../../components/CodeEditor/CodeEditor';\nimport { ControlHeader } from '../../components/ControlHeader/controlHeader';\nimport { debounceFunc } from '../../consts';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyleControl = (props) => {\n  const theme = useTheme();\n  const defaultValue = props != null && props.value ?\n  undefined :\n  `/*\n  .data-list {\n    background-color: yellow;\n  }\n*/`;\n  return _jsxs(\"div\", { children: [\n    _jsx(ControlHeader, { children:\n      _jsxs(\"div\", { children: [\n        props.label,\n        _jsx(InfoTooltipWithTrigger, { iconsStyle: { marginLeft: theme.gridUnit }, tooltip: t('You need to configure HTML sanitization to use CSS') })] }\n      ) }\n    ),\n    _jsx(CodeEditor, { theme: \"dark\", mode: \"css\", value: props.value, defaultValue: defaultValue, onChange: (source) => {\n        debounceFunc(props.onChange, source || '');\n      } })] }\n  );\n};\nexport const styleControlSetItem = {\n  name: 'styleTemplate',\n  config: {\n    ...sharedControls.entity,\n    type: StyleControl,\n    label: t('CSS Styles'),\n    description: t('CSS applied to the chart'),\n    isInt: false,\n    renderTrigger: true,\n    valueKey: null,\n    validators: [],\n    mapStateToProps: ({ controls }) => {var _controls$handlebars_;return {\n        value: controls == null ? void 0 : (_controls$handlebars_ = controls.handlebars_template) == null ? void 0 : _controls$handlebars_.value\n      };}\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}