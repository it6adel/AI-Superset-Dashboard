{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { css, ensureIsArray, fetchTimeRange, getTimeOffset, styled, t, useTheme } from '@superset-ui/core';\nimport { DEFAULT_DATE_PATTERN, Tooltip } from '@superset-ui/chart-controls';\n\nimport { ColorSchemeEnum } from './types';\nimport { useOverflowDetection } from './useOverflowDetection';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst NumbersContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 100%;\n  overflow: auto;\n`;\nconst ComparisonValue = styled.div`\n  ${({ theme, subheaderFontSize }) => `\n    font-weight: ${theme.typography.weights.light};\n    display: flex;\n    justify-content: center;\n    font-size: ${subheaderFontSize || 20}px;\n    flex: 1 1 0px;\n  `}\n`;\nconst SymbolWrapper = styled.span`\n  ${({ theme, backgroundColor, textColor }) => `\n    background-color: ${backgroundColor};\n    color: ${textColor};\n    padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n    border-radius: ${theme.gridUnit * 2}px;\n    margin-right: ${theme.gridUnit}px;\n  `}\n`;\nexport default function PopKPI(props) {\n  const { height, width, bigNumber, prevNumber, valueDifference, percentDifferenceFormattedString, headerFontSize, subheaderFontSize, comparisonColorEnabled, comparisonColorScheme, percentDifferenceNumber, currentTimeRangeFilter, startDateOffset, shift, dashboardTimeRange } = props;\n  const [comparisonRange, setComparisonRange] = useState('');\n  useEffect(() => {\n    if (!currentTimeRangeFilter || !shift && !startDateOffset) {\n      setComparisonRange('');\n    } else\n    if (!_isEmpty(shift) || startDateOffset) {\n      const promise = fetchTimeRange(dashboardTimeRange != null ? dashboardTimeRange : currentTimeRangeFilter.comparator, currentTimeRangeFilter.subject);\n      Promise.resolve(promise).then((res) => {var _res$value;\n        const dates = res == null ? void 0 : (_res$value = res.value) == null ? void 0 : _res$value.match(DEFAULT_DATE_PATTERN);\n        const [parsedStartDate, parsedEndDate] = dates != null ? dates : [];\n        const newShift = getTimeOffset({\n          timeRangeFilter: {\n            ...currentTimeRangeFilter,\n            comparator: `${parsedStartDate} : ${parsedEndDate}`\n          },\n          shifts: ensureIsArray(shift),\n          startDate: startDateOffset || ''\n        });\n        fetchTimeRange(dashboardTimeRange != null ? dashboardTimeRange : currentTimeRangeFilter.comparator, currentTimeRangeFilter.subject, ensureIsArray(newShift)).then((res) => {\n          const response = ensureIsArray(res.value);\n          const firstRange = response.flat()[0];\n          const rangeText = firstRange.split('vs\\n');\n          setComparisonRange(rangeText.length > 1 ? rangeText[1].trim() : rangeText[0]);\n        });\n      });\n    }\n  }, [currentTimeRangeFilter, shift, startDateOffset, dashboardTimeRange]);\n  const theme = useTheme();\n  const flexGap = theme.gridUnit * 5;\n  const wrapperDivStyles = css`\n    font-family: ${theme.typography.families.sansSerif};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: ${height}px;\n    width: ${width}px;\n    overflow: auto;\n  `;\n  const bigValueContainerStyles = css`\n    font-size: ${headerFontSize || 60}px;\n    font-weight: ${theme.typography.weights.normal};\n    text-align: center;\n    margin-bottom: ${theme.gridUnit * 4}px;\n  `;\n  const getArrowIndicatorColor = () => {\n    if (!comparisonColorEnabled || percentDifferenceNumber === 0) {\n      return theme.colors.grayscale.base;\n    }\n    if (percentDifferenceNumber > 0) {\n      // Positive difference\n      return comparisonColorScheme === ColorSchemeEnum.Green ?\n      theme.colors.success.base :\n      theme.colors.error.base;\n    }\n    // Negative difference\n    return comparisonColorScheme === ColorSchemeEnum.Red ?\n    theme.colors.success.base :\n    theme.colors.error.base;\n  };\n  const arrowIndicatorStyle = css`\n    color: ${getArrowIndicatorColor()};\n    margin-left: ${theme.gridUnit}px;\n  `;\n  const defaultBackgroundColor = theme.colors.grayscale.light4;\n  const defaultTextColor = theme.colors.grayscale.base;\n  const { backgroundColor, textColor } = useMemo(() => {\n    let bgColor = defaultBackgroundColor;\n    let txtColor = defaultTextColor;\n    if (comparisonColorEnabled && percentDifferenceNumber !== 0) {\n      const useSuccess = percentDifferenceNumber > 0 &&\n      comparisonColorScheme === ColorSchemeEnum.Green ||\n      percentDifferenceNumber < 0 &&\n      comparisonColorScheme === ColorSchemeEnum.Red;\n      // Set background and text colors based on the conditions\n      bgColor = useSuccess ?\n      theme.colors.success.light2 :\n      theme.colors.error.light2;\n      txtColor = useSuccess ?\n      theme.colors.success.base :\n      theme.colors.error.base;\n    }\n    return {\n      backgroundColor: bgColor,\n      textColor: txtColor\n    };\n  }, [\n  theme,\n  comparisonColorScheme,\n  comparisonColorEnabled,\n  percentDifferenceNumber]\n  );\n  const SYMBOLS_WITH_VALUES = useMemo(() => [\n  {\n    symbol: '#',\n    value: prevNumber,\n    tooltipText: t('Data for %s', comparisonRange || 'previous range')\n  },\n  {\n    symbol: '△',\n    value: valueDifference,\n    tooltipText: t('Value difference between the time periods')\n  },\n  {\n    symbol: '%',\n    value: percentDifferenceFormattedString,\n    tooltipText: t('Percentage difference between the time periods')\n  }],\n  [\n  comparisonRange,\n  prevNumber,\n  valueDifference,\n  percentDifferenceFormattedString]\n  );\n  const { isOverflowing, symbolContainerRef, wrapperRef } = useOverflowDetection(flexGap);\n  return _jsx(\"div\", { css: wrapperDivStyles, ref: wrapperRef, children:\n    _jsxs(NumbersContainer, { css: isOverflowing &&\n      css`\n            width: fit-content;\n            margin: auto;\n            align-items: flex-start;\n          `, children: [\n      _jsxs(\"div\", { css: bigValueContainerStyles, children: [\n        bigNumber,\n        percentDifferenceNumber !== 0 && _jsx(\"span\", { css: arrowIndicatorStyle, children:\n          percentDifferenceNumber > 0 ? '↑' : '↓' }\n        )] }\n      ),\n\n      _jsx(\"div\", { css: [\n        css`\n              display: flex;\n              justify-content: space-around;\n              gap: ${flexGap}px;\n              min-width: 0;\n              flex-shrink: 1;\n            `,\n        isOverflowing ?\n        css`\n                  flex-direction: column;\n                  align-items: flex-start;\n                  width: fit-content;\n                ` :\n        css`\n                  align-items: center;\n                  width: 100%;\n                `, process.env.NODE_ENV === \"production\" ? \"\" : \";label:PopKPI;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n        ref: symbolContainerRef, children:\n        SYMBOLS_WITH_VALUES.map((symbol_with_value, index) => _jsx(ComparisonValue, { subheaderFontSize: subheaderFontSize, children:\n          _jsxs(Tooltip, { id: \"tooltip\", placement: \"top\", title: symbol_with_value.tooltipText, children: [\n            _jsx(SymbolWrapper, { backgroundColor: index > 0 ? backgroundColor : defaultBackgroundColor, textColor: index > 0 ? textColor : defaultTextColor, children:\n              symbol_with_value.symbol }\n            ),\n            symbol_with_value.value] }\n          ) }, `comparison-symbol-${symbol_with_value.symbol}`\n        )) }\n      )] }\n    ) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}