{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport Fuse from 'fuse.js';\nimport cx from 'classnames';\nimport { t, styled, css, useTheme, chartLabelWeight, chartLabelExplanations } from '@superset-ui/core';\nimport { AntdCollapse } from 'src/components';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Input } from 'src/components/Input';\nimport Label from 'src/components/Label';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport scrollIntoView from 'scroll-into-view-if-needed';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nvar Sections;\n(function (Sections) {\n  Sections[\"AllCharts\"] = \"ALL_CHARTS\";\n  Sections[\"Featured\"] = \"FEATURED\";\n  Sections[\"Category\"] = \"CATEGORY\";\n  Sections[\"Tags\"] = \"TAGS\";\n})(Sections || (Sections = {}));\nconst THUMBNAIL_GRID_UNITS = 24;\nexport const MAX_ADVISABLE_VIZ_GALLERY_WIDTH = 1090;\nconst OTHER_CATEGORY = t('Other');\nconst ALL_CHARTS = t('All charts');\nconst FEATURED = t('Featured');\nconst RECOMMENDED_TAGS = [FEATURED, t('ECharts'), t('Advanced-Analytics')];\nexport const VIZ_TYPE_CONTROL_TEST_ID = 'viz-type-control';\nconst VizPickerLayout = styled.div`\n  ${({ isSelectedVizMetadata }) => `\n    display: grid;\n    grid-template-rows: ${isSelectedVizMetadata ?\n`auto minmax(100px, 1fr) minmax(200px, 35%)` :\n'auto minmax(100px, 1fr)'};\n    // em is used here because the sidebar should be sized to fit the longest standard tag\n    grid-template-columns: minmax(14em, auto) 5fr;\n    grid-template-areas:\n      'sidebar search'\n      'sidebar main'\n      'details details';\n    height: 70vh;\n    overflow: auto;\n  `}\n`;\nconst SectionTitle = styled.h3`\n  margin-top: 0;\n  margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  font-size: ${({ theme }) => theme.typography.sizes.l}px;\n  font-weight: ${({ theme }) => theme.typography.weights.bold};\n  line-height: ${({ theme }) => theme.gridUnit * 6}px;\n`;\nconst LeftPane = styled.div`\n  grid-area: sidebar;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  overflow: auto;\n\n  .ant-collapse .ant-collapse-item {\n    .ant-collapse-header {\n      font-size: ${({ theme }) => theme.typography.sizes.s}px;\n      color: ${({ theme }) => theme.colors.grayscale.base};\n      padding-left: ${({ theme }) => theme.gridUnit * 2}px;\n      padding-bottom: ${({ theme }) => theme.gridUnit}px;\n    }\n    .ant-collapse-content .ant-collapse-content-box {\n      display: flex;\n      flex-direction: column;\n      padding: 0 ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\nconst RightPane = styled.div`\n  grid-area: main;\n  overflow-y: auto;\n`;\nconst SearchWrapper = styled.div`\n  ${({ theme }) => `\n    grid-area: search;\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-bottom: ${theme.gridUnit}px;\n    margin-left: ${theme.gridUnit * 3}px;\n    margin-right: ${theme.gridUnit * 3}px;\n    .antd5-input-affix-wrapper {\n      padding-left: ${theme.gridUnit * 2}px;\n    }\n  `}\n`;\n/** Styles to line up prefix/suffix icons in the search input */\nconst InputIconAlignment = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nconst SelectorLabel = styled.button`\n  ${({ theme }) => `\n    all: unset; // remove default button styles\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    cursor: pointer;\n    margin: ${theme.gridUnit}px 0;\n    padding: 0 ${theme.gridUnit}px;\n    border-radius: ${theme.borderRadius}px;\n    line-height: 2em;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    position: relative;\n\n    &:focus {\n      outline: initial;\n    }\n\n    &.selected {\n      background-color: ${theme.colors.primary.base};\n      color: ${theme.colors.primary.light5};\n\n      svg {\n        color: ${theme.colors.primary.light5};\n      }\n\n      &:hover {\n        .cancel {\n          visibility: visible;\n        }\n      }\n    }\n\n    & > span[role=\"img\"] {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    .cancel {\n      visibility: hidden;\n    }\n  `}\n`;\nconst IconsPane = styled.div`\n  overflow: auto;\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fill,\n    ${({ theme }) => theme.gridUnit * THUMBNAIL_GRID_UNITS}px\n  );\n  grid-auto-rows: max-content;\n  justify-content: space-evenly;\n  grid-gap: ${({ theme }) => theme.gridUnit * 2}px;\n  justify-items: center;\n  // for some reason this padding doesn't seem to apply at the bottom of the container. Why is a mystery.\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst DetailsPane = (theme) => css`\n  grid-area: details;\n  border-top: 1px solid ${theme.colors.grayscale.light2};\n`;\nconst DetailsPopulated = (theme) => css`\n  padding: ${theme.gridUnit * 4}px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto 1fr;\n  grid-template-areas:\n    'viz-name examples-header'\n    'viz-tags examples'\n    'description examples';\n`;\n// overflow hidden on the details pane and overflow auto on the description\n// (plus grid layout) enables the description to scroll while the header stays in place.\nconst TagsWrapper = styled.div`\n  grid-area: viz-tags;\n  width: ${({ theme }) => theme.gridUnit * 120}px;\n  padding-right: ${({ theme }) => theme.gridUnit * 14}px;\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst Description = styled.p`\n  grid-area: description;\n  overflow: auto;\n  padding-right: ${({ theme }) => theme.gridUnit * 14}px;\n  margin: 0;\n`;\nconst Examples = styled.div`\n  grid-area: examples;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  overflow: auto;\n  gap: ${({ theme }) => theme.gridUnit * 4}px;\n\n  img {\n    height: 100%;\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n`;\nconst thumbnailContainerCss = (theme) => css`\n  cursor: pointer;\n  width: ${theme.gridUnit * THUMBNAIL_GRID_UNITS}px;\n  position: relative;\n\n  img {\n    min-width: ${theme.gridUnit * THUMBNAIL_GRID_UNITS}px;\n    min-height: ${theme.gridUnit * THUMBNAIL_GRID_UNITS}px;\n    border: 1px solid ${theme.colors.grayscale.light2};\n    border-radius: ${theme.gridUnit}px;\n    transition: border-color ${theme.transitionTiming};\n  }\n\n  &.selected img {\n    border: 2px solid ${theme.colors.primary.light2};\n  }\n\n  &:hover:not(.selected) img {\n    border: 1px solid ${theme.colors.grayscale.light1};\n  }\n\n  .viztype-label {\n    margin-top: ${theme.gridUnit * 2}px;\n    text-align: center;\n  }\n`;\nconst HighlightLabel = styled.div`\n  ${({ theme }) => `\n    border: 1px solid ${theme.colors.primary.dark1};\n    box-sizing: border-box;\n    border-radius: ${theme.gridUnit}px;\n    background: ${theme.colors.grayscale.light5};\n    line-height: ${theme.gridUnit * 2.5}px;\n    color: ${theme.colors.primary.dark1};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-align: center;\n    padding: ${theme.gridUnit * 0.5}px ${theme.gridUnit}px;\n    cursor: pointer;\n\n    div {\n      transform: scale(0.83,0.83);\n    }\n  `}\n`;\nconst ThumbnailLabelWrapper = styled.div`\n  position: absolute;\n  right: ${({ theme }) => theme.gridUnit}px;\n  top: ${({ theme }) => theme.gridUnit * 19}px;\n`;\nconst TitleLabelWrapper = styled.div`\n  display: inline-block !important;\n  margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst Thumbnail = ({ entry, selectedViz, setSelectedViz, onDoubleClick }) => {\n  const theme = useTheme();\n  const { key, value: type } = entry;\n  const isSelected = selectedViz === entry.key;\n  return _jsxs(\"div\", { role: \"button\"\n    // using css instead of a styled component to preserve\n    // the data-test attribute\n    , css: thumbnailContainerCss(theme), tabIndex: 0, className: isSelected ? 'selected' : '', onClick: () => setSelectedViz(key), onDoubleClick: onDoubleClick, children: [\n    _jsx(\"img\", { alt: type.name, width: \"100%\", className: `viztype-selector ${isSelected ? 'selected' : ''}`, src: type.thumbnail }),\n    _jsx(\"div\", { className: \"viztype-label\", children:\n      type.name }\n    ),\n    type.label && _jsx(ThumbnailLabelWrapper, { children:\n      _jsx(HighlightLabel, { children:\n        _jsx(\"div\", { children: t(type.label) }) }\n      ) }\n    )] }\n  );\n};\n/** A list of viz thumbnails, used within the viz picker modal */\nconst ThumbnailGallery = ({ vizEntries, ...props }) => _jsx(IconsPane, { children:\n  vizEntries.map((entry) => _jsx(Thumbnail, { ...props, entry: entry }, entry.key)) }\n);\nconst Selector = ({ selector, sectionId, icon, isSelected, onClick, className }) => {\n  const btnRef = useRef(null);\n  // see Element.scrollIntoViewIfNeeded()\n  // see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded\n  useEffect(() => {\n    if (isSelected) {\n      // We need to wait for the modal to open and then scroll, so we put it in the microtask queue\n      queueMicrotask(() => scrollIntoView(btnRef.current, {\n        behavior: 'smooth',\n        scrollMode: 'if-needed'\n      }));\n    }\n  }, []);\n  return _jsxs(SelectorLabel, { ref: btnRef, name: selector, className: cx(className, isSelected && 'selected'), onClick: () => onClick(selector, sectionId), children: [\n    icon,\n    selector] }, selector\n  );\n};\nconst doesVizMatchSelector = (viz, selector) => selector === viz.category ||\nselector === OTHER_CATEGORY && viz.category == null ||\n(viz.tags || []).indexOf(selector) > -1;\nexport default function VizTypeGallery(props) {var _selectedVizMetadata$, _selectedVizMetadata$2;\n  const { selectedViz, onChange, onDoubleClick, className, denyList } = props;\n  const { mountedPluginMetadata } = usePluginContext();\n  const searchInputRef = useRef();\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [isSearchFocused, setIsSearchFocused] = useState(true);\n  const isActivelySearching = isSearchFocused && !!searchInputValue;\n  const selectedVizMetadata = selectedViz ?\n  mountedPluginMetadata[selectedViz] :\n  null;\n  const chartMetadata = useMemo(() => {\n    const result = Object.entries(mountedPluginMetadata).\n    map(([key, value]) => ({ key, value })).\n    filter(({ key }) => !denyList.includes(key)).\n    filter(({ value }) => nativeFilterGate(value.behaviors || []) && !value.deprecated).\n    sort((a, b) => a.value.name.localeCompare(b.value.name));\n    return result;\n  }, [mountedPluginMetadata, denyList]);\n  const chartsByCategory = useMemo(() => {\n    const result = {};\n    chartMetadata.forEach((entry) => {\n      const category = entry.value.category || OTHER_CATEGORY;\n      if (!result[category]) {\n        result[category] = [];\n      }\n      result[category].push(entry);\n    });\n    return result;\n  }, [chartMetadata]);\n  const categories = useMemo(() => Object.keys(chartsByCategory).sort((a, b) => {\n    // make sure Other goes at the end\n    if (a === OTHER_CATEGORY)\n    return 1;\n    if (b === OTHER_CATEGORY)\n    return -1;\n    // sort alphabetically\n    return a.localeCompare(b);\n  }), [chartsByCategory]);\n  const chartsByTags = useMemo(() => {\n    const result = {};\n    chartMetadata.forEach((entry) => {\n      const tags = entry.value.tags || [];\n      tags.forEach((tag) => {\n        if (!result[tag]) {\n          result[tag] = [];\n        }\n        result[tag].push(entry);\n      });\n    });\n    return result;\n  }, [chartMetadata]);\n  const tags = useMemo(() => Object.keys(chartsByTags).\n  sort((a, b) =>\n  // sort alphabetically\n  a.localeCompare(b)).\n  filter((tag) => RECOMMENDED_TAGS.indexOf(tag) === -1), [chartsByTags]);\n  const sortedMetadata = useMemo(() => chartMetadata.sort((a, b) => a.value.name.localeCompare(b.value.name)), [chartMetadata]);\n  const [activeSelector, setActiveSelector] = useState(() => (selectedVizMetadata == null ? void 0 : selectedVizMetadata.category) || FEATURED);\n  const [activeSection, setActiveSection] = useState(() => selectedVizMetadata != null && selectedVizMetadata.category ? Sections.Category : Sections.Featured);\n  // get a fuse instance for fuzzy search\n  const fuse = useMemo(() => new Fuse(chartMetadata, {\n    ignoreLocation: true,\n    threshold: 0.3,\n    keys: [\n    {\n      name: 'value.name',\n      weight: 4\n    },\n    {\n      name: 'value.tags',\n      weight: 2\n    },\n    'value.description']\n\n  }), [chartMetadata]);\n  const searchResults = useMemo(() => {\n    if (searchInputValue.trim() === '') {\n      return [];\n    }\n    return fuse.\n    search(searchInputValue).\n    map((result) => result.item).\n    sort((a, b) => {var _a$value, _b$value;\n      const aLabel = (_a$value = a.value) == null ? void 0 : _a$value.label;\n      const bLabel = (_b$value = b.value) == null ? void 0 : _b$value.label;\n      const aOrder = aLabel && chartLabelWeight[aLabel] ?\n      chartLabelWeight[aLabel].weight :\n      0;\n      const bOrder = bLabel && chartLabelWeight[bLabel] ?\n      chartLabelWeight[bLabel].weight :\n      0;\n      return bOrder - aOrder;\n    });\n  }, [searchInputValue, fuse]);\n  const focusSearch = useCallback(() => {\n    // \"start searching\" is actually a two-stage process.\n    // When you first click on the search bar, the input is focused and nothing else happens.\n    // Once you begin typing, the selected category is cleared and the displayed viz entries change.\n    setIsSearchFocused(true);\n  }, []);\n  const changeSearch = useCallback((event) => setSearchInputValue(event.target.value), []);\n  const stopSearching = useCallback(() => {\n    // stopping a search takes you back to the category you were looking at before.\n    // Unlike focusSearch, this is a simple one-step process.\n    setIsSearchFocused(false);\n    setSearchInputValue('');\n    searchInputRef.current.blur();\n  }, []);\n  const clickSelector = useCallback((selector, sectionId) => {\n    if (isSearchFocused) {\n      stopSearching();\n    }\n    setActiveSelector(selector);\n    setActiveSection(sectionId);\n    // clear the selected viz if it is not present in the new category or tags\n    const isSelectedVizCompatible = selectedVizMetadata &&\n    doesVizMatchSelector(selectedVizMetadata, selector);\n    if (selector !== activeSelector && !isSelectedVizCompatible) {\n      onChange(null);\n    }\n  }, [\n  stopSearching,\n  isSearchFocused,\n  activeSelector,\n  selectedVizMetadata,\n  onChange]\n  );\n  const sectionMap = useMemo(() => ({\n    [Sections.Category]: {\n      title: t('Category'),\n      icon: _jsx(Icons.Category, { iconSize: \"m\" }),\n      selectors: categories\n    },\n    [Sections.Tags]: {\n      title: t('Tags'),\n      icon: _jsx(Icons.NumberOutlined, { iconSize: \"m\" }),\n      selectors: tags\n    }\n  }), [categories, tags]);\n  const getVizEntriesToDisplay = () => {\n    if (isActivelySearching) {\n      return searchResults;\n    }\n    if (activeSelector === ALL_CHARTS && activeSection === Sections.AllCharts) {\n      return sortedMetadata;\n    }\n    if (activeSelector === FEATURED &&\n    activeSection === Sections.Featured &&\n    chartsByTags[FEATURED]) {\n      return chartsByTags[FEATURED];\n    }\n    if (activeSection === Sections.Category &&\n    chartsByCategory[activeSelector]) {\n      return chartsByCategory[activeSelector];\n    }\n    if (activeSection === Sections.Tags && chartsByTags[activeSelector]) {\n      return chartsByTags[activeSelector];\n    }\n    return [];\n  };\n  return _jsxs(VizPickerLayout, { className: className, isSelectedVizMetadata: Boolean(selectedVizMetadata), children: [\n    _jsxs(LeftPane, { children: [\n      _jsx(Selector, { css: ({ gridUnit }) =>\n        // adjust style for not being inside a collapse\n        css`\n              margin: ${gridUnit * 2}px;\n              margin-bottom: 0;\n            `, sectionId: Sections.AllCharts, selector: ALL_CHARTS, icon: _jsx(Icons.Ballot, { iconSize: \"m\" }), isSelected: !isActivelySearching &&\n        ALL_CHARTS === activeSelector &&\n        Sections.AllCharts === activeSection, onClick: clickSelector }),\n      _jsx(Selector, { css: ({ gridUnit }) =>\n        // adjust style for not being inside a collapse\n        css`\n              margin: ${gridUnit * 2}px;\n              margin-bottom: 0;\n            `, sectionId: Sections.Featured, selector: FEATURED, icon: _jsx(Icons.FireOutlined, { iconSize: \"m\" }), isSelected: !isActivelySearching &&\n        FEATURED === activeSelector &&\n        Sections.Featured === activeSection, onClick: clickSelector }),\n      _jsx(AntdCollapse, { expandIconPosition: \"right\", ghost: true, defaultActiveKey: Sections.Category, children:\n        Object.keys(sectionMap).map((sectionId) => {\n          const section = sectionMap[sectionId];\n          return _jsx(AntdCollapse.Panel, { header: _jsx(\"span\", { className: \"header\", children: section.title }), children:\n            section.selectors.map((selector) => _jsx(Selector, { selector: selector, sectionId: sectionId, icon: section.icon, isSelected: !isActivelySearching &&\n              selector === activeSelector &&\n              sectionId === activeSection, onClick: clickSelector }, selector)) }, sectionId\n          );\n        }) }\n      )] }\n    ),\n\n    _jsx(SearchWrapper, { children:\n      _jsx(Input, { type: \"text\", ref: searchInputRef /* cast required because emotion */, value: searchInputValue, placeholder: t('Search all charts'), onChange: changeSearch, onFocus: focusSearch, prefix: _jsx(InputIconAlignment, { children:\n          _jsx(Icons.SearchOutlined, { iconSize: \"m\" }) }\n        ), suffix: _jsx(InputIconAlignment, { children:\n          searchInputValue && _jsx(Icons.CloseOutlined, { iconSize: \"m\", onClick: stopSearching }) }\n        ) }) }\n    ),\n\n    _jsx(RightPane, { children:\n      _jsx(ThumbnailGallery, { vizEntries: getVizEntriesToDisplay(), selectedViz: selectedViz, setSelectedViz: onChange, onDoubleClick: onDoubleClick }) }\n    ),\n\n    selectedVizMetadata ? _jsx(\"div\", { css: (theme) => [\n      DetailsPane(theme),\n      DetailsPopulated(theme)], children:\n\n      _jsxs(_Fragment, { children: [\n        _jsxs(SectionTitle, { css: css`\n                grid-area: viz-name;\n                position: relative;\n              `, children: [\n          selectedVizMetadata == null ? void 0 : selectedVizMetadata.name,\n          (selectedVizMetadata == null ? void 0 : selectedVizMetadata.label) && _jsx(Tooltip, { id: \"viz-badge-tooltip\", placement: \"top\", title: (_selectedVizMetadata$ = selectedVizMetadata.labelExplanation) != null ? _selectedVizMetadata$ :\n            chartLabelExplanations[selectedVizMetadata.label], children:\n            _jsx(TitleLabelWrapper, { children:\n              _jsx(HighlightLabel, { children:\n                _jsx(\"div\", { children: t(selectedVizMetadata.label) }) }\n              ) }\n            ) }\n          )] }\n        ),\n        _jsx(TagsWrapper, { children:\n          selectedVizMetadata == null ? void 0 : selectedVizMetadata.tags.map((tag) => _jsx(Label, { css: ({ gridUnit }) => css`\n                    margin-bottom: ${gridUnit * 2}px;\n                  `, children:\n            tag }, tag\n          )) }\n        ),\n        _jsx(Description, { children:\n          (selectedVizMetadata == null ? void 0 : selectedVizMetadata.description) ||\n          t('No description available.') }\n        ),\n        _jsx(SectionTitle, { css: css`\n                grid-area: examples-header;\n              `, children:\n          t('Examples') }\n        ),\n        _jsx(Examples, { children:\n          (selectedVizMetadata != null && (_selectedVizMetadata$2 = selectedVizMetadata.exampleGallery) != null && _selectedVizMetadata$2.length ?\n          selectedVizMetadata.exampleGallery :\n          [\n          {\n            url: selectedVizMetadata == null ? void 0 : selectedVizMetadata.thumbnail,\n            caption: selectedVizMetadata == null ? void 0 : selectedVizMetadata.name\n          }]).\n          map((example) => _jsx(\"img\", { src: example.url, alt: example.caption, title: example.caption }, example.url)) }\n        )] }\n      ) }\n    ) : null] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}