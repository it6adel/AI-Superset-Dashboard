{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled, SupersetClient, useTheme, css } from '@superset-ui/core';\nimport { useMemo, useState } from 'react';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport Icons from 'src/components/Icons';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport SubMenu from 'src/features/home/SubMenu';\nimport rison from 'rison';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport RowLevelSecurityModal from 'src/features/rls/RowLevelSecurityModal';\nimport { createErrorHandler, createFetchRelated } from 'src/views/CRUD/utils';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nfunction RowLevelSecurityList(props) {\n  const { addDangerToast, addSuccessToast, user } = props;\n  const [ruleModalOpen, setRuleModalOpen] = useState(false);\n  const [currentRule, setCurrentRule] = useState(null);\n  const theme = useTheme();\n  const { state: { loading, resourceCount: rulesCount, resourceCollection: rules, bulkSelectEnabled }, hasPerm, fetchData, refreshData, toggleBulkSelect } = useListViewResource('rowlevelsecurity', t('Row Level Security'), addDangerToast, true, undefined, undefined, true);\n  function handleRuleEdit(rule) {\n    setCurrentRule(rule);\n    setRuleModalOpen(true);\n  }\n  function handleRuleDelete({ id, name }, refreshData, addSuccessToast, addDangerToast) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/rowlevelsecurity/${id}`\n    }).then(() => {\n      refreshData();\n      addSuccessToast(t('Deleted %s', name));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', name, errMsg))));\n  }\n  function handleBulkRulesDelete(rulesToDelete) {\n    const ids = rulesToDelete.map(({ id }) => id);\n    return SupersetClient.delete({\n      endpoint: `/api/v1/rowlevelsecurity/?q=${rison.encode(ids)}`\n    }).then(() => {\n      refreshData();\n      addSuccessToast(t(`Deleted`));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting rules: %s', errMsg))));\n  }\n  function handleRuleModalHide() {\n    setCurrentRule(null);\n    setRuleModalOpen(false);\n    refreshData();\n  }\n  const canWrite = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n  const columns = useMemo(() => [\n  {\n    accessor: 'name',\n    Header: t('Name')\n  },\n  {\n    accessor: 'filter_type',\n    Header: t('Filter Type'),\n    size: 'xl'\n  },\n  {\n    accessor: 'group_key',\n    Header: t('Group Key'),\n    size: 'xl'\n  },\n  {\n    accessor: 'clause',\n    Header: t('Clause')\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => _jsx(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handleDelete = () => handleRuleDelete(original, refreshData, addSuccessToast, addDangerToast);\n      const handleEdit = () => handleRuleEdit(original);\n      return _jsxs(Actions, { className: \"actions\", children: [\n        canWrite && _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: _jsxs(_Fragment, { children: [\n            t('Are you sure you want to delete'), ' ',\n            _jsx(\"b\", { children: original.name })] }\n          ), onConfirm: handleDelete, children:\n          (confirmDelete) => _jsx(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\", children:\n            _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete, children:\n              _jsx(Icons.DeleteOutlined, { iconSize: \"l\" }) }\n            ) }\n          ) }\n        ),\n        canEdit && _jsx(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit, children:\n            _jsx(Icons.EditOutlined, { iconSize: \"l\" }) }\n          ) }\n        )] }\n      );\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canWrite && !canExport,\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [\n  user.userId,\n  canEdit,\n  canWrite,\n  canExport,\n  hasPerm,\n  refreshData,\n  addDangerToast,\n  addSuccessToast]\n  );\n  const emptyState = {\n    title: t('No Rules yet'),\n    image: 'filter-results.svg',\n    buttonAction: () => handleRuleEdit(null),\n    buttonText: canEdit ? _jsxs(_Fragment, { children: [\n      _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n            margin: auto ${theme.gridUnit * 2}px auto 0;\n            vertical-align: text-top;\n          ` }),\n      t('Rule')] }\n    ) : null\n  };\n  const filters = useMemo(() => [\n  {\n    Header: t('Name'),\n    key: 'search',\n    id: 'name',\n    input: 'search',\n    operator: FilterOperator.StartsWith\n  },\n  {\n    Header: t('Filter Type'),\n    key: 'filter_type',\n    id: 'filter_type',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Regular'), value: 'Regular' },\n    { label: t('Base'), value: 'Base' }]\n\n  },\n  {\n    Header: t('Group Key'),\n    key: 'search',\n    id: 'group_key',\n    input: 'search',\n    operator: FilterOperator.StartsWith\n  },\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('rowlevelsecurity', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  [user]);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const PAGE_SIZE = 25;\n  const subMenuButtons = [];\n  if (canWrite) {\n    subMenuButtons.push({\n      name: _jsxs(_Fragment, { children: [\n        _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n              margin: auto ${theme.gridUnit * 2}px auto 0;\n              vertical-align: text-top;\n            ` }),\n        t('Rule')] }\n      ),\n      buttonStyle: 'primary',\n      onClick: () => handleRuleEdit(null)\n    });\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n\n      onClick: toggleBulkSelect\n    });\n  }\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { name: t('Row Level Security'), buttons: subMenuButtons }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected rules?'), onConfirm: handleBulkRulesDelete, children:\n      (confirmDelete) => {\n        const bulkActions = [];\n        if (canWrite) {\n          bulkActions.push({\n            key: 'delete',\n            name: t('Delete'),\n            type: 'danger',\n            onSelect: confirmDelete\n          });\n        }\n        return _jsxs(_Fragment, { children: [\n          _jsx(RowLevelSecurityModal, { rule: currentRule, addDangerToast: addDangerToast, onHide: handleRuleModalHide, addSuccessToast: addSuccessToast, show: ruleModalOpen }),\n          _jsx(ListView, { className: \"rls-list-view\", bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, columns: columns, count: rulesCount, data: rules, emptyState: emptyState, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: () => {}, pageSize: PAGE_SIZE })] }\n        );\n      } }\n    )] }\n  );\n}\nexport default withToasts(RowLevelSecurityList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}