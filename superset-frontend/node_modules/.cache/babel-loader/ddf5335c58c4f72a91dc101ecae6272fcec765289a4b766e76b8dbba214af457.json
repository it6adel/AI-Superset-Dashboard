{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { css, logging, SupersetClient, t, useTheme } from '@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { applyColors, resetColors } from 'src/utils/colorScheme';\nimport ReportModal from 'src/features/reports/ReportModal';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { deleteActiveReport } from 'src/features/reports/ReportModal/actions';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';\nimport { useExploreMetadataBar } from './useExploreMetadataBar';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  colorScheme: PropTypes.string,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool\n};\n\nconst saveButtonStyles = (theme) => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = (theme) => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  colorScheme: dashboardColorScheme,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [currentReportDeleting, setCurrentReportDeleting] = useState(null);\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n    dashboardId && dashboards && dashboards.find((d) => d.id === dashboardId);\n\n    if (!dashboard || !dashboardColorScheme) {\n      // clean up color namespace and shared color maps\n      // to avoid colors spill outside of dashboard context\n      resetColors(metadata == null ? void 0 : metadata.color_namespace);\n    }\n\n    if (dashboard) {\n      try {var _response$json;\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`\n        });\n        const result = response == null ? void 0 : (_response$json = response.json) == null ? void 0 : _response$json.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const dashboardMetadata = JSON.parse(result.json_metadata);\n        // ensure consistency with the dashboard\n        applyColors(dashboardMetadata);\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showReportModal = () => {\n    setIsReportModalOpen(true);\n  };\n\n  const closeReportModal = () => {\n    setIsReportModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    (slice) => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch]\n  );\n\n  const handleReportDelete = async (report) => {\n    await dispatch(deleteActiveReport(report));\n    setCurrentReportDeleting(null);\n  };\n\n  const history = useHistory();\n  const { redirectSQLLab } = actions;\n\n  const redirectToSQLLab = useCallback(\n    (formData, openNewWindow = false) => {\n      redirectSQLLab(formData, !openNewWindow && history);\n    },\n    [redirectSQLLab, history]\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n  useExploreAdditionalActionsMenu(\n    latestQueryFormData,\n    canDownload,\n    slice,\n    redirectToSQLLab,\n    openPropertiesModal,\n    ownState,\n    metadata == null ? void 0 : metadata.dashboards,\n    showReportModal,\n    setCurrentReportDeleting\n  );\n\n  const metadataBar = useExploreMetadataBar(metadata, slice);\n\n  const oldSliceName = slice == null ? void 0 : slice.slice_name;\n  return (\n    _jsxs(_Fragment, { children: [\n      _jsx(PageHeaderWithActions, {\n        editableTitleProps: {\n          title: sliceName != null ? sliceName : '',\n          canEdit:\n          !slice ||\n          canOverwrite ||\n          ((slice == null ? void 0 : slice.owners) || []).includes(user == null ? void 0 : user.userId),\n          onSave: actions.updateChartTitle,\n          placeholder: t('Add the name of the chart'),\n          label: t('Chart title')\n        },\n        showTitlePanelItems: !!slice,\n        certificatiedBadgeProps: {\n          certifiedBy: slice == null ? void 0 : slice.certified_by,\n          details: slice == null ? void 0 : slice.certification_details\n        },\n        showFaveStar: !!(user != null && user.userId),\n        faveStarProps: {\n          itemId: slice == null ? void 0 : slice.slice_id,\n          fetchFaveStar: actions.fetchFaveStar,\n          saveFaveStar: actions.saveFaveStar,\n          isStarred,\n          showTooltip: true\n        },\n        titlePanelAdditionalItems:\n        _jsxs(\"div\", { css: additionalItemsStyles, children: [\n          sliceFormData ?\n          _jsx(AlteredSliceTag, {\n            className: \"altered\",\n            origFormData: {\n              ...sliceFormData,\n              chartTitle: oldSliceName\n            },\n            currentFormData: { ...formData, chartTitle: sliceName } }\n          ) :\n          null,\n          metadataBar] }\n        ),\n\n        rightPanelAdditionalItems:\n        _jsx(Tooltip, {\n          title:\n          saveDisabled ?\n          t('Add required control values to save chart') :\n          null, children:\n\n\n\n          _jsx(\"div\", { children:\n            _jsxs(Button, {\n              buttonStyle: \"secondary\",\n              onClick: showModal,\n              disabled: saveDisabled,\n\n              css: saveButtonStyles, children: [\n\n              _jsx(Icons.SaveOutlined, {\n                iconSize: \"l\",\n                iconColor: theme.colors.primary.dark2 }\n              ),\n              t('Save')] }\n            ) }\n          ) }\n        ),\n\n        additionalActionsMenu: menu,\n        menuDropdownProps: {\n          open: isDropdownVisible,\n          onOpenChange: setIsDropdownVisible\n        } }\n      ),\n      isPropertiesModalOpen &&\n      _jsx(PropertiesModal, {\n        show: isPropertiesModalOpen,\n        onHide: closePropertiesModal,\n        onSave: updateSlice,\n        slice: slice }\n      ),\n\n\n      _jsx(ReportModal, {\n        userId: user.userId,\n        show: isReportModalOpen,\n        onHide: closeReportModal,\n        userEmail: user.email,\n        dashboardId: dashboardId,\n        chart: chart,\n        creationMethod: \"charts\" }\n      ),\n\n      currentReportDeleting &&\n      _jsx(DeleteModal, {\n        description: t(\n          'This action will permanently delete %s.',\n          currentReportDeleting == null ? void 0 : currentReportDeleting.name\n        ),\n        onConfirm: () => {\n          if (currentReportDeleting) {\n            handleReportDelete(currentReportDeleting);\n          }\n        },\n        onHide: () => setCurrentReportDeleting(null),\n        open: true,\n        title: t('Delete Report?') }\n      )] }\n\n    ));\n\n};\n\nExploreChartHeader.propTypes = propTypes;\n\nexport default ExploreChartHeader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}