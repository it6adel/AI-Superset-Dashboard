{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/jsx-sort-default-props, react/sort-prop-types */\n/* eslint-disable react/forbid-prop-types, react/require-default-props */\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MapGL from 'react-map-gl';\nimport { WebMercatorViewport } from '@math.gl/web-mercator';\nimport ScatterPlotGlowOverlay from './ScatterPlotGlowOverlay';\nimport './MapBox.css';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst NOOP = () => {};\nexport const DEFAULT_MAX_ZOOM = 16;\nexport const DEFAULT_POINT_RADIUS = 60;\n\nconst propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  aggregatorName: PropTypes.string,\n  clusterer: PropTypes.object,\n  globalOpacity: PropTypes.number,\n  hasCustomMetric: PropTypes.bool,\n  mapStyle: PropTypes.string,\n  mapboxApiKey: PropTypes.string.isRequired,\n  onViewportChange: PropTypes.func,\n  pointRadius: PropTypes.number,\n  pointRadiusUnit: PropTypes.string,\n  renderWhileDragging: PropTypes.bool,\n  rgb: PropTypes.array,\n  bounds: PropTypes.array\n};\n\nconst defaultProps = {\n  width: 400,\n  height: 400,\n  globalOpacity: 1,\n  onViewportChange: NOOP,\n  pointRadius: DEFAULT_POINT_RADIUS,\n  pointRadiusUnit: 'Pixels'\n};\n\nclass MapBox extends Component {\n  constructor(props) {\n    super(props);\n\n    const { width, height, bounds } = this.props;\n    // Get a viewport that fits the given bounds, which all marks to be clustered.\n    // Derive lat, lon and zoom from this viewport. This is only done on initial\n    // render as the bounds don't update as we pan/zoom in the current design.\n    const mercator = new WebMercatorViewport({\n      width,\n      height\n    }).fitBounds(bounds);\n    const { latitude, longitude, zoom } = mercator;\n\n    this.state = {\n      viewport: {\n        longitude,\n        latitude,\n        zoom\n      }\n    };\n    this.handleViewportChange = this.handleViewportChange.bind(this);\n  }\n\n  handleViewportChange(viewport) {\n    this.setState({ viewport });\n    const { onViewportChange } = this.props;\n    onViewportChange(viewport);\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      aggregatorName,\n      clusterer,\n      globalOpacity,\n      mapStyle,\n      mapboxApiKey,\n      pointRadius,\n      pointRadiusUnit,\n      renderWhileDragging,\n      rgb,\n      hasCustomMetric,\n      bounds\n    } = this.props;\n    const { viewport } = this.state;\n    const isDragging =\n    viewport.isDragging === undefined ? false : viewport.isDragging;\n\n    // Compute the clusters based on the original bounds and current zoom level. Note when zoom/pan\n    // to an area outside of the original bounds, no additional queries are made to the backend to\n    // retrieve additional data.\n    // add this variable to widen the visible area\n    const offsetHorizontal = width * 0.5 / 100;\n    const offsetVertical = height * 0.5 / 100;\n    const bbox = [\n    bounds[0][0] - offsetHorizontal,\n    bounds[0][1] - offsetVertical,\n    bounds[1][0] + offsetHorizontal,\n    bounds[1][1] + offsetVertical];\n\n    const clusters = clusterer.getClusters(bbox, Math.round(viewport.zoom));\n\n    return (\n      _jsx(MapGL, { ...\n        viewport,\n        mapStyle: mapStyle,\n        width: width,\n        height: height,\n        mapboxApiAccessToken: mapboxApiKey,\n        onViewportChange: this.handleViewportChange,\n        preserveDrawingBuffer: true, children:\n\n        _jsx(ScatterPlotGlowOverlay, { ...\n          viewport,\n          isDragging: isDragging,\n          locations: clusters,\n          dotRadius: pointRadius,\n          pointRadiusUnit: pointRadiusUnit,\n          rgb: rgb,\n          globalOpacity: globalOpacity,\n          compositeOperation: \"screen\",\n          renderWhileDragging: renderWhileDragging,\n          aggregation: hasCustomMetric ? aggregatorName : null,\n          lngLatAccessor: (location) => {\n            const { coordinates } = location.geometry;\n\n            return [coordinates[0], coordinates[1]];\n          } }\n        ) }\n      ));\n\n  }\n}\n\nMapBox.propTypes = propTypes;\nMapBox.defaultProps = defaultProps;\n\nexport default MapBox;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}