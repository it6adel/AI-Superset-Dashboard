{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport ErrorAlert from './ErrorAlert';\n/*\n * Component for showing syntax errors in SQL Lab.\n */import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nfunction InvalidSQLErrorMessage({ error, source, subtitle }) {\n  const { extra, level } = error;\n  const { sql, line, column } = extra;\n  const lines = sql.split('\\n');\n  let errorLine;\n  if (line !== null)\n  errorLine = lines[line - 1];else\n  if (lines.length > 0) {\n    errorLine = lines[0];\n  }\n  const body = errorLine && _jsxs(_Fragment, { children: [\n    _jsx(\"pre\", { children: errorLine }),\n    column !== null && _jsxs(\"pre\", { children: [' '.repeat(column - 1), \"^\"] })] }\n  );\n  return _jsx(ErrorAlert, { errorType: t('Unable to parse SQL'), message: subtitle, type: level, description: body });\n}\nexport default InvalidSQLErrorMessage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}