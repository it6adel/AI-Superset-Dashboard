{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Util for layer related operations.\n */\nimport OlParser from 'geostyler-openlayers-parser';\nimport TileLayer from 'ol/layer/Tile';\nimport TileWMS from 'ol/source/TileWMS';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport XyzSource from 'ol/source/XYZ';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { isWfsLayerConf, isWmsLayerConf, isXyzLayerConf } from '../typeguards';\nimport { isVersionBelow } from './serviceUtil';\n/**\n * Create a WMS layer.\n *\n * @param wmsLayerConf The layer configuration\n *\n * @returns The created WMS layer\n */\nexport const createWmsLayer = (wmsLayerConf) => {\n  const { url, layersParam, version, attribution } = wmsLayerConf;\n  return new TileLayer({\n    source: new TileWMS({\n      url,\n      params: {\n        LAYERS: layersParam,\n        VERSION: version\n      },\n      attributions: attribution\n    })\n  });\n};\n/**\n * Create a XYZ layer.\n *\n * @param xyzLayerConf The layer configuration\n *\n * @returns The created XYZ layer\n */\nexport const createXyzLayer = (xyzLayerConf) => {\n  const { url, attribution } = xyzLayerConf;\n  return new TileLayer({\n    source: new XyzSource({\n      url,\n      attributions: attribution\n    })\n  });\n};\n/**\n * Create a WFS layer.\n *\n * @param wfsLayerConf The layer configuration\n *\n * @returns The created WFS layer\n */\nexport const createWfsLayer = async (wfsLayerConf) => {var _writeStyleResult;\n  const { url, typeName, maxFeatures, version = '1.1.0', style, attribution } = wfsLayerConf;\n  const wfsSource = new VectorSource({\n    format: new GeoJSON(),\n    attributions: attribution,\n    url: (extent) => {\n      const requestUrl = new URL(url);\n      const params = requestUrl.searchParams;\n      params.append('service', 'wfs');\n      params.append('request', 'GetFeature');\n      params.append('outputFormat', 'application/json');\n      // TODO: make CRS configurable or take it from Ol Map\n      params.append('srsName', 'EPSG:3857');\n      params.append('version', version);\n      let typeNameQuery = 'typeNames';\n      if (isVersionBelow(version, '2.0.0', 'WFS')) {\n        typeNameQuery = 'typeName';\n      }\n      params.append(typeNameQuery, typeName);\n      params.append('bbox', extent.join(','));\n      if (maxFeatures) {\n        let maxFeaturesQuery = 'count';\n        if (isVersionBelow(version, '2.0.0', 'WFS')) {\n          maxFeaturesQuery = 'maxFeatures';\n        }\n        params.append(maxFeaturesQuery, maxFeatures.toString());\n      }\n      return requestUrl.toString();\n    },\n    strategy: bboxStrategy\n  });\n  let writeStyleResult;\n  if (style) {\n    const olParser = new OlParser();\n    writeStyleResult = await olParser.writeStyle(style);\n    if (writeStyleResult.errors) {\n      console.warn('Could not create ol-style', writeStyleResult.errors);\n      return undefined;\n    }\n  }\n  return new VectorLayer({\n    source: wfsSource,\n    // @ts-ignore\n    style: (_writeStyleResult = writeStyleResult) == null ? void 0 : _writeStyleResult.output\n  });\n};\n/**\n * Create a layer instance with the provided configuration.\n *\n * @param layerConf The layer configuration\n *\n * @returns The created layer\n */\nexport const createLayer = async (layerConf) => {\n  let layer;\n  if (isWmsLayerConf(layerConf)) {\n    layer = createWmsLayer(layerConf);\n  } else\n  if (isWfsLayerConf(layerConf)) {\n    layer = await createWfsLayer(layerConf);\n  } else\n  if (isXyzLayerConf(layerConf)) {\n    layer = createXyzLayer(layerConf);\n  } else\n  {\n    console.warn('Provided layerconfig is not recognized');\n  }\n  return layer;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}