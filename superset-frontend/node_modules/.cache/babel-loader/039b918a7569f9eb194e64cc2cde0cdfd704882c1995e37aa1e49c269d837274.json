{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/** List of operators that do not require another operand */\nconst UNARY_OPERATORS = ['IS NOT NULL', 'IS NULL'];\n/** List of operators that require another operand that is a single value */\nconst BINARY_OPERATORS = [\n'==',\n'!=',\n'>',\n'<',\n'>=',\n'<=',\n'ILIKE',\n'LIKE',\n'NOT LIKE',\n'REGEX',\n'TEMPORAL_RANGE'];\n\n/** List of operators that require another operand that is a set */\nconst SET_OPERATORS = ['IN', 'NOT IN'];\n//---------------------------------------------------\n// Type guards\n//---------------------------------------------------\nconst unaryOperatorSet = new Set(UNARY_OPERATORS);\nexport function isUnaryOperator(operator) {\n  return unaryOperatorSet.has(operator);\n}\nconst binaryOperatorSet = new Set(BINARY_OPERATORS);\nexport function isBinaryOperator(operator) {\n  return binaryOperatorSet.has(operator);\n}\nconst setOperatorSet = new Set(SET_OPERATORS);\nexport function isSetOperator(operator) {\n  return setOperatorSet.has(operator);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}