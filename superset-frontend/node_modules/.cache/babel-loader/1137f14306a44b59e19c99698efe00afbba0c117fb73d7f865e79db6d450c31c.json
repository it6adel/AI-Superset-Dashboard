{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.showIf = showIf;\nexports.hideIf = hideIf;\nexports.selectedIf = selectedIf;\nexports.checkedIf = checkedIf;\nexports.options = options;\n/**\n * A showIf helper for showing any html element.\n *\n * @example\n *      {{showIf true}}     => ''\n *\n * @param {boolean} expression\n * @returns {string}\n */\nfunction showIf(expression) {\n  return expression ? '' : 'hidden';\n}\n\n/**\n * A hideIf helper for hiding any html element.\n *\n * @example\n *      {{hideIf true}}     => 'hidden'\n *\n * @param {boolean} expression\n * @returns {string}\n */\nfunction hideIf(expression) {\n  return expression ? 'hidden' : '';\n}\n\n/**\n * A selectedIf helper for dropdown and radio boxes.\n *\n * @example\n *      {{selectedIf true}} =>  'selected'\n *\n * @param {boolean} expression\n * @returns {string}\n */\nfunction selectedIf(expression) {\n  return expression ? 'selected' : '';\n}\n\n/**\n * A checkedIf helper for checkboxes.\n *\n * @example\n *      {{checkedIf true}}  => 'checked'\n *\n * @param {boolean} expression\n * @returns {string}\n */\nfunction checkedIf(expression) {\n  return expression ? 'checked' : '';\n}\n\n/**\n * An options helper for generating <option> list for <select> dropdowns.\n *\n * @example\n * A simple example:\n *\n *      const data = [\n *          {\n *              id: 1,\n *              description: 'Foo'\n *          },\n *          {\n *              id: 2,\n *              description: 'Bar'\n *          },\n *          {\n *              id: 3,\n *              description: 'Foo Bar'\n *          }\n *      ];\n *\n *      {{{options data selected=\"2\"}}}\n *\n * will generate html like this:\n *\n *      <option value=\"1\">Foo</option>\n *      <option value=\"2\" selected>Bar</option>\n *      <option value=\"3\">Foo Bar</option>\n *\n * @example\n * You can also override the default key names for 'id' & 'description'\n * using the 'id' & 'text' options in the helper.\n *\n *      const data = [\n *          {\n *              value: 1,\n *              text: 'New York'\n *          },\n *          {\n *              value: 2,\n *              text: 'London'\n *          }\n *      ];\n *\n *      {{{options data selected=\"1\" id=\"value\" text=\"text\"}}}\n *\n * will generate html like this:\n *\n *      <option value=\"1\" selected>New York</option>\n *      <option value=\"2\">London</option>\n *\n * @param {array} data\n * @param {object} opts Object of options that includes id, text and selected attribute.\n * @returns {array}\n */\nfunction options(data, opts) {\n  // The id & text for the <option>\n  var id = opts.hash.id || 'id';\n  var text = opts.hash.text || 'description';\n\n  // The selection \"id\" of the <option>\n  var selectedId = opts.hash.selected || null;\n\n  return data.map(function (item) {\n    var value = item[id] || '';\n    var innerText = item[text] || '';\n    var selected = value == selectedId ? ' selected' : '';\n\n    return '<option value=\"' + value + '\"' + selected + '>' + innerText + '</option>';\n  }).join('\\n');\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}