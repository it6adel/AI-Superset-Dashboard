{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { css, t, isDefined, styled } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport { OPEN_FILTER_BAR_WIDTH } from 'src/dashboard/constants';\nimport { rgba } from 'emotion-rgba';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport { getFilterBarTestId } from '../utils';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst containerStyle = (theme) => css`\n  display: flex;\n\n  && > .filter-clear-all-button {\n    color: ${theme.colors.grayscale.base};\n    margin-left: 0;\n    &:hover {\n      color: ${theme.colors.primary.dark1};\n    }\n\n    &[disabled],\n    &[disabled]:hover {\n      color: ${theme.colors.grayscale.light1};\n    }\n  }\n`;\nconst verticalStyle = (theme, width) => css`\n  flex-direction: column;\n  align-items: center;\n  pointer-events: none;\n  position: fixed;\n  z-index: 100;\n\n  // filter bar width minus 1px for border\n  width: ${width - 1}px;\n  bottom: 0;\n\n  padding: ${theme.gridUnit * 4}px;\n  padding-top: ${theme.gridUnit * 6}px;\n\n  background: linear-gradient(\n    ${rgba(theme.colors.grayscale.light5, 0)},\n    ${theme.colors.grayscale.light5} ${theme.opacity.mediumLight}\n  );\n\n  & > button {\n    pointer-events: auto;\n  }\n\n  & > .filter-apply-button {\n    margin-bottom: ${theme.gridUnit * 3}px;\n  }\n`;\nconst horizontalStyle = (theme) => css`\n  align-items: center;\n  margin-left: auto;\n  && > .filter-clear-all-button {\n    text-transform: capitalize;\n    font-weight: ${theme.typography.weights.normal};\n  }\n  & > .filter-apply-button {\n    &[disabled],\n    &[disabled]:hover {\n      color: ${theme.colors.grayscale.light1};\n      background: ${theme.colors.grayscale.light3};\n    }\n  }\n`;\nconst ButtonsContainer = styled.div`\n  ${({ theme, isVertical, width }) => css`\n    ${containerStyle(theme)};\n    ${isVertical ? verticalStyle(theme, width) : horizontalStyle(theme)};\n  `}\n`;\nconst ActionButtons = ({ width = OPEN_FILTER_BAR_WIDTH, onApply, onClearAll, dataMaskApplied, dataMaskSelected, isApplyDisabled, filterBarOrientation = FilterBarOrientation.Vertical }) => {\n  const isClearAllEnabled = useMemo(() => Object.values(dataMaskApplied).some((filter) => {var _dataMaskSelected$fil, _dataMaskSelected$fil2, _filter$filterState;return isDefined((_dataMaskSelected$fil = dataMaskSelected[filter.id]) == null ? void 0 : (_dataMaskSelected$fil2 = _dataMaskSelected$fil.filterState) == null ? void 0 : _dataMaskSelected$fil2.value) ||\n    !dataMaskSelected[filter.id] &&\n    isDefined((_filter$filterState = filter.filterState) == null ? void 0 : _filter$filterState.value);}), [dataMaskApplied, dataMaskSelected]);\n  const isVertical = filterBarOrientation === FilterBarOrientation.Vertical;\n  return _jsxs(ButtonsContainer, { isVertical: isVertical, width: width, children: [\n    _jsx(Button, { disabled: isApplyDisabled, buttonStyle: \"primary\", htmlType: \"submit\", className: \"filter-apply-button\", onClick: onApply, ...getFilterBarTestId('apply-button'), children:\n      isVertical ? t('Apply filters') : t('Apply') }\n    ),\n    _jsx(Button, { disabled: !isClearAllEnabled, buttonStyle: \"link\", buttonSize: \"small\", className: \"filter-clear-all-button\", onClick: onClearAll, ...getFilterBarTestId('clear-button'), children:\n      t('Clear all') }\n    )] }\n  );\n};\nexport default ActionButtons;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}