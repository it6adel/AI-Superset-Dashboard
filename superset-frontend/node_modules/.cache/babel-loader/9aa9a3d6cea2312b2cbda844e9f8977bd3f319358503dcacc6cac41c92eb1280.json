{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\n\nexport const useOverflowDetection = (flexGap) => {\n  const symbolContainerRef = useRef(null);\n  const wrapperRef = useRef(null);\n  const [isOverflowing, setIsOverflowing] = useState(false);\n  useEffect(() => {\n    let obs;\n    const symbolContainerElem = symbolContainerRef.current;\n    const wrapperElem = wrapperRef.current;\n    if (symbolContainerElem && wrapperElem) {\n      const symbolContainerChildrenElems = Array.from(symbolContainerElem.children);\n      obs = new ResizeObserver(_debounce(() => {\n        const totalChildrenWidth = symbolContainerChildrenElems.reduce((acc, element) => {var _element$firstElement, _element$firstElement2;return (\n            // take symbol container's child's scroll width to account for the container growing with display: flex\n            acc + ((_element$firstElement = (_element$firstElement2 = element.firstElementChild) == null ? void 0 : _element$firstElement2.scrollWidth) != null ? _element$firstElement : 0));}, 0);\n        if (totalChildrenWidth +\n        flexGap * Math.max(symbolContainerChildrenElems.length - 1, 0) >\n        wrapperElem.clientWidth) {\n          setIsOverflowing(true);\n        } else\n        {\n          setIsOverflowing(false);\n        }\n      }, 500));\n      obs.observe(document.body);\n      symbolContainerChildrenElems.forEach((elem) => {\n        obs.observe(elem);\n      });\n    }\n    return () => {var _obs;return (_obs = obs) == null ? void 0 : _obs.disconnect();};\n  }, [flexGap]);\n  return { isOverflowing, symbolContainerRef, wrapperRef };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}