{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, t, validateNumber } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_FORMAT_DOCS, D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_OPTIONS, sharedControls, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { LABEL_POSITION } from '../constants';\nimport { legendSection } from '../controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { labelType, labelPosition, numberFormat, showLabels, isCircle } = DEFAULT_FORM_DATA;\nconst radarMetricMaxValue = {\n  name: 'radarMetricMaxValue',\n  config: {\n    controlType: 'InputNumber',\n    label: t('Max'),\n    description: t('The maximum value of metrics. It is an optional configuration'),\n    width: 120,\n    placeholder: t('auto'),\n    debounceDelay: 400,\n    validators: [validateNumber]\n  }\n};\nconst radarMetricMinValue = {\n  name: 'radarMetricMinValue',\n  config: {\n    controlType: 'InputNumber',\n    label: t('Min'),\n    description: t('The minimum value of metrics. It is an optional configuration. If not set, it will be the minimum value of the data'),\n    defaultValue: '0',\n    width: 120,\n    placeholder: t('auto'),\n    debounceDelay: 400,\n    validators: [validateNumber]\n  }\n};\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['metrics'],\n    ['timeseries_limit_metric'],\n    ['adhoc_filters'],\n    [\n    {\n      name: 'row_limit',\n      config: {\n        ...sharedControls.row_limit,\n        default: 10\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    ...legendSection,\n    [_jsx(ControlSubSectionHeader, { children: t('Labels') })],\n    [\n    {\n      name: 'show_labels',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Labels'),\n        renderTrigger: true,\n        default: showLabels,\n        description: t('Whether to display the labels.')\n      }\n    }],\n\n    [\n    {\n      name: 'label_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Label Type'),\n        default: labelType,\n        renderTrigger: true,\n        choices: [\n        ['value', t('Value')],\n        ['key_value', t('Category and Value')]],\n\n        description: t('What should be shown on the label?')\n      }\n    }],\n\n    [\n    {\n      name: 'label_position',\n      config: {\n        type: 'SelectControl',\n        freeForm: false,\n        label: t('Label position'),\n        renderTrigger: true,\n        choices: LABEL_POSITION,\n        default: labelPosition,\n        description: D3_FORMAT_DOCS\n      }\n    }],\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: numberFormat,\n        choices: D3_FORMAT_OPTIONS,\n        description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`\n      }\n    }],\n\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        default: 'smart_date',\n        description: D3_FORMAT_DOCS\n      }\n    }],\n\n    [_jsx(ControlSubSectionHeader, { children: t('Radar') })],\n    [\n    {\n      name: 'column_config',\n      config: {\n        type: 'ColumnConfigControl',\n        label: t('Customize Metrics'),\n        description: t('Further customize how to display each metric'),\n        renderTrigger: true,\n        configFormLayout: {\n          [GenericDataType.Numeric]: [\n          [radarMetricMinValue, radarMetricMaxValue]]\n\n        },\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$controls$met, _explore$controls, _explore$controls$met2, _chart$queriesRespons, _chart$queriesRespons2, _chart$queriesRespons3;\n          const values = (_explore$controls$met = explore == null ? void 0 : (_explore$controls = explore.controls) == null ? void 0 : (_explore$controls$met2 = _explore$controls.metrics) == null ? void 0 : _explore$controls$met2.value) != null ? _explore$controls$met :\n          [];\n          const metricColumn = values.map((value) => {\n            if (typeof value === 'string') {\n              return value;\n            }\n            return value.label;\n          });\n          const { colnames: _colnames, coltypes: _coltypes } = (_chart$queriesRespons = chart == null ? void 0 : (_chart$queriesRespons2 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons2[0]) != null ? _chart$queriesRespons : {};\n          const colnames = _colnames || [];\n          const coltypes = _coltypes || [];\n          return {\n            queryResponse: chart == null ? void 0 : (_chart$queriesRespons3 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons3[0],\n            appliedColumnNames: metricColumn,\n            columnsPropsObject: { colnames, coltypes }\n          };\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'is_circle',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Circle radar shape'),\n        renderTrigger: true,\n        default: isCircle,\n        description: t(\"Radar render type, whether to display 'circle' shape.\")\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}