{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Fragment, useMemo, useCallback, createRef } from 'react';\nimport { extendedDayjs } from 'src/utils/dates';\nimport { useDispatch } from 'react-redux';\nimport ReactDiffViewer from 'react-diff-viewer-continued';\nimport { useInView } from 'react-intersection-observer';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { saveDashboardRequest, setOverrideConfirm } from 'src/dashboard/actions/dashboardState';\nimport { t, styled } from '@superset-ui/core';\nimport { SAVE_TYPE_OVERWRITE_CONFIRMED } from 'src/dashboard/util/constants';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst STICKY_HEADER_TOP = 16;\nconst STICKY_HEADER_HEIGHT = 32;\nconst StyledTitle = styled.h2`\n  ${({ theme }) => `\n     color:  ${theme.colors.grayscale.dark1}\n   `}\n`;\nconst StyledEditor = styled.div`\n  ${({ theme }) => `\n     table {\n       border: 1px ${theme.colors.grayscale.light2} solid;\n     }\n     pre {\n       font-size: 11px;\n       padding: 0px;\n       background-color: transparent;\n       border: 0px;\n       line-height: 110%;\n     }\n   `}\n`;\nconst StackableHeader = styled(Button)`\n  ${({ theme, top }) => `\n     position: sticky;\n     top: ${top}px;\n     background-color: ${theme.colors.grayscale.light5};\n     margin: 0px;\n     padding: 8px 4px;\n     z-index: 1;\n     border: 0px;\n     border-radius: 0px;\n     width: 100%;\n     justify-content: flex-start;\n     border-bottom: 1px ${theme.colors.grayscale.light1} solid;\n     &::before {\n       display: inline-block;\n       position: relative;\n       opacity: 1;\n       content: \"\\\\00BB\";\n     }\n   `}\n`;\nconst StyledBottom = styled.div`\n  ${({ inView }) => `\n     margin: 8px auto;\n     text-align: center;\n     opacity: ${inView ? 0 : 1};\n  `}\n`;\nconst OverrideConfirmModal = ({ overwriteConfirmMetadata }) => {\n  const [bottomRef, hasReviewed] = useInView({ triggerOnce: true });\n  const dispatch = useDispatch();\n  const onHide = useCallback(() => dispatch(setOverrideConfirm(undefined)), [dispatch]);\n  const anchors = useMemo(() => overwriteConfirmMetadata ?\n  overwriteConfirmMetadata.overwriteConfirmItems.map(() => /*#__PURE__*/createRef()) :\n  [], [overwriteConfirmMetadata]);\n  const onAnchorClicked = useCallback((index) => {var _anchors$index, _anchors$index$curren;\n    (_anchors$index = anchors[index]) == null ? void 0 : (_anchors$index$curren = _anchors$index.current) == null ? void 0 : _anchors$index$curren.scrollIntoView({ behavior: 'smooth' });\n  }, [anchors]);\n  const onConfirmOverwrite = useCallback(() => {\n    if (overwriteConfirmMetadata) {\n      dispatch(saveDashboardRequest(overwriteConfirmMetadata.data, overwriteConfirmMetadata.dashboardId, SAVE_TYPE_OVERWRITE_CONFIRMED));\n    }\n  }, [dispatch, overwriteConfirmMetadata]);\n  return _jsx(Modal, { responsive: true, maxWidth: \"1024px\", height: \"50vh\", show: Boolean(overwriteConfirmMetadata), title: t('Confirm overwrite'), footer: _jsxs(_Fragment, { children: [\n      t('Scroll down to the bottom to enable overwriting changes. '),\n      _jsx(Button, { htmlType: \"button\", buttonSize: \"small\", onClick: onHide, cta: true, children:\n        t('No') }\n      ),\n      _jsx(Button, { htmlType: \"button\", buttonSize: \"small\", cta: true, buttonStyle: \"primary\", onClick: onConfirmOverwrite, disabled: !hasReviewed, children:\n        t('Yes, overwrite changes') }\n      )] }\n    ), onHide: onHide, children:\n    overwriteConfirmMetadata && _jsxs(_Fragment, { children: [\n      _jsx(StyledTitle, { children:\n        t('Are you sure you intend to overwrite the following values?') }\n      ),\n      _jsxs(StyledEditor, { children: [\n        overwriteConfirmMetadata.overwriteConfirmItems.map(({ keyPath, oldValue, newValue }, index) => _jsxs(Fragment, { children: [\n          _jsx(\"div\", { ref: anchors[index] }),\n          _jsx(StackableHeader, { top: index * STICKY_HEADER_HEIGHT - STICKY_HEADER_TOP, buttonStyle: \"tertiary\", onClick: () => onAnchorClicked(index), children:\n            keyPath }\n          ),\n          _jsx(ReactDiffViewer, { oldValue: oldValue, newValue: newValue, leftTitle: t('Last Updated %s by %s', extendedDayjs.\n            utc(overwriteConfirmMetadata.updatedAt).\n            calendar(), overwriteConfirmMetadata.updatedBy), rightTitle: \"new value\" })] }, keyPath\n        )),\n        _jsx(StyledBottom, { ref: bottomRef, inView: hasReviewed, children:\n\n          _jsx(Button, { htmlType: \"button\", buttonSize: \"small\", cta: true, buttonStyle: \"primary\", onClick: onConfirmOverwrite, children:\n            t('Yes, overwrite changes') }\n          ) }\n        )] }\n      )] }\n    ) }\n  );\n};\nexport default OverrideConfirmModal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}