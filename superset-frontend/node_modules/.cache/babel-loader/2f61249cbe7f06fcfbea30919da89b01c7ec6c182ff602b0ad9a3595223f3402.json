{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\nimport { Row, Col } from 'src/components';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport { legacyValidateInteger, styled, t } from '@superset-ui/core';\nimport ControlHeader from '../../ControlHeader';\nimport TextControl from '../TextControl';\nimport ColorPickerControl from '../ColorPickerControl';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nvar ContourTypes;\n(function (ContourTypes) {\n  ContourTypes[\"Isoline\"] = \"ISOLINE\";\n  ContourTypes[\"Isoband\"] = \"ISOBAND\";\n})(ContourTypes || (ContourTypes = {}));\nconst ContourActionsContainer = styled.div`\n  margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst StyledRow = styled(Row)`\n  width: 100%;\n  gap: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst isIsoband = (contour) => {\n  if (Object.keys(contour).length < 4) {\n    return false;\n  }\n  return contour.upperThreshold && contour.lowerThreshold;\n};\nconst getTabKey = (contour) => contour && isIsoband(contour) ? ContourTypes.Isoband : ContourTypes.Isoline;\nconst determineErrorMap = (tab, contour) => {\n  const errorMap = {\n    lowerThreshold: [],\n    upperThreshold: [],\n    strokeWidth: [],\n    color: []\n  };\n  // Isoline and Isoband validation\n  const lowerThresholdError = legacyValidateInteger(contour.lowerThreshold);\n  if (lowerThresholdError)\n  errorMap.lowerThreshold.push(lowerThresholdError);\n  // Isoline only validation\n  if (tab === ContourTypes.Isoline) {\n    const strokeWidthError = legacyValidateInteger(contour.strokeWidth);\n    if (strokeWidthError)\n    errorMap.strokeWidth.push(strokeWidthError);\n  }\n  // Isoband only validation\n  if (tab === ContourTypes.Isoband) {\n    const upperThresholdError = legacyValidateInteger(contour.upperThreshold);\n    if (upperThresholdError)\n    errorMap.upperThreshold.push(upperThresholdError);\n    if (!upperThresholdError &&\n    !lowerThresholdError &&\n    contour.upperThreshold &&\n    contour.lowerThreshold) {\n      const lower = parseFloat(contour.lowerThreshold);\n      const upper = parseFloat(contour.upperThreshold);\n      if (lower >= upper) {\n        errorMap.lowerThreshold.push(t('Lower threshold must be lower than upper threshold'));\n        errorMap.upperThreshold.push(t('Upper threshold must be greater than lower threshold'));\n      }\n    }\n  }\n  return errorMap;\n};\nconst convertContourToNumeric = (contour) => {\n  const formattedContour = { ...contour };\n  const numericKeys = ['lowerThreshold', 'upperThreshold', 'strokeWidth'];\n  numericKeys.forEach((key) => {\n    formattedContour[key] = Number(formattedContour[key]);\n  });\n  return formattedContour;\n};\nconst formatIsoline = (contour) => ({\n  color: contour.color,\n  lowerThreshold: contour.lowerThreshold,\n  upperThreshold: undefined,\n  strokeWidth: contour.strokeWidth\n});\nconst formatIsoband = (contour) => ({\n  color: contour.color,\n  lowerThreshold: contour.lowerThreshold,\n  upperThreshold: contour.upperThreshold,\n  strokeWidth: undefined\n});\nconst DEFAULT_CONTOUR = {\n  lowerThreshold: undefined,\n  upperThreshold: undefined,\n  color: undefined,\n  strokeWidth: undefined\n};\nconst ContourPopoverControl = ({ value: initialValue, onSave, onClose }) => {\n  const [currentTab, setCurrentTab] = useState(getTabKey(initialValue));\n  const [contour, setContour] = useState(initialValue || DEFAULT_CONTOUR);\n  const [validationErrors, setValidationErrors] = useState(determineErrorMap(getTabKey(initialValue), initialValue || DEFAULT_CONTOUR));\n  const [isComplete, setIsComplete] = useState(false);\n  useEffect(() => {\n    const isIsoband = currentTab === ContourTypes.Isoband;\n    const validLower = Boolean(contour.lowerThreshold) || contour.lowerThreshold === 0;\n    const validUpper = Boolean(contour.upperThreshold) || contour.upperThreshold === 0;\n    const validStrokeWidth = Boolean(contour.strokeWidth) || contour.strokeWidth === 0;\n    const validColor = typeof contour.color === 'object' &&\n    'r' in contour.color &&\n    typeof contour.color.r === 'number' &&\n    'g' in contour.color &&\n    typeof contour.color.g === 'number' &&\n    'b' in contour.color &&\n    typeof contour.color.b === 'number' &&\n    'a' in contour.color &&\n    typeof contour.color.a === 'number';\n    const errors = determineErrorMap(currentTab, contour);\n    if (errors !== validationErrors)\n    setValidationErrors(errors);\n    const sectionIsComplete = isIsoband ?\n    validLower && validUpper && validColor :\n    validLower && validColor && validStrokeWidth;\n    if (sectionIsComplete !== isComplete)\n    setIsComplete(sectionIsComplete);\n  }, [contour, currentTab]);\n  const onTabChange = (activeKey) => {\n    setCurrentTab(activeKey);\n  };\n  const updateStrokeWidth = (value) => {\n    const newContour = { ...contour };\n    newContour.strokeWidth = value;\n    setContour(newContour);\n  };\n  const updateColor = (rgb) => {\n    const newContour = { ...contour };\n    newContour.color = { ...rgb, a: 100 };\n    setContour(newContour);\n  };\n  const updateLowerThreshold = (value) => {\n    const newContour = { ...contour };\n    newContour.lowerThreshold = value;\n    setContour(newContour);\n  };\n  const updateUpperThreshold = (value) => {\n    const newContour = { ...contour };\n    newContour.upperThreshold = value;\n    setContour(newContour);\n  };\n  const containsErrors = () => {\n    const keys = Object.keys(validationErrors);\n    return keys.some((key) => validationErrors[key].length > 0);\n  };\n  const handleSave = () => {\n    if (isComplete && onSave) {\n      const newContour = currentTab === ContourTypes.Isoline ?\n      formatIsoline(contour) :\n      formatIsoband(contour);\n      onSave(convertContourToNumeric(newContour));\n      if (onClose)\n      onClose();\n    }\n  };\n  return _jsxs(_Fragment, { children: [\n    _jsxs(Tabs, { id: \"contour-edit-tabs\", onChange: onTabChange, defaultActiveKey: getTabKey(initialValue), children: [\n      _jsx(Tabs.TabPane, { className: \"adhoc-filter-edit-tab\", tab: t('Isoline'), children:\n        _jsxs(\"div\", { className: \"isoline-popover-section\", children: [\n          _jsx(StyledRow, { children:\n            _jsxs(Col, { flex: \"1\", children: [\n              _jsx(ControlHeader, { name: \"isoline-threshold\", label: t('Threshold'), description: t('Defines the value that determines the boundary between different regions or levels in the data '), validationErrors: validationErrors.lowerThreshold, hovered: true }),\n              _jsx(TextControl, { value: contour.lowerThreshold, onChange: updateLowerThreshold })] }\n            ) }\n          ),\n          _jsxs(StyledRow, { children: [\n            _jsxs(Col, { flex: \"1\", children: [\n              _jsx(ControlHeader, { name: \"isoline-stroke-width\", label: t('Stroke Width'), description: t('The width of the Isoline in pixels'), validationErrors: validationErrors.strokeWidth, hovered: true }),\n              _jsx(TextControl, { value: contour.strokeWidth || '', onChange: updateStrokeWidth })] }\n            ),\n            _jsxs(Col, { flex: \"1\", children: [\n              _jsx(ControlHeader, { name: \"isoline-color\", label: t('Color'), description: t('The color of the isoline'), validationErrors: validationErrors.color, hovered: true }),\n              _jsx(ColorPickerControl, { value: typeof contour === 'object' && (contour == null ? void 0 : contour.color), onChange: updateColor })] }\n            )] }\n          )] }, ContourTypes.Isoline\n        ) }, ContourTypes.Isoline\n      ),\n      _jsx(Tabs.TabPane, { className: \"adhoc-filter-edit-tab\", tab: t('Isoband'), children:\n        _jsxs(\"div\", { className: \"isoline-popover-section\", children: [\n          _jsxs(StyledRow, { children: [\n            _jsxs(Col, { flex: \"1\", children: [\n              _jsx(ControlHeader, { name: \"isoband-threshold-lower\", label: t('Lower Threshold'), description: t('The lower limit of the threshold range of the Isoband'), validationErrors: validationErrors.lowerThreshold, hovered: true }),\n              _jsx(TextControl, { value: contour.lowerThreshold || '', onChange: updateLowerThreshold })] }\n            ),\n            _jsxs(Col, { flex: \"1\", children: [\n              _jsx(ControlHeader, { name: \"isoband-threshold-upper\", label: t('Upper Threshold'), description: t('The upper limit of the threshold range of the Isoband'), validationErrors: validationErrors.upperThreshold, hovered: true }),\n              _jsx(TextControl, { value: contour.upperThreshold || '', onChange: updateUpperThreshold })] }\n            )] }\n          ),\n          _jsx(StyledRow, { children:\n            _jsxs(Col, { flex: \"1\", children: [\n              _jsx(ControlHeader, { name: \"isoband-color\", label: t('Color'), description: t('The color of the isoband'), validationErrors: validationErrors.color, hovered: true }),\n              _jsx(ColorPickerControl, { value: contour == null ? void 0 : contour.color, onChange: updateColor })] }\n            ) }\n          )] }, ContourTypes.Isoband\n        ) }, ContourTypes.Isoband\n      )] }\n    ),\n    _jsxs(ContourActionsContainer, { children: [\n      _jsx(Button, { buttonSize: \"small\", onClick: onClose, cta: true, children:\n        t('Close') }\n      ),\n      _jsx(Button, { disabled: !isComplete || containsErrors(), buttonStyle: \"primary\", buttonSize: \"small\", className: \"m-r-5\", onClick: handleSave, cta: true, children:\n        t('Save') }\n      )] }\n    )] }\n  );\n};\nexport default ContourPopoverControl;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}