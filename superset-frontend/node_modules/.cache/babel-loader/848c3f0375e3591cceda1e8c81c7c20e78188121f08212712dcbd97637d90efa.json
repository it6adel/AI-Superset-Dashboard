{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useRef } from 'react';\nimport { useTable, usePagination, useSortBy, useGlobalFilter, useColumnOrder } from 'react-table';\nimport { matchSorter, rankings } from 'match-sorter';\nimport { typedMemo, usePrevious } from '@superset-ui/core';\n\nimport GlobalFilter from './components/GlobalFilter';\nimport SelectPageSize from './components/SelectPageSize';\nimport SimplePagination from './components/Pagination';\nimport useSticky from './hooks/useSticky';\nimport { PAGE_SIZE_OPTIONS } from '../consts';\nimport { sortAlphanumericCaseInsensitive } from './utils/sortAlphanumericCaseInsensitive';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst sortTypes = {\n  alphanumeric: sortAlphanumericCaseInsensitive\n};\n// Be sure to pass our updateMyData and the skipReset option\nexport default typedMemo(function DataTable({ tableClassName, columns, data, serverPaginationData, width: initialWidth = '100%', height: initialHeight = 300, pageSize: initialPageSize = 0, initialState: initialState_ = {}, pageSizeOptions = PAGE_SIZE_OPTIONS, maxPageItemCount = 9, sticky: doSticky, searchInput = true, onServerPaginationChange, rowCount, selectPageSize, noResults: noResultsText = 'No data found', hooks, serverPagination, wrapperRef: userWrapperRef, onColumnOrderChange, renderGroupingHeaders, renderTimeComparisonDropdown, ...moreUseTableOptions }) {\n  const tableHooks = [\n  useGlobalFilter,\n  useSortBy,\n  usePagination,\n  useColumnOrder,\n  doSticky ? useSticky : [],\n  hooks || []].\n  flat();\n  const columnNames = Object.keys((data == null ? void 0 : data[0]) || {});\n  const previousColumnNames = usePrevious(columnNames);\n  const resultsSize = serverPagination ? rowCount : data.length;\n  const sortByRef = useRef([]); // cache initial `sortby` so sorting doesn't trigger page reset\n  const pageSizeRef = useRef([initialPageSize, resultsSize]);\n  const hasPagination = initialPageSize > 0 && resultsSize > 0; // pageSize == 0 means no pagination\n  const hasGlobalControl = hasPagination || !!searchInput || renderTimeComparisonDropdown;\n  const initialState = {\n    ...initialState_,\n    // zero length means all pages, the `usePagination` plugin does not\n    // understand pageSize = 0\n    sortBy: sortByRef.current,\n    pageSize: initialPageSize > 0 ? initialPageSize : resultsSize || 10\n  };\n  const defaultWrapperRef = useRef(null);\n  const globalControlRef = useRef(null);\n  const paginationRef = useRef(null);\n  const wrapperRef = userWrapperRef || defaultWrapperRef;\n  const paginationData = JSON.stringify(serverPaginationData);\n  const defaultGetTableSize = useCallback(() => {\n    if (wrapperRef.current) {var _globalControlRef$cur, _paginationRef$curren;\n      // `initialWidth` and `initialHeight` could be also parameters like `100%`\n      // `Number` returns `NaN` on them, then we fallback to computed size\n      const width = Number(initialWidth) || wrapperRef.current.clientWidth;\n      const height = (Number(initialHeight) || wrapperRef.current.clientHeight) - (\n      ((_globalControlRef$cur = globalControlRef.current) == null ? void 0 : _globalControlRef$cur.clientHeight) || 0) - (\n      ((_paginationRef$curren = paginationRef.current) == null ? void 0 : _paginationRef$curren.clientHeight) || 0);\n      return { width, height };\n    }\n    return undefined;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  initialHeight,\n  initialWidth,\n  wrapperRef,\n  hasPagination,\n  hasGlobalControl,\n  paginationRef,\n  resultsSize,\n  paginationData]\n  );\n  const defaultGlobalFilter = useCallback((rows, columnIds, filterValue) => {\n    // allow searching by \"col1_value col2_value\"\n    const joinedString = (row) => columnIds.map((x) => row.values[x]).join(' ');\n    return matchSorter(rows, filterValue, {\n      keys: [...columnIds, joinedString],\n      threshold: rankings.ACRONYM\n    });\n  }, []);\n  const { getTableProps, getTableBodyProps, prepareRow, headerGroups, footerGroups, page, pageCount, gotoPage, preGlobalFilteredRows, setGlobalFilter, setPageSize: setPageSize_, wrapStickyTable, setColumnOrder, allColumns, state: { pageIndex, pageSize, globalFilter: filterValue, sticky = {} } } = useTable({\n    columns,\n    data,\n    initialState,\n    getTableSize: defaultGetTableSize,\n    globalFilter: defaultGlobalFilter,\n    sortTypes,\n    autoResetSortBy: !_isEqual(columnNames, previousColumnNames),\n    ...moreUseTableOptions\n  }, ...tableHooks);\n  // make setPageSize accept 0\n  const setPageSize = (size) => {\n    if (serverPagination) {\n      onServerPaginationChange(0, size);\n    }\n    // keep the original size if data is empty\n    if (size || resultsSize !== 0) {\n      setPageSize_(size === 0 ? resultsSize : size);\n    }\n  };\n  const noResults = typeof noResultsText === 'function' ?\n  noResultsText(filterValue) :\n  noResultsText;\n  const getNoResults = () => _jsx(\"div\", { className: \"dt-no-results\", children: noResults });\n  if (!columns || columns.length === 0) {\n    return wrapStickyTable ? wrapStickyTable(getNoResults) : getNoResults();\n  }\n  const shouldRenderFooter = columns.some((x) => !!x.Footer);\n  let columnBeingDragged = -1;\n  const onDragStart = (e) => {\n    const el = e.target;\n    columnBeingDragged = allColumns.findIndex((col) => col.id === el.dataset.columnName);\n    e.dataTransfer.setData('text/plain', `${columnBeingDragged}`);\n  };\n  const onDrop = (e) => {\n    const el = e.target;\n    const newPosition = allColumns.findIndex((col) => col.id === el.dataset.columnName);\n    if (newPosition !== -1) {\n      const currentCols = allColumns.map((c) => c.id);\n      const colToBeMoved = currentCols.splice(columnBeingDragged, 1);\n      currentCols.splice(newPosition, 0, colToBeMoved[0]);\n      setColumnOrder(currentCols);\n      // toggle value in TableChart to trigger column width recalc\n      onColumnOrderChange();\n    }\n    e.preventDefault();\n  };\n  const renderTable = () => _jsxs(\"table\", { ...getTableProps({ className: tableClassName }), children: [\n    _jsxs(\"thead\", { children: [\n      renderGroupingHeaders ? renderGroupingHeaders() : null,\n      headerGroups.map((headerGroup) => {\n        const { key: headerGroupKey, ...headerGroupProps } = headerGroup.getHeaderGroupProps();\n        return _jsx(\"tr\", { ...headerGroupProps, children:\n          headerGroup.headers.map((column) => column.render('Header', {\n            key: column.id,\n            ...column.getSortByToggleProps(),\n            onDragStart,\n            onDrop\n          })) }, headerGroupKey || headerGroup.id\n        );\n      })] }\n    ),\n    _jsx(\"tbody\", { ...getTableBodyProps(), children:\n      page && page.length > 0 ? page.map((row) => {\n        prepareRow(row);\n        const { key: rowKey, ...rowProps } = row.getRowProps();\n        return _jsx(\"tr\", { ...rowProps, role: \"row\", children:\n          row.cells.map((cell) => cell.render('Cell', { key: cell.column.id })) }, rowKey || row.id\n        );\n      }) : _jsx(\"tr\", { children:\n        _jsx(\"td\", { className: \"dt-no-results\", colSpan: columns.length, children:\n          noResults }\n        ) }\n      ) }\n    ),\n    shouldRenderFooter && _jsx(\"tfoot\", { children:\n      footerGroups.map((footerGroup) => {\n        const { key: footerGroupKey, ...footerGroupProps } = footerGroup.getHeaderGroupProps();\n        return _jsx(\"tr\", { ...footerGroupProps, role: \"row\", children:\n          footerGroup.headers.map((column) => column.render('Footer', { key: column.id })) }, footerGroupKey || footerGroup.id\n        );\n      }) }\n    )] }\n  );\n  // force update the pageSize when it's been update from the initial state\n  if (pageSizeRef.current[0] !== initialPageSize ||\n  // when initialPageSize stays as zero, but total number of records changed,\n  // we'd also need to update page size\n  initialPageSize === 0 && pageSizeRef.current[1] !== resultsSize) {\n    pageSizeRef.current = [initialPageSize, resultsSize];\n    setPageSize(initialPageSize);\n  }\n  const paginationStyle = sticky.height ?\n  {} :\n  { visibility: 'hidden' };\n  let resultPageCount = pageCount;\n  let resultCurrentPageSize = pageSize;\n  let resultCurrentPage = pageIndex;\n  let resultOnPageChange = gotoPage;\n  if (serverPagination) {var _serverPaginationData, _serverPaginationData2;\n    const serverPageSize = (_serverPaginationData = serverPaginationData == null ? void 0 : serverPaginationData.pageSize) != null ? _serverPaginationData : initialPageSize;\n    resultPageCount = Math.ceil(rowCount / serverPageSize);\n    if (!Number.isFinite(resultPageCount)) {\n      resultPageCount = 0;\n    }\n    resultCurrentPageSize = serverPageSize;\n    const foundPageSizeIndex = pageSizeOptions.findIndex(([option]) => option >= resultCurrentPageSize);\n    if (foundPageSizeIndex === -1) {\n      resultCurrentPageSize = 0;\n    }\n    resultCurrentPage = (_serverPaginationData2 = serverPaginationData == null ? void 0 : serverPaginationData.currentPage) != null ? _serverPaginationData2 : 0;\n    resultOnPageChange = (pageNumber) => onServerPaginationChange(pageNumber, serverPageSize);\n  }\n  return _jsxs(\"div\", { ref: wrapperRef, style: { width: initialWidth, height: initialHeight }, children: [\n    hasGlobalControl ? _jsx(\"div\", { ref: globalControlRef, className: \"form-inline dt-controls\", children:\n      _jsxs(\"div\", { className: \"row\", children: [\n        _jsx(\"div\", { className: renderTimeComparisonDropdown ? 'col-sm-5' : 'col-sm-6', children:\n          hasPagination ? _jsx(SelectPageSize, { total: resultsSize, current: resultCurrentPageSize, options: pageSizeOptions, selectRenderer: typeof selectPageSize === 'boolean' ?\n            undefined :\n            selectPageSize, onChange: setPageSize }) : null }\n        ),\n        searchInput ? _jsx(\"div\", { className: \"col-sm-6\", children:\n          _jsx(GlobalFilter, { searchInput: typeof searchInput === 'boolean' ? undefined : searchInput, preGlobalFilteredRows: preGlobalFilteredRows, setGlobalFilter: setGlobalFilter, filterValue: filterValue }) }\n        ) : null,\n        renderTimeComparisonDropdown ? _jsx(\"div\", { className: \"col-sm-1\", style: { float: 'right', marginTop: '6px' }, children:\n          renderTimeComparisonDropdown() }\n        ) : null] }\n      ) }\n    ) : null,\n    wrapStickyTable ? wrapStickyTable(renderTable) : renderTable(),\n    hasPagination && resultPageCount > 1 ? _jsx(SimplePagination, { ref: paginationRef, style: paginationStyle, maxPageItemCount: maxPageItemCount, pageCount: resultPageCount, currentPage: resultCurrentPage, onPageChange: resultOnPageChange }) : null] }\n  );\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}