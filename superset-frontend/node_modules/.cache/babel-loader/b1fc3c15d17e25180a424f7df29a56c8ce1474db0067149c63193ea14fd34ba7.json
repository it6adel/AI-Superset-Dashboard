{"ast":null,"code":"function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Split from 'react-split';\nimport {\n  css,\n  DatasourceType,\n  ensureIsArray,\n  isFeatureEnabled,\n  FeatureFlag,\n  getChartMetadataRegistry,\n  styled,\n  SupersetClient,\n  t,\n  useTheme } from\n'@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport ChartContainer from 'src/components/Chart/ChartContainer';\nimport {\n  getItem,\n  setItem,\n  LocalStorageKeys } from\n'src/utils/localStorageHelpers';\nimport Alert from 'src/components/Alert';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport { buildV1ChartDataPayload } from 'src/explore/exploreUtils';\nimport { getChartRequiredFieldsMissingMessage } from 'src/utils/getChartRequiredFieldsMissingMessage';\nimport { DataTablesPane } from '../DataTablesPane';\nimport { ChartPills } from '../ChartPills';\nimport { ExploreAlert } from '../ExploreAlert';\nimport useResizeDetectorByObserver from './useResizeDetectorByObserver';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  onQuery: PropTypes.func,\n  can_overwrite: PropTypes.bool.isRequired,\n  can_download: PropTypes.bool.isRequired,\n  datasource: PropTypes.object,\n  dashboardId: PropTypes.number,\n  column_formats: PropTypes.object,\n  containerId: PropTypes.string.isRequired,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  vizType: PropTypes.string.isRequired,\n  form_data: PropTypes.object,\n  ownState: PropTypes.object,\n  standalone: PropTypes.bool,\n  force: PropTypes.bool,\n  timeout: PropTypes.number,\n  chartIsStale: PropTypes.bool,\n  chart: chartPropShape,\n  errorMessage: PropTypes.node,\n  triggerRender: PropTypes.bool\n};\n\nconst GUTTER_SIZE_FACTOR = 1.25;\n\nconst INITIAL_SIZES = [100, 0];\nconst MIN_SIZES = [300, 65];\nconst DEFAULT_SOUTH_PANE_HEIGHT_PERCENT = 40;\n\nconst Styles = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  align-content: stretch;\n  overflow: auto;\n  box-shadow: none;\n  height: 100%;\n\n  & > div {\n    height: 100%;\n  }\n\n  .gutter {\n    border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    width: ${({ theme }) => theme.gridUnit * 9}px;\n    margin: ${({ theme }) => theme.gridUnit * GUTTER_SIZE_FACTOR}px auto;\n  }\n\n  .gutter.gutter-vertical {\n    display: ${({ showSplite }) => showSplite ? 'block' : 'none'};\n    cursor: row-resize;\n  }\n\n  .ant-collapse {\n    .ant-tabs {\n      height: 100%;\n      .ant-tabs-nav {\n        padding-left: ${({ theme }) => theme.gridUnit * 5}px;\n        margin: 0;\n      }\n      .ant-tabs-content-holder {\n        overflow: hidden;\n        .ant-tabs-content {\n          height: 100%;\n        }\n      }\n    }\n  }\n`;var _ref = process.env.NODE_ENV === \"production\" ? { name: \"1wbll7q\", styles: \"text-decoration:underline\" } : { name: \"1iriwhq-panelBody\", styles: \"text-decoration:underline;label:panelBody;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nconst ExploreChartPanel = ({\n  chart,\n  slice,\n  vizType,\n  ownState,\n  triggerRender,\n  force,\n  datasource,\n  errorMessage,\n  form_data: formData,\n  onQuery,\n  actions,\n  timeout,\n  standalone,\n  chartIsStale,\n  chartAlert,\n  can_download: canDownload\n}) => {var _metaDataRegistry$get;\n  const theme = useTheme();\n  const gutterMargin = theme.gridUnit * GUTTER_SIZE_FACTOR;\n  const gutterHeight = theme.gridUnit * GUTTER_SIZE_FACTOR;\n  const {\n    ref: chartPanelRef,\n    observerRef: resizeObserverRef,\n    width: chartPanelWidth,\n    height: chartPanelHeight\n  } = useResizeDetectorByObserver();\n  const [splitSizes, setSplitSizes] = useState(\n    isFeatureEnabled(FeatureFlag.DatapanelClosedByDefault) ?\n    INITIAL_SIZES :\n    getItem(LocalStorageKeys.ChartSplitSizes, INITIAL_SIZES)\n  );\n  const [showSplite, setShowSplit] = useState(\n    isFeatureEnabled(FeatureFlag.DatapanelClosedByDefault) ?\n    false :\n    getItem(LocalStorageKeys.IsDatapanelOpen, false)\n  );\n\n  const [showDatasetModal, setShowDatasetModal] = useState(false);\n\n  const metaDataRegistry = getChartMetadataRegistry();\n  const { useLegacyApi } = (_metaDataRegistry$get = metaDataRegistry.get(vizType)) != null ? _metaDataRegistry$get : {};\n  const vizTypeNeedsDataset =\n  useLegacyApi && datasource.type !== DatasourceType.Table;\n  // added boolean column to below show boolean so that the errors aren't overlapping\n  const showAlertBanner =\n  !chartAlert &&\n  chartIsStale &&\n  !vizTypeNeedsDataset &&\n  chart.chartStatus !== 'failed' &&\n  ensureIsArray(chart.queriesResponse).length > 0;\n\n  const updateQueryContext = useCallback(\n    async function fetchChartData() {\n      if (slice && slice.query_context === null) {\n        const queryContext = buildV1ChartDataPayload({\n          formData: slice.form_data,\n          force,\n          resultFormat: 'json',\n          resultType: 'full',\n          setDataMask: null,\n          ownState: null\n        });\n\n        await SupersetClient.put({\n          endpoint: `/api/v1/chart/${slice.slice_id}`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            query_context: JSON.stringify(queryContext),\n            query_context_generation: true\n          })\n        });\n      }\n    },\n    [slice]\n  );\n\n  useEffect(() => {\n    updateQueryContext();\n  }, [updateQueryContext]);\n\n  useEffect(() => {\n    setItem(LocalStorageKeys.ChartSplitSizes, splitSizes);\n  }, [splitSizes]);\n\n  const onDragEnd = useCallback((sizes) => {\n    setSplitSizes(sizes);\n  }, []);\n\n  const refreshCachedQuery = useCallback(() => {\n    actions.setForceQuery(true);\n    actions.postChartFormData(\n      formData,\n      true,\n      timeout,\n      chart.id,\n      undefined,\n      ownState\n    );\n    actions.updateQueryFormData(formData, chart.id);\n  }, [actions, chart.id, formData, ownState, timeout]);\n\n  const onCollapseChange = useCallback((isOpen) => {\n    let splitSizes;\n    if (!isOpen) {\n      splitSizes = INITIAL_SIZES;\n    } else {\n      splitSizes = [\n      100 - DEFAULT_SOUTH_PANE_HEIGHT_PERCENT,\n      DEFAULT_SOUTH_PANE_HEIGHT_PERCENT];\n\n    }\n    setSplitSizes(splitSizes);\n    setShowSplit(isOpen);\n  }, []);\n\n  const renderChart = useCallback(\n    () =>\n    _jsx(\"div\", {\n      css: css`\n          min-height: 0;\n          flex: 1;\n          overflow: auto;\n        `,\n      ref: chartPanelRef, children:\n\n      chartPanelWidth && chartPanelHeight &&\n      _jsx(ChartContainer, {\n        width: Math.floor(chartPanelWidth),\n        height: chartPanelHeight,\n        ownState: ownState,\n        annotationData: chart.annotationData,\n        chartAlert: chart.chartAlert,\n        chartStackTrace: chart.chartStackTrace,\n        chartId: chart.id,\n        chartStatus: chart.chartStatus,\n        triggerRender: triggerRender,\n        force: force,\n        datasource: datasource,\n        errorMessage: errorMessage,\n        formData: formData,\n        latestQueryFormData: chart.latestQueryFormData,\n        onQuery: onQuery,\n        queriesResponse: chart.queriesResponse,\n        chartIsStale: chartIsStale,\n        setControlValue: actions.setControlValue,\n        timeout: timeout,\n        triggerQuery: chart.triggerQuery,\n        vizType: vizType }\n      ) }\n\n    ),\n\n    [\n    actions.setControlValue,\n    chart.annotationData,\n    chart.chartAlert,\n    chart.chartStackTrace,\n    chart.chartStatus,\n    chart.id,\n    chart.latestQueryFormData,\n    chart.queriesResponse,\n    chart.triggerQuery,\n    chartIsStale,\n    chartPanelHeight,\n    chartPanelRef,\n    chartPanelWidth,\n    datasource,\n    errorMessage,\n    force,\n    formData,\n    onQuery,\n    ownState,\n    timeout,\n    triggerRender,\n    vizType]\n\n  );\n\n  const panelBody = useMemo(\n    () =>\n    _jsxs(\"div\", {\n      className: \"panel-body\",\n      css: css`\n          display: flex;\n          flex-direction: column;\n        `,\n      ref: resizeObserverRef, children: [\n\n      vizTypeNeedsDataset &&\n      _jsx(Alert, {\n        message: t('Chart type requires a dataset'),\n        type: \"error\",\n        css: (theme) => css`\n              margin: 0 0 ${theme.gridUnit * 4}px 0;\n            `,\n        description:\n        _jsxs(_Fragment, { children: [\n          t(\n            'This chart type is not supported when using an unsaved query as a chart source. '\n          ),\n          _jsx(\"span\", {\n            role: \"button\",\n            tabIndex: 0,\n            onClick: () => setShowDatasetModal(true),\n            css: _ref, children:\n\n            t('Create a dataset') }\n          ),\n          t(' to visualize your data.')] }\n        ) }\n\n      ),\n\n      showAlertBanner &&\n      _jsx(ExploreAlert, {\n        title:\n        errorMessage ?\n        t('Required control values have been removed') :\n        t('Your chart is not up to date'),\n\n        bodyText:\n        errorMessage ?\n        getChartRequiredFieldsMissingMessage(false) :\n\n        _jsxs(\"span\", { children: [\n          t(\n            'You updated the values in the control panel, but the chart was not updated automatically. Run the query by clicking on the \"Update chart\" button or'\n          ), ' ',\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: onQuery, children:\n            t('click here') }\n          ), \".\"] }\n\n        ),\n\n\n        type: \"warning\",\n        css: (theme) => css`\n              margin: 0 0 ${theme.gridUnit * 4}px 0;\n            ` }\n      ),\n\n      _jsx(ChartPills, {\n        queriesResponse: chart.queriesResponse,\n        chartStatus: chart.chartStatus,\n        chartUpdateStartTime: chart.chartUpdateStartTime,\n        chartUpdateEndTime: chart.chartUpdateEndTime,\n        refreshCachedQuery: refreshCachedQuery,\n        rowLimit: formData == null ? void 0 : formData.row_limit }\n      ),\n      renderChart()] }\n    ),\n\n    [\n    resizeObserverRef,\n    showAlertBanner,\n    errorMessage,\n    onQuery,\n    chart.queriesResponse,\n    chart.chartStatus,\n    chart.chartUpdateStartTime,\n    chart.chartUpdateEndTime,\n    refreshCachedQuery,\n    formData == null ? void 0 : formData.row_limit,\n    renderChart]\n\n  );\n\n  const standaloneChartBody = useMemo(() => renderChart(), [renderChart]);\n\n  const [queryFormData, setQueryFormData] = useState(chart.latestQueryFormData);\n\n  useEffect(() => {\n    // only update when `latestQueryFormData` changes AND `triggerRender`\n    // is false. No update should be done when only `triggerRender` changes,\n    // as this can trigger a query downstream based on incomplete form data.\n    // (`latestQueryFormData` is only updated when a a valid request has been\n    // triggered).\n    if (!triggerRender) {\n      setQueryFormData(chart.latestQueryFormData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chart.latestQueryFormData]);\n\n  const elementStyle = useCallback(\n    (dimension, elementSize, gutterSize) => ({\n      [dimension]: `calc(${elementSize}% - ${gutterSize + gutterMargin}px)`\n    }),\n    [gutterMargin]\n  );\n\n  if (standalone) {\n    // dom manipulation hack to get rid of the bootstrap theme's body background\n    const standaloneClass = 'background-transparent';\n    const bodyClasses = document.body.className.split(' ');\n    if (!bodyClasses.includes(standaloneClass)) {\n      document.body.className += ` ${standaloneClass}`;\n    }\n    return (\n      _jsx(\"div\", { id: \"app\", ref: resizeObserverRef, children:\n        standaloneChartBody }\n      ));\n\n  }\n\n  return (\n    _jsxs(Styles, {\n      className: \"panel panel-default chart-container\",\n      showSplite: showSplite, children: [\n\n      _jsxs(Split, {\n        sizes: splitSizes,\n        minSize: MIN_SIZES,\n        direction: \"vertical\",\n        gutterSize: gutterHeight,\n        onDragEnd: onDragEnd,\n        elementStyle: elementStyle,\n        expandToMin: true, children: [\n\n        panelBody,\n        _jsx(DataTablesPane, {\n          ownState: ownState,\n          queryFormData: queryFormData,\n          datasource: datasource,\n          queryForce: force,\n          onCollapseChange: onCollapseChange,\n          chartStatus: chart.chartStatus,\n          errorMessage: errorMessage,\n          actions: actions,\n          canDownload: canDownload }\n        )] }\n      ),\n      showDatasetModal &&\n      _jsx(SaveDatasetModal, {\n        visible: showDatasetModal,\n        onHide: () => setShowDatasetModal(false),\n        buttonTextOnSave: t('Save'),\n        buttonTextOnOverwrite: t('Overwrite'),\n        datasource: getDatasourceAsSaveableDataset(datasource),\n        openWindow: false,\n        formData: formData }\n      )] }\n\n    ));\n\n};\n\nExploreChartPanel.propTypes = propTypes;\n\nexport default ExploreChartPanel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}