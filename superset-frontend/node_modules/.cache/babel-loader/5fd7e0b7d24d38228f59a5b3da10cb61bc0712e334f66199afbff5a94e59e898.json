{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Children, Fragment } from 'react';\nimport { mix } from 'polished';\nimport cx from 'classnames';\nimport { Button as AntdButton } from 'antd-v5';\nimport { useTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst decideType = (buttonStyle) => {\n  const typeMap = {\n    primary: 'primary',\n    danger: 'primary',\n    warning: 'primary',\n    success: 'primary',\n    secondary: 'default',\n    default: 'default',\n    tertiary: 'default',\n    dashed: 'dashed',\n    link: 'link'\n  };\n  return typeMap[buttonStyle];\n};\nexport default function Button(props) {\n  const { tooltip, placement, disabled = false, buttonSize, buttonStyle, className, cta, children, href, showMarginRight = true, ...restProps } = props;\n  const theme = useTheme();\n  const { colors, transitionTiming, borderRadius, typography } = theme;\n  const { primary, grayscale, success, warning } = colors;\n  let height = 32;\n  let padding = 18;\n  if (buttonSize === 'xsmall') {\n    height = 22;\n    padding = 5;\n  } else\n  if (buttonSize === 'small') {\n    height = 30;\n    padding = 10;\n  }\n  let backgroundColor;\n  let backgroundColorHover;\n  let backgroundColorActive;\n  let backgroundColorDisabled = grayscale.light2;\n  let color;\n  let colorHover;\n  let borderWidth = 0;\n  let borderStyle = 'none';\n  let borderColor;\n  let borderColorHover;\n  let borderColorDisabled = 'transparent';\n  if (buttonStyle === 'tertiary' || buttonStyle === 'dashed') {\n    backgroundColor = grayscale.light5;\n    backgroundColorHover = grayscale.light5;\n    backgroundColorActive = grayscale.light5;\n    backgroundColorDisabled = grayscale.light5;\n    borderWidth = 1;\n    borderStyle = buttonStyle === 'dashed' ? 'dashed' : 'solid';\n    borderColor = primary.dark1;\n    borderColorHover = primary.light1;\n    borderColorDisabled = grayscale.light2;\n  } else\n  if (buttonStyle === 'danger') {\n    colorHover = color;\n  } else\n  if (buttonStyle === 'warning') {\n    backgroundColor = warning.base;\n    backgroundColorHover = mix(0.1, grayscale.dark2, warning.base);\n    backgroundColorActive = mix(0.2, grayscale.dark2, warning.base);\n    color = grayscale.light5;\n    colorHover = color;\n  } else\n  if (buttonStyle === 'success') {\n    backgroundColor = success.base;\n    backgroundColorHover = mix(0.1, grayscale.light5, success.base);\n    backgroundColorActive = mix(0.2, grayscale.dark2, success.base);\n    color = grayscale.light5;\n    colorHover = color;\n  } else\n  if (buttonStyle === 'link') {\n    backgroundColor = 'transparent';\n    backgroundColorHover = 'transparent';\n    backgroundColorActive = 'transparent';\n    color = primary.dark1;\n  }\n  const element = children;\n  let renderedChildren = [];\n  if (element && element.type === Fragment) {\n    renderedChildren = Children.toArray(element.props.children);\n  } else\n  {\n    renderedChildren = Children.toArray(children);\n  }\n  const firstChildMargin = showMarginRight && renderedChildren.length > 1 ? theme.gridUnit * 2 : 0;\n  const effectiveButtonStyle = buttonStyle != null ? buttonStyle : 'default';\n  const button = _jsx(AntdButton, { href: disabled ? undefined : href, disabled: disabled, type: decideType(effectiveButtonStyle), danger: effectiveButtonStyle === 'danger', className: cx(className, 'superset-button',\n    // A static class name containing the button style is available to\n    // support customizing button styles in embedded dashboards.\n    `superset-button-${buttonStyle}`, { cta: !!cta }), css: /*#__PURE__*/_css({\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      lineHeight: 1.5715,\n      fontSize: typography.sizes.s,\n      fontWeight: typography.weights.bold,\n      height,\n      padding: `0px ${padding}px`,\n      transition: `all ${transitionTiming}s`,\n      minWidth: cta ? theme.gridUnit * 36 : undefined,\n      minHeight: cta ? theme.gridUnit * 8 : undefined,\n      boxShadow: 'none',\n      borderWidth,\n      borderStyle,\n      borderColor,\n      borderRadius,\n      color,\n      background: backgroundColor,\n      ...(colorHover || backgroundColorHover || borderColorHover ?\n      {\n        [`&.superset-button.superset-button-${buttonStyle}:hover`]: {\n          ...(colorHover && { color: colorHover }),\n          ...(backgroundColorHover && {\n            background: backgroundColorHover\n          }),\n          ...(borderColorHover && { borderColor: borderColorHover })\n        }\n      } :\n      {}),\n      '&:active': {\n        color,\n        backgroundColor: backgroundColorActive\n      },\n      '&:focus': {\n        color,\n        backgroundColor,\n        borderColor\n      },\n      '&[disabled], &[disabled]:hover': {\n        color: grayscale.base,\n        backgroundColor: buttonStyle === 'link' ? 'transparent' : backgroundColorDisabled,\n        borderColor: buttonStyle === 'link' ? 'transparent' : borderColorDisabled,\n        pointerEvents: 'none'\n      },\n      marginLeft: 0,\n      '& + .superset-button': {\n        marginLeft: theme.gridUnit * 2\n      },\n      '& > span > :first-of-type': {\n        marginRight: firstChildMargin\n      }\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:button;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), ...restProps, children:\n    children }\n  );\n  if (tooltip) {\n    return _jsx(Tooltip, { placement: placement, title: tooltip, children:\n\n\n      disabled ? _jsx(\"span\", { css: /*#__PURE__*/_css({\n          cursor: 'not-allowed',\n          '& > .superset-button': {\n            marginLeft: theme.gridUnit * 2\n          }\n        }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:Button;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), children:\n        button }\n      ) : button }\n    );\n  }\n  return button;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}