{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _isEmpty from \"lodash/isEmpty\";import _throttle from \"lodash/throttle\";import _debounce from \"lodash/debounce\";var _bootstrapData$common, _bootstrapData$common2;function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { CSSTransition } from 'react-transition-group';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Split from 'react-split';\nimport { css, FeatureFlag, isFeatureEnabled, styled, t, useTheme, getExtensionsRegistry } from '@superset-ui/core';\n\nimport Modal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Skeleton } from 'src/components';\nimport { Switch } from 'src/components/Switch';\nimport { Input } from 'src/components/Input';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport { addNewQueryEditor, CtasEnum, estimateQueryCost, persistEditorHeight, postStopQuery, queryEditorSetAutorun, queryEditorSetSql, queryEditorSetCursorPosition, queryEditorSetAndSaveSql, queryEditorSetTemplateParams, runQueryFromSqlEditor, saveQuery, addSavedQueryToTabState, scheduleQuery, setActiveSouthPaneTab, updateSavedQuery, formatQuery, fetchQueryEditor, switchQueryEditor } from 'src/SqlLab/actions/sqlLab';\nimport { STATE_TYPE_MAP, SQL_EDITOR_GUTTER_HEIGHT, SQL_EDITOR_GUTTER_MARGIN, SQL_TOOLBAR_HEIGHT, SQL_EDITOR_LEFTBAR_WIDTH, SQL_EDITOR_PADDING, INITIAL_NORTH_PERCENT, INITIAL_SOUTH_PERCENT, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS, WINDOW_RESIZE_THROTTLE_MS } from 'src/SqlLab/constants';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { EmptyState } from 'src/components/EmptyState';\nimport Alert from 'src/components/Alert';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport useLogAction from 'src/logger/useLogAction';\nimport { LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, LOG_ACTIONS_SQLLAB_FORMAT_SQL, LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, LOG_ACTIONS_SQLLAB_RUN_QUERY, LOG_ACTIONS_SQLLAB_STOP_QUERY, Logger } from 'src/logger/LogUtils';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport SouthPane from '../SouthPane';\nimport SaveQuery from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';\nimport QueryLimitSelect from '../QueryLimitSelect';\nimport KeyboardShortcutButton, { KEY_MAP, KeyboardShortcut } from '../KeyboardShortcutButton';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst bootstrapData = getBootstrapData();\nconst scheduledQueriesConf = bootstrapData == null ? void 0 : (_bootstrapData$common = bootstrapData.common) == null ? void 0 : (_bootstrapData$common2 = _bootstrapData$common.conf) == null ? void 0 : _bootstrapData$common2.SCHEDULED_QUERIES;\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-top: 0;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  .limitDropdown {\n    white-space: nowrap;\n  }\n`;\nconst StyledSidebar = styled.div`\n  flex: 0 0 ${({ width }) => width}px;\n  width: ${({ width }) => width}px;\n  padding: ${({ theme, hide }) => hide ? 0 : theme.gridUnit * 2.5}px;\n  border-right: 1px solid\n    ${({ theme, hide }) => hide ? 'transparent' : theme.colors.grayscale.light2};\n`;\nconst StyledSqlEditor = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .schemaPane {\n      transition: transform ${theme.transitionTiming}s ease-in-out;\n    }\n\n    .queryPane {\n      flex: 1 1 auto;\n      padding: ${theme.gridUnit * 2}px;\n      overflow-y: auto;\n      overflow-x: scroll;\n    }\n\n    .schemaPane-enter-done,\n    .schemaPane-exit {\n      transform: translateX(0);\n      z-index: 7;\n    }\n\n    .schemaPane-exit-active {\n      transform: translateX(-120%);\n    }\n\n    .schemaPane-enter-active {\n      transform: translateX(0);\n      max-width: ${theme.gridUnit * 75}px;\n    }\n\n    .schemaPane-enter,\n    .schemaPane-exit-done {\n      max-width: 0;\n      transform: translateX(-120%);\n      overflow: hidden;\n    }\n\n    .schemaPane-exit-done + .queryPane {\n      margin-left: 0;\n    }\n\n    .gutter {\n      border-top: 1px solid ${theme.colors.grayscale.light2};\n      border-bottom: 1px solid ${theme.colors.grayscale.light2};\n      width: 3%;\n      margin: ${SQL_EDITOR_GUTTER_MARGIN}px 47%;\n    }\n\n    .gutter.gutter-vertical {\n      cursor: row-resize;\n    }\n  `}\n`;\nconst extensionsRegistry = getExtensionsRegistry();\nconst elementStyle = (dimension, elementSize, gutterSize) => ({\n  [dimension]: `calc(${elementSize}% - ${gutterSize + SQL_EDITOR_GUTTER_MARGIN}px)`\n});var _ref = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nconst SqlEditor = ({ queryEditor, defaultQueryLimit, maxRow, displayLimit, saveQueryWarning, scheduleQueryWarning }) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { database, latestQuery, hideLeftBar, currentQueryEditorId, hasSqlStatement } = useSelector(({ sqlLab: { unsavedQueryEditor, databases, queries, tabHistory } }) => {var _queryEditor$sql;\n    let { dbId, latestQueryId, hideLeftBar } = queryEditor;\n    if ((unsavedQueryEditor == null ? void 0 : unsavedQueryEditor.id) === queryEditor.id) {\n      dbId = unsavedQueryEditor.dbId || dbId;\n      latestQueryId = unsavedQueryEditor.latestQueryId || latestQueryId;\n      hideLeftBar =\n      typeof unsavedQueryEditor.hideLeftBar === 'boolean' ?\n      unsavedQueryEditor.hideLeftBar :\n      hideLeftBar;\n    }\n    return {\n      hasSqlStatement: Boolean(((_queryEditor$sql = queryEditor.sql) == null ? void 0 : _queryEditor$sql.trim().length) > 0),\n      database: databases[dbId || ''],\n      latestQuery: queries[latestQueryId || ''],\n      hideLeftBar,\n      currentQueryEditorId: tabHistory.slice(-1)[0]\n    };\n  }, shallowEqual);\n  const logAction = useLogAction({ queryEditorId: queryEditor.id });\n  const isActive = currentQueryEditorId === queryEditor.id;\n  const [height, setHeight] = useState(0);\n  const [autorun, setAutorun] = useState(queryEditor.autorun);\n  const [ctas, setCtas] = useState('');\n  const [northPercent, setNorthPercent] = useState(queryEditor.northPercent || INITIAL_NORTH_PERCENT);\n  const [southPercent, setSouthPercent] = useState(queryEditor.southPercent || INITIAL_SOUTH_PERCENT);\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState(getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true));\n  const [renderHTMLEnabled, setRenderHTMLEnabled] = useState(getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, true));\n  const [showCreateAsModal, setShowCreateAsModal] = useState(false);\n  const [createAs, setCreateAs] = useState('');\n  const showEmptyState = useMemo(() => !database || _isEmpty(database), [database]);\n  const sqlEditorRef = useRef(null);\n  const northPaneRef = useRef(null);\n  const SqlFormExtension = extensionsRegistry.get('sqleditor.extension.form');\n  const startQuery = useCallback((ctasArg = false, ctas_method = CtasEnum.Table) => {\n    if (!database) {\n      return;\n    }\n    dispatch(runQueryFromSqlEditor(database, queryEditor, defaultQueryLimit, ctasArg ? ctas : '', ctasArg, ctas_method));\n    dispatch(setActiveSouthPaneTab('Results'));\n  }, [ctas, database, defaultQueryLimit, dispatch, queryEditor]);\n  const formatCurrentQuery = useCallback((useShortcut) => {\n    logAction(LOG_ACTIONS_SQLLAB_FORMAT_SQL, {\n      shortcut: Boolean(useShortcut)\n    });\n    dispatch(formatQuery(queryEditor));\n  }, [dispatch, queryEditor, logAction]);\n  const stopQuery = useCallback(() => {\n    if (latestQuery && ['running', 'pending'].indexOf(latestQuery.state) >= 0) {\n      dispatch(postStopQuery(latestQuery));\n    }\n    return false;\n  }, [dispatch, latestQuery]);\n  const runQuery = () => {\n    if (database) {\n      startQuery();\n    }\n  };\n  useEffect(() => {\n    if (autorun) {\n      setAutorun(false);\n      dispatch(queryEditorSetAutorun(queryEditor, false));\n      startQuery();\n    }\n  }, [autorun, dispatch, queryEditor, startQuery]);\n  // One layer of abstraction for easy spying in unit tests\n  const getSqlEditorHeight = () => sqlEditorRef.current ?\n  sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2 :\n  0;\n  const getHotkeyConfig = useCallback(() => {\n    // Get the user's OS\n    const userOS = detectOS();\n    return [\n    {\n      name: 'runQuery1',\n      key: KeyboardShortcut.CtrlR,\n      descr: KEY_MAP[KeyboardShortcut.CtrlR],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'runQuery2',\n      key: KeyboardShortcut.CtrlEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlEnter],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'newTab',\n      ...(userOS === 'Windows' ?\n      {\n        key: KeyboardShortcut.CtrlQ,\n        descr: KEY_MAP[KeyboardShortcut.CtrlQ]\n      } :\n      {\n        key: KeyboardShortcut.CtrlT,\n        descr: KEY_MAP[KeyboardShortcut.CtrlT]\n      }),\n      func: () => {\n        Logger.markTimeOrigin();\n        dispatch(addNewQueryEditor());\n      }\n    },\n    {\n      name: 'stopQuery',\n      ...(userOS === 'MacOS' ?\n      {\n        key: KeyboardShortcut.CtrlX,\n        descr: KEY_MAP[KeyboardShortcut.CtrlX]\n      } :\n      {\n        key: KeyboardShortcut.CtrlE,\n        descr: KEY_MAP[KeyboardShortcut.CtrlE]\n      }),\n      func: () => {\n        logAction(LOG_ACTIONS_SQLLAB_STOP_QUERY, { shortcut: true });\n        stopQuery();\n      }\n    },\n    {\n      name: 'formatQuery',\n      key: KeyboardShortcut.CtrlShiftF,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftF],\n      func: () => {\n        formatCurrentQuery(true);\n      }\n    },\n    {\n      name: 'switchTabToLeft',\n      key: KeyboardShortcut.CtrlLeft,\n      descr: KEY_MAP[KeyboardShortcut.CtrlLeft],\n      func: () => {\n        dispatch(switchQueryEditor(true));\n      }\n    },\n    {\n      name: 'switchTabToRight',\n      key: KeyboardShortcut.CtrlRight,\n      descr: KEY_MAP[KeyboardShortcut.CtrlRight],\n      func: () => {\n        dispatch(switchQueryEditor(false));\n      }\n    }];\n\n  }, [dispatch, queryEditor.sql, startQuery, stopQuery, formatCurrentQuery]);\n  const hotkeys = useMemo(() => {\n    // Get all hotkeys including ace editor hotkeys\n    // Get the user's OS\n    const userOS = detectOS();\n    const base = [\n    ...getHotkeyConfig(),\n    {\n      name: 'runQuery3',\n      key: KeyboardShortcut.CtrlShiftEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftEnter],\n      func: (editor) => {var _start, _start2, _start3, _start4, _start5;\n        if (!editor.getValue().trim()) {\n          return;\n        }\n        const session = editor.getSession();\n        const cursorPosition = editor.getCursorPosition();\n        const totalLine = session.getLength();\n        const currentRow = editor.getFirstVisibleRow();\n        const semicolonEnd = editor.find(';', {\n          backwards: false,\n          skipCurrent: true\n        });\n        let end;\n        if (semicolonEnd) {\n          ({ end } = semicolonEnd);\n        }\n        if (!end || end.row < cursorPosition.row) {\n          end = {\n            row: totalLine + 1,\n            column: 0\n          };\n        }\n        const semicolonStart = editor.find(';', {\n          backwards: true,\n          skipCurrent: true\n        });\n        let start;\n        if (semicolonStart) {\n          start = semicolonStart.end;\n        }\n        let currentLine = (_start = start) == null ? void 0 : _start.row;\n        if (!currentLine ||\n        currentLine > cursorPosition.row ||\n        currentLine === cursorPosition.row &&\n        (((_start2 = start) == null ? void 0 : _start2.column) || 0) > cursorPosition.column) {\n          currentLine = 0;\n        }\n        let content = currentLine === ((_start3 = start) == null ? void 0 : _start3.row) ?\n        session.getLine(currentLine).slice(start.column).trim() :\n        session.getLine(currentLine).trim();\n        while (!content && currentLine < totalLine) {\n          currentLine += 1;\n          content = session.getLine(currentLine).trim();\n        }\n        if (currentLine !== ((_start4 = start) == null ? void 0 : _start4.row)) {\n          start = { row: currentLine, column: 0 };\n        }\n        editor.selection.setSelectionRange({\n          start: (_start5 = start) != null ? _start5 : { row: 0, column: 0 },\n          end\n        });\n        startQuery();\n        editor.selection.clearSelection();\n        editor.moveCursorToPosition(cursorPosition);\n        editor.scrollToRow(currentRow);\n      }\n    }];\n\n    if (userOS === 'MacOS') {\n      base.push({\n        name: 'previousLine',\n        key: KeyboardShortcut.CtrlP,\n        descr: KEY_MAP[KeyboardShortcut.CtrlP],\n        func: (editor) => {\n          editor.navigateUp();\n        }\n      });\n    }\n    return base;\n  }, [getHotkeyConfig, startQuery]);\n  const onBeforeUnload = useEffectEvent((event) => {var _database$extra_json;\n    if (database != null && (_database$extra_json = database.extra_json) != null && _database$extra_json.cancel_query_on_windows_unload &&\n    (latestQuery == null ? void 0 : latestQuery.state) === 'running') {\n      event.preventDefault();\n      stopQuery();\n    }\n  });\n  const shouldLoadQueryEditor = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n  !queryEditor.loaded;\n  const loadQueryEditor = useEffectEvent(() => {\n    const duration = Logger.getTimestamp();\n    logAction(LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, {\n      duration,\n      queryEditorId: queryEditor.id,\n      inLocalStorage: Boolean(queryEditor.inLocalStorage),\n      hasLoaded: !shouldLoadQueryEditor\n    });\n    if (shouldLoadQueryEditor) {\n      dispatch(fetchQueryEditor(queryEditor, displayLimit));\n    }\n  });\n  useEffect(() => {\n    // We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    setHeight(getSqlEditorHeight());\n    const handleWindowResizeWithThrottle = _throttle(() => setHeight(getSqlEditorHeight()), WINDOW_RESIZE_THROTTLE_MS);\n    if (isActive) {\n      loadQueryEditor();\n      window.addEventListener('resize', handleWindowResizeWithThrottle);\n      window.addEventListener('beforeunload', onBeforeUnload);\n    }\n    return () => {\n      window.removeEventListener('resize', handleWindowResizeWithThrottle);\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // TODO: Remove useEffectEvent deps once https://github.com/facebook/react/pull/25881 is released\n  }, [onBeforeUnload, loadQueryEditor, isActive]);\n  useEffect(() => {\n    // setup hotkeys\n    const hotkeys = getHotkeyConfig();\n    if (isActive) {\n      // MouseTrap always override the same key\n      // Unbind (reset) will be called when App component unmount\n      hotkeys.forEach((keyConfig) => {\n        Mousetrap.bind([keyConfig.key], keyConfig.func);\n      });\n    }\n  }, [getHotkeyConfig, latestQuery, isActive]);\n  const onResizeStart = () => {\n    // Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    const editorEl = document.getElementsByClassName('ace_content')[0];\n    if (editorEl) {\n      editorEl.style.height = '100%';\n    }\n  };\n  const onResizeEnd = ([northPercent, southPercent]) => {var _northPaneRef$current;\n    setNorthPercent(northPercent);\n    setSouthPercent(southPercent);\n    if ((_northPaneRef$current = northPaneRef.current) != null && _northPaneRef$current.clientHeight) {\n      dispatch(persistEditorHeight(queryEditor, northPercent, southPercent));\n    }\n  };\n  const setQueryEditorAndSaveSql = useCallback((sql) => {\n    dispatch(queryEditorSetAndSaveSql(queryEditor, sql));\n  }, [dispatch, queryEditor]);\n  const setQueryEditorAndSaveSqlWithDebounce = useMemo(() => _debounce(setQueryEditorAndSaveSql, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS), [setQueryEditorAndSaveSql]);\n  const onSqlChanged = useEffectEvent((sql) => {\n    dispatch(queryEditorSetSql(queryEditor, sql));\n  });\n  // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  const getAceEditorAndSouthPaneHeights = (height, northPercent, southPercent) => ({\n    aceEditorHeight: height * northPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) -\n    SQL_TOOLBAR_HEIGHT,\n    southPaneHeight: height * southPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN)\n  });\n  const getQueryCostEstimate = () => {\n    logAction(LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, { shortcut: false });\n    if (database) {\n      dispatch(estimateQueryCost(queryEditor));\n    }\n  };\n  const handleToggleAutocompleteEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, !autocompleteEnabled);\n    setAutocompleteEnabled(!autocompleteEnabled);\n  };\n  const handleToggleRenderHTMLEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, !renderHTMLEnabled);\n    setRenderHTMLEnabled(!renderHTMLEnabled);\n  };\n  const createTableAs = () => {\n    startQuery(true, CtasEnum.Table);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const createViewAs = () => {\n    startQuery(true, CtasEnum.View);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const ctasChanged = (event) => {\n    setCtas(event.target.value);\n  };\n  const renderDropdown = () => {\n    const qe = queryEditor;\n    const successful = (latestQuery == null ? void 0 : latestQuery.state) === 'success';\n    const scheduleToolTip = successful ?\n    t('Schedule the query periodically') :\n    t('You must run the query successfully first');\n    return _jsxs(Menu, { css: /*#__PURE__*/_css({ width: theme.gridUnit * 50 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:renderDropdown;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), children: [\n      _jsxs(Menu.Item, { css: _ref, children: [\n        ' ',\n        _jsx(\"span\", { children: t('Render HTML') }), ' ',\n        _jsx(Switch, { checked: renderHTMLEnabled, onChange: handleToggleRenderHTMLEnabled }), ' '] }\n      ),\n      _jsxs(Menu.Item, { css: _ref2, children: [\n        ' ',\n        _jsx(\"span\", { children: t('Autocomplete') }), ' ',\n        _jsx(Switch, { checked: autocompleteEnabled, onChange: handleToggleAutocompleteEnabled }), ' '] }\n      ),\n      isFeatureEnabled(FeatureFlag.EnableTemplateProcessing) && _jsx(Menu.Item, { children:\n        _jsx(TemplateParamsEditor, { language: \"json\", onChange: (params) => {\n            dispatch(queryEditorSetTemplateParams(qe, params));\n          }, queryEditorId: qe.id }) }\n      ),\n      _jsx(Menu.Item, { onClick: () => formatCurrentQuery(), children:\n        t('Format SQL') }\n      ),\n      !_isEmpty(scheduledQueriesConf) && _jsx(Menu.Item, { children:\n        _jsx(ScheduleQueryButton, { defaultLabel: qe.name, sql: qe.sql, onSchedule: (query) => dispatch(scheduleQuery(query)), schema: qe.schema, dbId: qe.dbId, scheduleQueryWarning: scheduleQueryWarning, tooltip: scheduleToolTip, disabled: !successful }) }\n      ),\n      _jsx(Menu.Item, { children:\n        _jsx(KeyboardShortcutButton, { children:\n          t('Keyboard shortcuts') }\n        ) }\n      )] }\n    );\n  };\n  const onSaveQuery = async (query, clientId) => {\n    const savedQuery = await dispatch(saveQuery(query, clientId));\n    dispatch(addSavedQueryToTabState(queryEditor, savedQuery));\n  };\n  const renderEditorBottomBar = (hideActions) => {var _latestQuery$results;\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } = database || {};\n    const showMenu = allowCTAS || allowCVAS;\n    const runMenuBtn = _jsxs(Menu, { children: [\n      allowCTAS && _jsx(Menu.Item, { onClick: () => {\n          logAction(LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, {\n            shortcut: false\n          });\n          setShowCreateAsModal(true);\n          setCreateAs(CtasEnum.Table);\n        }, children:\n        t('CREATE TABLE AS') }, \"1\"\n      ),\n      allowCVAS && _jsx(Menu.Item, { onClick: () => {\n          logAction(LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, {\n            shortcut: false\n          });\n          setShowCreateAsModal(true);\n          setCreateAs(CtasEnum.View);\n        }, children:\n        t('CREATE VIEW AS') }, \"2\"\n      )] }\n    );\n    return _jsx(StyledToolbar, { className: \"sql-toolbar\", id: \"js-sql-toolbar\", children:\n      hideActions ? _jsx(Alert, { type: \"warning\", message: t('The database that was used to generate this query could not be found'), description: t('Choose one of the available databases on the left panel.'), closable: false }) : _jsxs(_Fragment, { children: [\n        _jsxs(\"div\", { className: \"leftItems\", children: [\n          _jsx(\"span\", { children:\n            _jsx(RunQueryActionButton, { allowAsync: (database == null ? void 0 : database.allow_run_async) === true, queryEditorId: queryEditor.id, queryState: latestQuery == null ? void 0 : latestQuery.state, runQuery: runQuery, stopQuery: stopQuery, overlayCreateAsMenu: showMenu ? runMenuBtn : null }) }\n          ),\n          isFeatureEnabled(FeatureFlag.EstimateQueryCost) && (\n          database == null ? void 0 : database.allows_cost_estimate) && _jsx(\"span\", { children:\n            _jsx(EstimateQueryCostButton, { getEstimate: getQueryCostEstimate, queryEditorId: queryEditor.id, tooltip: t('Estimate the cost before running a query') }) }\n          ),\n          _jsx(\"span\", { children:\n            _jsx(QueryLimitSelect, { queryEditorId: queryEditor.id, maxRow: maxRow, defaultQueryLimit: defaultQueryLimit }) }\n          ),\n          latestQuery && _jsx(Timer, { startTime: latestQuery.startDttm, endTime: latestQuery.endDttm, status: STATE_TYPE_MAP[latestQuery.state], isRunning: latestQuery.state === 'running' })] }\n        ),\n        _jsxs(\"div\", { className: \"rightItems\", children: [\n          _jsx(\"span\", { children:\n            _jsx(SaveQuery, { queryEditorId: queryEditor.id, columns: (latestQuery == null ? void 0 : (_latestQuery$results = latestQuery.results) == null ? void 0 : _latestQuery$results.columns) || [], onSave: onSaveQuery, onUpdate: (query, remoteId) => dispatch(updateSavedQuery(query, remoteId)), saveQueryWarning: saveQueryWarning, database: database }) }\n          ),\n          _jsx(\"span\", { children:\n            _jsx(ShareSqlLabQuery, { queryEditorId: queryEditor.id }) }\n          ),\n          _jsx(Dropdown, { dropdownRender: () => renderDropdown(), trigger: ['click'], children:\n            _jsx(Button, { buttonSize: \"xsmall\", type: \"link\", showMarginRight: false, children:\n              _jsx(Icons.EllipsisOutlined, {}) }\n            ) }\n          )] }\n        )] }\n      ) }\n    );\n  };\n  const handleCursorPositionChange = (newPosition) => {\n    dispatch(queryEditorSetCursorPosition(queryEditor, newPosition));\n  };\n  const queryPane = () => {\n    const { aceEditorHeight, southPaneHeight } = getAceEditorAndSouthPaneHeights(height, northPercent, southPercent);\n    return _jsxs(Split, { expandToMin: true, className: \"queryPane\", sizes: [northPercent, southPercent], elementStyle: elementStyle, minSize: 200, direction: \"vertical\", gutterSize: SQL_EDITOR_GUTTER_HEIGHT, onDragStart: onResizeStart, onDragEnd: onResizeEnd, children: [\n      _jsxs(\"div\", { ref: northPaneRef, className: \"north-pane\", children: [\n        SqlFormExtension && _jsx(SqlFormExtension, { queryEditorId: queryEditor.id, setQueryEditorAndSaveSqlWithDebounce: setQueryEditorAndSaveSqlWithDebounce, startQuery: startQuery }),\n        isActive && _jsx(AceEditorWrapper, { autocomplete: autocompleteEnabled, onBlur: onSqlChanged, onChange: onSqlChanged, queryEditorId: queryEditor.id, onCursorPositionChange: handleCursorPositionChange, height: `${aceEditorHeight}px`, hotkeys: hotkeys }),\n        renderEditorBottomBar(showEmptyState)] }\n      ),\n      _jsx(SouthPane, { queryEditorId: queryEditor.id, latestQueryId: latestQuery == null ? void 0 : latestQuery.id, height: southPaneHeight, displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit })] }\n    );\n  };\n  const createViewModalTitle = createAs === CtasEnum.View ? 'CREATE VIEW AS' : 'CREATE TABLE AS';\n  const createModalPlaceHolder = createAs === CtasEnum.View ?\n  t('Specify name to CREATE VIEW AS schema in: public') :\n  t('Specify name to CREATE TABLE AS schema in: public');\n  const leftBarStateClass = hideLeftBar ?\n  'schemaPane-exit-done' :\n  'schemaPane-enter-done';\n  return _jsxs(StyledSqlEditor, { ref: sqlEditorRef, className: \"SqlEditor\", children: [\n    _jsx(CSSTransition, { classNames: \"schemaPane\", in: !hideLeftBar, timeout: 300, children:\n      _jsx(ResizableSidebar, { id: `sqllab:${queryEditor.id}`, minWidth: SQL_EDITOR_LEFTBAR_WIDTH, initialWidth: SQL_EDITOR_LEFTBAR_WIDTH, enable: !hideLeftBar, children:\n        (adjustedWidth) => _jsx(StyledSidebar, { className: `schemaPane ${leftBarStateClass}`, width: adjustedWidth, hide: hideLeftBar, children:\n          _jsx(SqlEditorLeftBar, { database: database, queryEditorId: queryEditor.id }) }\n        ) }\n      ) }\n    ),\n    shouldLoadQueryEditor ? _jsx(\"div\", { css: css`\n            flex: 1;\n            padding: ${theme.gridUnit * 4}px;\n          `, children:\n      _jsx(Skeleton, { active: true }) }\n    ) : showEmptyState && !hasSqlStatement ? _jsx(EmptyState, { image: \"vector.svg\", size: \"large\", title: t('Select a database to write a query'), description: t('Choose one of the available databases from the panel on the left.') }) : queryPane(),\n    _jsxs(Modal, { show: showCreateAsModal, title: t(createViewModalTitle), onHide: () => setShowCreateAsModal(false), footer: _jsxs(_Fragment, { children: [\n        _jsx(Button, { onClick: () => setShowCreateAsModal(false), children:\n          t('Cancel') }\n        ),\n        createAs === CtasEnum.Table && _jsx(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createTableAs, children:\n          t('Create') }\n        ),\n        createAs === CtasEnum.View && _jsx(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createViewAs, children:\n          t('Create') }\n        )] }\n      ), children: [\n      _jsx(\"span\", { children: t('Name') }),\n      _jsx(Input, { placeholder: createModalPlaceHolder, onChange: ctasChanged })] }\n    )] }\n  );\n};\nexport default SqlEditor;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}