{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /* eslint-disable react/jsx-sort-default-props */\n/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/* eslint-disable react/forbid-prop-types */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, memo, useCallback, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport { styled, usePrevious } from '@superset-ui/core';\nimport Tooltip from './components/Tooltip';\nimport 'mapbox-gl/dist/mapbox-gl.css';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst TICK = 250; // milliseconds\nexport const DeckGLContainer = /*#__PURE__*/memo(/*#__PURE__*/forwardRef((props, ref) => {\n  const [tooltip, setTooltip] = useState(null);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [viewState, setViewState] = useState(props.viewport);\n  const prevViewport = usePrevious(props.viewport);\n  useImperativeHandle(ref, () => ({ setTooltip }), []);\n  const tick = useCallback(() => {\n    // Rate limiting updating viewport controls as it triggers lots of renders\n    if (lastUpdate && Date.now() - lastUpdate > TICK) {\n      const setCV = props.setControlValue;\n      if (setCV) {\n        setCV('viewport', viewState);\n      }\n      setLastUpdate(null);\n    }\n  }, [lastUpdate, props.setControlValue, viewState]);\n  useEffect(() => {\n    const timer = setInterval(tick, TICK);\n    return clearInterval(timer);\n  }, [tick]);\n  useEffect(() => {\n    if (!_isEqual(props.viewport, prevViewport)) {\n      setViewState(props.viewport);\n    }\n  }, [prevViewport, props.viewport]);\n  const onViewStateChange = useCallback(({ viewState }) => {\n    setViewState(viewState);\n    setLastUpdate(Date.now());\n  }, []);\n  const layers = useCallback(() => {\n    // Support for layer factory\n    if (props.layers.some((l) => typeof l === 'function')) {\n      return props.layers.map((l) => typeof l === 'function' ? l() : l);\n    }\n    return props.layers;\n  }, [props.layers]);\n  const { children = null, height, width } = props;\n  return _jsxs(_Fragment, { children: [\n    _jsxs(\"div\", { style: { position: 'relative', width, height }, children: [\n      _jsx(DeckGL, { controller: true, width: width, height: height, layers: layers(), viewState: viewState, onViewStateChange: onViewStateChange, children:\n        _jsx(StaticMap, { preserveDrawingBuffer: true, mapStyle: props.mapStyle || 'light', mapboxApiAccessToken: props.mapboxApiAccessToken }) }\n      ),\n      children] }\n    ),\n    _jsx(Tooltip, { tooltip: tooltip })] }\n  );\n}));\nexport const DeckGLContainerStyledWrapper = styled(DeckGLContainer)`\n  .deckgl-tooltip > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}