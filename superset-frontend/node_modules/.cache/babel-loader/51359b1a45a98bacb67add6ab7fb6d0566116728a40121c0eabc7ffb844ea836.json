{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _throttle from \"lodash/throttle\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\n\nimport { memo, useEffect, useState, useCallback, useMemo, useRef, createContext } from 'react';\nimport cx from 'classnames';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport Loading from 'src/components/Loading';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { getFilterBarTestId } from './utils';\nimport Header from './Header';\nimport FilterControls from './FilterControls/FilterControls';\nimport CrossFiltersVertical from './CrossFilters/Vertical';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst BarWrapper = styled.div`\n  width: ${({ theme }) => theme.gridUnit * 8}px;\n\n  & .ant-tabs-top > .ant-tabs-nav {\n    margin: 0;\n  }\n  &.open {\n    width: ${({ width }) => width}px; // arbitrary...\n  }\n`;\nconst Bar = styled.div`\n  ${({ theme, width }) => `\n    & .ant-typography-edit-content {\n      left: 0;\n      margin-top: 0;\n      width: 100%;\n    }\n    position: absolute;\n    top: 0;\n    left: 0;\n    flex-direction: column;\n    flex-grow: 1;\n    width: ${width}px;\n    background: ${theme.colors.grayscale.light5};\n    border-right: 1px solid ${theme.colors.grayscale.light2};\n    border-bottom: 1px solid ${theme.colors.grayscale.light2};\n    min-height: 100%;\n    display: none;\n    &.open {\n      display: flex;\n    }\n  `}\n`;\nconst CollapsedBar = styled.div`\n  ${({ theme, offset }) => `\n    position: absolute;\n    top: ${offset}px;\n    left: 0;\n    height: 100%;\n    width: ${theme.gridUnit * 8}px;\n    padding-top: ${theme.gridUnit * 2}px;\n    display: none;\n    text-align: center;\n    &.open {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      padding: ${theme.gridUnit * 2}px;\n    }\n    svg {\n      cursor: pointer;\n    }\n  `}\n`;\nconst FilterBarEmptyStateContainer = styled.div`\n  margin-top: ${({ theme }) => theme.gridUnit * 8}px;\n`;\nconst FilterControlsWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 4}px;\n  // 108px padding to make room for buttons with position: absolute\n  padding-bottom: ${({ theme }) => theme.gridUnit * 27}px;\n`;\nexport const FilterBarScrollContext = /*#__PURE__*/createContext(false);\nconst VerticalFilterBar = ({ actions, canEdit, dataMaskSelected, filtersOpen, filterValues, height, isInitialized, offset, onSelectionChange, toggleFiltersBar, width }) => {\n  const theme = useTheme();\n  const [isScrolling, setIsScrolling] = useState(false);\n  const timeout = useRef();\n  const openFiltersBar = useCallback(() => toggleFiltersBar(true), [toggleFiltersBar]);\n  const onScroll = useMemo(() => _throttle(() => {\n    clearTimeout(timeout.current);\n    setIsScrolling(true);\n    timeout.current = setTimeout(() => {\n      setIsScrolling(false);\n    }, 300);\n  }, 200), []);\n  useEffect(() => {\n    document.onscroll = onScroll;\n    return () => {\n      document.onscroll = null;\n    };\n  }, [onScroll]);\n  const tabPaneStyle = useMemo(() => ({ overflow: 'auto', height, overscrollBehavior: 'contain' }), [height]);\n  const filterControls = useMemo(() => filterValues.length === 0 ? _jsx(FilterBarEmptyStateContainer, { children:\n    _jsx(EmptyState, { size: \"small\", title: t('No global filters are currently added'), image: \"filter.svg\", description: canEdit &&\n      t('Click on \"Add or Edit Filters\" option in Settings to create new dashboard filters') }) }\n  ) : _jsx(FilterControlsWrapper, { children:\n    _jsx(FilterControls, { dataMaskSelected: dataMaskSelected, onFilterSelectionChange: onSelectionChange }) }\n  ), [canEdit, dataMaskSelected, filterValues.length, onSelectionChange]);\n  return _jsx(FilterBarScrollContext.Provider, { value: isScrolling, children:\n    _jsxs(BarWrapper, { ...getFilterBarTestId(), className: cx({ open: filtersOpen }), width: width, children: [\n      _jsxs(CollapsedBar, { ...getFilterBarTestId('collapsable'), className: cx({ open: !filtersOpen }), onClick: openFiltersBar, role: \"button\", offset: offset, children: [\n        _jsx(Icons.VerticalAlignTopOutlined, { iconSize: \"l\", css: /*#__PURE__*/_css({\n            transform: 'rotate(90deg)',\n            marginBottom: `${theme.gridUnit * 3}px`\n          }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:VerticalFilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), className: \"collapse-icon\", iconColor: theme.colors.primary.base, ...getFilterBarTestId('expand-button') }),\n        _jsx(Icons.FilterOutlined, { ...getFilterBarTestId('filter-icon'), iconSize: \"l\" })] }\n      ),\n      _jsxs(Bar, { className: cx({ open: filtersOpen }), width: width, children: [\n        _jsx(Header, { toggleFiltersBar: toggleFiltersBar }),\n        !isInitialized ? _jsx(\"div\", { css: /*#__PURE__*/_css({ height }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:VerticalFilterBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), children:\n          _jsx(Loading, {}) }\n        ) : _jsx(\"div\", { css: tabPaneStyle, onScroll: onScroll, children:\n          _jsxs(_Fragment, { children: [\n            _jsx(CrossFiltersVertical, {}),\n            filterControls] }\n          ) }\n        ),\n        actions] }\n      )] }\n    ) }\n  );\n};\nexport default /*#__PURE__*/memo(VerticalFilterBar);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}