{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isDefined, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport { isCrossFilterScopeGlobal, GLOBAL_SCOPE_POINTER } from 'src/dashboard/types';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/getChartIdsInFilterScope';\nimport { useChartIds } from 'src/dashboard/util/charts/useChartIds';\nimport { saveChartConfiguration } from 'src/dashboard/actions/dashboardInfo';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from 'src/dashboard/constants';\nimport { useChartLayoutItems } from 'src/dashboard/util/useChartLayoutItems';\nimport { ScopingModalContent } from './ScopingModalContent';\nimport { NEW_CHART_SCOPING_ID } from './constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst getUpdatedGloballyScopedChartsInScope = (configs, globalChartsInScope) => Object.entries(configs).reduce((acc, [id, config]) => {\n  if (isCrossFilterScopeGlobal(config.crossFilters.scope)) {\n    acc[id] = {\n      id: Number(config.id),\n      crossFilters: {\n        scope: GLOBAL_SCOPE_POINTER,\n        chartsInScope: globalChartsInScope.filter((chartId) => chartId !== Number(config.id))\n      }\n    };\n  } else\n  {\n    acc[id] = config;\n  }\n  return acc;\n}, {});\nconst getActualScopeFromGlobalScope = (chartId, globalScope) => ({\n  rootPath: globalScope.rootPath,\n  excluded: globalScope.excluded.filter((id) => id !== chartId)\n});\nexport const ScopingModal = ({ initialChartId, isVisible, closeModal }) => {\n  const dispatch = useDispatch();\n  const chartLayoutItems = useChartLayoutItems();\n  const chartIds = useChartIds();\n  const [currentChartId, setCurrentChartId] = useState(initialChartId);\n  const initialChartConfig = useSelector((state) => {var _state$dashboardInfo$;return ((_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.chart_configuration) || {};});\n  const defaultGlobalChartConfig = useMemo(() => ({\n    scope: DEFAULT_CROSS_FILTER_SCOPING,\n    chartsInScope: chartIds\n  }), [chartIds]);\n  const initialGlobalChartConfig = useSelector((state) => {var _state$dashboardInfo$2;return ((_state$dashboardInfo$2 = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$2.global_chart_configuration) ||\n    defaultGlobalChartConfig;});\n  const getInitialChartConfig = () => {var _initialChartConfig$i;\n    if (isDefined(initialChartId) &&\n    isCrossFilterScopeGlobal((_initialChartConfig$i = initialChartConfig[initialChartId]) == null ? void 0 : _initialChartConfig$i.crossFilters.scope)) {var _initialChartConfig$i2;\n      return {\n        ...initialChartConfig,\n        [initialChartId]: {\n          id: initialChartId,\n          crossFilters: {\n            scope: getActualScopeFromGlobalScope(initialChartId, initialGlobalChartConfig.scope),\n            chartsInScope: (_initialChartConfig$i2 = initialChartConfig[initialChartId]) == null ? void 0 : _initialChartConfig$i2.crossFilters.chartsInScope\n          }\n        }\n      };\n    }\n    return initialChartConfig;\n  };\n  const [chartConfigs, setChartConfigs] = useState(getInitialChartConfig());\n  const [globalChartConfig, setGlobalChartConfig] = useState(initialGlobalChartConfig);\n  const saveScoping = useCallback(() => {\n    const savedChartConfigs = { ...chartConfigs };\n    if (savedChartConfigs[NEW_CHART_SCOPING_ID]) {\n      delete savedChartConfigs[NEW_CHART_SCOPING_ID];\n    }\n    dispatch(saveChartConfiguration({\n      chartConfiguration: savedChartConfigs,\n      globalChartConfiguration: globalChartConfig\n    }));\n    closeModal();\n  }, [chartConfigs, closeModal, dispatch, globalChartConfig]);\n  const handleScopeUpdate = useCallback(({ scope }) => {\n    if (isDefined(currentChartId)) {\n      setChartConfigs((prevConfig) => ({\n        ...prevConfig,\n        [currentChartId]: {\n          id: currentChartId,\n          crossFilters: {\n            scope,\n            chartsInScope: getChartIdsInFilterScope(scope, chartIds, chartLayoutItems)\n          }\n        }\n      }));\n    } else\n    {\n      const globalChartsInScope = getChartIdsInFilterScope(scope, chartIds, chartLayoutItems);\n      setGlobalChartConfig({\n        scope,\n        chartsInScope: globalChartsInScope\n      });\n      setChartConfigs((prevConfig) => getUpdatedGloballyScopedChartsInScope(prevConfig, globalChartsInScope));\n    }\n  }, [currentChartId, chartIds, chartLayoutItems]);\n  const removeCustomScope = useCallback((chartId) => {\n    setChartConfigs((prevConfigs) => {\n      const newConfigs = { ...prevConfigs };\n      if (chartId === NEW_CHART_SCOPING_ID) {\n        delete newConfigs[NEW_CHART_SCOPING_ID];\n      } else\n      {\n        newConfigs[chartId] = {\n          id: chartId,\n          crossFilters: {\n            scope: GLOBAL_SCOPE_POINTER,\n            chartsInScope: globalChartConfig.chartsInScope.filter((id) => id !== chartId)\n          }\n        };\n      }\n      return newConfigs;\n    });\n    if (currentChartId === chartId) {\n      setCurrentChartId(undefined);\n    }\n  }, [currentChartId, globalChartConfig.chartsInScope]);\n  const addNewCustomScope = useCallback(() => {\n    setCurrentChartId(NEW_CHART_SCOPING_ID);\n    if (!chartConfigs[NEW_CHART_SCOPING_ID]) {\n      setChartConfigs((prevConfigs) => ({\n        ...prevConfigs,\n        [NEW_CHART_SCOPING_ID]: {\n          id: NEW_CHART_SCOPING_ID,\n          crossFilters: {\n            scope: globalChartConfig.scope,\n            chartsInScope: globalChartConfig.chartsInScope\n          }\n        }\n      }));\n    }\n  }, [chartConfigs, globalChartConfig.chartsInScope, globalChartConfig.scope]);\n  const handleSelectChange = useCallback((newChartId) => {\n    if (isDefined(currentChartId)) {var _chartConfigs$current;\n      const currentScope = !isCrossFilterScopeGlobal((_chartConfigs$current = chartConfigs[currentChartId]) == null ? void 0 : _chartConfigs$current.crossFilters.scope) ?\n      chartConfigs[currentChartId].crossFilters.\n      scope :\n      globalChartConfig.scope;\n      const newScope = {\n        rootPath: currentScope.rootPath,\n        excluded: [\n        ...currentScope.excluded.filter((id) => id !== currentChartId),\n        newChartId]\n\n      };\n      const newCrossFiltersConfig = {\n        id: newChartId,\n        crossFilters: {\n          scope: newScope,\n          chartsInScope: getChartIdsInFilterScope(newScope, chartIds, chartLayoutItems)\n        }\n      };\n      setChartConfigs((prevConfig) => {\n        const newConfig = {\n          ...prevConfig,\n          [newChartId]: newCrossFiltersConfig\n        };\n        if (currentChartId === NEW_CHART_SCOPING_ID) {\n          delete newConfig[NEW_CHART_SCOPING_ID];\n        } else\n        {\n          newConfig[currentChartId] = {\n            id: currentChartId,\n            crossFilters: {\n              scope: GLOBAL_SCOPE_POINTER,\n              chartsInScope: globalChartConfig.chartsInScope.filter((id) => id !== currentChartId)\n            }\n          };\n        }\n        return newConfig;\n      });\n      setCurrentChartId(newChartId);\n    }\n  }, [\n  chartConfigs,\n  chartIds,\n  currentChartId,\n  globalChartConfig.chartsInScope,\n  globalChartConfig.scope,\n  chartLayoutItems]\n  );\n  const scope = useMemo(() => {var _chartConfigs$current2, _chartConfigs$current3, _chartConfigs$current4, _chartConfigs$current5;\n    const globalScope = globalChartConfig.scope;\n    if (!isDefined(currentChartId)) {\n      return globalScope;\n    }\n    if (isCrossFilterScopeGlobal((_chartConfigs$current2 = chartConfigs[currentChartId]) == null ? void 0 : (_chartConfigs$current3 = _chartConfigs$current2.crossFilters) == null ? void 0 : _chartConfigs$current3.scope)) {\n      return getActualScopeFromGlobalScope(currentChartId, globalScope);\n    }\n    return (_chartConfigs$current4 = chartConfigs[currentChartId]) == null ? void 0 : (_chartConfigs$current5 = _chartConfigs$current4.crossFilters) == null ? void 0 : _chartConfigs$current5.\n    scope;\n  }, [chartConfigs, currentChartId, globalChartConfig.scope]);\n  return _jsx(Modal, { onHide: closeModal, show: isVisible, title: t('Cross-filtering scoping'), onHandledPrimaryAction: saveScoping, primaryButtonName: t('Save'), responsive: true, destroyOnClose: true, bodyStyle: {\n      padding: 0,\n      height: 700\n    }, children:\n    _jsx(ScopingModalContent, { chartConfigs: chartConfigs, currentScope: scope, onScopeUpdate: handleScopeUpdate, chartId: currentChartId, setCurrentChartId: setCurrentChartId, onSelectChange: handleSelectChange, removeCustomScope: removeCustomScope, addNewCustomScope: addNewCustomScope }) }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}