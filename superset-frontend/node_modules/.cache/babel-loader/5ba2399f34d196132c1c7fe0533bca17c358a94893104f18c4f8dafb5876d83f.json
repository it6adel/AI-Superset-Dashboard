{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Encodable, defaultColorSchemeResolver, addPrefix } from 'encodable';\nimport { CategoricalColorNamespace, getCategoricalSchemeRegistry, getSequentialSchemeRegistry, getNumberFormatter, getTimeFormatter, LOCAL_PREFIX, getTimeFormatterRegistry } from '@superset-ui/core';\nconst timeFormat = ({ format, formatInLocalTime = false } = {}) => {\n  const formatString = formatInLocalTime ?\n  addPrefix(LOCAL_PREFIX, format != null ? format : getTimeFormatterRegistry().getDefaultKey()) :\n  format;\n  return getTimeFormatter(formatString);\n};\nconst colorSchemeResolver = ({ name, type = 'categorical' } = {}) => {\n  if (type === 'sequential') {\n    const scheme = getSequentialSchemeRegistry().get(name);\n    return typeof scheme === 'undefined' ?\n    scheme :\n    { type: 'sequential', ...scheme };\n  }\n  if (type === 'categorical') {\n    const scheme = getCategoricalSchemeRegistry().get(name);\n    return typeof scheme === 'undefined' ?\n    scheme :\n    { type: 'categorical', ...scheme };\n  }\n  return defaultColorSchemeResolver({ name, type });\n};\nconst colorScaleResolver = ({ name, namespace } = {}) => CategoricalColorNamespace.getScale(name, namespace);\nexport default function configureEncodable() {\n  Encodable.setNumberFormatResolver(getNumberFormatter).\n  setTimeFormatResolver(timeFormat).\n  setColorSchemeResolver(colorSchemeResolver).\n  setCategoricalColorScaleResolver(colorScaleResolver);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}