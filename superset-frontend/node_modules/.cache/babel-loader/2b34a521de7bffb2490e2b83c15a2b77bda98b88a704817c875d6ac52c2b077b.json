{"ast":null,"code":"import { api } from './queryApi';\nexport const mapQueryResponse = (query) => ({\n  queryId: query.id,\n  id: query.client_id,\n  dbId: query.database.id,\n  db: query.database,\n  executedSql: query.executed_sql,\n  errorMessage: query.error_message,\n  queryLimit: query.limit,\n  ctas: query.select_as_cta,\n  limitingFactor: query.limiting_factor,\n  progress: query.progress,\n  rows: query.rows,\n  schema: query.schema,\n  sql: query.sql,\n  sqlEditorId: query.sql_editor_id,\n  state: query.status,\n  tab: query.tab_name,\n  startDttm: Number(query.start_time),\n  endDttm: Number(query.end_time),\n  tempTable: query.tmp_table_name || '',\n  trackingUrl: query.tracking_url,\n  resultsKey: query.results_key,\n  userId: query.user.id,\n  cached: false,\n  extra: {\n    progress: null\n  },\n  isDataPreview: false,\n  user: query.user\n});\nconst queryHistoryApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    editorQueries: builder.query({\n      providesTags: ['EditorQueries'],\n      query: ({ editorId, pageIndex = 0, pageSize = 25 }) => ({\n        method: 'GET',\n        endpoint: `/api/v1/query/`,\n        urlParams: {\n          keys: ['none'],\n          columns: [\n          'id',\n          'client_id',\n          'changed_on',\n          'database.id',\n          'database.database_name',\n          'executed_sql',\n          'error_message',\n          'limit',\n          'limiting_factor',\n          'progress',\n          'rows',\n          'select_as_cta',\n          'schema',\n          'sql',\n          'sql_editor_id',\n          'status',\n          'tab_name',\n          'user.first_name',\n          'user.id',\n          'user.last_name',\n          'start_time',\n          'end_time',\n          'tmp_table_name',\n          'tmp_schema_name',\n          'tracking_url',\n          'results_key'],\n\n          order_column: 'start_time',\n          order_direction: 'desc',\n          page: pageIndex,\n          page_size: pageSize,\n          filters: [\n          {\n            col: 'sql_editor_id',\n            opr: 'eq',\n            value: editorId\n          }]\n\n        },\n        headers: { 'Content-Type': 'application/json' },\n        transformResponse: ({ json }) => ({\n          ...json,\n          result: json.result.map(mapQueryResponse)\n        })\n      }),\n      serializeQueryArgs: ({ queryArgs: { editorId } }) => ({ editorId }),\n      // Refetch when the page arg changes\n      forceRefetch({ currentArg, previousArg }) {\n        return currentArg !== previousArg;\n      },\n      merge: (currentCache, newItems) => {\n        currentCache.result.push(...newItems.result);\n      }\n    })\n  })\n});\nexport const { useEditorQueriesQuery } = queryHistoryApi;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}