{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, SMART_DATE_ID, t } from '@superset-ui/core';\nimport { D3_FORMAT_DOCS, D3_TIME_FORMAT_OPTIONS, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { headerFontSize, subheaderFontSize } from '../sharedControls';\nexport default {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [['metric'], ['adhoc_filters']]\n  },\n  {\n    label: t('Display settings'),\n    expanded: true,\n    tabOverride: 'data',\n    controlSetRows: [\n    [\n    {\n      name: 'subheader',\n      config: {\n        type: 'TextControl',\n        label: t('Subheader'),\n        renderTrigger: true,\n        description: t('Description text that shows up below your Big Number')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    [headerFontSize],\n    [subheaderFontSize],\n    ['y_axis_format'],\n    ['currency_format'],\n    [\n    {\n      name: 'time_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: D3_FORMAT_DOCS,\n        default: SMART_DATE_ID\n      }\n    }],\n\n    [\n    {\n      name: 'force_timestamp_formatting',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Force date format'),\n        renderTrigger: true,\n        default: false,\n        description: t('Use date formatting even when metric value is not a timestamp')\n      }\n    }],\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Conditional Formatting'),\n        description: t('Apply conditional color formatting to metric'),\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3, _chart$queriesRespons, _chart$queriesRespons2;\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const { colnames, coltypes } = (_chart$queriesRespons = chart == null ? void 0 : (_chart$queriesRespons2 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons2[0]) != null ? _chart$queriesRespons : {};\n          const numericColumns = Array.isArray(colnames) && Array.isArray(coltypes) ?\n          colnames.\n          filter((_, index) => coltypes[index] === GenericDataType.Numeric).\n          map((colname) => {var _ref;return {\n              value: colname,\n              label: (_ref = Array.isArray(verboseMap) ?\n              verboseMap[colname] :\n              verboseMap[colname]) != null ? _ref : colname\n            };}) :\n          [];\n          return {\n            columnOptions: numericColumns,\n            verboseMap\n          };\n        }\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format')\n    }\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric()\n  })\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}