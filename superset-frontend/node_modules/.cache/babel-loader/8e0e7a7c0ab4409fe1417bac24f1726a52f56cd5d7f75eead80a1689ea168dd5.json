{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css } from '@superset-ui/core';\nimport { useRef, useState } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport default function ColorSchemeLabel(props) {\n  const { id, label, colors } = props;\n  const [showTooltip, setShowTooltip] = useState(false);\n  const labelNameRef = useRef(null);\n  const labelsColorRef = useRef(null);\n  const handleShowTooltip = () => {\n    const labelNameElement = labelNameRef.current;\n    const labelsColorElement = labelsColorRef.current;\n    if (labelNameElement &&\n    labelsColorElement && (\n    labelNameElement.scrollWidth > labelNameElement.offsetWidth ||\n    labelNameElement.scrollHeight > labelNameElement.offsetHeight ||\n    labelsColorElement.scrollWidth > labelsColorElement.offsetWidth ||\n    labelsColorElement.scrollHeight > labelsColorElement.offsetHeight)) {\n      setShowTooltip(true);\n    }\n  };\n  const handleHideTooltip = () => {\n    setShowTooltip(false);\n  };\n  const colorsList = () => colors.map((color, i) => _jsx(\"span\", { css: (theme) => css`\n          padding-left: ${theme.gridUnit / 2}px;\n          :before {\n            content: '';\n            display: inline-block;\n            background-color: ${color};\n            border: 1px solid ${color === 'white' ? 'black' : color};\n            width: 9px;\n            height: 10px;\n          }\n        ` }, `${id}-${i}`));\n  const tooltipContent = () => _jsxs(_Fragment, { children: [\n    _jsx(\"span\", { children: label }),\n    _jsx(\"div\", { children: colorsList() })] }\n  );\n  return _jsx(Tooltip, { \"data-testid\": \"tooltip\", overlayClassName: \"color-scheme-tooltip\", title: tooltipContent, open: showTooltip, children:\n    _jsxs(\"span\", { className: \"color-scheme-option\", onMouseEnter: handleShowTooltip, onMouseLeave: handleHideTooltip, css: css`\n          display: flex;\n          align-items: center;\n          justify-content: flex-start;\n        `, children: [\n      _jsx(\"span\", { className: \"color-scheme-label\", ref: labelNameRef, css: (theme) => css`\n            min-width: 125px;\n            padding-right: ${theme.gridUnit * 2}px;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n          `, children:\n        label }\n      ),\n      _jsx(\"span\", { ref: labelsColorRef, css: (theme) => css`\n            flex: 100%;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n            padding-right: ${theme.gridUnit}px;\n          `, children:\n        colorsList() }\n      )] }\n    ) }, id\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}