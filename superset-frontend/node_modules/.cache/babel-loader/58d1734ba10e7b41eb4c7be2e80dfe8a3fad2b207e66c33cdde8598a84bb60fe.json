{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n/**\n * Get the layer configuration object from the control panel.\n *\n * @param controlPanel The control panel\n * @returns The layer configuration object or undefined if not found\n */import { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const getLayerConfig = (controlPanel) => {\n  let layerConfig;\n  controlPanel.controlPanelSections.forEach((section) => {\n    if (!section) {\n      return;\n    }\n    const { controlSetRows } = section;\n    controlSetRows.forEach((row) => {\n      const configObject = row[0];\n      if (configObject && configObject.name === 'layer_configs') {\n        layerConfig = configObject;\n      }\n    });\n  });\n  return layerConfig;\n};\n/**\n * Mutates response of chart request into select options.\n *\n * If a currently selected value is not included in the response,\n * it will be added explicitly, in order to prevent antd from creating\n * a non-user-friendly select option.\n *\n * @param response Response json from resolved http request.\n * @param value The currently selected value of the select input.\n * @returns The list of options for the select input.\n */\nexport const selectedChartMutator = (response, value) => {\n  if (!(response != null && response.result)) {\n    if (value && typeof value === 'string') {\n      return [\n      {\n        label: JSON.parse(value).slice_name,\n        value\n      }];\n\n    }\n    return [];\n  }\n  const data = [];\n  if (value && typeof value === 'string') {\n    const parsedValue = JSON.parse(value);\n    let itemFound = false;\n    response.result.forEach((config) => {\n      const configString = JSON.stringify(config);\n      const sameId = config.id === parsedValue.id;\n      const isUpdated = configString !== value;\n      const label = config.slice_name;\n      if (sameId) {\n        itemFound = true;\n      }\n      if (!sameId || !isUpdated) {\n        data.push({\n          value: configString,\n          label\n        });\n      } else\n      {\n        data.push({\n          value: configString,\n          label: _jsxs(\"span\", { children: [\n            _jsxs(\"i\", { children: [\"(\", t('updated'), \") \"] }),\n            label] }\n          )\n        });\n        data.push({\n          value,\n          label\n        });\n      }\n    });\n    if (!itemFound) {\n      data.push({\n        value,\n        label: parsedValue.slice_name\n      });\n    }\n  } else\n  {\n    response.result.forEach((config) => {\n      const configString = JSON.stringify(config);\n      const label = config.slice_name;\n      data.push({\n        value: configString,\n        label\n      });\n    });\n  }\n  return data;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}