{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useCallback } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport TableSelector, { TableOption } from 'src/components/TableSelector';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { LocalStorageKeys, getItem } from 'src/utils/localStorageHelpers';\nimport { DatasetActionType } from 'src/features/datasets/AddDataset/types';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst LeftPanelStyle = styled.div`\n  ${({ theme }) => `\n    padding: ${theme.gridUnit * 4}px;\n    height: 100%;\n    background-color: ${theme.colors.grayscale.light5};\n    position: relative;\n    .emptystate {\n      height: auto;\n      margin-top: ${theme.gridUnit * 17.5}px;\n    }\n    .section-title {\n      margin-top: ${theme.gridUnit * 5.5}px;\n      margin-bottom: ${theme.gridUnit * 11}px;\n      font-weight: ${theme.typography.weights.bold};\n    }\n    .table-title {\n      margin-top: ${theme.gridUnit * 11}px;\n      margin-bottom: ${theme.gridUnit * 6}px;\n      font-weight: ${theme.typography.weights.bold};\n    }\n    .options-list {\n      overflow: auto;\n      position: absolute;\n      bottom: 0;\n      top: ${theme.gridUnit * 92.25}px;\n      left: ${theme.gridUnit * 3.25}px;\n      right: 0;\n\n      .no-scrollbar {\n        margin-right: ${theme.gridUnit * 4}px;\n      }\n\n      .options {\n        cursor: pointer;\n        padding: ${theme.gridUnit * 1.75}px;\n        border-radius: ${theme.borderRadius}px;\n        :hover {\n          background-color: ${theme.colors.grayscale.light4}\n        }\n      }\n\n      .options-highlighted {\n        cursor: pointer;\n        padding: ${theme.gridUnit * 1.75}px;\n        border-radius: ${theme.borderRadius}px;\n        background-color: ${theme.colors.primary.dark1};\n        color: ${theme.colors.grayscale.light5};\n      }\n\n      .options, .options-highlighted {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n    }\n    form > span[aria-label=\"refresh\"] {\n      position: absolute;\n      top: ${theme.gridUnit * 69}px;\n      left: ${theme.gridUnit * 42.75}px;\n      font-size: ${theme.gridUnit * 4.25}px;\n    }\n    .table-form {\n      margin-bottom: ${theme.gridUnit * 8}px;\n    }\n    .loading-container {\n      position: absolute;\n      top: ${theme.gridUnit * 89.75}px;\n      left: 0;\n      right: 0;\n      text-align: center;\n      img {\n        width: ${theme.gridUnit * 20}px;\n        margin-bottom: ${theme.gridUnit * 2.5}px;\n      }\n      p {\n        color: ${theme.colors.grayscale.light1};\n      }\n    }\n`}\n`;\nexport default function LeftPanel({ setDataset, dataset, datasetNames }) {\n  const { addDangerToast } = useToasts();\n  const setDatabase = useCallback((db) => {\n    setDataset({ type: DatasetActionType.SelectDatabase, payload: { db } });\n  }, [setDataset]);\n  const setCatalog = (catalog) => {\n    if (catalog) {\n      setDataset({\n        type: DatasetActionType.SelectCatalog,\n        payload: { name: 'catalog', value: catalog }\n      });\n    }\n  };\n  const setSchema = (schema) => {\n    if (schema) {\n      setDataset({\n        type: DatasetActionType.SelectSchema,\n        payload: { name: 'schema', value: schema }\n      });\n    }\n  };\n  const setTable = (tableName) => {\n    setDataset({\n      type: DatasetActionType.SelectTable,\n      payload: { name: 'table_name', value: tableName }\n    });\n  };\n  useEffect(() => {\n    const currentUserSelectedDb = getItem(LocalStorageKeys.Database, null);\n    if (currentUserSelectedDb) {\n      setDatabase(currentUserSelectedDb);\n    }\n  }, [setDatabase]);\n  const customTableOptionLabelRenderer = useCallback((table) => _jsx(TableOption, { table: datasetNames != null && datasetNames.includes(table.value) ?\n    {\n      ...table,\n      extra: {\n        warning_markdown: t('This table already has a dataset')\n      }\n    } :\n    table }), [datasetNames]);\n  const getDatabaseEmptyState = (emptyResultsWithSearch) => _jsx(EmptyState, { image: \"empty.svg\", title: emptyResultsWithSearch ?\n    t('No databases match your search') :\n    t('No databases available'), description: _jsxs(\"span\", { children: [\n      t('Manage your databases'), ' ',\n      _jsx(\"a\", { href: \"/databaseview/list\", children: t('here') })] }\n    ), size: \"small\" });\n  return _jsx(LeftPanelStyle, { children:\n    _jsx(TableSelector, { database: dataset == null ? void 0 : dataset.db, handleError: addDangerToast, emptyState: getDatabaseEmptyState(false), onDbChange: setDatabase, onCatalogChange: setCatalog, onSchemaChange: setSchema, onTableSelectChange: setTable, sqlLabMode: false, customTableOptionLabelRenderer: customTableOptionLabelRenderer, ...((dataset == null ? void 0 : dataset.catalog) && { catalog: dataset.catalog }), ...((dataset == null ? void 0 : dataset.schema) && { schema: dataset.schema }) }) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}