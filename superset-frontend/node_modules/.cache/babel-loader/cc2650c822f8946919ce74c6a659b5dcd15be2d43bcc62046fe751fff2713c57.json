{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { t, isFeatureEnabled, FeatureFlag, css } from '@superset-ui/core';\nimport ImageLoader from 'src/components/ListViewCard/ImageLoader';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst FALLBACK_THUMBNAIL_URL = '/static/assets/images/chart-card-fallback.svg';\nconst TruncatedTextWithTooltip = ({ children, tooltipText, ...props }) => {\n  // Uses React.useState for testing purposes\n  const [isTruncated, setIsTruncated] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    setIsTruncated(ref.current ? ref.current.scrollWidth > ref.current.clientWidth : false);\n  }, [children]);\n  const div = _jsx(\"div\", { ...props, ref: ref, css: css`\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        display: block;\n      `, children:\n    children }\n  );\n  return isTruncated ? _jsx(Tooltip, { title: tooltipText || children, children: div }) : div;\n};\nconst MetadataItem = ({ label, value, tooltipText }) => _jsxs(\"div\", { css: (theme) => css`\n      font-size: ${theme.typography.sizes.s}px;\n      display: flex;\n      justify-content: space-between;\n\n      &:not(:last-child) {\n        margin-bottom: ${theme.gridUnit}px;\n      }\n    `, children: [\n  _jsx(\"span\", { css: (theme) => css`\n        margin-right: ${theme.gridUnit * 4}px;\n        color: ${theme.colors.grayscale.base};\n      `, children:\n    label }\n  ),\n  _jsx(\"span\", { css: css`\n        min-width: 0;\n      `, children:\n    _jsx(TruncatedTextWithTooltip, { tooltipText: tooltipText, children:\n      value }\n    ) }\n  )] }\n);\nconst SliceAddedBadgePlaceholder = ({ showThumbnails, placeholderRef }) => _jsx(\"div\", { ref: placeholderRef, css: (theme) => css`\n      /* Display styles */\n      border: 1px solid ${theme.colors.primary.dark1};\n      border-radius: ${theme.gridUnit}px;\n      color: ${theme.colors.primary.dark1};\n      font-size: ${theme.typography.sizes.xs}px;\n      letter-spacing: 0.02em;\n      padding: ${theme.gridUnit / 2}px ${theme.gridUnit * 2}px;\n      margin-left: ${theme.gridUnit * 4}px;\n      pointer-events: none;\n\n      /* Position styles */\n      visibility: hidden;\n      position: ${showThumbnails ? 'absolute' : 'unset'};\n      top: ${showThumbnails ? '72px' : 'unset'};\n      left: ${showThumbnails ? '84px' : 'unset'};\n    `, children:\n  t('Added') }\n);\nconst SliceAddedBadge = ({ placeholder }) => _jsx(\"div\", { css: (theme) => css`\n      /* Display styles */\n      border: 1px solid ${theme.colors.primary.dark1};\n      border-radius: ${theme.gridUnit}px;\n      color: ${theme.colors.primary.dark1};\n      font-size: ${theme.typography.sizes.xs}px;\n      letter-spacing: 0.02em;\n      padding: ${theme.gridUnit / 2}px ${theme.gridUnit * 2}px;\n      margin-left: ${theme.gridUnit * 4}px;\n      pointer-events: none;\n\n      /* Position styles */\n      display: ${placeholder ? 'unset' : 'none'};\n      position: absolute;\n      top: ${placeholder ? `${placeholder.offsetTop}px` : 'unset'};\n      left: ${placeholder ? `${placeholder.offsetLeft - 2}px` : 'unset'};\n    `, children:\n  t('Added') }\n);\nconst AddSliceCard = ({ datasourceUrl, datasourceName = '-', innerRef, isSelected = false, lastModified, sliceName, style = {}, thumbnailUrl, visType }) => {\n  const showThumbnails = isFeatureEnabled(FeatureFlag.Thumbnails);\n  const [sliceAddedBadge, setSliceAddedBadge] = useState();\n  const { mountedPluginMetadata } = usePluginContext();\n  const vizName = useMemo(() => {var _mountedPluginMetadat;return ((_mountedPluginMetadat = mountedPluginMetadata[visType]) == null ? void 0 : _mountedPluginMetadat.name) || t('Unknown type');}, [mountedPluginMetadata, visType]);\n  return _jsxs(\"div\", { ref: innerRef, style: style, children: [\n    _jsx(\"div\", { css: (theme) => css`\n          border: 1px solid ${theme.colors.grayscale.light2};\n          border-radius: ${theme.gridUnit}px;\n          background: ${theme.colors.grayscale.light5};\n          padding: ${theme.gridUnit * 4}px;\n          margin: 0 ${theme.gridUnit * 3}px ${theme.gridUnit * 3}px\n            ${theme.gridUnit * 3}px;\n          position: relative;\n          cursor: ${isSelected ? 'not-allowed' : 'move'};\n          white-space: nowrap;\n          overflow: hidden;\n          line-height: 1.3;\n          color: ${theme.colors.grayscale.dark1};\n\n          &:hover {\n            background: ${theme.colors.grayscale.light4};\n          }\n\n          opacity: ${isSelected ? 0.4 : 'unset'};\n        `, children:\n      _jsxs(\"div\", { css: css`\n            display: flex;\n          `, children: [\n        showThumbnails ? _jsxs(\"div\", { css: css`\n                width: 146px;\n                height: 82px;\n                flex-shrink: 0;\n                margin-right: 16px;\n              `, children: [\n          _jsx(ImageLoader, { src: thumbnailUrl || '', fallback: FALLBACK_THUMBNAIL_URL, position: \"top\" }),\n          isSelected && showThumbnails ? _jsx(SliceAddedBadgePlaceholder, { placeholderRef: setSliceAddedBadge, showThumbnails: showThumbnails }) : null] }\n        ) : null,\n        _jsxs(\"div\", { css: css`\n              flex-grow: 1;\n              min-width: 0;\n            `, children: [\n          _jsxs(\"div\", { css: (theme) => css`\n                margin-bottom: ${theme.gridUnit * 2}px;\n                font-weight: ${theme.typography.weights.bold};\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n              `, children: [\n            _jsx(TruncatedTextWithTooltip, { children: sliceName }),\n            isSelected && !showThumbnails ? _jsx(SliceAddedBadgePlaceholder, { placeholderRef: setSliceAddedBadge }) : null] }\n          ),\n          _jsxs(\"div\", { css: css`\n                display: flex;\n                flex-direction: column;\n              `, children: [\n            _jsx(MetadataItem, { label: t('Viz type'), value: vizName }),\n            _jsx(MetadataItem, { label: t('Dataset'), value: datasourceUrl ? _jsx(GenericLink, { to: datasourceUrl, children:\n                datasourceName }\n              ) : datasourceName, tooltipText: datasourceName }),\n            _jsx(MetadataItem, { label: t('Modified'), value: lastModified })] }\n          )] }\n        )] }\n      ) }\n    ),\n    _jsx(SliceAddedBadge, { placeholder: sliceAddedBadge })] }\n  );\n};\nexport default AddSliceCard;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}