{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, ComparisonType } from '@superset-ui/core';\nimport { INVALID_DATE } from '..';\nconst fullChoices = [\n['1 day ago', t('1 day ago')],\n['1 week ago', t('1 week ago')],\n['28 days ago', t('28 days ago')],\n['30 days ago', t('30 days ago')],\n['1 month ago', t('1 month ago')],\n['52 weeks ago', t('52 weeks ago')],\n['1 year ago', t('1 year ago')],\n['104 weeks ago', t('104 weeks ago')],\n['2 years ago', t('2 years ago')],\n['156 weeks ago', t('156 weeks ago')],\n['3 years ago', t('3 years ago')],\n['custom', t('Custom date')],\n['inherit', t('Inherit range from time filter')]];\n\nconst reducedKeys = new Set([\n'1 day ago',\n'1 week ago',\n'1 month ago',\n'1 year ago',\n'custom',\n'inherit']\n);\n// Filter fullChoices to get only the entries whose keys are in reducedKeys\nconst reducedChoices = fullChoices.filter((choice) => reducedKeys.has(choice[0]));\nexport const timeComparisonControls = ({ multi = true, showCalculationType = true, showFullChoices = true }) => ({\n  label: t('Time Comparison'),\n  tabOverride: 'data',\n  description: t('Compare results with other time periods.'),\n  controlSetRows: [\n  [\n  {\n    name: 'time_compare',\n    config: {\n      type: 'SelectControl',\n      multi,\n      freeForm: true,\n      placeholder: t('Select or type a custom value...'),\n      label: t('Time shift'),\n      choices: showFullChoices ? fullChoices : reducedChoices,\n      description: t('Overlay results from a relative time period. ' +\n      'Expects relative time deltas ' +\n      'in natural language (example:  24 hours, 7 days, ' +\n      '52 weeks, 365 days). Free text is supported. ' +\n      'Use \"Inherit range from time filters\" ' +\n      'to shift the comparison time range ' +\n      'by the same length as your time range ' +\n      'and use \"Custom\" to set a custom comparison range.')\n    }\n  }],\n\n  [\n  {\n    name: 'start_date_offset',\n    config: {\n      type: 'TimeOffsetControl',\n      label: t('Shift start date'),\n      visibility: ({ controls }) => (controls == null ? void 0 : controls.time_compare.value) === 'custom',\n      mapStateToProps: (state, controlState) => {\n        const { form_data } = state;\n        const { time_compare } = form_data;\n        const newState = { ...controlState };\n        if (time_compare === 'custom' && (\n        controlState.value === '' || controlState.value === INVALID_DATE)) {\n          newState.externalValidationErrors = [\n          t('A date is required when using custom date shift')];\n\n        } else\n        {\n          newState.externalValidationErrors = [];\n        }\n        return newState;\n      }\n    }\n  }],\n\n  [\n  {\n    name: 'comparison_type',\n    config: {\n      type: 'SelectControl',\n      label: t('Calculation type'),\n      default: 'values',\n      choices: [\n      [ComparisonType.Values, t('Actual values')],\n      [ComparisonType.Difference, t('Difference')],\n      [ComparisonType.Percentage, t('Percentage change')],\n      [ComparisonType.Ratio, t('Ratio')]],\n\n      description: t('How to display time shifts: as individual lines; as the ' +\n      'difference between the main time series and each time shift; ' +\n      'as the percentage change; or as the ratio between series and time shifts.'),\n      hidden: () => Boolean(showCalculationType)\n    }\n  }],\n\n  [\n  {\n    name: 'comparison_range_label',\n    config: {\n      type: 'ComparisonRangeLabel',\n      multi,\n      visibility: ({ controls }) => Boolean(controls == null ? void 0 : controls.time_compare.value)\n    }\n  }]]\n\n\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}