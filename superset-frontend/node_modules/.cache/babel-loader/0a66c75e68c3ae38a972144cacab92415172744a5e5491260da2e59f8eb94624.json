{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useRef } from 'react';\nimport { t, css, useTheme } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\nconst ControlHeader = ({ name, label, description, validationErrors = [], renderTrigger = false, rightNode, leftNode, onClick, hovered = false, tooltipOnClick = () => {}, warning, danger }) => {\n  const { gridUnit, colors } = useTheme();\n  const hasHadNoErrors = useRef(false);\n  const labelColor = useMemo(() => {\n    if (!validationErrors.length) {\n      hasHadNoErrors.current = true;\n    }\n    if (hasHadNoErrors.current) {\n      if (validationErrors.length) {\n        return colors.error.base;\n      }\n      return 'unset';\n    }\n    return colors.warning.base;\n  }, [colors.error.base, colors.warning.base, validationErrors.length]);\n  if (!label) {\n    return null;\n  }\n  const renderOptionalIcons = () => {\n    if (!hovered) {\n      return null;\n    }\n    return _jsxs(\"span\", { css: () => css`\n          position: absolute;\n          top: 50%;\n          right: 0;\n          padding-left: ${gridUnit}px;\n          transform: translate(100%, -50%);\n          white-space: nowrap;\n        `, children: [\n      description && _jsxs(\"span\", { children: [\n        _jsx(Tooltip, { id: \"description-tooltip\", title: description, placement: \"top\", children:\n          _jsx(Icons.InfoCircleOutlined, { css: iconStyles, onClick: tooltipOnClick }) }\n        ), ' '] }\n      ),\n      renderTrigger && _jsxs(\"span\", { children: [\n        _jsx(InfoTooltipWithTrigger, { label: t('bolt'), tooltip: t('Changing this control takes effect instantly'), placement: \"top\", icon: \"bolt\" }), ' '] }\n      )] }\n    );\n  };\n  return _jsxs(\"div\", { className: \"ControlHeader\", children: [\n    _jsx(\"div\", { className: \"pull-left\", children:\n      _jsxs(FormLabel, { css: (theme) => css`\n            margin-bottom: ${theme.gridUnit * 0.5}px;\n            position: relative;\n          `, children: [\n        leftNode && _jsx(\"span\", { children: leftNode }),\n        _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: onClick, style: { cursor: onClick ? 'pointer' : '' }, children:\n          label }\n        ), ' ',\n        warning && _jsxs(\"span\", { children: [\n          _jsx(Tooltip, { id: \"error-tooltip\", placement: \"top\", title: warning, children:\n            _jsx(Icons.WarningOutlined, { iconColor: colors.warning.base, css: css`\n                    vertical-align: baseline;\n                  `, iconSize: \"s\" }) }\n          ), ' '] }\n        ),\n        danger && _jsxs(\"span\", { children: [\n          _jsx(Tooltip, { id: \"error-tooltip\", placement: \"top\", title: danger, children:\n            _jsx(Icons.ExclamationCircleOutlined, { iconColor: colors.error.base, iconSize: \"s\" }) }\n          ), ' '] }\n        ),\n        (validationErrors == null ? void 0 : validationErrors.length) > 0 && _jsxs(\"span\", { children: [\n          _jsx(Tooltip, { id: \"error-tooltip\", placement: \"top\", title: validationErrors == null ? void 0 : validationErrors.join(' '), children:\n            _jsx(Icons.ExclamationCircleOutlined, { css: css`\n                    ${iconStyles};\n                    color: ${labelColor};\n                  ` }) }\n          ), ' '] }\n        ),\n        renderOptionalIcons()] }\n      ) }\n    ),\n    rightNode && _jsx(\"div\", { className: \"pull-right\", children: rightNode }),\n    _jsx(\"div\", { className: \"clearfix\" })] }\n  );\n};\nexport default ControlHeader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}