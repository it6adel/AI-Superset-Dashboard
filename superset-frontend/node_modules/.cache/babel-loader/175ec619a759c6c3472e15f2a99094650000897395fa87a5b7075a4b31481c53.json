{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createRef, forwardRef, useImperativeHandle, useMemo } from 'react';\nimport { withTheme } from '@superset-ui/core';\nimport SearchFilter from './Search';\nimport SelectFilter from './Select';\nimport DateRangeFilter from './DateRange';import { jsx as _jsx, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nfunction UIFilters({ filters, internalFilters = [], updateFilterValue }, ref) {\n  const filterRefs = useMemo(() => Array.from({ length: filters.length }, () => /*#__PURE__*/createRef()), [filters.length]);\n  useImperativeHandle(ref, () => ({\n    clearFilters: () => {\n      filterRefs.forEach((filter) => {var _filter$current;\n        (_filter$current = filter.current) == null ? void 0 : _filter$current.clearFilter == null ? void 0 : _filter$current.clearFilter();\n      });\n    }\n  }));\n  return _jsx(_Fragment, { children:\n    filters.map(({ Header, fetchSelects, key, id, input, paginate, selects, toolTipDescription, onFilterUpdate }, index) => {var _internalFilters$inde;\n      const initialValue = internalFilters == null ? void 0 : (_internalFilters$inde = internalFilters[index]) == null ? void 0 : _internalFilters$inde.value;\n      if (input === 'select') {\n        return _jsx(SelectFilter, { ref: filterRefs[index], Header: Header, fetchSelects: fetchSelects, initialValue: initialValue, name: id, onSelect: (option, isClear) => {\n            if (onFilterUpdate) {\n              // Filter change triggers both onChange AND onClear, only want to track onChange\n              if (!isClear) {\n                onFilterUpdate(option);\n              }\n            }\n            updateFilterValue(index, option);\n          }, paginate: paginate, selects: selects }, key);\n      }\n      if (input === 'search' && typeof Header === 'string') {\n        return _jsx(SearchFilter, { ref: filterRefs[index], Header: Header, initialValue: initialValue, name: id, toolTipDescription: toolTipDescription, onSubmit: (value) => {\n            if (onFilterUpdate) {\n              onFilterUpdate(value);\n            }\n            updateFilterValue(index, value);\n          } }, key);\n      }\n      if (input === 'datetime_range') {\n        return _jsx(DateRangeFilter, { ref: filterRefs[index], Header: Header, initialValue: initialValue, name: id, onSubmit: (value) => updateFilterValue(index, value) }, key);\n      }\n      return null;\n    }) }\n  );\n}\nexport default withTheme(/*#__PURE__*/forwardRef(UIFilters));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}