{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Icons from 'src/components/Icons';\nimport { css, styled, t } from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport { Button, Tree } from 'antd'; // TODO: Remove antd\nimport { forwardRef } from 'react';\nimport { handleDrop } from './dragDropUtil';\nimport LayerTreeItem from './LayerTreeItem';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const StyledLayerTreeItem = styled(LayerTreeItem)`\n  ${({ theme }) => css`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    padding: unset;\n\n    border: none;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.grayscale.light3};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.normal};\n\n    &:hover {\n      background-color: ${theme.colors.grayscale.light3};\n    }\n\n    & .layer-tree-item-close {\n      border-right: solid;\n      border-right-width: 1px;\n      border-right-color: ${theme.colors.grayscale.light2};\n    }\n\n    & .layer-tree-item-edit {\n      border-left: solid;\n      border-left-width: 1px;\n      border-left-color: ${theme.colors.grayscale.light2};\n    }\n\n    & .layer-tree-item-title {\n      flex: 1;\n      padding-left: 4px;\n    }\n\n    & .layer-tree-item-type {\n      padding-left: 4px;\n      font-size: ${theme.typography.sizes.xs}px;\n      font-family: ${theme.typography.families.monospace};\n    }\n\n    & > button {\n      border: none;\n      background-color: unset;\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    & > button:hover {\n      background-color: unset;\n      color: ${theme.colors.grayscale.light1};\n    }\n  `}\n`;\n// forwardRef is needed here in order for emotion and antd tree to work properly\nexport const FlatLayerTree = /*#__PURE__*/forwardRef(({ layerConfigs, onAddLayer = () => {}, onRemoveLayer = () => {}, onEditLayer = () => {}, onMoveLayer = () => {}, draggable, className }, ref) => {\n  const layerConfigsToTreeData = (configs) => configs.map((config, idx) => ({\n    layerConf: config,\n    key: idx,\n    title: _jsx(StyledLayerTreeItem, { layerConf: config, onEditClick: () => onEditLayer(config, idx), onRemoveClick: () => onRemoveLayer(idx) }),\n    selectable: false,\n    isLeaf: true,\n    checkable: false\n  }));\n  const treeDataToLayerConfigs = (treeData) => treeData.map((data) => data.layerConf);\n  const treeData = layerConfigsToTreeData(layerConfigs);\n  const onDrop = (info) => {\n    const data = handleDrop(info, treeData);\n    const movedLayerConfigs = treeDataToLayerConfigs(data);\n    onMoveLayer(movedLayerConfigs);\n  };\n  const addLayerLabel = t('Click to add new layer');\n  return _jsxs(\"div\", { className: className, ref: ref, children: [\n    _jsx(Button, { className: \"add-layer-btn\", onClick: onAddLayer, size: \"small\", type: \"dashed\", icon: _jsx(Icons.PlusOutlined, { iconSize: \"m\" }), children:\n      addLayerLabel }\n    ),\n    _jsx(Tree, { treeData: treeData, draggable: draggable, onDrop: onDrop })] }\n  );\n});\nexport default FlatLayerTree;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}