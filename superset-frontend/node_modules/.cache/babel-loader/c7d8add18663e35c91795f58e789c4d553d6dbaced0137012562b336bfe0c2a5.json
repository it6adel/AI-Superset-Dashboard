{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var OverwritePolicy;\n(function (OverwritePolicy) {\n  OverwritePolicy[\"Allow\"] = \"ALLOW\";\n  OverwritePolicy[\"Prohibit\"] = \"PROHIBIT\";\n  OverwritePolicy[\"Warn\"] = \"WARN\";\n})(OverwritePolicy || (OverwritePolicy = {}));\n/**\n * Registry class\n *\n * !!!!!!!!\n * IF YOU ARE ADDING A NEW REGISTRY TO SUPERSET, CONSIDER USING TypedRegistry\n * !!!!!!!!\n *\n * Can use generic to specify type of item in the registry\n * @type V Type of value\n * @type W Type of value returned from loader function when using registerLoader().\n * Set W=V when does not support asynchronous loader.\n * By default W is set to V | Promise<V> to support\n * both synchronous and asynchronous loaders.\n */\nexport default class Registry {\n\n\n\n\n\n  constructor(config = {}) {this.name = void 0;this.overwritePolicy = void 0;this.items = void 0;this.promises = void 0;this.listeners = void 0;\n    const { name = '', overwritePolicy = OverwritePolicy.Allow } = config;\n    this.name = name;\n    this.overwritePolicy = overwritePolicy;\n    this.items = {};\n    this.promises = {};\n    this.listeners = new Set();\n  }\n  clear() {\n    const keys = this.keys();\n    this.items = {};\n    this.promises = {};\n    this.notifyListeners(keys);\n    return this;\n  }\n  has(key) {\n    const item = this.items[key];\n    return item !== null && item !== undefined;\n  }\n  registerValue(key, value) {\n    const item = this.items[key];\n    const willOverwrite = this.has(key) && (\n    'value' in item && item.value !== value || 'loader' in item);\n    if (willOverwrite) {\n      if (this.overwritePolicy === OverwritePolicy.Warn) {\n        // eslint-disable-next-line no-console\n        console.warn(`Item with key \"${key}\" already exists. You are assigning a new value.`);\n      } else\n      if (this.overwritePolicy === OverwritePolicy.Prohibit) {\n        throw new Error(`Item with key \"${key}\" already exists. Cannot overwrite.`);\n      }\n    }\n    if (!item || willOverwrite) {\n      this.items[key] = { value };\n      delete this.promises[key];\n      this.notifyListeners([key]);\n    }\n    return this;\n  }\n  registerLoader(key, loader) {\n    const item = this.items[key];\n    const willOverwrite = this.has(key) && (\n    'loader' in item && item.loader !== loader || 'value' in item);\n    if (willOverwrite) {\n      if (this.overwritePolicy === OverwritePolicy.Warn) {\n        // eslint-disable-next-line no-console\n        console.warn(`Item with key \"${key}\" already exists. You are assigning a new value.`);\n      } else\n      if (this.overwritePolicy === OverwritePolicy.Prohibit) {\n        throw new Error(`Item with key \"${key}\" already exists. Cannot overwrite.`);\n      }\n    }\n    if (!item || willOverwrite) {\n      this.items[key] = { loader };\n      delete this.promises[key];\n      this.notifyListeners([key]);\n    }\n    return this;\n  }\n  get(key) {\n    const item = this.items[key];\n    if (item !== undefined) {\n      if ('loader' in item) {\n        return item.loader == null ? void 0 : item.loader();\n      }\n      return item.value;\n    }\n    return undefined;\n  }\n  getAsPromise(key) {\n    const promise = this.promises[key];\n    if (typeof promise !== 'undefined') {\n      return promise;\n    }\n    const item = this.get(key);\n    if (item !== undefined) {\n      const newPromise = Promise.resolve(item);\n      this.promises[key] = newPromise;\n      return newPromise;\n    }\n    return Promise.reject(new Error(`Item with key \"${key}\" is not registered.`));\n  }\n  getMap() {\n    return this.keys().reduce((prev, key) => {\n      const map = prev;\n      map[key] = this.get(key);\n      return map;\n    }, {});\n  }\n  getMapAsPromise() {\n    const keys = this.keys();\n    return Promise.all(keys.map((key) => this.getAsPromise(key))).then((values) => values.reduce((prev, value, i) => {\n      const map = prev;\n      map[keys[i]] = value;\n      return map;\n    }, {}));\n  }\n  keys() {\n    return Object.keys(this.items);\n  }\n  values() {\n    return this.keys().map((key) => this.get(key));\n  }\n  valuesAsPromise() {\n    return Promise.all(this.keys().map((key) => this.getAsPromise(key)));\n  }\n  entries() {\n    return this.keys().map((key) => ({\n      key,\n      value: this.get(key)\n    }));\n  }\n  entriesAsPromise() {\n    const keys = this.keys();\n    return this.valuesAsPromise().then((values) => values.map((value, i) => ({\n      key: keys[i],\n      value\n    })));\n  }\n  remove(key) {\n    const isChange = this.has(key);\n    delete this.items[key];\n    delete this.promises[key];\n    if (isChange) {\n      this.notifyListeners([key]);\n    }\n    return this;\n  }\n  addListener(listener) {\n    this.listeners.add(listener);\n  }\n  removeListener(listener) {\n    this.listeners.delete(listener);\n  }\n  notifyListeners(keys) {\n    this.listeners.forEach((listener) => {\n      try {\n        listener(keys);\n      }\n      catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Exception thrown from a registry listener:', e);\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}