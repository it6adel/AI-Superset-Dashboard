{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useDispatch } from 'react-redux';\nimport { t } from '@superset-ui/core';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { queryEditorSetQueryLimit } from 'src/SqlLab/actions/sqlLab';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport Button from 'src/components/Button';import { jsxs as _jsxs, jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport function convertToNumWithSpaces(num) {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n}\nfunction renderQueryLimit(maxRow, setQueryLimit) {\n  const limitDropdown = [];\n  // Construct limit dropdown as increasing powers of ten until we reach SQL_MAX_ROW\n  for (let i = 10; i < maxRow; i *= 10) {\n    limitDropdown.push(i);\n  }\n  limitDropdown.push(maxRow);\n  return _jsx(Menu, { children:\n    [...new Set(limitDropdown)].map((limit) => _jsxs(Menu.Item, { onClick: () => setQueryLimit(limit), children: [\n\n      convertToNumWithSpaces(limit), ' '] }, `${limit}`\n    )) }\n  );\n}\nconst QueryLimitSelect = ({ queryEditorId, maxRow, defaultQueryLimit }) => {\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, ['id', 'queryLimit']);\n  const queryLimit = queryEditor.queryLimit || defaultQueryLimit;\n  const setQueryLimit = (updatedQueryLimit) => dispatch(queryEditorSetQueryLimit(queryEditor, updatedQueryLimit));\n  return _jsx(Dropdown, { dropdownRender: () => renderQueryLimit(maxRow, setQueryLimit), trigger: ['click'], children:\n    _jsxs(Button, { size: \"small\", showMarginRight: false, type: \"link\", children: [\n      _jsxs(\"span\", { children: [t('LIMIT'), \":\"] }),\n      _jsx(\"span\", { className: \"limitDropdown\", children:\n        convertToNumWithSpaces(queryLimit) }\n      ),\n      _jsx(Icons.CaretDownOutlined, { iconSize: \"m\" })] }\n    ) }\n  );\n};\nexport default QueryLimitSelect;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}