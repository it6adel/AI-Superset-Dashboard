{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport PropTypes from 'prop-types';\nimport { extent as d3Extent, range as d3Range } from 'd3-array';\nimport { select as d3Select } from 'd3-selection';\nimport { getSequentialSchemeRegistry, t } from '@superset-ui/core';\nimport CalHeatMap from './vendor/cal-heatmap';\n\nconst propTypes = {\n  data: PropTypes.shape({\n    // Object hashed by metric name,\n    // then hashed by timestamp (in seconds, not milliseconds) as float\n    // the innermost value is count\n    // e.g. { count_distinct_something: { 1535034236.0: 3 } }\n    data: PropTypes.object,\n    domain: PropTypes.string,\n    range: PropTypes.number,\n    // timestamp in milliseconds\n    start: PropTypes.number,\n    subdomain: PropTypes.string\n  }),\n  height: PropTypes.number,\n  // eslint-disable-next-line react/sort-prop-types\n  cellPadding: PropTypes.number,\n  // eslint-disable-next-line react/sort-prop-types\n  cellRadius: PropTypes.number,\n  // eslint-disable-next-line react/sort-prop-types\n  cellSize: PropTypes.number,\n  linearColorScheme: PropTypes.string,\n  showLegend: PropTypes.bool,\n  showMetricName: PropTypes.bool,\n  showValues: PropTypes.bool,\n  steps: PropTypes.number,\n  timeFormatter: PropTypes.func,\n  valueFormatter: PropTypes.func,\n  verboseMap: PropTypes.object,\n  theme: PropTypes.object\n};\n\nfunction Calendar(element, props) {\n  const {\n    data,\n    height,\n    cellPadding = 3,\n    cellRadius = 0,\n    cellSize = 10,\n    domainGranularity,\n    linearColorScheme,\n    showLegend,\n    showMetricName,\n    showValues,\n    steps,\n    subdomainGranularity,\n    timeFormatter,\n    valueFormatter,\n    verboseMap,\n    theme\n  } = props;\n\n  const container = d3Select(element).\n  classed('superset-legacy-chart-calendar', true).\n  style('height', height);\n  container.selectAll('*').remove();\n  const div = container.append('div');\n\n  const subDomainTextFormat = showValues ?\n  (date, value) => valueFormatter(value) :\n  null;\n\n  const metricsData = data.data;\n\n  const METRIC_TEXT = t('Metric');\n\n  Object.keys(metricsData).forEach((metric) => {\n    const calContainer = div.append('div');\n    if (showMetricName) {\n      calContainer.text(`${METRIC_TEXT}: ${verboseMap[metric] || metric}`);\n    }\n    const timestamps = metricsData[metric];\n    const extents = d3Extent(Object.keys(timestamps), (key) => timestamps[key]);\n    const step = (extents[1] - extents[0]) / (steps - 1);\n    const colorScale = getSequentialSchemeRegistry().\n    get(linearColorScheme).\n    createLinearScale(extents);\n\n    const legend = d3Range(steps).map((i) => extents[0] + step * i);\n    const legendColors = legend.map((x) => colorScale(x));\n\n    const cal = new CalHeatMap();\n    cal.init({\n      start: data.start,\n      data: timestamps,\n      itemSelector: calContainer.node(),\n      legendVerticalPosition: 'top',\n      cellSize,\n      cellPadding,\n      cellRadius,\n      legendCellSize: cellSize,\n      legendCellPadding: 2,\n      legendCellRadius: cellRadius,\n      tooltip: true,\n      domain: domainGranularity,\n      subDomain: subdomainGranularity,\n      range: data.range,\n      browsing: true,\n      legend,\n      legendColors: {\n        colorScale,\n        min: legendColors[0],\n        max: legendColors[legendColors.length - 1],\n        empty: theme.colors.grayscale.light5\n      },\n      displayLegend: showLegend,\n      itemName: '',\n      valueFormatter,\n      timeFormatter,\n      subDomainTextFormat\n    });\n  });\n}\n\nCalendar.displayName = 'Calendar';\nCalendar.propTypes = propTypes;\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}