{"ast":null,"code":"/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ensureIsArray, ensureIsInt, RollingType } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nexport const rollingWindowOperator = (formData, queryObject) => {\n  let columns;\n  if (isTimeComparison(formData, queryObject)) {\n    const metricsMap = getMetricOffsetsMap(formData, queryObject);\n    columns = [\n    ...Array.from(metricsMap.values()),\n    ...Array.from(metricsMap.keys())];\n\n  } else\n  {\n    columns = ensureIsArray(queryObject.metrics).map((metric) => {\n      if (typeof metric === 'string') {\n        return metric;\n      }\n      return metric.label;\n    });\n  }\n  const columnsMap = Object.fromEntries(columns.map((col) => [col, col]));\n  if (formData.rolling_type === RollingType.Cumsum) {\n    return {\n      operation: 'cum',\n      options: {\n        operator: 'sum',\n        columns: columnsMap\n      }\n    };\n  }\n  if ([RollingType.Sum, RollingType.Mean, RollingType.Std].includes(formData.rolling_type)) {\n    return {\n      operation: 'rolling',\n      options: {\n        rolling_type: formData.rolling_type,\n        window: ensureIsInt(formData.rolling_periods, 1),\n        min_periods: ensureIsInt(formData.min_periods, 0),\n        columns: columnsMap\n      }\n    };\n  }\n  return undefined;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}