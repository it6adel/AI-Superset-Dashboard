{"ast":null,"code":"import _isPlainObject from \"lodash/isPlainObject\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SafeMarkdown, styled, t } from '@superset-ui/core';\nimport Handlebars from 'handlebars';\nimport dayjs from 'dayjs';\nimport { useMemo, useState } from 'react';\n\nimport Helpers from 'just-handlebars-helpers';\nimport HandlebarsGroupBy from 'handlebars-group-by';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const HandlebarsViewer = ({ templateSource, data }) => {var _common$conf$HTML_SAN, _common$conf, _common$conf2;\n  const [renderedTemplate, setRenderedTemplate] = useState('');\n  const [error, setError] = useState('');\n  const appContainer = document.getElementById('app');\n  const { common } = JSON.parse((appContainer == null ? void 0 : appContainer.getAttribute('data-bootstrap')) || '{}');\n  const htmlSanitization = (_common$conf$HTML_SAN = common == null ? void 0 : (_common$conf = common.conf) == null ? void 0 : _common$conf.HTML_SANITIZATION) != null ? _common$conf$HTML_SAN : true;\n  const htmlSchemaOverrides = (common == null ? void 0 : (_common$conf2 = common.conf) == null ? void 0 : _common$conf2.HTML_SANITIZATION_SCHEMA_EXTENSIONS) || {};\n  useMemo(() => {\n    try {\n      const template = Handlebars.compile(templateSource);\n      const result = template(data);\n      setRenderedTemplate(result);\n      setError('');\n    }\n    catch (error) {\n      setRenderedTemplate('');\n      setError(error.message);\n    }\n  }, [templateSource, data]);\n  const Error = styled.pre`\n    white-space: pre-wrap;\n  `;\n  if (error) {\n    return _jsx(Error, { children: error });\n  }\n  if (renderedTemplate) {\n    return _jsx(SafeMarkdown, { source: renderedTemplate, htmlSanitization: htmlSanitization, htmlSchemaOverrides: htmlSchemaOverrides });\n  }\n  return _jsx(\"p\", { children: t('Loading...') });\n};\n//  usage: {{dateFormat my_date format=\"MMMM YYYY\"}}\nHandlebars.registerHelper('dateFormat', function (context, block) {\n  const f = block.hash.format || 'YYYY-MM-DD';\n  return dayjs(context).format(f);\n});\n// usage: {{  }}\nHandlebars.registerHelper('stringify', (obj, obj2) => {\n  // calling without an argument\n  if (obj2 === undefined)\n  throw Error('Please call with an object. Example: `stringify myObj`');\n  return _isPlainObject(obj) ? JSON.stringify(obj) : String(obj);\n});\nHandlebars.registerHelper('formatNumber', function (number, locale = 'en-US') {\n  if (typeof number !== 'number') {\n    return number;\n  }\n  return number.toLocaleString(locale);\n});\n// usage: {{parseJson jsonString}}\nHandlebars.registerHelper('parseJson', (jsonString) => {\n  try {\n    return JSON.parse(jsonString);\n  }\n  catch (error) {\n    if (error instanceof Error) {\n      error.message = `Invalid JSON string: ${error.message}`;\n      throw error;\n    }\n    throw new Error(`Invalid JSON string: ${String(error)}`);\n  }\n});\nHelpers.registerHelpers(Handlebars);\nHandlebarsGroupBy.register(Handlebars);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}