{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport callApiAndParseWithTimeout from './callApi/callApiAndParseWithTimeout';\nimport { DEFAULT_FETCH_RETRY_OPTIONS, DEFAULT_BASE_URL } from './constants';\nconst defaultUnauthorizedHandler = () => {\n  if (!window.location.pathname.startsWith('/login')) {\n    window.location.href = `/login?next=${window.location.href}`;\n  }\n};\nexport default class SupersetClientClass {\n\n\n\n\n\n\n\n\n\n\n\n\n\n  constructor({ baseUrl = DEFAULT_BASE_URL, host, protocol, headers = {}, fetchRetryOptions = {}, mode = 'same-origin', timeout, credentials = undefined, csrfToken = undefined, guestToken = undefined, guestTokenHeaderName = 'X-GuestToken', unauthorizedHandler = defaultUnauthorizedHandler } = {}) {this.credentials = void 0;this.csrfToken = void 0;this.csrfPromise = void 0;this.guestToken = void 0;this.guestTokenHeaderName = void 0;this.fetchRetryOptions = void 0;this.baseUrl = void 0;this.protocol = void 0;this.host = void 0;this.headers = void 0;this.mode = void 0;this.timeout = void 0;this.handleUnauthorized = void 0;\n    const url = new URL(host || protocol ?\n    `${protocol || 'https:'}//${host || 'localhost'}` :\n    baseUrl,\n    // baseUrl for API could also be relative, so we provide current location.href\n    // as the base of baseUrl\n    window.location.href);\n    this.baseUrl = url.href.replace(/\\/+$/, ''); // always strip trailing slash\n    this.host = url.host;\n    this.protocol = url.protocol;\n    this.headers = { Accept: 'application/json', ...headers }; // defaulting accept to json\n    this.mode = mode;\n    this.timeout = timeout;\n    this.credentials = credentials;\n    this.csrfToken = csrfToken;\n    this.guestToken = guestToken;\n    this.guestTokenHeaderName = guestTokenHeaderName;\n    this.fetchRetryOptions = {\n      ...DEFAULT_FETCH_RETRY_OPTIONS,\n      ...fetchRetryOptions\n    };\n    if (typeof this.csrfToken === 'string') {\n      this.headers = { ...this.headers, 'X-CSRFToken': this.csrfToken };\n      this.csrfPromise = Promise.resolve(this.csrfToken);\n    }\n    if (guestToken) {\n      this.headers[guestTokenHeaderName] = guestToken;\n    }\n    this.handleUnauthorized = unauthorizedHandler;\n  }\n  async init(force = false) {\n    if (this.isAuthenticated() && !force) {\n      return this.csrfPromise;\n    }\n    return this.getCSRFToken();\n  }\n  async postForm(url, payload, target = '_blank') {\n    if (url) {\n      await this.ensureAuth();\n      const hiddenForm = document.createElement('form');\n      hiddenForm.action = url;\n      hiddenForm.method = 'POST';\n      hiddenForm.target = target;\n      const payloadWithToken = {\n        ...payload,\n        csrf_token: this.csrfToken\n      };\n      if (this.guestToken) {\n        payloadWithToken.guest_token = this.guestToken;\n      }\n      Object.entries(payloadWithToken).forEach(([key, value]) => {\n        const data = document.createElement('input');\n        data.type = 'hidden';\n        data.name = key;\n        data.value = value;\n        hiddenForm.appendChild(data);\n      });\n      document.body.appendChild(hiddenForm);\n      hiddenForm.submit();\n      document.body.removeChild(hiddenForm);\n    }\n  }\n  async reAuthenticate() {\n    return this.init(true);\n  }\n  isAuthenticated() {\n    // if CSRF protection is disabled in the Superset app, the token may be an empty string\n    return this.csrfToken !== null && this.csrfToken !== undefined;\n  }\n  getGuestToken() {\n    return this.guestToken;\n  }\n  async get(requestConfig) {\n    return this.request({ ...requestConfig, method: 'GET' });\n  }\n  async delete(requestConfig) {\n    return this.request({ ...requestConfig, method: 'DELETE' });\n  }\n  async put(requestConfig) {\n    return this.request({ ...requestConfig, method: 'PUT' });\n  }\n  async post(requestConfig) {\n    return this.request({ ...requestConfig, method: 'POST' });\n  }\n  async request({ credentials, mode, endpoint, host, url, headers, timeout, fetchRetryOptions, ignoreUnauthorized = false, ...rest }) {\n    await this.ensureAuth();\n    return callApiAndParseWithTimeout({\n      ...rest,\n      credentials: credentials != null ? credentials : this.credentials,\n      mode: mode != null ? mode : this.mode,\n      url: this.getUrl({ endpoint, host, url }),\n      headers: { ...this.headers, ...headers },\n      timeout: timeout != null ? timeout : this.timeout,\n      fetchRetryOptions: fetchRetryOptions != null ? fetchRetryOptions : this.fetchRetryOptions\n    }).catch((res) => {\n      if ((res == null ? void 0 : res.status) === 401 && !ignoreUnauthorized) {\n        this.handleUnauthorized();\n      }\n      return Promise.reject(res);\n    });\n  }\n  async ensureAuth() {var _this$csrfPromise;\n    return (_this$csrfPromise = this.csrfPromise) != null ? _this$csrfPromise :\n    // eslint-disable-next-line prefer-promise-reject-errors\n    Promise.reject({\n      error: `SupersetClient has not been provided a CSRF token, ensure it is\n        initialized with \\`client.getCSRFToken()\\` or try logging in at\n        ${this.getUrl({ endpoint: '/login' })}`\n    });\n  }\n  async getCSRFToken() {\n    this.csrfToken = undefined;\n    // If we can request this resource successfully, it means that the user has\n    // authenticated. If not we throw an error prompting to authenticate.\n    this.csrfPromise = callApiAndParseWithTimeout({\n      credentials: this.credentials,\n      headers: {\n        ...this.headers\n      },\n      method: 'GET',\n      mode: this.mode,\n      timeout: this.timeout,\n      url: this.getUrl({ endpoint: 'api/v1/security/csrf_token/' }),\n      parseMethod: 'json'\n    }).then(({ json }) => {\n      if (typeof json === 'object') {\n        this.csrfToken = json.result;\n        if (typeof this.csrfToken === 'string') {\n          this.headers = { ...this.headers, 'X-CSRFToken': this.csrfToken };\n        }\n      }\n      if (this.isAuthenticated()) {\n        return this.csrfToken;\n      }\n      // eslint-disable-next-line prefer-promise-reject-errors\n      return Promise.reject({ error: 'Failed to fetch CSRF token' });\n    });\n    return this.csrfPromise;\n  }\n  getUrl({ host: inputHost, endpoint = '', url } = {}) {\n    if (typeof url === 'string')\n    return url;\n    const host = inputHost != null ? inputHost : this.host;\n    const cleanHost = host.slice(-1) === '/' ? host.slice(0, -1) : host; // no backslash\n    return `${this.protocol}//${cleanHost}/${endpoint[0] === '/' ? endpoint.slice(1) : endpoint}`;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}