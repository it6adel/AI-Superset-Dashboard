{"ast":null,"code":"/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ensureIsArray, getMetricLabel, ComparisonType, getXAxisLabel } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nexport const renameOperator = (formData, queryObject) => {\n  const metrics = ensureIsArray(queryObject.metrics);\n  const columns = ensureIsArray(queryObject.series_columns || queryObject.columns);\n  const { truncate_metric } = formData;\n  const xAxisLabel = getXAxisLabel(formData);\n  // remove or rename top level of column name(metric name) in the MultiIndex when\n  // 1) only 1 metric\n  // 2) dimension exist\n  // 3) xAxis exist\n  // 4) time comparison exist, and comparison type is \"actual values\"\n  // 5) truncate_metric in form_data and truncate_metric is true\n  if (metrics.length === 1 &&\n  columns.length > 0 &&\n  xAxisLabel &&\n  !(\n  // todo: we should provide an approach to handle derived metrics\n  isTimeComparison(formData, queryObject) &&\n  [\n  ComparisonType.Difference,\n  ComparisonType.Ratio,\n  ComparisonType.Percentage].\n  includes(formData.comparison_type)) &&\n  truncate_metric !== undefined &&\n  !!truncate_metric) {\n    const renamePairs = [];\n    if (\n    // \"actual values\" will add derived metric.\n    // we will rename the \"metric\" from the metricWithOffset label\n    // for example: \"count__1 year ago\" =>\t\"1 year ago\"\n    isTimeComparison(formData, queryObject) &&\n    formData.comparison_type === ComparisonType.Values) {\n      const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n      const timeOffsets = ensureIsArray(formData.time_compare);\n      [...metricOffsetMap.keys()].forEach((metricWithOffset) => {\n        const offsetLabel = timeOffsets.find((offset) => metricWithOffset.includes(offset));\n        renamePairs.push([metricWithOffset, offsetLabel]);\n      });\n    }\n    renamePairs.push([getMetricLabel(metrics[0]), null]);\n    return {\n      operation: 'rename',\n      options: {\n        columns: Object.fromEntries(renamePairs),\n        level: 0,\n        inplace: true\n      }\n    };\n  }\n  return undefined;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}