{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useState } from 'react';\nimport { useTheme, t } from '@superset-ui/core';\nimport { COLUMN_NAME_ALIASES } from '@superset-ui/chart-controls';\nimport ColumnConfigItem from './ColumnConfigItem';\nimport { DEFAULT_CONFIG_FORM_LAYOUT } from './constants';\nimport ControlHeader from '../../ControlHeader';\n/**\n * Max number of columns to show by default.\n */import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst MAX_NUM_COLS = 10;\n/**\n * Add per-column config to queried results.\n */\nexport default function ColumnConfigControl({ columnsPropsObject, appliedColumnNames = [], value, onChange, configFormLayout = DEFAULT_CONFIG_FORM_LAYOUT, width, height, ...props }) {\n  const { colnames: _colnames, coltypes: _coltypes } = columnsPropsObject || {};\n  let colnames = [];\n  let coltypes = [];\n  if (appliedColumnNames.length === 0) {\n    colnames = _colnames || [];\n    coltypes = _coltypes || [];\n  } else\n  {\n    const appliedCol = new Set(appliedColumnNames);\n    _colnames == null ? void 0 : _colnames.forEach((col, idx) => {\n      if (appliedCol.has(col)) {\n        colnames.push(col);\n        coltypes.push(_coltypes == null ? void 0 : _coltypes[idx]);\n      }\n    });\n  }\n  const theme = useTheme();\n  const columnConfigs = useMemo(() => {var _colnames2;\n    const configs = {};\n    (_colnames2 = colnames) == null ? void 0 : _colnames2.forEach((col, idx) => {var _coltypes2;\n      configs[col] = {\n        name: COLUMN_NAME_ALIASES[col] || col,\n        type: (_coltypes2 = coltypes) == null ? void 0 : _coltypes2[idx],\n        config: (value == null ? void 0 : value[col]) || {}\n      };\n    });\n    return configs;\n  }, [value, colnames, coltypes]);\n  const [showAllColumns, setShowAllColumns] = useState(false);\n  const getColumnInfo = (col) => columnConfigs[col] || {};\n  const setColumnConfig = (col, config) => {\n    if (onChange) {\n      // Only keep configs for known columns\n      const validConfigs = colnames && value ?\n      Object.fromEntries(Object.entries(value).filter(([key]) => colnames.includes(key))) :\n      { ...value };\n      onChange({\n        ...validConfigs,\n        [col]: config\n      });\n    }\n  };\n  if (!colnames || colnames.length === 0)\n  return null;\n  const needShowMoreButton = colnames.length > MAX_NUM_COLS + 2;\n  const cols = needShowMoreButton && !showAllColumns ?\n  colnames.slice(0, MAX_NUM_COLS) :\n  colnames;\n  return _jsxs(_Fragment, { children: [\n    _jsx(ControlHeader, { ...props }),\n    _jsxs(\"div\", { css: /*#__PURE__*/_css({\n        border: `1px solid ${theme.colors.grayscale.light2}`,\n        borderRadius: theme.gridUnit\n      }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ColumnConfigControl;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FkZWwvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2V4cGxvcmUvY29tcG9uZW50cy9jb250cm9scy9Db2x1bW5Db25maWdDb250cm9sL0NvbHVtbkNvbmZpZ0NvbnRyb2wudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtGVyIsImZpbGUiOiIvaG9tZS9hZGVsL3N1cGVyc2V0L3N1cGVyc2V0LWZyb250ZW5kL3NyYy9leHBsb3JlL2NvbXBvbmVudHMvY29udHJvbHMvQ29sdW1uQ29uZmlnQ29udHJvbC9Db2x1bW5Db25maWdDb250cm9sLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVGhlbWUsIHQgfSBmcm9tICdAc3VwZXJzZXQtdWkvY29yZSc7XG5pbXBvcnQgeyBDT0xVTU5fTkFNRV9BTElBU0VTLCB9IGZyb20gJ0BzdXBlcnNldC11aS9jaGFydC1jb250cm9scyc7XG5pbXBvcnQgQ29sdW1uQ29uZmlnSXRlbSBmcm9tICcuL0NvbHVtbkNvbmZpZ0l0ZW0nO1xuaW1wb3J0IHsgREVGQVVMVF9DT05GSUdfRk9STV9MQVlPVVQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgQ29udHJvbEhlYWRlciBmcm9tICcuLi8uLi9Db250cm9sSGVhZGVyJztcbi8qKlxuICogTWF4IG51bWJlciBvZiBjb2x1bW5zIHRvIHNob3cgYnkgZGVmYXVsdC5cbiAqL1xuY29uc3QgTUFYX05VTV9DT0xTID0gMTA7XG4vKipcbiAqIEFkZCBwZXItY29sdW1uIGNvbmZpZyB0byBxdWVyaWVkIHJlc3VsdHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbHVtbkNvbmZpZ0NvbnRyb2woeyBjb2x1bW5zUHJvcHNPYmplY3QsIGFwcGxpZWRDb2x1bW5OYW1lcyA9IFtdLCB2YWx1ZSwgb25DaGFuZ2UsIGNvbmZpZ0Zvcm1MYXlvdXQgPSBERUZBVUxUX0NPTkZJR19GT1JNX0xBWU9VVCwgd2lkdGgsIGhlaWdodCwgLi4ucHJvcHMgfSkge1xuICAgIGNvbnN0IHsgY29sbmFtZXM6IF9jb2xuYW1lcywgY29sdHlwZXM6IF9jb2x0eXBlcyB9ID0gY29sdW1uc1Byb3BzT2JqZWN0IHx8IHt9O1xuICAgIGxldCBjb2xuYW1lcyA9IFtdO1xuICAgIGxldCBjb2x0eXBlcyA9IFtdO1xuICAgIGlmIChhcHBsaWVkQ29sdW1uTmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbG5hbWVzID0gX2NvbG5hbWVzIHx8IFtdO1xuICAgICAgICBjb2x0eXBlcyA9IF9jb2x0eXBlcyB8fCBbXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGFwcGxpZWRDb2wgPSBuZXcgU2V0KGFwcGxpZWRDb2x1bW5OYW1lcyk7XG4gICAgICAgIF9jb2xuYW1lcz8uZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGlmIChhcHBsaWVkQ29sLmhhcyhjb2wpKSB7XG4gICAgICAgICAgICAgICAgY29sbmFtZXMucHVzaChjb2wpO1xuICAgICAgICAgICAgICAgIGNvbHR5cGVzLnB1c2goX2NvbHR5cGVzPy5baWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgY29sdW1uQ29uZmlncyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBjb25maWdzID0ge307XG4gICAgICAgIGNvbG5hbWVzPy5mb3JFYWNoKChjb2wsIGlkeCkgPT4ge1xuICAgICAgICAgICAgY29uZmlnc1tjb2xdID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IENPTFVNTl9OQU1FX0FMSUFTRVNbY29sXSB8fCBjb2wsXG4gICAgICAgICAgICAgICAgdHlwZTogY29sdHlwZXM/LltpZHhdLFxuICAgICAgICAgICAgICAgIGNvbmZpZzogdmFsdWU/Lltjb2xdIHx8IHt9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb25maWdzO1xuICAgIH0sIFt2YWx1ZSwgY29sbmFtZXMsIGNvbHR5cGVzXSk7XG4gICAgY29uc3QgW3Nob3dBbGxDb2x1bW5zLCBzZXRTaG93QWxsQ29sdW1uc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgZ2V0Q29sdW1uSW5mbyA9IChjb2wpID0+IGNvbHVtbkNvbmZpZ3NbY29sXSB8fCB7fTtcbiAgICBjb25zdCBzZXRDb2x1bW5Db25maWcgPSAoY29sLCBjb25maWcpID0+IHtcbiAgICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGtlZXAgY29uZmlncyBmb3Iga25vd24gY29sdW1uc1xuICAgICAgICAgICAgY29uc3QgdmFsaWRDb25maWdzID0gY29sbmFtZXMgJiYgdmFsdWVcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyh2YWx1ZSkuZmlsdGVyKChba2V5XSkgPT4gY29sbmFtZXMuaW5jbHVkZXMoa2V5KSkpXG4gICAgICAgICAgICAgICAgOiB7IC4uLnZhbHVlIH07XG4gICAgICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgICAgICAgLi4udmFsaWRDb25maWdzLFxuICAgICAgICAgICAgICAgIFtjb2xdOiBjb25maWcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKCFjb2xuYW1lcyB8fCBjb2xuYW1lcy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG5lZWRTaG93TW9yZUJ1dHRvbiA9IGNvbG5hbWVzLmxlbmd0aCA+IE1BWF9OVU1fQ09MUyArIDI7XG4gICAgY29uc3QgY29scyA9IG5lZWRTaG93TW9yZUJ1dHRvbiAmJiAhc2hvd0FsbENvbHVtbnNcbiAgICAgICAgPyBjb2xuYW1lcy5zbGljZSgwLCBNQVhfTlVNX0NPTFMpXG4gICAgICAgIDogY29sbmFtZXM7XG4gICAgcmV0dXJuICg8PlxuICAgICAgPENvbnRyb2xIZWFkZXIgey4uLnByb3BzfS8+XG4gICAgICA8ZGl2IGNzcz17e1xuICAgICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9YCxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuZ3JpZFVuaXQsXG4gICAgICAgIH19PlxuICAgICAgICB7Y29scy5tYXAoY29sID0+ICg8Q29sdW1uQ29uZmlnSXRlbSBrZXk9e2NvbH0gY29sdW1uPXtnZXRDb2x1bW5JbmZvKGNvbCl9IG9uQ2hhbmdlPXtjb25maWcgPT4gc2V0Q29sdW1uQ29uZmlnKGNvbCwgY29uZmlnKX0gY29uZmlnRm9ybUxheW91dD17Y29uZmlnRm9ybUxheW91dH0gd2lkdGg9e3dpZHRofSBoZWlnaHQ9e2hlaWdodH0vPikpfVxuICAgICAgICB7bmVlZFNob3dNb3JlQnV0dG9uICYmICg8ZGl2IHJvbGU9XCJidXR0b25cIiB0YWJJbmRleD17LTF9IGNzcz17e1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHRoZW1lLmdyaWRVbml0ICogMixcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnNpemVzLnhzLFxuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMudGV4dC5sYWJlbCxcbiAgICAgICAgICAgICAgICAnOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5ncmF5c2NhbGUubGlnaHQ0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9fSBvbkNsaWNrPXsoKSA9PiBzZXRTaG93QWxsQ29sdW1ucyghc2hvd0FsbENvbHVtbnMpfT5cbiAgICAgICAgICAgIHtzaG93QWxsQ29sdW1ucyA/ICg8PlxuICAgICAgICAgICAgICAgIHsvKiBUT0RPOiBSZW1vdmUgZmEtaWNvbiAqL31cbiAgICAgICAgICAgICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGljb25zL25vLWZhLWljb25zLXVzYWdlICovfVxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLXVwXCIvPiAmbmJzcDsge3QoJ1Nob3cgbGVzcyBjb2x1bW5zJyl9XG4gICAgICAgICAgICAgIDwvPikgOiAoPD5cbiAgICAgICAgICAgICAgICB7LyogVE9ETzogUmVtb3ZlIGZhLWljb24gKi99XG4gICAgICAgICAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpY29ucy9uby1mYS1pY29ucy11c2FnZSAqL31cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1kb3duXCIvPiAmbmJzcDtcbiAgICAgICAgICAgICAgICB7dCgnU2hvdyBhbGwgY29sdW1ucycpfVxuICAgICAgICAgICAgICA8Lz4pfVxuICAgICAgICAgIDwvZGl2Pil9XG4gICAgICA8L2Rpdj5cbiAgICA8Lz4pO1xufVxuIl19 */\"), children: [\n      cols.map((col) => _jsx(ColumnConfigItem, { column: getColumnInfo(col), onChange: (config) => setColumnConfig(col, config), configFormLayout: configFormLayout, width: width, height: height }, col)),\n      needShowMoreButton && _jsx(\"div\", { role: \"button\", tabIndex: -1, css: /*#__PURE__*/_css({\n          padding: theme.gridUnit * 2,\n          textAlign: 'center',\n          cursor: 'pointer',\n          fontSize: theme.typography.sizes.xs,\n          color: theme.colors.text.label,\n          ':hover': {\n            backgroundColor: theme.colors.grayscale.light4\n          }\n        }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ColumnConfigControl;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FkZWwvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2V4cGxvcmUvY29tcG9uZW50cy9jb250cm9scy9Db2x1bW5Db25maWdDb250cm9sL0NvbHVtbkNvbmZpZ0NvbnRyb2wudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVGaUUiLCJmaWxlIjoiL2hvbWUvYWRlbC9zdXBlcnNldC9zdXBlcnNldC1mcm9udGVuZC9zcmMvZXhwbG9yZS9jb21wb25lbnRzL2NvbnRyb2xzL0NvbHVtbkNvbmZpZ0NvbnRyb2wvQ29sdW1uQ29uZmlnQ29udHJvbC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lLCB0IH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IHsgQ09MVU1OX05BTUVfQUxJQVNFUywgfSBmcm9tICdAc3VwZXJzZXQtdWkvY2hhcnQtY29udHJvbHMnO1xuaW1wb3J0IENvbHVtbkNvbmZpZ0l0ZW0gZnJvbSAnLi9Db2x1bW5Db25maWdJdGVtJztcbmltcG9ydCB7IERFRkFVTFRfQ09ORklHX0ZPUk1fTEFZT1VUIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IENvbnRyb2xIZWFkZXIgZnJvbSAnLi4vLi4vQ29udHJvbEhlYWRlcic7XG4vKipcbiAqIE1heCBudW1iZXIgb2YgY29sdW1ucyB0byBzaG93IGJ5IGRlZmF1bHQuXG4gKi9cbmNvbnN0IE1BWF9OVU1fQ09MUyA9IDEwO1xuLyoqXG4gKiBBZGQgcGVyLWNvbHVtbiBjb25maWcgdG8gcXVlcmllZCByZXN1bHRzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb2x1bW5Db25maWdDb250cm9sKHsgY29sdW1uc1Byb3BzT2JqZWN0LCBhcHBsaWVkQ29sdW1uTmFtZXMgPSBbXSwgdmFsdWUsIG9uQ2hhbmdlLCBjb25maWdGb3JtTGF5b3V0ID0gREVGQVVMVF9DT05GSUdfRk9STV9MQVlPVVQsIHdpZHRoLCBoZWlnaHQsIC4uLnByb3BzIH0pIHtcbiAgICBjb25zdCB7IGNvbG5hbWVzOiBfY29sbmFtZXMsIGNvbHR5cGVzOiBfY29sdHlwZXMgfSA9IGNvbHVtbnNQcm9wc09iamVjdCB8fCB7fTtcbiAgICBsZXQgY29sbmFtZXMgPSBbXTtcbiAgICBsZXQgY29sdHlwZXMgPSBbXTtcbiAgICBpZiAoYXBwbGllZENvbHVtbk5hbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb2xuYW1lcyA9IF9jb2xuYW1lcyB8fCBbXTtcbiAgICAgICAgY29sdHlwZXMgPSBfY29sdHlwZXMgfHwgW107XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBhcHBsaWVkQ29sID0gbmV3IFNldChhcHBsaWVkQ29sdW1uTmFtZXMpO1xuICAgICAgICBfY29sbmFtZXM/LmZvckVhY2goKGNvbCwgaWR4KSA9PiB7XG4gICAgICAgICAgICBpZiAoYXBwbGllZENvbC5oYXMoY29sKSkge1xuICAgICAgICAgICAgICAgIGNvbG5hbWVzLnB1c2goY29sKTtcbiAgICAgICAgICAgICAgICBjb2x0eXBlcy5wdXNoKF9jb2x0eXBlcz8uW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIGNvbnN0IGNvbHVtbkNvbmZpZ3MgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgY29uZmlncyA9IHt9O1xuICAgICAgICBjb2xuYW1lcz8uZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGNvbmZpZ3NbY29sXSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBDT0xVTU5fTkFNRV9BTElBU0VTW2NvbF0gfHwgY29sLFxuICAgICAgICAgICAgICAgIHR5cGU6IGNvbHR5cGVzPy5baWR4XSxcbiAgICAgICAgICAgICAgICBjb25maWc6IHZhbHVlPy5bY29sXSB8fCB7fSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29uZmlncztcbiAgICB9LCBbdmFsdWUsIGNvbG5hbWVzLCBjb2x0eXBlc10pO1xuICAgIGNvbnN0IFtzaG93QWxsQ29sdW1ucywgc2V0U2hvd0FsbENvbHVtbnNdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGdldENvbHVtbkluZm8gPSAoY29sKSA9PiBjb2x1bW5Db25maWdzW2NvbF0gfHwge307XG4gICAgY29uc3Qgc2V0Q29sdW1uQ29uZmlnID0gKGNvbCwgY29uZmlnKSA9PiB7XG4gICAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICAgICAgLy8gT25seSBrZWVwIGNvbmZpZ3MgZm9yIGtub3duIGNvbHVtbnNcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkQ29uZmlncyA9IGNvbG5hbWVzICYmIHZhbHVlXG4gICAgICAgICAgICAgICAgPyBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXModmFsdWUpLmZpbHRlcigoW2tleV0pID0+IGNvbG5hbWVzLmluY2x1ZGVzKGtleSkpKVxuICAgICAgICAgICAgICAgIDogeyAuLi52YWx1ZSB9O1xuICAgICAgICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIC4uLnZhbGlkQ29uZmlncyxcbiAgICAgICAgICAgICAgICBbY29sXTogY29uZmlnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmICghY29sbmFtZXMgfHwgY29sbmFtZXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBuZWVkU2hvd01vcmVCdXR0b24gPSBjb2xuYW1lcy5sZW5ndGggPiBNQVhfTlVNX0NPTFMgKyAyO1xuICAgIGNvbnN0IGNvbHMgPSBuZWVkU2hvd01vcmVCdXR0b24gJiYgIXNob3dBbGxDb2x1bW5zXG4gICAgICAgID8gY29sbmFtZXMuc2xpY2UoMCwgTUFYX05VTV9DT0xTKVxuICAgICAgICA6IGNvbG5hbWVzO1xuICAgIHJldHVybiAoPD5cbiAgICAgIDxDb250cm9sSGVhZGVyIHsuLi5wcm9wc30vPlxuICAgICAgPGRpdiBjc3M9e3tcbiAgICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke3RoZW1lLmNvbG9ycy5ncmF5c2NhbGUubGlnaHQyfWAsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLmdyaWRVbml0LFxuICAgICAgICB9fT5cbiAgICAgICAge2NvbHMubWFwKGNvbCA9PiAoPENvbHVtbkNvbmZpZ0l0ZW0ga2V5PXtjb2x9IGNvbHVtbj17Z2V0Q29sdW1uSW5mbyhjb2wpfSBvbkNoYW5nZT17Y29uZmlnID0+IHNldENvbHVtbkNvbmZpZyhjb2wsIGNvbmZpZyl9IGNvbmZpZ0Zvcm1MYXlvdXQ9e2NvbmZpZ0Zvcm1MYXlvdXR9IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9Lz4pKX1cbiAgICAgICAge25lZWRTaG93TW9yZUJ1dHRvbiAmJiAoPGRpdiByb2xlPVwiYnV0dG9uXCIgdGFiSW5kZXg9ey0xfSBjc3M9e3tcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB0aGVtZS5ncmlkVW5pdCAqIDIsXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5zaXplcy54cyxcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWUuY29sb3JzLnRleHQubGFiZWwsXG4gICAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMuZ3JheXNjYWxlLmxpZ2h0NCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX0gb25DbGljaz17KCkgPT4gc2V0U2hvd0FsbENvbHVtbnMoIXNob3dBbGxDb2x1bW5zKX0+XG4gICAgICAgICAgICB7c2hvd0FsbENvbHVtbnMgPyAoPD5cbiAgICAgICAgICAgICAgICB7LyogVE9ETzogUmVtb3ZlIGZhLWljb24gKi99XG4gICAgICAgICAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpY29ucy9uby1mYS1pY29ucy11c2FnZSAqL31cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS11cFwiLz4gJm5ic3A7IHt0KCdTaG93IGxlc3MgY29sdW1ucycpfVxuICAgICAgICAgICAgICA8Lz4pIDogKDw+XG4gICAgICAgICAgICAgICAgey8qIFRPRE86IFJlbW92ZSBmYS1pY29uICovfVxuICAgICAgICAgICAgICAgIHsvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaWNvbnMvbm8tZmEtaWNvbnMtdXNhZ2UgKi99XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtZG93blwiLz4gJm5ic3A7XG4gICAgICAgICAgICAgICAge3QoJ1Nob3cgYWxsIGNvbHVtbnMnKX1cbiAgICAgICAgICAgICAgPC8+KX1cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgPC9kaXY+XG4gICAgPC8+KTtcbn1cbiJdfQ== */\"), onClick: () => setShowAllColumns(!showAllColumns), children:\n        showAllColumns ? _jsxs(_Fragment, { children: [\n\n\n          _jsx(\"i\", { className: \"fa fa-angle-up\" }), \" \\xA0 \", t('Show less columns')] }\n        ) : _jsxs(_Fragment, { children: [\n\n\n          _jsx(\"i\", { className: \"fa fa-angle-down\" }), \" \\xA0\",\n          t('Show all columns')] }\n        ) }\n      )] }\n    )] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}