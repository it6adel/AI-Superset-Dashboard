{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState, useRef } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { toQueryString } from 'src/utils/urlUtils';\nimport DatasetPanel from './DatasetPanel';\nimport { isIDatabaseTable } from './types';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst DatasetPanelWrapper = ({ tableName, dbId, catalog, schema, setHasColumns, datasets }) => {\n  const [columnList, setColumnList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const tableNameRef = useRef(tableName);\n  const getTableMetadata = async (props) => {\n    const { dbId, tableName, schema } = props;\n    setLoading(true);\n    setHasColumns == null ? void 0 : setHasColumns(false);\n    const path = `/api/v1/database/${dbId}/table_metadata/${toQueryString({\n      name: tableName,\n      catalog,\n      schema\n    })}`;\n    try {\n      const response = await SupersetClient.get({\n        endpoint: path\n      });\n      if (isIDatabaseTable(response == null ? void 0 : response.json)) {\n        const table = response.json;\n        /**\n         *  The user is able to click other table columns while the http call for last selected table column is made\n         *  This check ensures we process the response that matches the last selected table name and ignore the others\n         */\n        if (table.name === tableNameRef.current) {\n          setColumnList(table.columns);\n          setHasColumns == null ? void 0 : setHasColumns(table.columns.length > 0);\n          setHasError(false);\n        }\n      } else\n      {\n        setColumnList([]);\n        setHasColumns == null ? void 0 : setHasColumns(false);\n        setHasError(true);\n        addDangerToast(t('The API response from %s does not match the IDatabaseTable interface.', path));\n        logging.error(t('The API response from %s does not match the IDatabaseTable interface.', path));\n      }\n    }\n    catch (error) {\n      setColumnList([]);\n      setHasColumns == null ? void 0 : setHasColumns(false);\n      setHasError(true);\n    } finally\n    {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    tableNameRef.current = tableName;\n    if (tableName && schema && dbId) {\n      getTableMetadata({ tableName, dbId, schema });\n    }\n    // getTableMetadata is a const and should not be in dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableName, dbId, schema]);\n  return _jsx(DatasetPanel, { columnList: columnList, hasError: hasError, loading: loading, tableName: tableName, datasets: datasets });\n};\nexport default DatasetPanelWrapper;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}