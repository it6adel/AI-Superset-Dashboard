{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { createApi } from '@reduxjs/toolkit/query/react';\nimport { getClientErrorObject, SupersetClient } from '@superset-ui/core';\nexport const supersetClientQuery = ({ endpoint, urlParams, transformResponse, method = 'GET', parseMethod = 'json', ...rest }, api) => SupersetClient.request({\n  ...rest,\n  endpoint: `${endpoint}${urlParams ? `?q=${rison.encode(urlParams)}` : ''}`,\n  method,\n  parseMethod,\n  signal: api.signal\n}).\nthen((data) => {var _transformResponse;return {\n    data: (_transformResponse = transformResponse == null ? void 0 : transformResponse(data)) != null ? _transformResponse : data\n  };}).\ncatch((response) => getClientErrorObject(response).then((errorObj) => ({\n  error: {\n    error: (errorObj == null ? void 0 : errorObj.message) || (errorObj == null ? void 0 : errorObj.error) || response.statusText,\n    errors: (errorObj == null ? void 0 : errorObj.errors) || [],\n    status: response.status\n  }\n})));\nexport const api = createApi({\n  reducerPath: 'queryApi',\n  tagTypes: [\n  'Catalogs',\n  'Schemas',\n  'Tables',\n  'DatabaseFunctions',\n  'QueryValidations',\n  'TableMetadatas',\n  'SqlLabInitialState',\n  'EditorQueries'],\n\n  endpoints: () => ({}),\n  baseQuery: supersetClientQuery\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}