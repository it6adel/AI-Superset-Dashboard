{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useMemo } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { useChartLayoutItems } from 'src/dashboard/util/useChartLayoutItems';\nimport { useChartIds } from 'src/dashboard/util/charts/useChartIds';\nimport { useSelector } from 'react-redux';\nimport FilterControls from './FilterControls/FilterControls';\nimport { useChartsVerboseMaps, getFilterBarTestId } from './utils';\nimport FilterBarSettings from './FilterBarSettings';\nimport crossFiltersSelector from './CrossFilters/selectors';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst HorizontalBar = styled.div`\n  ${({ theme }) => `\n    padding: ${theme.gridUnit * 3}px ${theme.gridUnit * 2}px ${theme.gridUnit * 3}px ${theme.gridUnit * 4}px;\n    background: ${theme.colors.grayscale.light5};\n    box-shadow: inset 0px -2px 2px -1px ${theme.colors.grayscale.light2};\n  `}\n`;\nconst HorizontalBarContent = styled.div`\n  ${({ theme }) => `\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: center;\n    justify-content: flex-start;\n    line-height: 0;\n\n    .loading {\n      margin: ${theme.gridUnit * 2}px auto ${theme.gridUnit * 2}px;\n      padding: 0;\n    }\n  `}\n`;\nconst FilterBarEmptyStateContainer = styled.div`\n  ${({ theme }) => `\n    font-weight: ${theme.typography.weights.bold};\n    color: ${theme.colors.grayscale.base};\n    font-size: ${theme.typography.sizes.s}px;\n    padding-left: ${theme.gridUnit * 2}px;\n  `}\n`;\nconst HorizontalFilterBar = ({ actions, dataMaskSelected, filterValues, isInitialized, onSelectionChange }) => {\n  const dataMask = useSelector((state) => state.dataMask);\n  const chartIds = useChartIds();\n  const chartLayoutItems = useChartLayoutItems();\n  const verboseMaps = useChartsVerboseMaps();\n  const selectedCrossFilters = useMemo(() => crossFiltersSelector({\n    dataMask,\n    chartIds,\n    chartLayoutItems,\n    verboseMaps\n  }), [chartIds, chartLayoutItems, dataMask, verboseMaps]);\n  const hasFilters = filterValues.length > 0 || selectedCrossFilters.length > 0;\n  return _jsx(HorizontalBar, { ...getFilterBarTestId(), children:\n    _jsx(HorizontalBarContent, { children:\n      !isInitialized ? _jsx(Loading, { position: \"inline-centered\" }) : _jsxs(_Fragment, { children: [\n        _jsx(FilterBarSettings, {}),\n        !hasFilters && _jsx(FilterBarEmptyStateContainer, { children:\n          t('No filters are currently added to this dashboard.') }\n        ),\n        hasFilters && _jsx(FilterControls, { dataMaskSelected: dataMaskSelected, onFilterSelectionChange: onSelectionChange }),\n        actions] }\n      ) }\n    ) }\n  );\n};\nexport default /*#__PURE__*/memo(HorizontalFilterBar);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}