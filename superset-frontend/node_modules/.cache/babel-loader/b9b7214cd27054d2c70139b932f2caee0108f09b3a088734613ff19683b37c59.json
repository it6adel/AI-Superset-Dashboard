{"ast":null,"code":"/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { ScreenGridLayer } from '@deck.gl/aggregation-layers';\nimport { t } from '@superset-ui/core';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\n// eslint-disable-next-line import/extensions\nimport fitViewport from '../../utils/fitViewport';\nimport { DeckGLContainerStyledWrapper } from '../../DeckGLContainer';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction getPoints(data) {\n  return data.map((d) => d.position);\n}\nfunction setTooltipContent(o) {var _o$coordinate, _o$coordinate2, _o$object;\n  return _jsxs(\"div\", { className: \"deckgl-tooltip\", children: [\n    _jsx(TooltipRow\n    // eslint-disable-next-line prefer-template\n    , { label: t('Longitude and Latitude') + ': ', value: `${o == null ? void 0 : (_o$coordinate = o.coordinate) == null ? void 0 : _o$coordinate[0]}, ${o == null ? void 0 : (_o$coordinate2 = o.coordinate) == null ? void 0 : _o$coordinate2[1]}` }),\n    _jsx(TooltipRow\n    // eslint-disable-next-line prefer-template\n    , { label: t('Weight') + ': ', value: `${(_o$object = o.object) == null ? void 0 : _o$object.cellWeight}` })] }\n  );\n}\nexport function getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const c = fd.color_picker;\n  let data = payload.data.features.map((d) => ({\n    ...d,\n    color: [c.r, c.g, c.b, 255 * c.a]\n  }));\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n  // Passing a layer creator function instead of a layer since the\n  // layer needs to be regenerated at each render\n  return new ScreenGridLayer({\n    id: `screengrid-layer-${fd.slice_id}`,\n    data,\n    cellSizePixels: fd.grid_size,\n    minColor: [c.r, c.g, c.b, 0],\n    maxColor: [c.r, c.g, c.b, 255 * c.a],\n    outline: false,\n    getWeight: (d) => d.weight || 0,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent)\n  });\n}\nconst DeckGLScreenGrid = (props) => {\n  const containerRef = useRef();\n  const getAdjustedViewport = useCallback(() => {\n    const features = props.payload.data.features || [];\n    const { width, height, formData } = props;\n    if (formData.autozoom) {\n      return fitViewport(props.viewport, {\n        width,\n        height,\n        points: getPoints(features)\n      });\n    }\n    return props.viewport;\n  }, [props]);\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n  useEffect(() => {\n    if (props.payload.form_data !== stateFormData) {\n      setViewport(getAdjustedViewport());\n      setStateFormData(props.payload.form_data);\n    }\n  }, [getAdjustedViewport, props.payload.form_data, stateFormData]);\n  const setTooltip = useCallback((tooltip) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n  const getLayers = useCallback(() => {\n    const layer = getLayer(props.formData, props.payload, () => {}, setTooltip);\n    return [layer];\n  }, [props.formData, props.payload, setTooltip]);\n  const { formData, payload, setControlValue } = props;\n  return _jsx(\"div\", { children:\n    _jsx(DeckGLContainerStyledWrapper, { ref: containerRef, viewport: viewport, layers: getLayers(), setControlValue: setControlValue, mapStyle: formData.mapbox_style, mapboxApiAccessToken: payload.data.mapboxApiKey, width: props.width, height: props.height }) }\n  );\n};\nexport default /*#__PURE__*/memo(DeckGLScreenGrid);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}