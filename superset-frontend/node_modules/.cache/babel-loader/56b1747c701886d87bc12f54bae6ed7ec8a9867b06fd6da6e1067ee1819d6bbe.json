{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Modal from 'src/components/Modal';\nimport Icons from 'src/components/Icons';\nimport Alert from 'src/components/Alert';\nimport { t, useTheme } from '@superset-ui/core';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst ErrorAlert = ({ errorType = t('Error'), message, type = 'error', description, descriptionDetails, descriptionDetailsCollapsed = true, descriptionPre = true, compact = false, children, closable = true, showIcon = true, className }) => {\n  const [isDescriptionVisible, setIsDescriptionVisible] = useState(!descriptionDetailsCollapsed);\n  const [showModal, setShowModal] = useState(false);\n  const toggleDescription = () => {\n    setIsDescriptionVisible(!isDescriptionVisible);\n  };\n  const theme = useTheme();\n  const renderTrigger = () => {\n    const icon = type === 'warning' ? _jsx(Icons.WarningOutlined, {}) : _jsx(Icons.ExclamationCircleOutlined, {});\n    const color = type === 'warning' ? theme.colors.warning.base : theme.colors.error.base;\n    return _jsxs(\"div\", { className: className, style: { cursor: 'pointer' }, children: [\n      _jsxs(\"span\", { style: { color }, children: [icon, \" \"] }),\n      errorType] }\n    );\n  };\n  const preStyle = {\n    whiteSpace: 'pre-wrap',\n    fontFamily: theme.typography.families.sansSerif\n  };\n  const renderDescription = () => _jsxs(\"div\", { children: [\n    description && _jsx(\"p\", { style: descriptionPre ? preStyle : {}, \"data-testid\": \"description\", children:\n      description }\n    ),\n    descriptionDetails && _jsxs(\"div\", { children: [\n      isDescriptionVisible && _jsx(\"p\", { style: descriptionPre ? preStyle : {}, children: descriptionDetails }),\n      _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: toggleDescription, style: { textDecoration: 'underline', cursor: 'pointer' }, children:\n        isDescriptionVisible ? t('See less') : t('See more') }\n      )] }\n    )] }\n  );\n  const renderAlert = (closable) => _jsxs(Alert, { description: renderDescription(), type: type, showIcon: true, closable: closable, className: className, children: [\n    _jsx(\"strong\", { children: errorType }),\n    message && _jsxs(_Fragment, { children: [\": \",\n      _jsx(\"span\", { children: message })] }\n    )] }\n  );\n  if (compact) {\n    return _jsxs(_Fragment, { children: [\n      _jsx(Tooltip, { title: `${errorType}: ${message}`, children:\n        _jsx(\"span\", { role: \"button\", onClick: () => setShowModal(true), tabIndex: 0, children:\n          renderTrigger() }\n        ) }\n      ),\n      _jsxs(Modal, { title: errorType, show: showModal, onHide: () => setShowModal(false), footer: null, children: [\n        renderAlert(false),\n        children] }\n      )] }\n    );\n  }\n  return renderAlert(closable);\n};\nexport default ErrorAlert;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}