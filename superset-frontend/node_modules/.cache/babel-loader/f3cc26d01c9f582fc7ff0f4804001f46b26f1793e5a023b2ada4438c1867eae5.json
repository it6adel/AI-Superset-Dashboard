{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/sort-prop-types */\nimport PropTypes from 'prop-types';\nimport { ANNOTATION_TYPES } from './vendor/superset/AnnotationTypes';\n\nexport const numberOrAutoType = PropTypes.oneOfType([\nPropTypes.number,\nPropTypes.oneOf(['auto'])]\n);\n\nexport const stringOrObjectWithLabelType = PropTypes.oneOfType([\nPropTypes.string,\nPropTypes.shape({\n  label: PropTypes.string\n})]\n);\n\nexport const rgbObjectType = PropTypes.shape({\n  r: PropTypes.number.isRequired,\n  g: PropTypes.number.isRequired,\n  b: PropTypes.number.isRequired\n});\n\nexport const numericXYType = PropTypes.shape({\n  x: PropTypes.number,\n  y: PropTypes.number\n});\n\nexport const categoryAndValueXYType = PropTypes.shape({\n  x: PropTypes.string,\n  y: PropTypes.number\n});\n\nexport const boxPlotValueType = PropTypes.shape({\n  outliers: PropTypes.arrayOf(PropTypes.number),\n  Q1: PropTypes.number,\n  Q2: PropTypes.number,\n  Q3: PropTypes.number,\n  whisker_high: PropTypes.number,\n  whisker_low: PropTypes.number\n});\n\nexport const bulletDataType = PropTypes.shape({\n  markerLabels: PropTypes.arrayOf(PropTypes.string),\n  markerLineLabels: PropTypes.arrayOf(PropTypes.string),\n  markerLines: PropTypes.arrayOf(PropTypes.number),\n  markers: PropTypes.arrayOf(PropTypes.number),\n  measures: PropTypes.arrayOf(PropTypes.number),\n  rangeLabels: PropTypes.arrayOf(PropTypes.string),\n  ranges: PropTypes.arrayOf(PropTypes.number)\n});\n\nexport const annotationLayerType = PropTypes.shape({\n  annotationType: PropTypes.oneOf(Object.keys(ANNOTATION_TYPES)),\n  color: PropTypes.string,\n  hideLine: PropTypes.bool,\n  name: PropTypes.string,\n  opacity: PropTypes.string,\n  show: PropTypes.bool,\n  showMarkers: PropTypes.bool,\n  sourceType: PropTypes.string,\n  style: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  width: PropTypes.number\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}