{"ast":null,"code":"import _omit from \"lodash/omit\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\n\nimport { EmptyState } from 'src/components/EmptyState';\nimport { t, styled, css, FeatureFlag, isFeatureEnabled } from '@superset-ui/core';\nimport QueryTable from 'src/SqlLab/components/QueryTable';\nimport { useEditorQueriesQuery } from 'src/hooks/apiResources/queries';\nimport { Skeleton } from 'src/components';\nimport useEffectEvent from 'src/hooks/useEffectEvent';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledEmptyStateWrapper = styled.div`\n  height: 100%;\n  .antd5-empty-image img {\n    margin-right: 28px;\n  }\n\n  p {\n    margin-right: 28px;\n  }\n`;\nconst getEditorQueries = (queries, queryEditorId) => Object.values(queries).filter(({ sqlEditorId }) => String(sqlEditorId) === String(queryEditorId));\nconst QueryHistory = ({ queryEditorId, displayLimit, latestQueryId }) => {\n  const [ref, hasReachedBottom] = useInView({ threshold: 0 });\n  const [pageIndex, setPageIndex] = useState(0);\n  const queries = useSelector(({ sqlLab: { queries } }) => queries, shallowEqual);\n  const { currentData: data, isLoading, isFetching } = useEditorQueriesQuery({ editorId: `${queryEditorId}`, pageIndex }, {\n    skip: !isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n  });\n  const editorQueries = useMemo(() => data ?\n  getEditorQueries(_omit(queries, data.result.map(({ id }) => id)), queryEditorId).\n  concat(data.result).\n  reverse() :\n  getEditorQueries(queries, queryEditorId), [queries, data, queryEditorId]);\n  const loadNext = useEffectEvent(() => {\n    setPageIndex(pageIndex + 1);\n  });\n  const loadedDataCount = (data == null ? void 0 : data.result.length) || 0;\n  const totalCount = (data == null ? void 0 : data.count) || 0;\n  useEffect(() => {\n    if (hasReachedBottom && loadedDataCount < totalCount) {\n      loadNext();\n    }\n  }, [hasReachedBottom, loadNext, loadedDataCount, totalCount]);\n  if (!editorQueries.length && isLoading) {\n    return _jsx(Skeleton, { active: true });\n  }\n  return editorQueries.length > 0 ? _jsxs(_Fragment, { children: [\n    _jsx(QueryTable, { columns: [\n      'state',\n      'started',\n      'duration',\n      'progress',\n      'rows',\n      'sql',\n      'results',\n      'actions'],\n      queries: editorQueries, displayLimit: displayLimit, latestQueryId: latestQueryId }),\n    data && loadedDataCount < totalCount && _jsx(\"div\", { ref: ref, css: css`\n            position: relative;\n            top: -150px;\n          ` }),\n    isFetching && _jsx(Skeleton, { active: true })] }\n  ) : _jsx(StyledEmptyStateWrapper, { children:\n    _jsx(EmptyState, { title: t('Run a query to display query history'), size: \"medium\", image: \"document.svg\" }) }\n  );\n};\nexport default QueryHistory;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}