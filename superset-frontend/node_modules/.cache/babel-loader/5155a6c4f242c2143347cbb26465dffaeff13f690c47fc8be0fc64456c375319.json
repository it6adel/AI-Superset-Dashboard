{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Menu } from 'src/components/Menu';\nimport { Behavior, FAST_DEBOUNCE, css, ensureIsArray, getChartMetadataRegistry, getExtensionsRegistry, logging, t, useTheme } from '@superset-ui/core';\nimport rison from 'rison';\n\nimport { FixedSizeList as List } from 'react-window';\nimport Icons from 'src/components/Icons';\nimport { Input } from 'src/components/Input';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport { cachedSupersetGet, supersetGetCache } from 'src/utils/cachedSupersetGet';\nimport { MenuItemTooltip } from '../DisabledMenuItemTooltip';\nimport { getSubmenuYOffset } from '../utils';\nimport { MenuItemWithTruncation } from '../MenuItemWithTruncation';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst SUBMENU_HEIGHT = 200;\nconst SHOW_COLUMNS_SEARCH_THRESHOLD = 10;\nconst SEARCH_INPUT_HEIGHT = 48;\nconst loadDrillByOptions = getExtensionsRegistry().get('load.drillby.options');\nconst queryString = rison.encode({\n  columns: [\n  'table_name',\n  'owners.first_name',\n  'owners.last_name',\n  'created_by.first_name',\n  'created_by.last_name',\n  'created_on_humanized',\n  'changed_by.first_name',\n  'changed_by.last_name',\n  'changed_on_humanized',\n  'columns.column_name',\n  'columns.verbose_name',\n  'columns.groupby']\n\n});\nexport const DrillByMenuItems = ({ drillByConfig, formData, contextMenuY = 0, submenuIndex = 0, onSelection = () => {}, onClick = () => {}, excludedColumns, openNewModal = true, open, onDrillBy, ...rest }) => {\n  const theme = useTheme();\n  const { addDangerToast } = useToasts();\n  const [isLoadingColumns, setIsLoadingColumns] = useState(true);\n  const [searchInput, setSearchInput] = useState('');\n  const [debouncedSearchInput, setDebouncedSearchInput] = useState('');\n  const [dataset, setDataset] = useState();\n  const [columns, setColumns] = useState([]);\n  const ref = useRef(null);\n  const showSearch = loadDrillByOptions || columns.length > SHOW_COLUMNS_SEARCH_THRESHOLD;\n  const handleSelection = useCallback((event, column) => {\n    onClick(event);\n    onSelection(column, drillByConfig);\n    if (openNewModal && onDrillBy && dataset) {\n      onDrillBy(column, dataset);\n    }\n  }, [drillByConfig, onClick, onSelection, openNewModal, onDrillBy, dataset]);\n  useEffect(() => {\n    if (open) {var _ref$current, _ref$current$input;\n      (_ref$current = ref.current) == null ? void 0 : (_ref$current$input = _ref$current.input) == null ? void 0 : _ref$current$input.focus({ preventScroll: true });\n    } else\n    {\n      // Reset search input when menu is closed\n      setSearchInput('');\n      setDebouncedSearchInput('');\n    }\n  }, [open]);\n  const hasDrillBy = drillByConfig == null ? void 0 : drillByConfig.groupbyFieldName;\n  const handlesDimensionContextMenu = useMemo(() => {var _getChartMetadataRegi;return (_getChartMetadataRegi = getChartMetadataRegistry().\n    get(formData.viz_type)) == null ? void 0 : _getChartMetadataRegi.\n    behaviors.find((behavior) => behavior === Behavior.DrillBy);}, [formData.viz_type]);\n  useEffect(() => {\n    async function loadOptions() {\n      const datasetId = Number(formData.datasource.split('__')[0]);\n      try {\n        setIsLoadingColumns(true);\n        let response;\n        if (loadDrillByOptions) {\n          response = await loadDrillByOptions(datasetId, formData);\n        } else\n        {\n          response = await cachedSupersetGet({\n            endpoint: `/api/v1/dataset/${datasetId}?q=${queryString}`\n          });\n        }\n        const { json } = response;\n        const { result } = json;\n        setDataset(result);\n        setColumns(ensureIsArray(result.columns).\n        filter((column) => column.groupby).\n        filter((column) => {var _drillByConfig$groupb, _ensureIsArray;return !ensureIsArray(formData[(_drillByConfig$groupb = drillByConfig == null ? void 0 : drillByConfig.groupbyFieldName) != null ? _drillByConfig$groupb : '']).includes(column.column_name) &&\n          column.column_name !== formData.x_axis && ((_ensureIsArray =\n          ensureIsArray(excludedColumns)) == null ? void 0 : _ensureIsArray.every((excludedCol) => excludedCol.column_name !== column.column_name));}));\n      }\n      catch (error) {\n        logging.error(error);\n        supersetGetCache.delete(`/api/v1/dataset/${datasetId}`);\n        addDangerToast(t('Failed to load dimensions for drill by'));\n      } finally\n      {\n        setIsLoadingColumns(false);\n      }\n    }\n    if (handlesDimensionContextMenu && hasDrillBy) {\n      loadOptions();\n    }\n  }, [\n  addDangerToast,\n  drillByConfig == null ? void 0 : drillByConfig.groupbyFieldName,\n  excludedColumns,\n  formData,\n  handlesDimensionContextMenu,\n  hasDrillBy]\n  );\n  const debouncedSetSearchInput = useMemo(() => _debounce((value) => {\n    setDebouncedSearchInput(value);\n  }, FAST_DEBOUNCE), []);\n  const handleInput = (value) => {\n    setSearchInput(value);\n    debouncedSetSearchInput(value);\n  };\n  const filteredColumns = useMemo(() => columns.filter((column) => (column.verbose_name || column.column_name).\n  toLowerCase().\n  includes(debouncedSearchInput.toLowerCase())), [columns, debouncedSearchInput]);\n  const submenuYOffset = useMemo(() => getSubmenuYOffset(contextMenuY, filteredColumns.length || 1, submenuIndex, SUBMENU_HEIGHT, showSearch ? SEARCH_INPUT_HEIGHT : 0), [contextMenuY, filteredColumns.length, submenuIndex, showSearch]);\n  let tooltip;\n  if (!handlesDimensionContextMenu) {\n    tooltip = t('Drill by is not yet supported for this chart type');\n  } else\n  if (!hasDrillBy) {\n    tooltip = t('Drill by is not available for this data point');\n  }\n  if (!handlesDimensionContextMenu || !hasDrillBy) {\n    return _jsx(Menu.Item, { disabled: true, ...rest, children:\n      _jsxs(\"div\", { children: [\n        t('Drill by'),\n        _jsx(MenuItemTooltip, { title: tooltip })] }\n      ) }, \"drill-by-disabled\"\n    );\n  }\n  const Row = ({ index, data, style }) => {\n    const { columns, ...rest } = data;\n    const column = columns[index];\n    return _jsx(MenuItemWithTruncation, { menuKey: `drill-by-item-${column.column_name}`, tooltipText: column.verbose_name || column.column_name, onClick: (e) => handleSelection(e, column), style: style, ...rest, children:\n      column.verbose_name || column.column_name }\n    );\n  };\n  return _jsx(_Fragment, { children:\n    _jsx(Menu.SubMenu, { title: t('Drill by'), popupClassName: \"chart-context-submenu\", popupOffset: [0, submenuYOffset], ...rest, children:\n      _jsxs(\"div\", { children: [\n        showSearch && _jsx(Input, { ref: ref, prefix: _jsx(Icons.SearchOutlined, { iconSize: \"l\", iconColor: theme.colors.grayscale.light1 }), onChange: (e) => {\n            e.stopPropagation();\n            handleInput(e.target.value);\n          }, placeholder: t('Search columns'), onClick: (e) => {\n            // prevent closing menu when clicking on input\n            e.nativeEvent.stopImmediatePropagation();\n          }, allowClear: true, css: css`\n                width: auto;\n                max-width: 100%;\n                margin: ${theme.gridUnit * 2}px ${theme.gridUnit * 3}px;\n                box-shadow: none;\n              `, value: searchInput }),\n        isLoadingColumns ? _jsx(\"div\", { css: css`\n                padding: ${theme.gridUnit * 3}px 0;\n              `, children:\n          _jsx(Loading, { position: \"inline-centered\" }) }\n        ) : filteredColumns.length ? _jsx(List, { width: \"100%\", height: SUBMENU_HEIGHT, itemSize: 35, itemCount: filteredColumns.length, itemData: { columns: filteredColumns, ...rest }, overscanCount: 20, children:\n          Row }\n        ) : _jsx(Menu.Item, { disabled: true, ...rest, children:\n          t('No columns found') }, \"no-drill-by-columns-found\"\n        )] }\n      ) }, \"drill-by-submenu\"\n    ) }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}