{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getStandardizedControls } from '@superset-ui/chart-controls';\nimport { t } from '@superset-ui/core';\nimport timeGrainSqlaAnimationOverrides from '../../utilities/controls';\nimport { formatSelectOptions } from '../../utilities/utils';\nimport { filterNulls, autozoom, jsColumns, jsDataMutator, jsTooltip, jsOnclickHref, legendFormat, legendPosition, fillColorPicker, strokeColorPicker, filled, stroked, extruded, viewport, pointRadiusFixed, multiplier, lineWidth, lineType, reverseLongLat, mapboxStyle } from '../../utilities/Shared_DeckGL';\nimport { dndLineColumn } from '../../utilities/sharedDndControls';\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      ...dndLineColumn,\n      config: {\n        ...dndLineColumn.config,\n        label: t('Polygon Column')\n      }\n    }],\n\n    [\n    {\n      ...lineType,\n      config: {\n        ...lineType.config,\n        label: t('Polygon Encoding')\n      }\n    }],\n\n    ['adhoc_filters'],\n    ['metric'],\n    [\n    {\n      ...pointRadiusFixed,\n      config: {\n        ...pointRadiusFixed.config,\n        label: t('Elevation')\n      }\n    }],\n\n    ['row_limit'],\n    [reverseLongLat],\n    [filterNulls]]\n\n  },\n  {\n    label: t('Map'),\n    expanded: true,\n    controlSetRows: [[mapboxStyle], [viewport], [autozoom]]\n  },\n  {\n    label: t('Polygon Settings'),\n    expanded: true,\n    controlSetRows: [\n    [fillColorPicker, strokeColorPicker],\n    [filled, stroked],\n    [extruded],\n    [multiplier],\n    [lineWidth],\n    [\n    {\n      name: 'line_width_unit',\n      config: {\n        type: 'SelectControl',\n        label: t('Line width unit'),\n        default: 'pixels',\n        choices: [\n        ['meters', t('meters')],\n        ['pixels', t('pixels')]],\n\n        renderTrigger: true\n      }\n    }],\n\n    ['linear_color_scheme'],\n    [\n    {\n      name: 'opacity',\n      config: {\n        type: 'SliderControl',\n        label: t('Opacity'),\n        default: 80,\n        step: 1,\n        min: 0,\n        max: 100,\n        renderTrigger: true,\n        description: t('Opacity, expects values between 0 and 100')\n      }\n    }],\n\n    [\n    {\n      name: 'num_buckets',\n      config: {\n        type: 'SelectControl',\n        multi: false,\n        freeForm: true,\n        label: t('Number of buckets to group data'),\n        default: 5,\n        choices: formatSelectOptions([2, 3, 5, 10]),\n        description: t('How many buckets should the data be grouped in.'),\n        renderTrigger: true\n      }\n    }],\n\n    [\n    {\n      name: 'break_points',\n      config: {\n        type: 'SelectControl',\n        multi: true,\n        freeForm: true,\n        label: t('Bucket break points'),\n        choices: formatSelectOptions([]),\n        description: t('List of n+1 values for bucketing metric into n buckets.'),\n        renderTrigger: true\n      }\n    }],\n\n    [\n    {\n      name: 'table_filter',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Emit Filter Events'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to apply filter when items are clicked')\n      }\n    }],\n\n    [\n    {\n      name: 'toggle_polygons',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Multiple filtering'),\n        renderTrigger: true,\n        default: true,\n        description: t('Allow sending multiple polygons as a filter event')\n      }\n    }],\n\n    [legendPosition],\n    [legendFormat]]\n\n  },\n  {\n    label: t('Advanced'),\n    controlSetRows: [\n    [jsColumns],\n    [jsDataMutator],\n    [jsTooltip],\n    [jsOnclickHref]]\n\n  }],\n\n  controlOverrides: {\n    metric: {\n      validators: []\n    },\n    time_grain_sqla: timeGrainSqlaAnimationOverrides\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}