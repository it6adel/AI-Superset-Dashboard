{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css, styled, t } from '@superset-ui/core';\nimport dayjs from 'dayjs';\nimport { useEffect, useMemo } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport ListView from 'src/components/ListView';\nimport { Tooltip } from 'src/components/Tooltip';\nimport SubMenu from 'src/features/home/SubMenu';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { fDuration } from 'src/utils/dates';\nimport AlertStatusIcon from 'src/features/alerts/components/AlertStatusIcon';\nimport { useListViewResource, useSingleViewResource } from 'src/views/CRUD/hooks';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nconst StyledHeader = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n\n    a,\n    Link {\n      margin-left: ${theme.gridUnit * 4}px;\n      font-size: ${theme.typography.sizes.s};\n      font-weight: ${theme.typography.weights.normal};\n      text-decoration: underline;\n    }\n  `}\n`;\nfunction ExecutionLog({ addDangerToast, addSuccessToast, isReportEnabled }) {\n  const { alertId } = useParams();\n  const { state: { loading, resourceCount: logCount, resourceCollection: logs }, fetchData } = useListViewResource(`report/${alertId}/log`, t('log'), addDangerToast, false);\n  const { state: { loading: alertLoading, resource: alertResource }, fetchResource } = useSingleViewResource('report', t('reports'), addDangerToast);\n  useEffect(() => {\n    if (alertId !== null && !alertLoading) {\n      fetchResource(alertId);\n    }\n  }, [alertId]);\n  const initialSort = [{ id: 'start_dttm', desc: true }];\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { state } } }) => _jsx(AlertStatusIcon, { state: state, isReportEnabled: isReportEnabled }),\n    accessor: 'state',\n    Header: t('State'),\n    size: 'xs',\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original: { uuid: executionId } } }) => executionId ? executionId.slice(0, 6) : 'none',\n    accessor: 'uuid',\n    Header: t('Execution ID'),\n    size: 'xs',\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original: { scheduled_dttm: scheduledDttm } } }) => dayjs(new Date(scheduledDttm)).format('YYYY-MM-DD hh:mm:ss a'),\n    accessor: 'scheduled_dttm',\n    Header: t('Scheduled at (UTC)')\n  },\n  {\n    Cell: ({ row: { original: { start_dttm: startDttm } } }) => dayjs(new Date(startDttm)).format('YYYY-MM-DD hh:mm:ss a'),\n    Header: t('Start at (UTC)'),\n    accessor: 'start_dttm'\n  },\n  {\n    Cell: ({ row: { original: { start_dttm: startDttm, end_dttm: endDttm } } }) => fDuration(new Date(startDttm).getTime(), new Date(endDttm).getTime()),\n    Header: t('Duration'),\n    disableSortBy: true\n  },\n  {\n    accessor: 'value',\n    Header: t('Value')\n  },\n  {\n    accessor: 'error_message',\n    Header: t('Error message'),\n    Cell: ({ row: { original: { error_message = '' } } }) => _jsx(Tooltip, { title: error_message, placement: \"topLeft\", children:\n      _jsx(\"span\", { children: error_message }) }\n    )\n  }],\n  [isReportEnabled]);\n  const path = `/${isReportEnabled ? 'report' : 'alert'}/list/`;\n  const ALERT_TEXT = t('Alert');\n  const REPORT_TEXT = t('Report');\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { name: _jsxs(StyledHeader, { children: [\n        _jsxs(\"span\", { children: [\n          alertResource ?\n          alertResource.type === 'Alert' ?\n          `${ALERT_TEXT}:` :\n          alertResource.type === 'Report' ?\n          `${REPORT_TEXT}:` :\n          null :\n          null, ' ',\n          alertResource == null ? void 0 : alertResource.name] }\n        ),\n        _jsx(\"span\", { children:\n          _jsx(Link, { to: path, children: t('Back to all') }) }\n        )] }\n      ) }),\n    _jsx(ListView, { className: \"execution-log-list-view\", columns: columns, count: logCount, data: logs, fetchData: fetchData, initialSort: initialSort, loading: loading, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: () => {}, pageSize: PAGE_SIZE })] }\n  );\n}\nexport default withToasts(ExecutionLog);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}