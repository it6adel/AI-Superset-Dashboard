{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { getStandardizedControls, sharedControls, sections } from '@superset-ui/chart-controls';\nimport { headerFontSize, subheaderFontSize } from '../sharedControls';\nimport { ColorSchemeEnum } from './types';\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['metric'],\n    ['adhoc_filters'],\n    [\n    {\n      name: 'row_limit',\n      config: sharedControls.row_limit\n    }]]\n\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['y_axis_format'],\n    [\n    {\n      name: 'percentDifferenceFormat',\n      config: {\n        ...sharedControls.y_axis_format,\n        label: t('Percent Difference format')\n      }\n    }],\n\n    ['currency_format'],\n    [\n    {\n      ...headerFontSize,\n      config: { ...headerFontSize.config, default: 0.2 }\n    }],\n\n    [\n    {\n      ...subheaderFontSize,\n      config: {\n        ...subheaderFontSize.config,\n        default: 0.125,\n        label: t('Comparison font size')\n      }\n    }],\n\n    [\n    {\n      name: 'comparison_color_enabled',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Add color for positive/negative change'),\n        renderTrigger: true,\n        default: false,\n        description: t('Add color for positive/negative change')\n      }\n    }],\n\n    [\n    {\n      name: 'comparison_color_scheme',\n      config: {\n        type: 'SelectControl',\n        label: t('color scheme for comparison'),\n        default: ColorSchemeEnum.Green,\n        renderTrigger: true,\n        choices: [\n        [ColorSchemeEnum.Green, 'Green for increase, red for decrease'],\n        [ColorSchemeEnum.Red, 'Red for increase, green for decrease']],\n\n        visibility: ({ controls }) => {var _controls$comparison_;return (controls == null ? void 0 : (_controls$comparison_ = controls.comparison_color_enabled) == null ? void 0 : _controls$comparison_.value) === true;},\n        description: t('Adds color to the chart symbols based on the positive or ' +\n        'negative change from the comparison value.')\n      }\n    }]]\n\n\n  },\n  sections.timeComparisonControls({\n    multi: false,\n    showCalculationType: false,\n    showFullChoices: false\n  })],\n\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format')\n    }\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}