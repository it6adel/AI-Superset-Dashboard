{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CurrencyFormatter, GenericDataType, getNumberFormatter, isProbablyHTML, sanitizeHtml } from '@superset-ui/core';\nimport DateWithFormatter from './DateWithFormatter';\n/**\n * Format text for cell value.\n */\nfunction formatValue(formatter, value) {\n  // render undefined as empty string\n  if (value === undefined) {\n    return [false, ''];\n  }\n  // render null as `N/A`\n  if (value === null ||\n  // null values in temporal columns are wrapped in a Date object, so make sure we\n  // handle them here too\n  value instanceof DateWithFormatter && value.input === null) {\n    return [false, 'N/A'];\n  }\n  if (formatter) {\n    return [false, formatter(value)];\n  }\n  if (typeof value === 'string') {\n    return isProbablyHTML(value) ? [true, sanitizeHtml(value)] : [false, value];\n  }\n  return [false, value.toString()];\n}\nexport function formatColumnValue(column, value) {\n  const { dataType, formatter, config = {} } = column;\n  const isNumber = dataType === GenericDataType.Numeric;\n  const smallNumberFormatter = config.d3SmallNumberFormat === undefined ?\n  formatter :\n  config.currencyFormat ?\n  new CurrencyFormatter({\n    d3Format: config.d3SmallNumberFormat,\n    currency: config.currencyFormat\n  }) :\n  getNumberFormatter(config.d3SmallNumberFormat);\n  return formatValue(isNumber && typeof value === 'number' && Math.abs(value) < 1 ?\n  smallNumberFormatter :\n  formatter, value);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}