{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, RollingType, ComparisonType } from '@superset-ui/core';\nimport { ControlSubSectionHeader } from '../components/ControlSubSectionHeader';\nimport { formatSelectOptions, displayTimeRelatedControls } from '../utils';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const advancedAnalyticsControls = {\n  label: t('Advanced analytics'),\n  tabOverride: 'data',\n  description: t('This section contains options ' +\n  'that allow for advanced analytical post processing ' +\n  'of query results'),\n  visibility: displayTimeRelatedControls,\n  controlSetRows: [\n  [_jsx(ControlSubSectionHeader, { children: t('Rolling window') })],\n  [\n  {\n    name: 'rolling_type',\n    config: {\n      type: 'SelectControl',\n      label: t('Rolling function'),\n      default: null,\n      choices: [[null, t('None')]].concat(formatSelectOptions(Object.values(RollingType))),\n      description: t('Defines a rolling window function to apply, works along ' +\n      'with the [Periods] text box')\n    }\n  }],\n\n  [\n  {\n    name: 'rolling_periods',\n    config: {\n      type: 'TextControl',\n      label: t('Periods'),\n      isInt: true,\n      description: t('Defines the size of the rolling window function, ' +\n      'relative to the time granularity selected'),\n      visibility: ({ controls }, { name }) => {var _controls$rollingType, _controls$rollingType2;\n        // `rolling_type_b` refer to rolling_type in mixed timeseries Query B\n        const rollingTypeControlName = name.endsWith('_b') ?\n        'rolling_type_b' :\n        'rolling_type';\n        return Boolean((_controls$rollingType = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType.value) &&\n        ((_controls$rollingType2 = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType2.value) !== RollingType.Cumsum;\n      }\n    }\n  }],\n\n  [\n  {\n    name: 'min_periods',\n    config: {\n      type: 'TextControl',\n      label: t('Min periods'),\n      isInt: true,\n      description: t('The minimum number of rolling periods required to show ' +\n      'a value. For instance if you do a cumulative sum on 7 days ' +\n      'you may want your \"Min Period\" to be 7, so that all data points ' +\n      'shown are the total of 7 periods. This will hide the \"ramp up\" ' +\n      'taking place over the first 7 periods'),\n      visibility: ({ controls }, { name }) => {var _controls$rollingType3, _controls$rollingType4;\n        // `rolling_type_b` refer to rolling_type in mixed timeseries Query B\n        const rollingTypeControlName = name.endsWith('_b') ?\n        'rolling_type_b' :\n        'rolling_type';\n        return Boolean((_controls$rollingType3 = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType3.value) &&\n        ((_controls$rollingType4 = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType4.value) !== RollingType.Cumsum;\n      }\n    }\n  }],\n\n  [_jsx(ControlSubSectionHeader, { children: t('Time comparison') })],\n  [\n  {\n    name: 'time_compare',\n    config: {\n      type: 'SelectControl',\n      multi: true,\n      freeForm: true,\n      label: t('Time shift'),\n      choices: [\n      ['1 day ago', t('1 day ago')],\n      ['1 week ago', t('1 week ago')],\n      ['28 days ago', t('28 days ago')],\n      ['30 days ago', t('30 days ago')],\n      ['52 weeks ago', t('52 weeks ago')],\n      ['1 year ago', t('1 year ago')],\n      ['104 weeks ago', t('104 weeks ago')],\n      ['2 years ago', t('2 years ago')],\n      ['156 weeks ago', t('156 weeks ago')],\n      ['3 years ago', t('3 years ago')]],\n\n      description: t('Overlay one or more timeseries from a ' +\n      'relative time period. Expects relative time deltas ' +\n      'in natural language (example:  24 hours, 7 days, ' +\n      '52 weeks, 365 days). Free text is supported.')\n    }\n  }],\n\n  [\n  {\n    name: 'comparison_type',\n    config: {\n      type: 'SelectControl',\n      label: t('Calculation type'),\n      default: 'values',\n      choices: [\n      [ComparisonType.Values, t('Actual values')],\n      [ComparisonType.Difference, t('Difference')],\n      [ComparisonType.Percentage, t('Percentage change')],\n      [ComparisonType.Ratio, t('Ratio')]],\n\n      description: t('How to display time shifts: as individual lines; as the ' +\n      'difference between the main time series and each time shift; ' +\n      'as the percentage change; or as the ratio between series and time shifts.')\n    }\n  }],\n\n  [_jsx(ControlSubSectionHeader, { children: t('Resample') })],\n  [\n  {\n    name: 'resample_rule',\n    config: {\n      type: 'SelectControl',\n      freeForm: true,\n      label: t('Rule'),\n      default: null,\n      choices: [\n      ['1T', t('1 minutely frequency')],\n      ['1H', t('1 hourly frequency')],\n      ['1D', t('1 calendar day frequency')],\n      ['7D', t('7 calendar day frequency')],\n      ['1MS', t('1 month start frequency')],\n      ['1M', t('1 month end frequency')],\n      ['1AS', t('1 year start frequency')],\n      ['1A', t('1 year end frequency')]],\n\n      description: t('Pandas resample rule')\n    }\n  }],\n\n  [\n  {\n    name: 'resample_method',\n    config: {\n      type: 'SelectControl',\n      label: t('Fill method'),\n      default: null,\n      choices: [\n      ['asfreq', t('Null imputation')],\n      ['zerofill', t('Zero imputation')],\n      ['linear', t('Linear interpolation')],\n      ['ffill', t('Forward values')],\n      ['bfill', t('Backward values')],\n      ['median', t('Median values')],\n      ['mean', t('Mean values')],\n      ['sum', t('Sum values')]],\n\n      description: t('Pandas resample method')\n    }\n  }]]\n\n\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}