{"ast":null,"code":"import _merge from \"lodash/merge\";var _bootstrapData$common, _bootstrapData$user; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { setConfig as setHotLoaderConfig } from 'react-hot-loader';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport dayjs from 'dayjs';\n// eslint-disable-next-line no-restricted-imports\nimport { configure, makeApi,\n// eslint-disable-next-line no-restricted-imports\nsupersetTheme, // TODO: DO not import theme directly\ninitFeatureFlags } from '@superset-ui/core';\n\nimport setupClient from './setup/setupClient';\nimport setupColors from './setup/setupColors';\nimport setupFormatters from './setup/setupFormatters';\nimport setupDashboardComponents from './setup/setupDashboardComponents';\nimport getBootstrapData from './utils/getBootstrapData';\nif (process.env.WEBPACK_MODE === 'development') {\n  setHotLoaderConfig({ logLevel: 'debug', trackTailUpdates: false });\n}\n// eslint-disable-next-line import/no-mutable-exports\nconst bootstrapData = getBootstrapData();\n// Configure translation\nif (typeof window !== 'undefined') {\n  configure({ languagePack: bootstrapData.common.language_pack });\n  dayjs.locale(bootstrapData.common.locale);\n} else\n{\n  configure();\n}\n// Configure feature flags\ninitFeatureFlags(bootstrapData.common.feature_flags);\n// Setup SupersetClient\nsetupClient();\nsetupColors(bootstrapData.common.extra_categorical_color_schemes, bootstrapData.common.extra_sequential_color_schemes);\n// Setup number formatters\nsetupFormatters(bootstrapData.common.d3_format, bootstrapData.common.d3_time_format);\nsetupDashboardComponents();\nexport const theme = _merge(supersetTheme, (_bootstrapData$common = bootstrapData.common.theme_overrides) != null ? _bootstrapData$common : {});\nconst getMe = makeApi({\n  method: 'GET',\n  endpoint: '/api/v1/me/'\n});\n/**\n * When you re-open the window, we check if you are still logged in.\n * If your session expired or you signed out, we'll redirect to login.\n * If you aren't logged in in the first place (!isActive), then we shouldn't do this.\n */\nif ((_bootstrapData$user = bootstrapData.user) != null && _bootstrapData$user.isActive) {\n  document.addEventListener('visibilitychange', () => {\n    // we only care about the tab becoming visible, not vice versa\n    if (document.visibilityState !== 'visible')\n    return;\n    getMe().catch(() => {\n\n      // ignore error, SupersetClient will redirect to login on a 401\n    });});\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}