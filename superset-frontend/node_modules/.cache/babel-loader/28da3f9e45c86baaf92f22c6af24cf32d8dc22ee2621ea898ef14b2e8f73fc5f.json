{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nimport { GenericDataType, getMetricLabel, extractTimegrain, getValueFormatter } from '@superset-ui/core';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nexport default function transformProps(chartProps) {var _chartProps$datasourc, _metricEntry, _getColorFormatters;\n  const { width, height, queriesData, formData, rawFormData, hooks, datasource: { currencyFormats = {}, columnFormats = {} } } = chartProps;\n  const { headerFontSize, metric = 'value', subheader = '', subheaderFontSize, forceTimestampFormatting, timeFormat, yAxisFormat, conditionalFormatting, currencyFormat } = formData;\n  const refs = {};\n  const { data = [], coltypes = [] } = queriesData[0];\n  const granularity = extractTimegrain(rawFormData);\n  const metricName = getMetricLabel(metric);\n  const formattedSubheader = subheader;\n  const bigNumber = data.length === 0 ? null : parseMetricValue(data[0][metricName]);\n  let metricEntry;\n  if ((_chartProps$datasourc = chartProps.datasource) != null && _chartProps$datasourc.metrics) {\n    metricEntry = chartProps.datasource.metrics.find((metricItem) => metricItem.metric_name === metric);\n  }\n  const formatTime = getDateFormatter(timeFormat, granularity, (_metricEntry = metricEntry) == null ? void 0 : _metricEntry.d3format);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, yAxisFormat, currencyFormat);\n  const headerFormatter = coltypes[0] === GenericDataType.Temporal ||\n  coltypes[0] === GenericDataType.String ||\n  forceTimestampFormatting ?\n  formatTime :\n  numberFormatter;\n  const { onContextMenu } = hooks;\n  const defaultColorFormatters = [];\n  const colorThresholdFormatters = (_getColorFormatters = getColorFormatters(conditionalFormatting, data, false)) != null ? _getColorFormatters :\n  defaultColorFormatters;\n  return {\n    width,\n    height,\n    bigNumber,\n    headerFormatter,\n    headerFontSize,\n    subheaderFontSize,\n    subheader: formattedSubheader,\n    onContextMenu,\n    refs,\n    colorThresholdFormatters\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}