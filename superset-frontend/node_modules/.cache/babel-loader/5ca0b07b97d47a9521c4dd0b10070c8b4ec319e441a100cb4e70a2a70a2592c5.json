{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport { extendedDayjs } from 'src/utils/dates';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  styled,\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  t,\n  getExtensionsRegistry,\n  useTheme } from\n'@superset-ui/core';\nimport { Global } from '@emotion/react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n  LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD,\n  LOG_ACTIONS_FORCE_REFRESH_DASHBOARD,\n  LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD } from\n'src/logger/LogUtils';\nimport Icons from 'src/components/Icons';\nimport { Button } from 'src/components/';\nimport { findPermission } from 'src/utils/findPermission';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport PublishedStatus from 'src/dashboard/components/PublishedStatus';\nimport UndoRedoKeyListeners from 'src/dashboard/components/UndoRedoKeyListeners';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport {\n  UNDO_LIMIT,\n  SAVE_TYPE_OVERWRITE,\n  DASHBOARD_POSITION_DATA_LIMIT,\n  DASHBOARD_HEADER_ID } from\n'src/dashboard/util/constants';\nimport setPeriodicRunner, {\n  stopPeriodicRender } from\n'src/dashboard/util/setPeriodicRunner';\nimport ReportModal from 'src/features/reports/ReportModal';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { deleteActiveReport } from 'src/features/reports/ReportModal/actions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport DashboardEmbedModal from '../EmbeddedModal';\nimport OverwriteConfirm from '../OverwriteConfirm';\nimport {\n  addDangerToast,\n  addSuccessToast,\n  addWarningToast } from\n'../../../components/MessageToasts/actions';\nimport {\n  dashboardTitleChanged,\n  redoLayoutAction,\n  undoLayoutAction,\n  updateDashboardTitle,\n  clearDashboardHistory } from\n'../../actions/dashboardLayout';\nimport {\n  fetchCharts,\n  fetchFaveStar,\n  maxUndoHistoryToast,\n  onChange,\n  onRefresh,\n  saveDashboardRequest,\n  saveFaveStar,\n  savePublished,\n  setEditMode,\n  setMaxUndoHistoryExceeded,\n  setRefreshFrequency,\n  setUnsavedChanges,\n  updateCss } from\n'../../actions/dashboardState';\nimport { logEvent } from '../../../logger/actions';\nimport { dashboardInfoChanged } from '../../actions/dashboardInfo';\nimport isDashboardLoading from '../../util/isDashboardLoading';\nimport { useChartIds } from '../../util/charts/useChartIds';\nimport { useDashboardMetadataBar } from './useDashboardMetadataBar';\nimport { useHeaderActionsMenu } from './useHeaderActionsDropdownMenu';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nconst headerContainerStyle = (theme) => css`\n  border-bottom: 1px solid ${theme.colors.grayscale.light2};\n`;\n\nconst editButtonStyle = (theme) => css`\n  color: ${theme.colors.primary.dark2};\n`;\n\nconst actionButtonsStyle = (theme) => css`\n  display: flex;\n  align-items: center;\n\n  .action-schedule-report {\n    margin-left: ${theme.gridUnit * 2}px;\n  }\n\n  .undoRedo {\n    display: flex;\n    margin-right: ${theme.gridUnit * 2}px;\n  }\n`;\n\nconst StyledUndoRedoButton = styled(Button)`\n  // TODO: check if we need this\n  padding: 0;\n  &:hover {\n    background: transparent;\n  }\n`;\n\nconst undoRedoStyle = (theme) => css`\n  color: ${theme.colors.grayscale.light1};\n  &:hover {\n    color: ${theme.colors.grayscale.base};\n  }\n`;\n\nconst undoRedoEmphasized = (theme) => css`\n  color: ${theme.colors.grayscale.base};\n`;\n\nconst undoRedoDisabled = (theme) => css`\n  color: ${theme.colors.grayscale.light2};\n`;\n\nconst saveBtnStyle = (theme) => css`\n  min-width: ${theme.gridUnit * 17}px;\n  height: ${theme.gridUnit * 8}px;\n  span > :first-of-type {\n    margin-right: 0;\n  }\n`;\n\nconst discardBtnStyle = (theme) => css`\n  min-width: ${theme.gridUnit * 22}px;\n  height: ${theme.gridUnit * 8}px;\n`;\n\nconst discardChanges = () => {\n  const url = new URL(window.location.href);\n\n  url.searchParams.delete('edit');\n  window.location.assign(url);\n};\n\nconst Header = () => {var _layout$DASHBOARD_HEA, _layout$DASHBOARD_HEA2, _dashboardInfo$common7, _dashboardInfo$common8, _dashboardInfo$common9, _dashboardInfo$common10, _dashboardInfo$common11, _dashboardInfo$common12;\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const [didNotifyMaxUndoHistoryToast, setDidNotifyMaxUndoHistoryToast] =\n  useState(false);\n  const [emphasizeUndo, setEmphasizeUndo] = useState(false);\n  const [emphasizeRedo, setEmphasizeRedo] = useState(false);\n  const [showingPropertiesModal, setShowingPropertiesModal] = useState(false);\n  const [showingEmbedModal, setShowingEmbedModal] = useState(false);\n  const [showingReportModal, setShowingReportModal] = useState(false);\n  const [currentReportDeleting, setCurrentReportDeleting] = useState(null);\n  const dashboardInfo = useSelector((state) => state.dashboardInfo);\n  const layout = useSelector((state) => state.dashboardLayout.present);\n  const undoLength = useSelector((state) => state.dashboardLayout.past.length);\n  const redoLength = useSelector((state) => state.dashboardLayout.future.length);\n  const dataMask = useSelector((state) => state.dataMask);\n  const user = useSelector((state) => state.user);\n  const chartIds = useChartIds();\n\n  const {\n    expandedSlices,\n    refreshFrequency,\n    shouldPersistRefreshFrequency,\n    customCss,\n    colorNamespace,\n    colorScheme,\n    isStarred,\n    isPublished,\n    hasUnsavedChanges,\n    maxUndoHistoryExceeded,\n    editMode,\n    lastModifiedTime\n  } = useSelector(\n    (state) => ({\n      expandedSlices: state.dashboardState.expandedSlices,\n      refreshFrequency: state.dashboardState.refreshFrequency,\n      shouldPersistRefreshFrequency:\n      !!state.dashboardState.shouldPersistRefreshFrequency,\n      customCss: state.dashboardState.css,\n      colorNamespace: state.dashboardState.colorNamespace,\n      colorScheme: state.dashboardState.colorScheme,\n      isStarred: !!state.dashboardState.isStarred,\n      isPublished: !!state.dashboardState.isPublished,\n      hasUnsavedChanges: !!state.dashboardState.hasUnsavedChanges,\n      maxUndoHistoryExceeded: !!state.dashboardState.maxUndoHistoryExceeded,\n      editMode: !!state.dashboardState.editMode,\n      lastModifiedTime: state.lastModifiedTime\n    }),\n    shallowEqual\n  );\n  const isLoading = useSelector((state) => isDashboardLoading(state.charts));\n\n  const refreshTimer = useRef(0);\n  const ctrlYTimeout = useRef(0);\n  const ctrlZTimeout = useRef(0);\n\n  const dashboardTitle = (_layout$DASHBOARD_HEA = layout[DASHBOARD_HEADER_ID]) == null ? void 0 : (_layout$DASHBOARD_HEA2 = _layout$DASHBOARD_HEA.meta) == null ? void 0 : _layout$DASHBOARD_HEA2.text;\n  const { slug } = dashboardInfo;\n  const actualLastModifiedTime = Math.max(\n    lastModifiedTime,\n    dashboardInfo.last_modified_time\n  );\n  const boundActionCreators = useMemo(\n    () =>\n    bindActionCreators(\n      {\n        addSuccessToast,\n        addDangerToast,\n        addWarningToast,\n        onUndo: undoLayoutAction,\n        onRedo: redoLayoutAction,\n        clearDashboardHistory,\n        setEditMode,\n        setUnsavedChanges,\n        fetchFaveStar,\n        saveFaveStar,\n        savePublished,\n        fetchCharts,\n        updateDashboardTitle,\n        updateCss,\n        onChange,\n        onSave: saveDashboardRequest,\n        setMaxUndoHistoryExceeded,\n        maxUndoHistoryToast,\n        logEvent,\n        setRefreshFrequency,\n        onRefresh,\n        dashboardInfoChanged,\n        dashboardTitleChanged\n      },\n      dispatch\n    ),\n    [dispatch]\n  );\n\n  const startPeriodicRender = useCallback(\n    (interval) => {\n      let intervalMessage;\n\n      if (interval) {var _dashboardInfo$common, _dashboardInfo$common2;\n        const periodicRefreshOptions = (_dashboardInfo$common =\n        dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common2 = _dashboardInfo$common.conf) == null ? void 0 : _dashboardInfo$common2.DASHBOARD_AUTO_REFRESH_INTERVALS;\n        const predefinedValue = periodicRefreshOptions.find(\n          (option) => Number(option[0]) === interval / 1000\n        );\n\n        if (predefinedValue) {\n          intervalMessage = t(predefinedValue[1]);\n        } else {\n          intervalMessage = extendedDayjs.\n          duration(interval, 'millisecond').\n          humanize();\n        }\n      }\n\n      const fetchCharts = (charts, force = false) =>\n      boundActionCreators.fetchCharts(\n        charts,\n        force,\n        interval * 0.2,\n        dashboardInfo.id\n      );\n\n      const periodicRender = () => {var _dashboardInfo$common3, _dashboardInfo$common4;\n        const { metadata } = dashboardInfo;\n        const immune = metadata.timed_refresh_immune_slices || [];\n        const affectedCharts = chartIds.filter(\n          (chartId) => immune.indexOf(chartId) === -1\n        );\n\n        boundActionCreators.logEvent(LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD, {\n          interval,\n          chartCount: affectedCharts.length\n        });\n        boundActionCreators.addWarningToast(\n          t(\n            `This dashboard is currently auto refreshing; the next auto refresh will be in %s.`,\n            intervalMessage\n          )\n        );\n        if (\n        ((_dashboardInfo$common3 = dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common4 = _dashboardInfo$common3.conf) == null ? void 0 : _dashboardInfo$common4.DASHBOARD_AUTO_REFRESH_MODE) === 'fetch')\n        {\n          // force-refresh while auto-refresh in dashboard\n          return fetchCharts(affectedCharts);\n        }\n        return fetchCharts(affectedCharts, true);\n      };\n\n      refreshTimer.current = setPeriodicRunner({\n        interval,\n        periodicRender,\n        refreshTimer: refreshTimer.current\n      });\n    },\n    [boundActionCreators, chartIds, dashboardInfo]\n  );\n\n  useEffect(() => {\n    startPeriodicRender(refreshFrequency * 1000);\n  }, [refreshFrequency, startPeriodicRender]);\n\n  useEffect(() => {\n    if (UNDO_LIMIT - undoLength <= 0 && !didNotifyMaxUndoHistoryToast) {\n      setDidNotifyMaxUndoHistoryToast(true);\n      boundActionCreators.maxUndoHistoryToast();\n    }\n    if (undoLength > UNDO_LIMIT && !maxUndoHistoryExceeded) {\n      boundActionCreators.setMaxUndoHistoryExceeded();\n    }\n  }, [\n  boundActionCreators,\n  didNotifyMaxUndoHistoryToast,\n  maxUndoHistoryExceeded,\n  undoLength]\n  );\n\n  useEffect(\n    () => () => {\n      stopPeriodicRender(refreshTimer.current);\n      boundActionCreators.setRefreshFrequency(0);\n      clearTimeout(ctrlYTimeout.current);\n      clearTimeout(ctrlZTimeout.current);\n    },\n    [boundActionCreators]\n  );\n\n  const handleChangeText = useCallback(\n    (nextText) => {\n      if (nextText && dashboardTitle !== nextText) {\n        boundActionCreators.updateDashboardTitle(nextText);\n        boundActionCreators.onChange();\n      }\n    },\n    [boundActionCreators, dashboardTitle]\n  );\n\n  const handleCtrlY = useCallback(() => {\n    boundActionCreators.onRedo();\n    setEmphasizeRedo(true);\n    if (ctrlYTimeout.current) {\n      clearTimeout(ctrlYTimeout.current);\n    }\n    ctrlYTimeout.current = setTimeout(() => {\n      setEmphasizeRedo(false);\n    }, 100);\n  }, [boundActionCreators]);\n\n  const handleCtrlZ = useCallback(() => {\n    boundActionCreators.onUndo();\n    setEmphasizeUndo(true);\n    if (ctrlZTimeout.current) {\n      clearTimeout(ctrlZTimeout.current);\n    }\n    ctrlZTimeout.current = setTimeout(() => {\n      setEmphasizeUndo(false);\n    }, 100);\n  }, [boundActionCreators]);\n\n  const forceRefresh = useCallback(() => {\n    if (!isLoading) {\n      boundActionCreators.logEvent(LOG_ACTIONS_FORCE_REFRESH_DASHBOARD, {\n        force: true,\n        interval: 0,\n        chartCount: chartIds.length\n      });\n      return boundActionCreators.onRefresh(chartIds, true, 0, dashboardInfo.id);\n    }\n    return false;\n  }, [boundActionCreators, chartIds, dashboardInfo.id, isLoading]);\n\n  const toggleEditMode = useCallback(() => {\n    boundActionCreators.logEvent(LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD, {\n      edit_mode: !editMode\n    });\n    boundActionCreators.setEditMode(!editMode);\n  }, [boundActionCreators, editMode]);\n\n  const overwriteDashboard = useCallback(() => {var _dashboardInfo$metada, _dashboardInfo$metada2, _dashboardInfo$metada3, _dashboardInfo$common5, _dashboardInfo$common6;\n    const currentColorNamespace =\n    (dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.color_namespace) || colorNamespace;\n    const currentColorScheme =\n    (dashboardInfo == null ? void 0 : (_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.color_scheme) || colorScheme;\n\n    const data = {\n      certified_by: dashboardInfo.certified_by,\n      certification_details: dashboardInfo.certification_details,\n      css: customCss,\n      dashboard_title: dashboardTitle,\n      last_modified_time: actualLastModifiedTime,\n      owners: dashboardInfo.owners,\n      roles: dashboardInfo.roles,\n      slug,\n      metadata: {\n        ...(dashboardInfo == null ? void 0 : dashboardInfo.metadata),\n        color_namespace: currentColorNamespace,\n        color_scheme: currentColorScheme,\n        positions: layout,\n        refresh_frequency: shouldPersistRefreshFrequency ?\n        refreshFrequency : (_dashboardInfo$metada3 =\n        dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada3.refresh_frequency\n      }\n    };\n\n    // make sure positions data less than DB storage limitation:\n    const positionJSONLength = safeStringify(layout).length;\n    const limit =\n    ((_dashboardInfo$common5 = dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common6 = _dashboardInfo$common5.conf) == null ? void 0 : _dashboardInfo$common6.SUPERSET_DASHBOARD_POSITION_DATA_LIMIT) ||\n    DASHBOARD_POSITION_DATA_LIMIT;\n    if (positionJSONLength >= limit) {\n      boundActionCreators.addDangerToast(\n        t(\n          'Your dashboard is too large. Please reduce its size before saving it.'\n        )\n      );\n    } else {\n      if (positionJSONLength >= limit * 0.9) {\n        boundActionCreators.addWarningToast(\n          t('Your dashboard is near the size limit.')\n        );\n      }\n\n      boundActionCreators.onSave(data, dashboardInfo.id, SAVE_TYPE_OVERWRITE);\n    }\n  }, [\n  actualLastModifiedTime,\n  boundActionCreators,\n  colorNamespace,\n  colorScheme,\n  customCss,\n  dashboardInfo.certification_details,\n  dashboardInfo.certified_by, (_dashboardInfo$common7 =\n  dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common8 = _dashboardInfo$common7.conf) == null ? void 0 : _dashboardInfo$common8.SUPERSET_DASHBOARD_POSITION_DATA_LIMIT,\n  dashboardInfo.id,\n  dashboardInfo.metadata,\n  dashboardInfo.owners,\n  dashboardInfo.roles,\n  dashboardTitle,\n  layout,\n  refreshFrequency,\n  shouldPersistRefreshFrequency,\n  slug]\n  );\n\n  const showPropertiesModal = useCallback(() => {\n    setShowingPropertiesModal(true);\n  }, []);\n\n  const hidePropertiesModal = useCallback(() => {\n    setShowingPropertiesModal(false);\n  }, []);\n\n  const showEmbedModal = useCallback(() => {\n    setShowingEmbedModal(true);\n  }, []);\n\n  const hideEmbedModal = useCallback(() => {\n    setShowingEmbedModal(false);\n  }, []);\n\n  const showReportModal = useCallback(() => {\n    setShowingReportModal(true);\n  }, []);\n\n  const hideReportModal = useCallback(() => {\n    setShowingReportModal(false);\n  }, []);\n\n  const metadataBar = useDashboardMetadataBar(dashboardInfo);\n\n  const userCanEdit =\n  dashboardInfo.dash_edit_perm && !dashboardInfo.is_managed_externally;\n  const userCanShare = dashboardInfo.dash_share_perm;\n  const userCanSaveAs = dashboardInfo.dash_save_perm;\n  const userCanCurate =\n  isFeatureEnabled(FeatureFlag.EmbeddedSuperset) &&\n  findPermission('can_set_embedded', 'Dashboard', user.roles);\n  const refreshLimit = (_dashboardInfo$common9 =\n  dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common10 = _dashboardInfo$common9.conf) == null ? void 0 : _dashboardInfo$common10.SUPERSET_DASHBOARD_PERIODICAL_REFRESH_LIMIT;\n  const refreshWarning = (_dashboardInfo$common11 =\n  dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common12 = _dashboardInfo$common11.conf) == null ? void 0 : _dashboardInfo$common12.\n  SUPERSET_DASHBOARD_PERIODICAL_REFRESH_WARNING_MESSAGE;\n  const isEmbedded = !(dashboardInfo != null && dashboardInfo.userId);\n\n  const handleOnPropertiesChange = useCallback(\n    (updates) => {\n      boundActionCreators.dashboardInfoChanged({\n        slug: updates.slug,\n        metadata: JSON.parse(updates.jsonMetadata || '{}'),\n        certified_by: updates.certifiedBy,\n        certification_details: updates.certificationDetails,\n        owners: updates.owners,\n        roles: updates.roles\n      });\n      boundActionCreators.setUnsavedChanges(true);\n      boundActionCreators.dashboardTitleChanged(updates.title);\n    },\n    [boundActionCreators]\n  );\n\n  const NavExtension = extensionsRegistry.get('dashboard.nav.right');\n\n  const editableTitleProps = useMemo(\n    () => ({\n      title: dashboardTitle,\n      canEdit: userCanEdit && editMode,\n      onSave: handleChangeText,\n      placeholder: t('Add the name of the dashboard'),\n      label: t('Dashboard title'),\n      showTooltip: false\n    }),\n    [dashboardTitle, editMode, handleChangeText, userCanEdit]\n  );\n\n  const certifiedBadgeProps = useMemo(\n    () => ({\n      certifiedBy: dashboardInfo.certified_by,\n      details: dashboardInfo.certification_details\n    }),\n    [dashboardInfo.certification_details, dashboardInfo.certified_by]\n  );\n\n  const faveStarProps = useMemo(\n    () => ({\n      itemId: dashboardInfo.id,\n      fetchFaveStar: boundActionCreators.fetchFaveStar,\n      saveFaveStar: boundActionCreators.saveFaveStar,\n      isStarred,\n      showTooltip: true\n    }),\n    [\n    boundActionCreators.fetchFaveStar,\n    boundActionCreators.saveFaveStar,\n    dashboardInfo.id,\n    isStarred]\n\n  );\n\n  const titlePanelAdditionalItems = useMemo(\n    () => [\n    !editMode &&\n    _jsx(PublishedStatus, {\n      dashboardId: dashboardInfo.id,\n      isPublished: isPublished,\n      savePublished: boundActionCreators.savePublished,\n      userCanEdit: userCanEdit,\n      userCanSave: userCanSaveAs,\n      visible: !editMode }\n    ),\n\n    !editMode && !isEmbedded && metadataBar],\n\n    [\n    boundActionCreators.savePublished,\n    dashboardInfo.id,\n    editMode,\n    metadataBar,\n    isEmbedded,\n    isPublished,\n    userCanEdit,\n    userCanSaveAs]\n\n  );\n\n  const rightPanelAdditionalItems = useMemo(\n    () =>\n    _jsxs(\"div\", { className: \"button-container\", children: [\n      userCanSaveAs &&\n      _jsx(\"div\", { className: \"button-container\", children:\n        editMode &&\n        _jsxs(\"div\", { css: actionButtonsStyle, children: [\n          _jsxs(\"div\", { className: \"undoRedo\", children: [\n            _jsx(Tooltip, {\n              id: \"dashboard-undo-tooltip\",\n              title: t('Undo the action'), children:\n\n              _jsx(StyledUndoRedoButton, {\n                buttonStyle: \"link\",\n                disabled: undoLength < 1,\n                onClick: undoLength && boundActionCreators.onUndo, children:\n\n                _jsx(Icons.Undo, {\n                  css: [\n                  undoRedoStyle,\n                  emphasizeUndo && undoRedoEmphasized,\n                  undoLength < 1 && undoRedoDisabled, process.env.NODE_ENV === \"production\" ? \"\" : \";label:rightPanelAdditionalItems;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n\n\n                  iconSize: \"xl\" }\n                ) }\n              ) }\n            ),\n            _jsx(Tooltip, {\n              id: \"dashboard-redo-tooltip\",\n              title: t('Redo the action'), children:\n\n              _jsx(StyledUndoRedoButton, {\n                buttonStyle: \"link\",\n                disabled: redoLength < 1,\n                onClick: redoLength && boundActionCreators.onRedo, children:\n\n                _jsx(Icons.Redo, {\n                  css: [\n                  undoRedoStyle,\n                  emphasizeRedo && undoRedoEmphasized,\n                  redoLength < 1 && undoRedoDisabled, process.env.NODE_ENV === \"production\" ? \"\" : \";label:rightPanelAdditionalItems;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n\n\n                  iconSize: \"xl\" }\n                ) }\n              ) }\n            )] }\n          ),\n          _jsx(Button, {\n            css: discardBtnStyle,\n            buttonSize: \"small\",\n            onClick: discardChanges,\n            buttonStyle: \"default\",\n\n            \"aria-label\": t('Discard'), children:\n\n            t('Discard') }\n          ),\n          _jsxs(Button, {\n            css: saveBtnStyle,\n            buttonSize: \"small\",\n            disabled: !hasUnsavedChanges,\n            buttonStyle: \"primary\",\n            onClick: overwriteDashboard,\n\n            \"aria-label\": t('Save'), children: [\n\n            _jsx(Icons.SaveOutlined, {\n              iconColor: hasUnsavedChanges && theme.colors.primary.light5,\n              iconSize: \"m\" }\n            ),\n            t('Save')] }\n          )] }\n        ) }\n\n      ),\n\n      editMode ?\n      _jsx(UndoRedoKeyListeners, { onUndo: handleCtrlZ, onRedo: handleCtrlY }) :\n\n      _jsxs(\"div\", { css: actionButtonsStyle, children: [\n        NavExtension && _jsx(NavExtension, {}),\n        userCanEdit &&\n        _jsx(Button, {\n          buttonStyle: \"secondary\",\n          onClick: () => {\n            toggleEditMode();\n            boundActionCreators.clearDashboardHistory == null ? void 0 : boundActionCreators.clearDashboardHistory(); // Resets the `past` as an empty array\n          },\n\n          className: \"action-button\",\n          css: editButtonStyle,\n          \"aria-label\": t('Edit dashboard'), children:\n\n          t('Edit dashboard') }\n        )] }\n\n      )] }\n\n    ),\n\n    [\n    NavExtension,\n    boundActionCreators.onRedo,\n    boundActionCreators.onUndo,\n    boundActionCreators.clearDashboardHistory,\n    editMode,\n    emphasizeRedo,\n    emphasizeUndo,\n    handleCtrlY,\n    handleCtrlZ,\n    hasUnsavedChanges,\n    overwriteDashboard,\n    redoLength,\n    toggleEditMode,\n    undoLength,\n    userCanEdit,\n    userCanSaveAs]\n\n  );\n\n  const handleReportDelete = async (report) => {\n    await dispatch(deleteActiveReport(report));\n    setCurrentReportDeleting(null);\n  };\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] = useHeaderActionsMenu({\n    addSuccessToast: boundActionCreators.addSuccessToast,\n    addDangerToast: boundActionCreators.addDangerToast,\n    dashboardInfo,\n    dashboardId: dashboardInfo.id,\n    dashboardTitle,\n    dataMask,\n    layout,\n    expandedSlices,\n    customCss,\n    colorNamespace,\n    colorScheme,\n    onSave: boundActionCreators.onSave,\n    onChange: boundActionCreators.onChange,\n    forceRefreshAllCharts: forceRefresh,\n    startPeriodicRender,\n    refreshFrequency,\n    shouldPersistRefreshFrequency,\n    setRefreshFrequency: boundActionCreators.setRefreshFrequency,\n    updateCss: boundActionCreators.updateCss,\n    editMode,\n    hasUnsavedChanges,\n    userCanEdit,\n    userCanShare,\n    userCanSave: userCanSaveAs,\n    userCanCurate,\n    isLoading,\n    showReportModal,\n    showPropertiesModal,\n    setCurrentReportDeleting,\n    manageEmbedded: showEmbedModal,\n    refreshLimit,\n    refreshWarning,\n    lastModifiedTime: actualLastModifiedTime,\n    logEvent: boundActionCreators.logEvent\n  });\n  return (\n    _jsxs(\"div\", {\n      css: headerContainerStyle,\n\n      \"data-test-id\": dashboardInfo.id,\n      className: \"dashboard-header-container\", children: [\n\n      _jsx(PageHeaderWithActions, {\n        editableTitleProps: editableTitleProps,\n        certificatiedBadgeProps: certifiedBadgeProps,\n        faveStarProps: faveStarProps,\n        titlePanelAdditionalItems: titlePanelAdditionalItems,\n        rightPanelAdditionalItems: rightPanelAdditionalItems,\n        menuDropdownProps: {\n          open: isDropdownVisible,\n          onOpenChange: setIsDropdownVisible\n        },\n        additionalActionsMenu: menu,\n        showFaveStar: (user == null ? void 0 : user.userId) && (dashboardInfo == null ? void 0 : dashboardInfo.id),\n        showTitlePanelItems: true }\n      ),\n      showingPropertiesModal &&\n      _jsx(PropertiesModal, {\n        dashboardId: dashboardInfo.id,\n        dashboardInfo: dashboardInfo,\n        dashboardTitle: dashboardTitle,\n        show: showingPropertiesModal,\n        onHide: hidePropertiesModal,\n        colorScheme: colorScheme,\n        onSubmit: handleOnPropertiesChange,\n        onlyApply: true }\n      ),\n\n\n      _jsx(ReportModal, {\n        userId: user.userId,\n        show: showingReportModal,\n        onHide: hideReportModal,\n        userEmail: user.email,\n        dashboardId: dashboardInfo.id,\n        creationMethod: \"dashboards\" }\n      ),\n\n      currentReportDeleting &&\n      _jsx(DeleteModal, {\n        description: t(\n          'This action will permanently delete %s.',\n          currentReportDeleting == null ? void 0 : currentReportDeleting.name\n        ),\n        onConfirm: () => {\n          if (currentReportDeleting) {\n            handleReportDelete(currentReportDeleting);\n          }\n        },\n        onHide: () => setCurrentReportDeleting(null),\n        open: true,\n        title: t('Delete Report?') }\n      ),\n\n\n      _jsx(OverwriteConfirm, {}),\n\n      userCanCurate &&\n      _jsx(DashboardEmbedModal, {\n        show: showingEmbedModal,\n        onHide: hideEmbedModal,\n        dashboardId: dashboardInfo.id }\n      ),\n\n      _jsx(Global, {\n        styles: css`\n          .antd5-menu-vertical {\n            border-right: none;\n          }\n        ` }\n      )] }\n    ));\n\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}