{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo } from 'react';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { isDST, extendedDayjs } from 'src/utils/dates';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan' // timezones are deduped by the first alphabetical value\n};\nconst MIN_SELECT_WIDTH = '400px';\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n  'Mountain Standard Time - Phoenix',\n  'Mountain Standard Time - Phoenix'],\n\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time']\n};\nexport default function TimezoneSelector({ onTimezoneChange, timezone, minWidth = MIN_SELECT_WIDTH // smallest size for current values\n}) {\n  const { TIMEZONE_OPTIONS, TIMEZONE_OPTIONS_SORT_COMPARATOR, validTimezone } = useMemo(() => {\n    const currentDate = extendedDayjs();\n    const JANUARY = extendedDayjs.tz('2021-01-01');\n    const JULY = extendedDayjs.tz('2021-07-01');\n    const getOffsetKey = (name) => JANUARY.tz(name).utcOffset().toString() +\n    JULY.tz(name).utcOffset().toString();\n    const getTimezoneName = (name) => {var _offsetsToName$offset, _offsetsToName$offset2;\n      const offsets = getOffsetKey(name);\n      return (isDST(currentDate.tz(name), name) ? (_offsetsToName$offset =\n      offsetsToName[offsets]) == null ? void 0 : _offsetsToName$offset[1] : (_offsetsToName$offset2 =\n      offsetsToName[offsets]) == null ? void 0 : _offsetsToName$offset2[0]) || name;\n    };\n    // TODO: remove this ts-ignore when typescript is upgraded to 5.1\n    // @ts-ignore\n    const ALL_ZONES = Intl.supportedValuesOf('timeZone');\n    const labels = new Set();\n    const TIMEZONE_OPTIONS = ALL_ZONES.map((zone) => {\n      const label = `GMT ${extendedDayjs.\n      tz(currentDate, zone).\n      format('Z')} (${getTimezoneName(zone)})`;\n      if (labels.has(label)) {\n        return null; // Skip duplicates\n      }\n      labels.add(label);\n      return {\n        label,\n        value: zone,\n        offsets: getOffsetKey(zone),\n        timezoneName: zone\n      };\n    }).filter(Boolean);\n    const TIMEZONE_OPTIONS_SORT_COMPARATOR = (a, b) => extendedDayjs.tz(currentDate, a.timezoneName).utcOffset() -\n    extendedDayjs.tz(currentDate, b.timezoneName).utcOffset();\n    // pre-sort timezone options by time offset\n    TIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\n    const matchTimezoneToOptions = (timezone) => {\n      const offsetKey = getOffsetKey(timezone);\n      let fallbackValue;\n      for (const option of TIMEZONE_OPTIONS) {\n        if (option.offsets === offsetKey &&\n        option.timezoneName === timezone) {\n          return option.value;\n        }\n        if (!fallbackValue && option.offsets === offsetKey) {\n          fallbackValue = option.value;\n        }\n      }\n      return fallbackValue || DEFAULT_TIMEZONE.value;\n    };\n    const validTimezone = matchTimezoneToOptions(timezone || extendedDayjs.tz.guess());\n    return {\n      TIMEZONE_OPTIONS,\n      TIMEZONE_OPTIONS_SORT_COMPARATOR,\n      validTimezone\n    };\n  }, [timezone]);\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (validTimezone && timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n  return _jsx(Select, { ariaLabel: t('Timezone selector'), css: /*#__PURE__*/_css({ minWidth }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:TimezoneSelector;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FkZWwvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvVGltZXpvbmVTZWxlY3Rvci9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEd1RCIsImZpbGUiOiIvaG9tZS9hZGVsL3N1cGVyc2V0L3N1cGVyc2V0LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL1RpbWV6b25lU2VsZWN0b3IvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdCB9IGZyb20gJ0BzdXBlcnNldC11aS9jb3JlJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ3NyYy9jb21wb25lbnRzJztcbmltcG9ydCB7IGlzRFNULCBleHRlbmRlZERheWpzIH0gZnJvbSAnc3JjL3V0aWxzL2RhdGVzJztcbmNvbnN0IERFRkFVTFRfVElNRVpPTkUgPSB7XG4gICAgbmFtZTogJ0dNVCBTdGFuZGFyZCBUaW1lJyxcbiAgICB2YWx1ZTogJ0FmcmljYS9BYmlkamFuJywgLy8gdGltZXpvbmVzIGFyZSBkZWR1cGVkIGJ5IHRoZSBmaXJzdCBhbHBoYWJldGljYWwgdmFsdWVcbn07XG5jb25zdCBNSU5fU0VMRUNUX1dJRFRIID0gJzQwMHB4JztcbmNvbnN0IG9mZnNldHNUb05hbWUgPSB7XG4gICAgJy0zMDAtMjQwJzogWydFYXN0ZXJuIFN0YW5kYXJkIFRpbWUnLCAnRWFzdGVybiBEYXlsaWdodCBUaW1lJ10sXG4gICAgJy0zNjAtMzAwJzogWydDZW50cmFsIFN0YW5kYXJkIFRpbWUnLCAnQ2VudHJhbCBEYXlsaWdodCBUaW1lJ10sXG4gICAgJy00MjAtMzYwJzogWydNb3VudGFpbiBTdGFuZGFyZCBUaW1lJywgJ01vdW50YWluIERheWxpZ2h0IFRpbWUnXSxcbiAgICAnLTQyMC00MjAnOiBbXG4gICAgICAgICdNb3VudGFpbiBTdGFuZGFyZCBUaW1lIC0gUGhvZW5peCcsXG4gICAgICAgICdNb3VudGFpbiBTdGFuZGFyZCBUaW1lIC0gUGhvZW5peCcsXG4gICAgXSxcbiAgICAnLTQ4MC00MjAnOiBbJ1BhY2lmaWMgU3RhbmRhcmQgVGltZScsICdQYWNpZmljIERheWxpZ2h0IFRpbWUnXSxcbiAgICAnLTU0MC00ODAnOiBbJ0FsYXNrYSBTdGFuZGFyZCBUaW1lJywgJ0FsYXNrYSBEYXlsaWdodCBUaW1lJ10sXG4gICAgJy02MDAtNjAwJzogWydIYXdhaWkgU3RhbmRhcmQgVGltZScsICdIYXdhaWkgRGF5bGlnaHQgVGltZSddLFxuICAgICc2MDEyMCc6IFsnQ2VudHJhbCBFdXJvcGVhbiBUaW1lJywgJ0NlbnRyYWwgRXVyb3BlYW4gRGF5bGlnaHQgVGltZSddLFxuICAgICcwMCc6IFtERUZBVUxUX1RJTUVaT05FLm5hbWUsIERFRkFVTFRfVElNRVpPTkUubmFtZV0sXG4gICAgJzA2MCc6IFsnR01UIFN0YW5kYXJkIFRpbWUgLSBMb25kb24nLCAnQnJpdGlzaCBTdW1tZXIgVGltZSddLFxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRpbWV6b25lU2VsZWN0b3IoeyBvblRpbWV6b25lQ2hhbmdlLCB0aW1lem9uZSwgbWluV2lkdGggPSBNSU5fU0VMRUNUX1dJRFRILCAvLyBzbWFsbGVzdCBzaXplIGZvciBjdXJyZW50IHZhbHVlc1xuIH0pIHtcbiAgICBjb25zdCB7IFRJTUVaT05FX09QVElPTlMsIFRJTUVaT05FX09QVElPTlNfU09SVF9DT01QQVJBVE9SLCB2YWxpZFRpbWV6b25lIH0gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBleHRlbmRlZERheWpzKCk7XG4gICAgICAgIGNvbnN0IEpBTlVBUlkgPSBleHRlbmRlZERheWpzLnR6KCcyMDIxLTAxLTAxJyk7XG4gICAgICAgIGNvbnN0IEpVTFkgPSBleHRlbmRlZERheWpzLnR6KCcyMDIxLTA3LTAxJyk7XG4gICAgICAgIGNvbnN0IGdldE9mZnNldEtleSA9IChuYW1lKSA9PiBKQU5VQVJZLnR6KG5hbWUpLnV0Y09mZnNldCgpLnRvU3RyaW5nKCkgK1xuICAgICAgICAgICAgSlVMWS50eihuYW1lKS51dGNPZmZzZXQoKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBnZXRUaW1lem9uZU5hbWUgPSAobmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IGdldE9mZnNldEtleShuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiAoKGlzRFNUKGN1cnJlbnREYXRlLnR6KG5hbWUpLCBuYW1lKVxuICAgICAgICAgICAgICAgID8gb2Zmc2V0c1RvTmFtZVtvZmZzZXRzXT8uWzFdXG4gICAgICAgICAgICAgICAgOiBvZmZzZXRzVG9OYW1lW29mZnNldHNdPy5bMF0pIHx8IG5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyB0cy1pZ25vcmUgd2hlbiB0eXBlc2NyaXB0IGlzIHVwZ3JhZGVkIHRvIDUuMVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IEFMTF9aT05FUyA9IEludGwuc3VwcG9ydGVkVmFsdWVzT2YoJ3RpbWVab25lJyk7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IG5ldyBTZXQoKTtcbiAgICAgICAgY29uc3QgVElNRVpPTkVfT1BUSU9OUyA9IEFMTF9aT05FUy5tYXAoem9uZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGBHTVQgJHtleHRlbmRlZERheWpzXG4gICAgICAgICAgICAgICAgLnR6KGN1cnJlbnREYXRlLCB6b25lKVxuICAgICAgICAgICAgICAgIC5mb3JtYXQoJ1onKX0gKCR7Z2V0VGltZXpvbmVOYW1lKHpvbmUpfSlgO1xuICAgICAgICAgICAgaWYgKGxhYmVscy5oYXMobGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIFNraXAgZHVwbGljYXRlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFiZWxzLmFkZChsYWJlbCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB6b25lLFxuICAgICAgICAgICAgICAgIG9mZnNldHM6IGdldE9mZnNldEtleSh6b25lKSxcbiAgICAgICAgICAgICAgICB0aW1lem9uZU5hbWU6IHpvbmUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgIGNvbnN0IFRJTUVaT05FX09QVElPTlNfU09SVF9DT01QQVJBVE9SID0gKGEsIGIpID0+IGV4dGVuZGVkRGF5anMudHooY3VycmVudERhdGUsIGEudGltZXpvbmVOYW1lKS51dGNPZmZzZXQoKSAtXG4gICAgICAgICAgICBleHRlbmRlZERheWpzLnR6KGN1cnJlbnREYXRlLCBiLnRpbWV6b25lTmFtZSkudXRjT2Zmc2V0KCk7XG4gICAgICAgIC8vIHByZS1zb3J0IHRpbWV6b25lIG9wdGlvbnMgYnkgdGltZSBvZmZzZXRcbiAgICAgICAgVElNRVpPTkVfT1BUSU9OUy5zb3J0KFRJTUVaT05FX09QVElPTlNfU09SVF9DT01QQVJBVE9SKTtcbiAgICAgICAgY29uc3QgbWF0Y2hUaW1lem9uZVRvT3B0aW9ucyA9ICh0aW1lem9uZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0S2V5ID0gZ2V0T2Zmc2V0S2V5KHRpbWV6b25lKTtcbiAgICAgICAgICAgIGxldCBmYWxsYmFja1ZhbHVlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgVElNRVpPTkVfT1BUSU9OUykge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb24ub2Zmc2V0cyA9PT0gb2Zmc2V0S2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi50aW1lem9uZU5hbWUgPT09IHRpbWV6b25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZmFsbGJhY2tWYWx1ZSAmJiBvcHRpb24ub2Zmc2V0cyA9PT0gb2Zmc2V0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrVmFsdWUgPSBvcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrVmFsdWUgfHwgREVGQVVMVF9USU1FWk9ORS52YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdmFsaWRUaW1lem9uZSA9IG1hdGNoVGltZXpvbmVUb09wdGlvbnModGltZXpvbmUgfHwgZXh0ZW5kZWREYXlqcy50ei5ndWVzcygpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFRJTUVaT05FX09QVElPTlMsXG4gICAgICAgICAgICBUSU1FWk9ORV9PUFRJT05TX1NPUlRfQ09NUEFSQVRPUixcbiAgICAgICAgICAgIHZhbGlkVGltZXpvbmUsXG4gICAgICAgIH07XG4gICAgfSwgW3RpbWV6b25lXSk7XG4gICAgLy8gZm9yY2UgdHJpZ2dlciBhIHRpbWV6b25lIHVwZGF0ZSBpZiBwcm92aWRlZCBgdGltZXpvbmVgIGlzIG5vdCBpbnZhbGlkXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkVGltZXpvbmUgJiYgdGltZXpvbmUgIT09IHZhbGlkVGltZXpvbmUpIHtcbiAgICAgICAgICAgIG9uVGltZXpvbmVDaGFuZ2UodmFsaWRUaW1lem9uZSk7XG4gICAgICAgIH1cbiAgICB9LCBbdmFsaWRUaW1lem9uZSwgb25UaW1lem9uZUNoYW5nZSwgdGltZXpvbmVdKTtcbiAgICByZXR1cm4gKDxTZWxlY3QgYXJpYUxhYmVsPXt0KCdUaW1lem9uZSBzZWxlY3RvcicpfSBjc3M9e3sgbWluV2lkdGggfX0gb25DaGFuZ2U9e3R6ID0+IG9uVGltZXpvbmVDaGFuZ2UodHopfSB2YWx1ZT17dmFsaWRUaW1lem9uZX0gb3B0aW9ucz17VElNRVpPTkVfT1BUSU9OU30gc29ydENvbXBhcmF0b3I9e1RJTUVaT05FX09QVElPTlNfU09SVF9DT01QQVJBVE9SfS8+KTtcbn1cbiJdfQ== */\"), onChange: (tz) => onTimezoneChange(tz), value: validTimezone, options: TIMEZONE_OPTIONS, sortComparator: TIMEZONE_OPTIONS_SORT_COMPARATOR });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}