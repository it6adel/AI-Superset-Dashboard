{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { t, css, useTheme, SupersetClient, makeApi, styled, getExtensionsRegistry } from '@superset-ui/core';\nimport { extendedDayjs } from 'src/utils/dates';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport FacePile from 'src/components/FacePile';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport SubMenu from 'src/features/home/SubMenu';\nimport { Switch } from 'src/components/Switch';\nimport { DATETIME_WITH_TIME_ZONE } from 'src/constants';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport AlertStatusIcon from 'src/features/alerts/components/AlertStatusIcon';\nimport RecipientIcon from 'src/features/alerts/components/RecipientIcon';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport DeleteModal from 'src/components/DeleteModal';\nimport LastUpdated from 'src/components/LastUpdated';\nimport { useListViewResource, useSingleViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler, createFetchRelated } from 'src/views/CRUD/utils';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport AlertReportModal from 'src/features/alerts/AlertReportModal';\nimport { AlertState } from 'src/features/alerts/types';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst PAGE_SIZE = 25;\nconst AlertStateLabel = {\n  [AlertState.Success]: t('Success'),\n  [AlertState.Working]: t('Working'),\n  [AlertState.Error]: t('Error'),\n  [AlertState.Noop]: t('Not triggered'),\n  [AlertState.Grace]: t('On Grace')\n};\nconst deleteAlerts = makeApi({\n  requestType: 'rison',\n  method: 'DELETE',\n  endpoint: '/api/v1/report/'\n});\nconst RefreshContainer = styled.div`\n  width: 100%;\n  padding: 0 ${({ theme }) => theme.gridUnit * 4}px\n    ${({ theme }) => theme.gridUnit * 3}px;\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n`;\nconst StyledHeaderWithIcon = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  > *:first-child {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst HeaderExtension = extensionsRegistry.get('alertsreports.header.icon');\nfunction AlertList({ addDangerToast, isReportEnabled = false, user, addSuccessToast }) {\n  const theme = useTheme();\n  const title = isReportEnabled ? t('Report') : t('Alert');\n  const titlePlural = isReportEnabled ? t('reports') : t('alerts');\n  const pathName = isReportEnabled ? 'Reports' : 'Alerts';\n  const initialFilters = useMemo(() => [\n  {\n    id: 'type',\n    operator: FilterOperator.Equals,\n    value: isReportEnabled ? 'Report' : 'Alert'\n  }],\n  [isReportEnabled]);\n  const { state: { loading, resourceCount: alertsCount, resourceCollection: alerts, bulkSelectEnabled, lastFetched }, hasPerm, fetchData, setResourceCollection, refreshData, toggleBulkSelect } = useListViewResource('report', t('report'), addDangerToast, true, undefined, initialFilters);\n  const { updateResource } = useSingleViewResource('report', t('reports'), addDangerToast);\n  const [alertModalOpen, setAlertModalOpen] = useState(false);\n  const [currentAlert, setCurrentAlert] = useState(null);\n  const [currentAlertDeleting, setCurrentAlertDeleting] = useState(null);\n  // Actions\n  function handleAlertEdit(alert) {\n    setCurrentAlert(alert);\n    setAlertModalOpen(true);\n  }\n  const generateKey = () => `${new Date().getTime()}`;\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  useEffect(() => {\n    if (bulkSelectEnabled && canDelete) {\n      toggleBulkSelect();\n    }\n  }, [isReportEnabled]);\n  const handleAlertDelete = ({ id, name }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/report/${id}`\n    }).then(() => {\n      refreshData();\n      setCurrentAlertDeleting(null);\n      addSuccessToast(t('Deleted: %s', name));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', name, errMsg))));\n  };\n  const handleBulkAlertDelete = async (alertsToDelete) => {\n    try {\n      const { message } = await deleteAlerts(alertsToDelete.map(({ id }) => id));\n      refreshData();\n      addSuccessToast(message);\n    }\n    catch (e) {\n      createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected %s: %s', titlePlural, errMsg)))(e);\n    }\n  };\n  const initialSort = [{ id: 'name', desc: true }];\n  const toggleActive = useCallback((data, checked) => {\n    if (data != null && data.id) {\n      const update_id = data.id;\n      const original = [...alerts];\n      setResourceCollection(original.map((alert) => {\n        if ((alert == null ? void 0 : alert.id) === data.id) {\n          return {\n            ...alert,\n            active: checked\n          };\n        }\n        return alert;\n      }));\n      updateResource(update_id, { active: checked }, false, false).\n      then().\n      catch(() => setResourceCollection(original));\n    }\n  }, [alerts, setResourceCollection, updateResource]);\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { last_state: lastState } } }) => _jsx(AlertStatusIcon, { state: lastState, isReportEnabled: isReportEnabled }),\n    accessor: 'last_state',\n    size: 'xs',\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original: { last_eval_dttm: lastEvalDttm } } }) => lastEvalDttm ?\n    extendedDayjs.\n    utc(lastEvalDttm).\n    local().\n    format(DATETIME_WITH_TIME_ZONE) :\n    '',\n    accessor: 'last_eval_dttm',\n    Header: t('Last run'),\n    size: 'lg'\n  },\n  {\n    accessor: 'name',\n    Header: t('Name'),\n    size: 'xl'\n  },\n  {\n    Header: t('Schedule'),\n    accessor: 'crontab_humanized',\n    size: 'xl',\n    Cell: ({ row: { original: { crontab_humanized = '', timezone } } }) => _jsx(Tooltip, { title: `${crontab_humanized} (${timezone})`, placement: \"topLeft\", children:\n      _jsx(\"span\", { children: `${crontab_humanized} (${timezone})` }) }\n    )\n  },\n  {\n    Cell: ({ row: { original: { recipients } } }) => recipients.map((r) => _jsx(RecipientIcon, { type: r.type }, r.id)),\n    accessor: 'recipients',\n    Header: t('Notification method'),\n    disableSortBy: true,\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => _jsx(FacePile, { users: owners }),\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true,\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => _jsx(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const allowEdit = original.owners.map((o) => o.id).includes(user.userId) ||\n      isUserAdmin(user);\n      return _jsx(Switch, { disabled: !allowEdit, checked: original.active, onClick: (checked) => toggleActive(original, checked), size: \"small\" });\n    },\n    Header: t('Active'),\n    accessor: 'active',\n    id: 'active',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const history = useHistory();\n      const handleEdit = () => handleAlertEdit(original);\n      const handleDelete = () => setCurrentAlertDeleting(original);\n      const handleGotoExecutionLog = () => history.push(`/${original.type.toLowerCase()}/${original.id}/log`);\n      const allowEdit = original.owners.map((o) => o.id).includes(user.userId) ||\n      isUserAdmin(user);\n      const actions = [\n      canEdit ?\n      {\n        label: 'execution-log-action',\n        tooltip: t('Execution log'),\n        placement: 'bottom',\n        icon: 'FileTextOutlined',\n        onClick: handleGotoExecutionLog\n      } :\n      null,\n      canEdit ?\n      {\n        label: allowEdit ? 'edit-action' : 'preview-action',\n        tooltip: allowEdit ? t('Edit') : t('View'),\n        placement: 'bottom',\n        icon: allowEdit ? 'EditOutlined' : 'Binoculars',\n        onClick: handleEdit\n      } :\n      null,\n      allowEdit && canDelete ?\n      {\n        label: 'delete-action',\n        tooltip: t('Delete'),\n        placement: 'bottom',\n        icon: 'DeleteOutlined',\n        onClick: handleDelete\n      } :\n      null].\n      filter((item) => item !== null);\n      return _jsx(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete,\n    disableSortBy: true,\n    size: 'xl'\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [canDelete, canEdit, isReportEnabled, toggleActive]);\n  const subMenuButtons = [];\n  if (canCreate) {\n    subMenuButtons.push({\n      name: _jsxs(_Fragment, { children: [\n        _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n              margin: auto ${theme.gridUnit * 2}px auto 0;\n              vertical-align: text-top;\n            ` }),\n        title] }\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        handleAlertEdit(null);\n      }\n    });\n  }\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary'\n\n    });\n  }\n  const emptyState = {\n    title: t('No %s yet', titlePlural),\n    image: 'filter-results.svg',\n    buttonAction: () => handleAlertEdit(null),\n    buttonText: canCreate ? _jsxs(_Fragment, { children: [\n      _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n            margin: auto ${theme.gridUnit * 2}px auto 0;\n            vertical-align: text-top;\n          ` }),\n      title, ' '] }\n    ) : null\n  };\n  const filters = useMemo(() => [\n  {\n    Header: t('Name'),\n    key: 'search',\n    id: 'name',\n    input: 'search',\n    operator: FilterOperator.Contains\n  },\n  {\n    Header: t('Owner'),\n    key: 'owner',\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.RelationManyMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('report', 'owners', createErrorHandler((errMsg) => t('An error occurred while fetching owners values: %s', errMsg)), user),\n    paginate: true\n  },\n  {\n    Header: t('Status'),\n    key: 'status',\n    id: 'last_state',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: 'Any',\n    selects: [\n    {\n      label: AlertStateLabel[AlertState.Success],\n      value: AlertState.Success\n    },\n    {\n      label: AlertStateLabel[AlertState.Working],\n      value: AlertState.Working\n    },\n    { label: AlertStateLabel[AlertState.Error], value: AlertState.Error },\n    { label: AlertStateLabel[AlertState.Noop], value: AlertState.Noop },\n    { label: AlertStateLabel[AlertState.Grace], value: AlertState.Grace }]\n\n  },\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('report', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  []);\n  const header = HeaderExtension ? _jsxs(StyledHeaderWithIcon, { children: [\n    _jsx(\"div\", { children: t('Alerts & reports') }),\n    _jsx(HeaderExtension, {})] }\n  ) : t('Alerts & reports');\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { activeChild: pathName, name: header, tabs: [\n      {\n        name: 'Alerts',\n        label: t('Alerts'),\n        url: '/alert/list/',\n        usesRouter: true\n\n      },\n      {\n        name: 'Reports',\n        label: t('Reports'),\n        url: '/report/list/',\n        usesRouter: true\n\n      }],\n      buttons: subMenuButtons, children:\n      _jsx(RefreshContainer, { children:\n        _jsx(LastUpdated, { updatedAt: lastFetched, update: () => refreshData() }) }\n      ) }\n    ),\n    _jsx(AlertReportModal, { alert: currentAlert, addDangerToast: addDangerToast, layer: currentAlert, onHide: () => {\n        setAlertModalOpen(false);\n        setCurrentAlert(null);\n        refreshData();\n      }, show: alertModalOpen, isReport: isReportEnabled }, (currentAlert == null ? void 0 : currentAlert.id) || generateKey()),\n    currentAlertDeleting && _jsx(DeleteModal, { description: t('This action will permanently delete %s.', currentAlertDeleting.name), onConfirm: () => {\n        if (currentAlertDeleting) {\n          handleAlertDelete(currentAlertDeleting);\n        }\n      }, onHide: () => setCurrentAlertDeleting(null), open: true, title: t('Delete %s?', title) }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected %s?', titlePlural), onConfirm: handleBulkAlertDelete, children:\n      (confirmDelete) => {\n        const bulkActions = canDelete ?\n        [\n        {\n          key: 'delete',\n          name: t('Delete'),\n          onSelect: confirmDelete,\n          type: 'danger'\n        }] :\n\n        [];\n        return _jsx(ListView, { className: \"alerts-list-view\", columns: columns, count: alertsCount, data: alerts, emptyState: emptyState, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, refreshData: refreshData, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, pageSize: PAGE_SIZE });\n      } }\n    )] }\n  );\n}\nexport default withToasts(AlertList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}