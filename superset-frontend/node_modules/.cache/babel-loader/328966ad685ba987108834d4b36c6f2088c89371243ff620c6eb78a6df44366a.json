{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { D3_TIME_FORMAT_OPTIONS, getStandardizedControls, sharedControls } from '@superset-ui/chart-controls';\nimport { ensureIsArray, isAdhocColumn, isPhysicalColumn, SMART_DATE_ID, t, validateNonEmpty } from '@superset-ui/core';\nimport { MetricsLayoutEnum } from '../types';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'groupbyColumns',\n      config: {\n        ...sharedControls.groupby,\n        label: t('Columns'),\n        description: t('Columns to group by on the columns')\n      }\n    }],\n\n    [\n    {\n      name: 'groupbyRows',\n      config: {\n        ...sharedControls.groupby,\n        label: t('Rows'),\n        description: t('Columns to group by on the rows')\n      }\n    }],\n\n    [\n    {\n      name: 'time_grain_sqla',\n      config: {\n        ...sharedControls.time_grain_sqla,\n        visibility: ({ controls }) => {var _controls$groupbyColu;\n          const dttmLookup = Object.fromEntries(ensureIsArray(controls == null ? void 0 : (_controls$groupbyColu = controls.groupbyColumns) == null ? void 0 : _controls$groupbyColu.options).map((option) => [option.column_name, option.is_dttm]));\n          return [\n          ...ensureIsArray(controls == null ? void 0 : controls.groupbyColumns.value),\n          ...ensureIsArray(controls == null ? void 0 : controls.groupbyRows.value)].\n\n          map((selection) => {\n            if (isAdhocColumn(selection)) {\n              return true;\n            }\n            if (isPhysicalColumn(selection)) {\n              return !!dttmLookup[selection];\n            }\n            return false;\n          }).\n          some(Boolean);\n        }\n      }\n    },\n    'temporal_columns_lookup'],\n\n    [\n    {\n      name: 'metrics',\n      config: {\n        ...sharedControls.metrics,\n        validators: [validateNonEmpty],\n        rerender: ['conditional_formatting']\n      }\n    }],\n\n    [\n    {\n      name: 'metricsLayout',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Apply metrics on'),\n        default: MetricsLayoutEnum.COLUMNS,\n        options: [\n        [MetricsLayoutEnum.COLUMNS, t('Columns')],\n        [MetricsLayoutEnum.ROWS, t('Rows')]],\n\n        description: t('Use metrics as a top level group for columns or for rows')\n      }\n    }],\n\n    ['adhoc_filters'],\n    ['series_limit'],\n    [\n    {\n      name: 'row_limit',\n      config: {\n        ...sharedControls.row_limit,\n        label: t('Cell limit'),\n        description: t('Limits the number of cells that get retrieved.')\n      }\n    }],\n\n    // TODO(kgabryje): add series_columns control after control panel is redesigned to avoid clutter\n    [\n    {\n      name: 'series_limit_metric',\n      config: {\n        ...sharedControls.series_limit_metric,\n        description: t('Metric used to define how the top series are sorted if a series or cell limit is present. ' +\n        'If undefined reverts to the first metric (where appropriate).')\n      }\n    }],\n\n    [\n    {\n      name: 'order_desc',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort Descending'),\n        default: true,\n        description: t('Whether to sort descending or ascending')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Options'),\n    expanded: true,\n    tabOverride: 'data',\n    controlSetRows: [\n    [\n    {\n      name: 'aggregateFunction',\n      config: {\n        type: 'SelectControl',\n        label: t('Aggregation function'),\n        clearable: false,\n        choices: [\n        ['Count', t('Count')],\n        ['Count Unique Values', t('Count Unique Values')],\n        ['List Unique Values', t('List Unique Values')],\n        ['Sum', t('Sum')],\n        ['Average', t('Average')],\n        ['Median', t('Median')],\n        ['Sample Variance', t('Sample Variance')],\n        ['Sample Standard Deviation', t('Sample Standard Deviation')],\n        ['Minimum', t('Minimum')],\n        ['Maximum', t('Maximum')],\n        ['First', t('First')],\n        ['Last', t('Last')],\n        ['Sum as Fraction of Total', t('Sum as Fraction of Total')],\n        ['Sum as Fraction of Rows', t('Sum as Fraction of Rows')],\n        ['Sum as Fraction of Columns', t('Sum as Fraction of Columns')],\n        ['Count as Fraction of Total', t('Count as Fraction of Total')],\n        ['Count as Fraction of Rows', t('Count as Fraction of Rows')],\n        [\n        'Count as Fraction of Columns',\n        t('Count as Fraction of Columns')]],\n\n\n        default: 'Sum',\n        description: t('Aggregate function to apply when pivoting and computing the total rows and columns'),\n        renderTrigger: true\n      }\n    }],\n\n    [\n    {\n      name: 'rowTotals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show rows total'),\n        default: false,\n        renderTrigger: true,\n        description: t('Display row level total')\n      }\n    }],\n\n    [\n    {\n      name: 'rowSubTotals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show rows subtotal'),\n        default: false,\n        renderTrigger: true,\n        description: t('Display row level subtotal')\n      }\n    }],\n\n    [\n    {\n      name: 'colTotals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show columns total'),\n        default: false,\n        renderTrigger: true,\n        description: t('Display column level total')\n      }\n    }],\n\n    [\n    {\n      name: 'colSubTotals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show columns subtotal'),\n        default: false,\n        renderTrigger: true,\n        description: t('Display column level subtotal')\n      }\n    }],\n\n    [\n    {\n      name: 'transposePivot',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Transpose pivot'),\n        default: false,\n        description: t('Swap rows and columns'),\n        renderTrigger: true\n      }\n    }],\n\n    [\n    {\n      name: 'combineMetric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Combine metrics'),\n        default: false,\n        description: t('Display metrics side by side within each column, as ' +\n        'opposed to each column being displayed side by side for each metric.'),\n        renderTrigger: true\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'valueFormat',\n      config: {\n        ...sharedControls.y_axis_format,\n        label: t('Value format')\n      }\n    }],\n\n    ['currency_format'],\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        default: SMART_DATE_ID,\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: t('D3 time format for datetime columns')\n      }\n    }],\n\n    [\n    {\n      name: 'rowOrder',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort rows by'),\n        default: 'key_a_to_z',\n        choices: [\n        // [value, label]\n        ['key_a_to_z', t('key a-z')],\n        ['key_z_to_a', t('key z-a')],\n        ['value_a_to_z', t('value ascending')],\n        ['value_z_to_a', t('value descending')]],\n\n        renderTrigger: true,\n        description: _jsxs(_Fragment, { children: [\n          _jsx(\"div\", { children: t('Change order of rows.') }),\n          _jsx(\"div\", { children: t('Available sorting modes:') }),\n          _jsxs(\"ul\", { children: [\n            _jsx(\"li\", { children: t('By key: use row names as sorting key') }),\n            _jsx(\"li\", { children: t('By value: use metric values as sorting key') })] }\n          )] }\n        )\n      }\n    }],\n\n    [\n    {\n      name: 'colOrder',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort columns by'),\n        default: 'key_a_to_z',\n        choices: [\n        // [value, label]\n        ['key_a_to_z', t('key a-z')],\n        ['key_z_to_a', t('key z-a')],\n        ['value_a_to_z', t('value ascending')],\n        ['value_z_to_a', t('value descending')]],\n\n        renderTrigger: true,\n        description: _jsxs(_Fragment, { children: [\n          _jsx(\"div\", { children: t('Change order of columns.') }),\n          _jsx(\"div\", { children: t('Available sorting modes:') }),\n          _jsxs(\"ul\", { children: [\n            _jsx(\"li\", { children: t('By key: use column names as sorting key') }),\n            _jsx(\"li\", { children: t('By value: use metric values as sorting key') })] }\n          )] }\n        )\n      }\n    }],\n\n    [\n    {\n      name: 'rowSubtotalPosition',\n      config: {\n        type: 'SelectControl',\n        label: t('Rows subtotal position'),\n        default: false,\n        choices: [\n        // [value, label]\n        [true, t('Top')],\n        [false, t('Bottom')]],\n\n        renderTrigger: true,\n        description: t('Position of row level subtotal')\n      }\n    }],\n\n    [\n    {\n      name: 'colSubtotalPosition',\n      config: {\n        type: 'SelectControl',\n        label: t('Columns subtotal position'),\n        default: false,\n        choices: [\n        // [value, label]\n        [true, t('Left')],\n        [false, t('Right')]],\n\n        renderTrigger: true,\n        description: t('Position of column level subtotal')\n      }\n    }],\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Conditional formatting'),\n        description: t('Apply conditional color formatting to metrics'),\n        mapStateToProps(explore, _, chart) {var _explore$controls$met, _explore$controls, _explore$controls$met2, _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3;\n          const values = (_explore$controls$met = explore == null ? void 0 : (_explore$controls = explore.controls) == null ? void 0 : (_explore$controls$met2 = _explore$controls.metrics) == null ? void 0 : _explore$controls$met2.value) != null ? _explore$controls$met :\n          [];\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const chartStatus = chart == null ? void 0 : chart.chartStatus;\n          const metricColumn = values.map((value) => {\n            if (typeof value === 'string') {\n              return {\n                value,\n                label: Array.isArray(verboseMap) ?\n                value :\n                verboseMap[value]\n              };\n            }\n            return { value: value.label, label: value.label };\n          });\n          return {\n            removeIrrelevantConditions: chartStatus === 'success',\n            columnOptions: metricColumn,\n            verboseMap\n          };\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'allow_render_html',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Render columns in HTML format'),\n        renderTrigger: true,\n        default: true,\n        description: t('Renders table cells as HTML when applicable. For example, HTML <a> tags will be rendered as hyperlinks.')\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => {\n    const groupbyColumns = getStandardizedControls().controls.columns.filter((col) => !ensureIsArray(formData.groupbyRows).includes(col));\n    getStandardizedControls().controls.columns =\n    getStandardizedControls().controls.columns.filter((col) => !groupbyColumns.includes(col));\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      groupbyColumns\n    };\n  }\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}