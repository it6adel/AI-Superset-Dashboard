{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport { ensureIsArray, FeatureFlag, isFeatureEnabled, logging, styled, t } from '@superset-ui/core';\nimport { PLACEHOLDER_DATASOURCE } from 'src/dashboard/constants';\nimport Loading from 'src/components/Loading';\nimport { EmptyState } from 'src/components/EmptyState';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { Logger, LOG_ACTIONS_RENDER_CHART } from 'src/logger/LogUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { isCurrentUserBot } from 'src/utils/isBot';\nimport { ChartSource } from 'src/types/ChartSource';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport ChartRenderer from './ChartRenderer';\nimport { ChartErrorMessage } from './ChartErrorMessage';\nimport { getChartRequiredFieldsMissingMessage } from '../../utils/getChartRequiredFieldsMissingMessage';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst BLANK = {};\nconst NONEXISTENT_DATASET = t('The dataset associated with this chart no longer exists');\nconst defaultProps = {\n  addFilter: () => BLANK,\n  onFilterMenuOpen: () => BLANK,\n  onFilterMenuClose: () => BLANK,\n  initialValues: BLANK,\n  setControlValue: () => BLANK,\n  triggerRender: false,\n  dashboardId: undefined,\n  chartStackTrace: undefined,\n  force: false,\n  isInView: true\n};\nconst Styles = styled.div`\n  min-height: ${(p) => p.height}px;\n  position: relative;\n\n  .chart-tooltip {\n    opacity: 0.75;\n    font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  }\n\n  .slice_container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    height: ${(p) => p.height}px;\n\n    .pivot_table tbody tr {\n      font-feature-settings: 'tnum' 1;\n    }\n\n    .alert {\n      margin: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\nconst LoadingDiv = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 80%;\n  transform: translate(-50%, -50%);\n`;\nconst MessageSpan = styled.span`\n  display: block;\n  text-align: center;\n  margin: ${({ theme }) => theme.gridUnit * 4}px auto;\n  width: fit-content;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nclass Chart extends PureComponent {\n\n\n  constructor(props) {\n    super(props);this.renderStartTime = void 0;\n    this.handleRenderContainerFailure =\n    this.handleRenderContainerFailure.bind(this);\n  }\n  componentDidMount() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n  componentDidUpdate() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n  runQuery() {\n    // Create chart with POST request\n    this.props.actions.postChartFormData(this.props.formData, Boolean(this.props.force || getUrlParam(URL_PARAMS.force)), // allow override via url params force=true\n    this.props.timeout, this.props.chartId, this.props.dashboardId, this.props.ownState);\n  }\n  handleRenderContainerFailure(error, info) {\n    const { actions, chartId } = this.props;\n    logging.warn(error);\n    actions.chartRenderingFailed(error.toString(), chartId, info ? info.componentStack : null);\n    actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n      slice_id: chartId,\n      has_err: true,\n      error_details: error.toString(),\n      start_offset: this.renderStartTime,\n      ts: new Date().getTime(),\n      duration: Logger.getTimestamp() - this.renderStartTime\n    });\n  }\n  renderErrorMessage(queryResponse) {var _queryResponse$errors;\n    const { chartId, chartAlert, chartStackTrace, datasource, dashboardId, height, datasetsStatus } = this.props;\n    const error = queryResponse == null ? void 0 : (_queryResponse$errors = queryResponse.errors) == null ? void 0 : _queryResponse$errors[0];\n    const message = chartAlert || (queryResponse == null ? void 0 : queryResponse.message);\n    // if datasource is still loading, don't render JS errors\n    if (chartAlert !== undefined &&\n    chartAlert !== NONEXISTENT_DATASET &&\n    datasource === PLACEHOLDER_DATASOURCE &&\n    datasetsStatus !== ResourceStatus.Error) {\n      return _jsx(Styles, { \"data-ui-anchor\": \"chart\", className: \"chart-container\", height: height, children:\n        _jsx(Loading, {}) }, chartId\n      );\n    }\n    return _jsx(ChartErrorMessage, { chartId: chartId, error: error, subtitle: message, link: queryResponse ? queryResponse.link : undefined, source: dashboardId ? ChartSource.Dashboard : ChartSource.Explore, stackTrace: chartStackTrace }, chartId);\n  }\n  renderSpinner(databaseName) {\n    const message = databaseName ?\n    t('Waiting on %s', databaseName) :\n    t('Waiting on database...');\n    return _jsxs(LoadingDiv, { children: [\n      _jsx(Loading, { position: \"inline-centered\" }),\n      _jsx(MessageSpan, { children: message })] }\n    );\n  }\n  renderChartContainer() {\n    return _jsx(\"div\", { className: \"slice_container\", children:\n      this.props.isInView ||\n      !isFeatureEnabled(FeatureFlag.DashboardVirtualization) ||\n      isCurrentUserBot() ? _jsx(ChartRenderer, { ...this.props, source: this.props.dashboardId ? 'dashboard' : 'explore' }) : _jsx(Loading, {}) }\n    );\n  }\n  render() {var _datasource$database;\n    const { height, chartAlert, chartStatus, datasource, errorMessage, chartIsStale, queriesResponse = [], width } = this.props;\n    const databaseName = datasource == null ? void 0 : (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.name;\n    const isLoading = chartStatus === 'loading';\n    if (chartStatus === 'failed') {\n      return queriesResponse.map((item) => this.renderErrorMessage(item));\n    }\n    if (errorMessage && ensureIsArray(queriesResponse).length === 0) {\n      return _jsx(EmptyState, { size: \"large\", title: t('Add required control values to preview chart'), description: getChartRequiredFieldsMissingMessage(true), image: \"chart.svg\" });\n    }\n    if (!isLoading &&\n    !chartAlert &&\n    !errorMessage &&\n    chartIsStale &&\n    ensureIsArray(queriesResponse).length === 0) {\n      return _jsx(EmptyState, { size: \"large\", title: t('Your chart is ready to go!'), description: _jsxs(\"span\", { children: [\n          t('Click on \"Create chart\" button in the control panel on the left to preview a visualization or'), ' ',\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: this.props.onQuery, children:\n            t('click here') }\n          ), \".\"] }\n\n        ), image: \"chart.svg\" });\n    }\n    return _jsx(ErrorBoundary, { onError: this.handleRenderContainerFailure, showMessage: false, children:\n      _jsx(Styles, { \"data-ui-anchor\": \"chart\", className: \"chart-container\", height: height, width: width, children:\n        isLoading ?\n        this.renderSpinner(databaseName) :\n        this.renderChartContainer() }\n      ) }\n    );\n  }\n}Chart.defaultProps = defaultProps;\nexport default Chart;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}