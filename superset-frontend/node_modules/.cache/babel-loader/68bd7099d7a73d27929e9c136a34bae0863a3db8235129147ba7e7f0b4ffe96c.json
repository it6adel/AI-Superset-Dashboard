{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { format as d3Format } from 'd3-format';\nimport NumberFormatter from '../NumberFormatter';\nimport NumberFormats from '../NumberFormats';\nconst siFormatter = d3Format(`.3~s`);\nconst float2PointFormatter = d3Format(`.2~f`);\nconst float4PointFormatter = d3Format(`.4~f`);\nfunction formatValue(value) {\n  if (value === 0) {\n    return '0';\n  }\n  const absoluteValue = Math.abs(value);\n  if (absoluteValue >= 1000) {\n    // Normal human being are more familiar\n    // with billion (B) that giga (G)\n    return siFormatter(value).replace('G', 'B');\n  }\n  if (absoluteValue >= 1) {\n    return float2PointFormatter(value);\n  }\n  if (absoluteValue >= 0.001) {\n    return float4PointFormatter(value);\n  }\n  if (absoluteValue > 0.000001) {\n    return `${siFormatter(value * 1000000)}Âµ`;\n  }\n  return siFormatter(value);\n}\nexport default function createSmartNumberFormatter(config = {}) {\n  const { description, signed = false, id, label } = config;\n  const getSign = signed ? (value) => value > 0 ? '+' : '' : () => '';\n  return new NumberFormatter({\n    description,\n    formatFunc: (value) => `${getSign(value)}${formatValue(value)}`,\n    id: id || signed ?\n    NumberFormats.SMART_NUMBER_SIGNED :\n    NumberFormats.SMART_NUMBER,\n    label: label != null ? label : 'Adaptive formatter'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}