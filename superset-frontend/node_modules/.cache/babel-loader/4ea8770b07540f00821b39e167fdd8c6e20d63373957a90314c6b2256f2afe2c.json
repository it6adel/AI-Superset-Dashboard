{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilterConfiguration } from 'src/dashboard/actions/nativeFilters';\nimport FiltersConfigModal from 'src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const useFilterConfigModal = ({ createNewOnOpen = false, dashboardId, initialFilterId }) => {\n  const dispatch = useDispatch();\n  const [isFilterConfigModalOpen, setIsFilterConfigModalOpen] = useState(false);\n  const openFilterConfigModal = useCallback(() => {\n    setIsFilterConfigModalOpen(true);\n  }, []);\n  const closeFilterConfigModal = useCallback(() => {\n    setIsFilterConfigModalOpen(false);\n  }, []);\n  const handleFilterSave = useCallback(async (filterChanges) => {\n    dispatch(await setFilterConfiguration(filterChanges));\n    closeFilterConfigModal();\n  }, [dispatch, closeFilterConfigModal]);\n  const FilterConfigModalComponent = isFilterConfigModalOpen ? _jsx(FiltersConfigModal, { isOpen: isFilterConfigModalOpen, onSave: handleFilterSave, onCancel: closeFilterConfigModal, createNewOnOpen: createNewOnOpen, initialFilterId: initialFilterId }, `filters-for-${dashboardId}`) : null;\n  return {\n    isFilterConfigModalOpen,\n    openFilterConfigModal,\n    closeFilterConfigModal,\n    handleFilterSave,\n    FilterConfigModalComponent\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}