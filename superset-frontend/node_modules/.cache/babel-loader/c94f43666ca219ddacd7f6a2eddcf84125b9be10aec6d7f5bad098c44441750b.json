{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  isDefined,\n  t,\n  styled,\n  ensureIsArray,\n  DatasourceType } from\n'@superset-ui/core';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { noOp } from 'src/utils/common';\nimport {\n  AGGREGATES_OPTIONS,\n  POPOVER_INITIAL_HEIGHT,\n  POPOVER_INITIAL_WIDTH } from\n'src/explore/constants';\nimport columnType from 'src/explore/components/controls/MetricControl/columnType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric, {\n  EXPRESSION_TYPES } from\n'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  StyledMetricOption,\n  StyledColumnOption } from\n'src/explore/components/optionRenderers';\nimport { getColumnKeywords } from 'src/explore/controlUtils/getColumnKeywords';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  getCurrentTab: PropTypes.func,\n  getCurrentLabel: PropTypes.func,\n  adhocMetric: PropTypes.instanceOf(AdhocMetric).isRequired,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  savedMetric: savedMetricType,\n  datasource: PropTypes.object,\n  isNewMetric: PropTypes.bool,\n  isLabelModified: PropTypes.bool\n};\n\nconst defaultProps = {\n  columns: [],\n  getCurrentTab: noOp,\n  isNewMetric: false\n};\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\nexport const SAVED_TAB_KEY = 'SAVED';\n\nexport default class AdhocMetricEditPopover extends PureComponent {\n\n\n\n  constructor(props) {\n    super(props); // \"Saved\" is a default tab unless there are no saved metrics for dataset\n    this.defaultActiveTabKey = this.getDefaultTab();this.onSave = this.onSave.bind(this);\n    this.onResetStateAndClose = this.onResetStateAndClose.bind(this);\n    this.onColumnChange = this.onColumnChange.bind(this);\n    this.onAggregateChange = this.onAggregateChange.bind(this);\n    this.onSavedMetricChange = this.onSavedMetricChange.bind(this);\n    this.onSqlExpressionChange = this.onSqlExpressionChange.bind(this);\n    this.onDragDown = this.onDragDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.handleAceEditorRef = this.handleAceEditorRef.bind(this);\n    this.refreshAceEditor = this.refreshAceEditor.bind(this);\n    this.getDefaultTab = this.getDefaultTab.bind(this);\n\n    this.state = {\n      adhocMetric: this.props.adhocMetric,\n      savedMetric: this.props.savedMetric,\n      width: POPOVER_INITIAL_WIDTH,\n      height: POPOVER_INITIAL_HEIGHT\n    };\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  componentDidMount() {\n    this.props.getCurrentTab(this.defaultActiveTabKey);\n  }\n\n  componentDidUpdate(prevProps, prevState) {var _prevState$adhocMetri, _this$state$adhocMetr, _prevState$adhocMetri2, _this$state$adhocMetr2, _prevState$adhocMetri3, _prevState$adhocMetri4, _this$state$adhocMetr3, _this$state$adhocMetr4, _prevState$savedMetri, _this$state$savedMetr;\n    if (\n    ((_prevState$adhocMetri = prevState.adhocMetric) == null ? void 0 : _prevState$adhocMetri.sqlExpression) !== ((_this$state$adhocMetr =\n    this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr.sqlExpression) ||\n    ((_prevState$adhocMetri2 = prevState.adhocMetric) == null ? void 0 : _prevState$adhocMetri2.aggregate) !== ((_this$state$adhocMetr2 = this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr2.aggregate) ||\n    ((_prevState$adhocMetri3 = prevState.adhocMetric) == null ? void 0 : (_prevState$adhocMetri4 = _prevState$adhocMetri3.column) == null ? void 0 : _prevState$adhocMetri4.column_name) !== ((_this$state$adhocMetr3 =\n    this.state.adhocMetric) == null ? void 0 : (_this$state$adhocMetr4 = _this$state$adhocMetr3.column) == null ? void 0 : _this$state$adhocMetr4.column_name) ||\n    ((_prevState$savedMetri = prevState.savedMetric) == null ? void 0 : _prevState$savedMetri.metric_name) !== ((_this$state$savedMetr = this.state.savedMetric) == null ? void 0 : _this$state$savedMetr.metric_name))\n    {var _this$state$savedMetr2, _this$state$savedMetr3, _this$state$adhocMetr5;\n      this.props.getCurrentLabel({\n        savedMetricLabel:\n        ((_this$state$savedMetr2 = this.state.savedMetric) == null ? void 0 : _this$state$savedMetr2.verbose_name) || ((_this$state$savedMetr3 =\n        this.state.savedMetric) == null ? void 0 : _this$state$savedMetr3.metric_name),\n        adhocMetricLabel: (_this$state$adhocMetr5 = this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr5.getDefaultLabel()\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.onMouseUp);\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  getDefaultTab() {\n    const { adhocMetric, savedMetric, savedMetricsOptions, isNewMetric } =\n    this.props;\n    if (isDefined(adhocMetric.column) || isDefined(adhocMetric.sqlExpression)) {\n      return adhocMetric.expressionType;\n    }\n    if (\n    (isNewMetric || savedMetric.metric_name) &&\n    Array.isArray(savedMetricsOptions) &&\n    savedMetricsOptions.length > 0)\n    {\n      return SAVED_TAB_KEY;\n    }\n    return adhocMetric.expressionType;\n  }\n\n  onSave() {var _this$props$savedMetr;\n    const { adhocMetric, savedMetric } = this.state;\n\n    const metric = savedMetric != null && savedMetric.metric_name ? savedMetric : adhocMetric;\n    const oldMetric = (_this$props$savedMetr = this.props.savedMetric) != null && _this$props$savedMetr.metric_name ?\n    this.props.savedMetric :\n    this.props.adhocMetric;\n    this.props.onChange(\n      {\n        ...metric\n      },\n      oldMetric\n    );\n    this.props.onClose();\n  }\n\n  onResetStateAndClose() {\n    this.setState(\n      {\n        adhocMetric: this.props.adhocMetric,\n        savedMetric: this.props.savedMetric\n      },\n      this.props.onClose\n    );\n  }\n\n  onColumnChange(columnName) {\n    const column = this.props.columns.find(\n      (column) => column.column_name === columnName\n    );\n    this.setState((prevState) => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column,\n        expressionType: EXPRESSION_TYPES.SIMPLE\n      }),\n      savedMetric: undefined\n    }));\n  }\n\n  onAggregateChange(aggregate) {\n    // we construct this object explicitly to overwrite the value in the case aggregate is null\n    this.setState((prevState) => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        aggregate,\n        expressionType: EXPRESSION_TYPES.SIMPLE\n      }),\n      savedMetric: undefined\n    }));\n  }\n\n  onSavedMetricChange(savedMetricName) {\n    const savedMetric = this.props.savedMetricsOptions.find(\n      (metric) => metric.metric_name === savedMetricName\n    );\n    this.setState((prevState) => ({\n      savedMetric,\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column: undefined,\n        aggregate: undefined,\n        sqlExpression: undefined,\n        expressionType: EXPRESSION_TYPES.SIMPLE\n      })\n    }));\n  }\n\n  onSqlExpressionChange(sqlExpression) {\n    this.setState((prevState) => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        sqlExpression,\n        expressionType: EXPRESSION_TYPES.SQL\n      }),\n      savedMetric: undefined\n    }));\n  }\n\n  onDragDown(e) {\n    this.dragStartX = e.clientX;\n    this.dragStartY = e.clientY;\n    this.dragStartWidth = this.state.width;\n    this.dragStartHeight = this.state.height;\n    document.addEventListener('mousemove', this.onMouseMove);\n  }\n\n  onMouseMove(e) {\n    this.props.onResize();\n    this.setState({\n      width: Math.max(\n        this.dragStartWidth + (e.clientX - this.dragStartX),\n        POPOVER_INITIAL_WIDTH\n      ),\n      height: Math.max(\n        this.dragStartHeight + (e.clientY - this.dragStartY),\n        POPOVER_INITIAL_HEIGHT\n      )\n    });\n  }\n\n  onMouseUp() {\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onTabChange(tab) {\n    this.refreshAceEditor();\n    this.props.getCurrentTab(tab);\n  }\n\n  handleAceEditorRef(ref) {\n    if (ref) {\n      this.aceEditorRef = ref;\n    }\n  }\n\n  refreshAceEditor() {\n    setTimeout(() => {\n      if (this.aceEditorRef) {var _this$aceEditorRef$ed;\n        (_this$aceEditorRef$ed = this.aceEditorRef.editor) == null ? void 0 : _this$aceEditorRef$ed.resize == null ? void 0 : _this$aceEditorRef$ed.resize();\n      }\n    }, 0);\n  }\n\n  renderColumnOption(option) {\n    const column = { ...option };\n    if (column.metric_name && !column.verbose_name) {\n      column.verbose_name = column.metric_name;\n    }\n    return _jsx(StyledColumnOption, { column: column, showType: true });\n  }\n\n  renderMetricOption(savedMetric) {\n    return _jsx(StyledMetricOption, { metric: savedMetric, showType: true });\n  }\n\n  render() {var _savedMetricsOptions$;\n    const {\n      adhocMetric: propsAdhocMetric,\n      savedMetric: propsSavedMetric,\n      columns,\n      savedMetricsOptions,\n      onChange,\n      onClose,\n      onResize,\n      datasource,\n      isNewMetric,\n      isLabelModified,\n      ...popoverProps\n    } = this.props;\n    const { adhocMetric, savedMetric } = this.state;\n    const keywords = sqlKeywords.concat(getColumnKeywords(columns));\n\n    const columnValue =\n    adhocMetric.column && adhocMetric.column.column_name ||\n    adhocMetric.inferSqlExpressionColumn();\n\n    // autofocus on column if there's no value in column; otherwise autofocus on aggregate\n    const columnSelectProps = {\n      ariaLabel: t('Select column'),\n      placeholder: t('%s column(s)', columns.length),\n      value: columnValue,\n      onChange: this.onColumnChange,\n      allowClear: true,\n      autoFocus: !columnValue\n    };\n\n    const aggregateSelectProps = {\n      ariaLabel: t('Select aggregate options'),\n      placeholder: t('%s aggregates(s)', AGGREGATES_OPTIONS.length),\n      value: adhocMetric.aggregate || adhocMetric.inferSqlExpressionAggregate(),\n      onChange: this.onAggregateChange,\n      allowClear: true,\n      autoFocus: !!columnValue\n    };\n\n    const savedSelectProps = {\n      ariaLabel: t('Select saved metrics'),\n      placeholder: t('%s saved metric(s)', (_savedMetricsOptions$ = savedMetricsOptions == null ? void 0 : savedMetricsOptions.length) != null ? _savedMetricsOptions$ : 0),\n      value: savedMetric == null ? void 0 : savedMetric.metric_name,\n      onChange: this.onSavedMetricChange,\n      allowClear: true,\n      autoFocus: true\n    };\n\n    const stateIsValid = adhocMetric.isValid() || (savedMetric == null ? void 0 : savedMetric.metric_name);\n    const hasUnsavedChanges =\n    isLabelModified ||\n    isNewMetric ||\n    !adhocMetric.equals(propsAdhocMetric) ||\n    !(\n    typeof (savedMetric == null ? void 0 : savedMetric.metric_name) === 'undefined' &&\n    typeof (propsSavedMetric == null ? void 0 : propsSavedMetric.metric_name) === 'undefined') &&\n\n    (savedMetric == null ? void 0 : savedMetric.metric_name) !== (propsSavedMetric == null ? void 0 : propsSavedMetric.metric_name);\n\n    let extra = {};\n    if (datasource != null && datasource.extra) {\n      try {\n        extra = JSON.parse(datasource.extra);\n      } catch {} // eslint-disable-line no-empty\n    }\n\n    return (\n      _jsxs(Form, {\n        layout: \"vertical\",\n        id: \"metrics-edit-popover\", ...\n\n        popoverProps, children: [\n\n        _jsxs(Tabs, {\n          id: \"adhoc-metric-edit-tabs\",\n\n          defaultActiveKey: this.defaultActiveTabKey,\n          className: \"adhoc-metric-edit-tabs\",\n          style: { height: this.state.height, width: this.state.width },\n          onChange: this.onTabChange,\n          allowOverflow: true, children: [\n\n          _jsx(Tabs.TabPane, { tab: t('Saved'), children:\n            ensureIsArray(savedMetricsOptions).length > 0 ?\n            _jsx(FormItem, { label: t('Saved metric'), children:\n              _jsx(StyledSelect, {\n                options: ensureIsArray(savedMetricsOptions).map(\n                  (savedMetric) => ({\n                    value: savedMetric.metric_name,\n                    label: savedMetric.metric_name,\n                    customLabel: this.renderMetricOption(savedMetric),\n                    key: savedMetric.id\n                  })\n                ), ...\n                savedSelectProps }\n              ) }\n            ) :\n            datasource.type === DatasourceType.Table ?\n            _jsx(EmptyState, {\n              image: \"empty.svg\",\n              size: \"small\",\n              title: t('No saved metrics found'),\n              description: t(\n                'Add metrics to dataset in \"Edit datasource\" modal'\n              ) }\n            ) :\n\n            _jsx(EmptyState, {\n              image: \"empty.svg\",\n              size: \"small\",\n              title: t('No saved metrics found'),\n              description:\n              _jsxs(_Fragment, { children: [\n                _jsx(\"span\", {\n                  tabIndex: 0,\n                  role: \"button\",\n                  onClick: () => {\n                    this.props.handleDatasetModal(true);\n                    this.props.onClose();\n                  }, children:\n\n                  t('Create a dataset') }\n                ),\n                t(' to add metrics')] }\n              ) }\n\n            ) }, SAVED_TAB_KEY\n\n          ),\n          _jsxs(Tabs.TabPane, {\n\n            tab:\n            extra.disallow_adhoc_metrics ?\n            _jsx(Tooltip, {\n              title: t(\n                'Simple ad-hoc metrics are not enabled for this dataset'\n              ), children:\n\n              t('Simple') }\n            ) :\n\n            t('Simple'),\n\n\n            disabled: extra.disallow_adhoc_metrics, children: [\n\n            _jsx(FormItem, { label: t('column'), children:\n              _jsx(Select, {\n                options: columns.map((column) => ({\n                  value: column.column_name,\n                  label: column.verbose_name || column.column_name,\n                  key: column.id,\n                  customLabel: this.renderColumnOption(column)\n                })), ...\n                columnSelectProps }\n              ) }\n            ),\n            _jsx(FormItem, { label: t('aggregate'), children:\n              _jsx(Select, {\n                options: AGGREGATES_OPTIONS.map((option) => ({\n                  value: option,\n                  label: option,\n                  key: option\n                })), ...\n                aggregateSelectProps }\n              ) }\n            )] }, EXPRESSION_TYPES.SIMPLE\n          ),\n          _jsx(Tabs.TabPane, {\n\n            tab:\n            extra.disallow_adhoc_metrics ?\n            _jsx(Tooltip, {\n              title: t(\n                'Custom SQL ad-hoc metrics are not enabled for this dataset'\n              ), children:\n\n              t('Custom SQL') }\n            ) :\n\n            t('Custom SQL'),\n\n\n\n            disabled: extra.disallow_adhoc_metrics, children:\n\n            _jsx(SQLEditor, {\n\n              showLoadingForImport: true,\n              ref: this.handleAceEditorRef,\n              keywords: keywords,\n              height: `${this.state.height - 80}px`,\n              onChange: this.onSqlExpressionChange,\n              width: \"100%\",\n              showGutter: false,\n              value:\n              adhocMetric.sqlExpression ||\n              adhocMetric.translateToSql({ transformCountDistinct: true }),\n\n              editorProps: { $blockScrolling: true },\n              enableLiveAutocompletion: true,\n              className: \"filter-sql-editor\",\n              wrapEnabled: true }\n            ) }, EXPRESSION_TYPES.SQL\n          )] }\n        ),\n        _jsxs(\"div\", { children: [\n          _jsx(Button, {\n            buttonSize: \"small\",\n            onClick: this.onResetStateAndClose,\n\n            cta: true, children:\n\n            t('Close') }\n          ),\n          _jsx(Button, {\n            disabled: !stateIsValid || !hasUnsavedChanges,\n            buttonStyle: \"primary\",\n            buttonSize: \"small\",\n\n            onClick: this.onSave,\n            cta: true, children:\n\n            t('Save') }\n          ),\n\n\n          _jsx(\"i\", {\n            role: \"button\",\n            \"aria-label\": \"Resize\",\n            tabIndex: 0,\n            onMouseDown: this.onDragDown,\n            className: \"fa fa-expand edit-popover-resize text-muted\" }\n          )] }\n        )] }\n      ));\n\n  }\n}\nAdhocMetricEditPopover.propTypes = propTypes;\nAdhocMetricEditPopover.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}