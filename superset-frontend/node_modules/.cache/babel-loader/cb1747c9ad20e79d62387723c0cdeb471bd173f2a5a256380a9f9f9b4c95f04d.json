{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { Select } from 'src/components';\nimport { CollapsibleControl } from './CollapsibleControl';\nimport { INPUT_WIDTH } from './constants';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst MainPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst AddFilter = styled.div`\n  ${({ theme }) => `\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    cursor: pointer;\n    color: ${theme.colors.primary.base};\n    &:hover {\n      color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nconst DeleteFilter = styled(Icons.DeleteOutlined)`\n  ${({ theme }) => `\n    cursor: pointer;\n    margin-left: ${theme.gridUnit * 2}px;\n    color: ${theme.colors.grayscale.base};\n    &:hover {\n      color: ${theme.colors.grayscale.dark1};\n    }\n  `}\n`;\nconst RowPanel = styled.div`\n  ${({ theme }) => `\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.gridUnit}px;\n\n    & > div {\n      width: ${INPUT_WIDTH}px;\n    }\n  `}\n`;\nconst Label = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  margin-bottom: ${({ theme }) => theme.gridUnit}px;\n`;\nconst Row = ({ availableFilters, selection, onChange, onDelete }) => {\n  let value = availableFilters.find((e) => e.value === selection);\n  let options = availableFilters;\n  if (!value) {\n    value = { label: t('(deleted or invalid type)'), value: selection };\n    options = [value, ...options];\n  }\n  return _jsxs(RowPanel, { children: [\n    _jsx(Select, { ariaLabel: t('Limit type'), labelInValue: true, options: options, onChange: (option) => onChange(selection, option.value), value: value }),\n    _jsx(DeleteFilter, { iconSize: \"xl\", onClick: () => onDelete(selection) })] }\n  );\n};\nconst List = ({ availableFilters = [], dependencies = [], onDependenciesChange }) => {\n  const [rows, setRows] = useState(dependencies);\n  const updateRows = (newRows) => {\n    setRows(newRows);\n    onDependenciesChange(newRows);\n  };\n  const onAdd = () => {\n    const filter = availableFilters.find((availableFilter) => !rows.includes(availableFilter.value));\n    if (filter) {\n      const newRows = [...rows];\n      newRows.push(filter.value);\n      updateRows(newRows);\n    }\n  };\n  const onChange = (id, value) => {\n    const indexOf = rows.findIndex((row) => row === id);\n    const newRows = [...rows];\n    newRows[indexOf] = value;\n    updateRows(newRows);\n  };\n  const onDelete = (id) => {\n    const newRows = [...rows];\n    newRows.splice(rows.indexOf(id), 1);\n    updateRows(newRows);\n  };\n  if (availableFilters.length === 0) {\n    return _jsx(\"span\", { children: t('No available filters.') });\n  }\n  return _jsxs(_Fragment, { children: [\n    rows.map((row) => _jsx(Row, { selection: row, availableFilters: availableFilters.filter((e) => e.value === row || !rows.includes(e.value)), onChange: onChange, onDelete: onDelete }, row)),\n    availableFilters.length > rows.length && _jsxs(AddFilter, { role: \"button\", onClick: onAdd, children: [\n      _jsx(Icons.PlusOutlined, { iconSize: \"xs\" }),\n      t('Add filter')] }\n    )] }\n  );\n};\nconst DependencyList = ({ availableFilters = [], dependencies = [], onDependenciesChange, getDependencySuggestion, children }) => {\n  const hasAvailableFilters = availableFilters.length > 0;\n  const hasDependencies = dependencies.length > 0;\n  const onCheckChanged = (value) => {\n    const newDependencies = [];\n    if (value && !hasDependencies && hasAvailableFilters) {\n      newDependencies.push(getDependencySuggestion());\n    }\n    onDependenciesChange(newDependencies);\n  };\n  return _jsx(MainPanel, { children:\n    _jsxs(CollapsibleControl, { title: t('Values are dependent on other filters'), initialValue: hasDependencies, onChange: onCheckChanged, tooltip: t('Values selected in other filters will affect the filter options to only show relevant values'), children: [\n      hasDependencies && _jsx(Label, { children: t('Values dependent on') }),\n      _jsx(List, { availableFilters: availableFilters, dependencies: dependencies, onDependenciesChange: onDependenciesChange, getDependencySuggestion: getDependencySuggestion }),\n      children] }\n    ) }\n  );\n};\nexport default DependencyList;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}