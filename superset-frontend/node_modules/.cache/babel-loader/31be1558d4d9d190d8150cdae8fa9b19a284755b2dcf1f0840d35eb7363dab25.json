{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport rison from 'rison';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { addDangerToast, toastActions } from 'src/components/MessageToasts/actions';\nexport const UPDATE_FORM_DATA_BY_DATASOURCE = 'UPDATE_FORM_DATA_BY_DATASOURCE';\nexport function updateFormDataByDatasource(prevDatasource, newDatasource) {\n  return {\n    type: UPDATE_FORM_DATA_BY_DATASOURCE,\n    prevDatasource,\n    newDatasource\n  };\n}\nexport const POST_DATASOURCE_STARTED = 'POST_DATASOURCE_STARTED';\nexport const FETCH_DATASOURCE_SUCCEEDED = 'FETCH_DATASOURCE_SUCCEEDED';\nexport function fetchDatasourceSucceeded() {\n  return { type: FETCH_DATASOURCE_SUCCEEDED };\n}\nexport const FETCH_DATASOURCES_STARTED = 'FETCH_DATASOURCES_STARTED';\nexport function fetchDatasourcesStarted() {\n  return { type: FETCH_DATASOURCES_STARTED };\n}\nexport const FETCH_DATASOURCES_SUCCEEDED = 'FETCH_DATASOURCES_SUCCEEDED';\nexport function fetchDatasourcesSucceeded() {\n  return { type: FETCH_DATASOURCES_SUCCEEDED };\n}\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\nexport const FETCH_FAVE_STAR = 'FETCH_FAVE_STAR';\nexport function fetchFaveStar(sliceId) {\n  return function (dispatch) {\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/favorite_status/?q=${rison.encode([sliceId])}`\n    }).then(({ json }) => {var _json$result, _json$result$;\n      dispatch(toggleFaveStar(!!(json != null && (_json$result = json.result) != null && (_json$result$ = _json$result[0]) != null && _json$result$.value)));\n    });\n  };\n}\nexport const SAVE_FAVE_STAR = 'SAVE_FAVE_STAR';\nexport function saveFaveStar(sliceId, isStarred) {\n  return function (dispatch) {\n    const endpoint = `/api/v1/chart/${sliceId}/favorites/`;\n    const apiCall = isStarred ?\n    SupersetClient.delete({\n      endpoint\n    }) :\n    SupersetClient.post({ endpoint });\n    apiCall.\n    then(() => dispatch(toggleFaveStar(!isStarred))).\n    catch(() => {\n      dispatch(addDangerToast(t('An error occurred while starring this chart')));\n    });\n  };\n}\nexport const SET_FIELD_VALUE = 'SET_FIELD_VALUE';\nexport function setControlValue(controlName, value, validationErrors) {\n  return { type: SET_FIELD_VALUE, controlName, value, validationErrors };\n}\nexport const SET_EXPLORE_CONTROLS = 'UPDATE_EXPLORE_CONTROLS';\nexport function setExploreControls(formData) {\n  return { type: SET_EXPLORE_CONTROLS, formData };\n}\nexport const SET_FORM_DATA = 'UPDATE_FORM_DATA';\nexport function setFormData(formData) {\n  return { type: SET_FORM_DATA, formData };\n}\nexport const UPDATE_CHART_TITLE = 'UPDATE_CHART_TITLE';\nexport function updateChartTitle(sliceName) {\n  return { type: UPDATE_CHART_TITLE, sliceName };\n}\nexport const SET_SAVE_ACTION = 'SET_SAVE_ACTION';\nexport function setSaveAction(saveAction) {\n  return { type: SET_SAVE_ACTION, saveAction };\n}\nexport const CREATE_NEW_SLICE = 'CREATE_NEW_SLICE';\nexport function createNewSlice(can_add, can_download, can_overwrite, slice, form_data) {\n  return {\n    type: CREATE_NEW_SLICE,\n    can_add,\n    can_download,\n    can_overwrite,\n    slice,\n    form_data\n  };\n}\nexport const SLICE_UPDATED = 'SLICE_UPDATED';\nexport function sliceUpdated(slice) {\n  return { type: SLICE_UPDATED, slice };\n}\nexport const SET_FORCE_QUERY = 'SET_FORCE_QUERY';\nexport function setForceQuery(force) {\n  return {\n    type: SET_FORCE_QUERY,\n    force\n  };\n}\nexport const SET_STASH_FORM_DATA = 'SET_STASH_FORM_DATA';\nexport function setStashFormData(isHidden, fieldNames) {\n  return {\n    type: SET_STASH_FORM_DATA,\n    isHidden,\n    fieldNames\n  };\n}\nexport const START_METADATA_LOADING = 'START_METADATA_LOADING';\nexport function startMetaDataLoading() {\n  return { type: START_METADATA_LOADING };\n}\nexport const STOP_METADATA_LOADING = 'STOP_METADATA_LOADING';\nexport function stopMetaDataLoading() {\n  return { type: STOP_METADATA_LOADING };\n}\nexport const SYNC_DATASOURCE_METADATA = 'SYNC_DATASOURCE_METADATA';\nexport function syncDatasourceMetadata(datasource) {\n  return { type: SYNC_DATASOURCE_METADATA, datasource };\n}\nexport const exploreActions = {\n  ...toastActions,\n  fetchDatasourcesStarted,\n  fetchDatasourcesSucceeded,\n  toggleFaveStar,\n  fetchFaveStar,\n  saveFaveStar,\n  setControlValue,\n  setExploreControls,\n  setStashFormData,\n  updateChartTitle,\n  createNewSlice,\n  sliceUpdated,\n  setForceQuery,\n  syncDatasourceMetadata\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}