{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/jsx-sort-default-props */\nimport { PureComponent } from 'react';\nimport { t } from '@superset-ui/core';\nimport { createSelector } from 'reselect';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nimport ChartProps from '../models/ChartProps';\nimport createLoadableRenderer from './createLoadableRenderer';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction IDENTITY(x) {\n  return x;\n}\nconst EMPTY = () => null;\nconst defaultProps = {\n  id: '',\n  className: '',\n  preTransformProps: IDENTITY,\n  overrideTransformProps: undefined,\n  postTransformProps: IDENTITY,\n  onRenderSuccess() {},\n  onRenderFailure() {}\n};\nconst BLANK_CHART_PROPS = new ChartProps();\nexport default class SuperChartCore extends PureComponent {constructor(...args) {super(...args);\n    /**\n     * The HTML element that wraps all chart content\n     */this.\n    container = void 0;\n    /**\n     * memoized function so it will not recompute\n     * and return previous value\n     * unless one of\n     * - preTransformProps\n     * - transformProps\n     * - postTransformProps\n     * - chartProps\n     * is changed.\n     */this.\n    processChartProps = createSelector([\n    (input) => input.chartProps,\n    (input) => input.preTransformProps,\n    (input) => input.transformProps,\n    (input) => input.postTransformProps],\n    (chartProps, pre = IDENTITY, transform = IDENTITY, post = IDENTITY) => post(transform(pre(chartProps))));\n    /**\n     * memoized function so it will not recompute\n     * and return previous value\n     * unless one of\n     * - chartType\n     * - overrideTransformProps\n     * is changed.\n     */this.\n    createLoadableRenderer = createSelector([\n    (input) => input.chartType,\n    (input) => input.overrideTransformProps],\n    (chartType, overrideTransformProps) => {\n      if (chartType) {\n        const Renderer = createLoadableRenderer({\n          loader: {\n            Chart: () => getChartComponentRegistry().getAsPromise(chartType),\n            transformProps: overrideTransformProps ?\n            () => Promise.resolve(overrideTransformProps) :\n            () => getChartTransformPropsRegistry().getAsPromise(chartType)\n          },\n          loading: (loadingProps) => this.renderLoading(loadingProps, chartType),\n          render: this.renderChart\n        });\n        // Trigger preloading.\n        Renderer.preload();\n        return Renderer;\n      }\n      return EMPTY;\n    });this.\n\n    renderChart = (loaded, props) => {\n      const { Chart, transformProps } = loaded;\n      const { chartProps, preTransformProps, postTransformProps } = props;\n      return _jsx(Chart, { ...this.processChartProps({\n          chartProps,\n          preTransformProps,\n          transformProps,\n          postTransformProps\n        }) });\n    };this.\n    renderLoading = (loadingProps, chartType) => {\n      const { error } = loadingProps;\n      if (error) {\n        return _jsxs(\"div\", { className: \"alert alert-warning\", role: \"alert\", children: [\n          _jsx(\"strong\", { children: t('ERROR') }), \"\\xA0\",\n          _jsxs(\"code\", { children: [\"chartType=\\\"\", chartType, \"\\\"\"] }), \" \\u2014\",\n          error.toString()] }\n        );\n      }\n      return null;\n    };this.\n    setRef = (container) => {\n      this.container = container;\n    };}\n  render() {\n    const { id, className, preTransformProps, postTransformProps, chartProps = BLANK_CHART_PROPS, onRenderSuccess, onRenderFailure } = this.props;\n    // Create LoadableRenderer and start preloading\n    // the lazy-loaded Chart components\n    const Renderer = this.createLoadableRenderer(this.props);\n    // Do not render if chartProps is set to null.\n    // but the pre-loading has been started in this.createLoadableRenderer\n    // to prepare for rendering once chartProps becomes available.\n    if (chartProps === null) {\n      return null;\n    }\n    const containerProps = {};\n    if (id) {\n      containerProps.id = id;\n    }\n    if (className) {\n      containerProps.className = className;\n    }\n    return _jsx(\"div\", { ...containerProps, ref: this.setRef, children:\n      _jsx(Renderer, { preTransformProps: preTransformProps, postTransformProps: postTransformProps, chartProps: chartProps, onRenderSuccess: onRenderSuccess, onRenderFailure: onRenderFailure }) }\n    );\n  }\n}SuperChartCore.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}