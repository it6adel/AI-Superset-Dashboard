{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { isFeatureEnabled, FeatureFlag, styled, t, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport Tabs from 'src/components/Tabs';\nimport { getItem, setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { SamplesPane, TableControlsWrapper, useResultsPane } from './components';\nimport { ResultTypes } from './types';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst SouthPane = styled.div`\n  ${({ theme }) => `\n    position: relative;\n    background-color: ${theme.colors.grayscale.light5};\n    z-index: 5;\n    overflow: hidden;\n\n    .ant-tabs {\n      height: 100%;\n    }\n\n    .ant-tabs-content-holder {\n      height: 100%;\n    }\n\n    .ant-tabs-content {\n      height: 100%;\n    }\n\n    .ant-tabs-tabpane {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n\n      .table-condensed {\n        height: 100%;\n        overflow: auto;\n        margin-bottom: ${theme.gridUnit * 4}px;\n\n        .table {\n          margin-bottom: ${theme.gridUnit * 2}px;\n        }\n      }\n\n      .pagination-container > ul[role='navigation'] {\n        margin-top: 0;\n      }\n    }\n  `}\n`;\nexport const DataTablesPane = ({ queryFormData, datasource, queryForce, onCollapseChange, chartStatus, ownState, errorMessage, actions, canDownload }) => {\n  const theme = useTheme();\n  const [activeTabKey, setActiveTabKey] = useState(ResultTypes.Results);\n  const [isRequest, setIsRequest] = useState({\n    results: false,\n    samples: false\n  });\n  const [panelOpen, setPanelOpen] = useState(isFeatureEnabled(FeatureFlag.DatapanelClosedByDefault) ?\n  false :\n  getItem(LocalStorageKeys.IsDatapanelOpen, false));\n  useEffect(() => {\n    if (!isFeatureEnabled(FeatureFlag.DatapanelClosedByDefault))\n    setItem(LocalStorageKeys.IsDatapanelOpen, panelOpen);\n  }, [panelOpen]);\n  useEffect(() => {\n    if (!panelOpen) {\n      setIsRequest({\n        results: false,\n        samples: false\n      });\n    }\n    if (panelOpen &&\n    activeTabKey.startsWith(ResultTypes.Results) &&\n    chartStatus &&\n    chartStatus !== 'loading') {\n      setIsRequest({\n        results: true,\n        samples: false\n      });\n    }\n    if (panelOpen && activeTabKey === ResultTypes.Samples) {\n      setIsRequest({\n        results: false,\n        samples: true\n      });\n    }\n  }, [panelOpen, activeTabKey, chartStatus]);\n  const handleCollapseChange = useCallback((isOpen) => {\n    onCollapseChange(isOpen);\n    setPanelOpen(isOpen);\n  }, [onCollapseChange]);\n  const handleTabClick = useCallback((tabKey, e) => {\n    if (!panelOpen) {\n      handleCollapseChange(true);\n    } else\n    if (tabKey === activeTabKey) {\n      e.preventDefault();\n      handleCollapseChange(false);\n    }\n    setActiveTabKey(tabKey);\n  }, [activeTabKey, handleCollapseChange, panelOpen]);\n  const CollapseButton = useMemo(() => {\n    const caretIcon = panelOpen ? _jsx(Icons.CaretUpOutlined, { iconSize: \"l\", \"aria-label\": t('Collapse data panel') }) : _jsx(Icons.DownOutlined, { iconSize: \"l\", \"aria-label\": t('Expand data panel') });\n    return _jsx(TableControlsWrapper, { children:\n      panelOpen ? _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: () => handleCollapseChange(false), children:\n        caretIcon }\n      ) : _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: () => handleCollapseChange(true), children:\n        caretIcon }\n      ) }\n    );\n  }, [handleCollapseChange, panelOpen, theme.colors.grayscale.base]);\n  const queryResultsPanes = useResultsPane({\n    errorMessage,\n    queryFormData,\n    queryForce,\n    ownState,\n    isRequest: isRequest.results,\n    actions,\n    isVisible: ResultTypes.Results === activeTabKey,\n    canDownload\n  }).map((pane, idx) => {\n    if (idx === 0) {\n      return _jsx(Tabs.TabPane, { tab: t('Results'), children:\n        pane }, ResultTypes.Results\n      );\n    }\n    if (idx > 0) {\n      return _jsx(Tabs.TabPane, { tab: t('Results %s', idx + 1), children:\n        pane }, `${ResultTypes.Results} ${idx + 1}`\n      );\n    }\n    return null;\n  });\n  return _jsx(SouthPane, { children:\n    _jsxs(Tabs, { fullWidth: false, tabBarExtraContent: CollapseButton, activeKey: panelOpen ? activeTabKey : '', onTabClick: handleTabClick, children: [\n      queryResultsPanes,\n      _jsx(Tabs.TabPane, { tab: t('Samples'), children:\n        _jsx(SamplesPane, { datasource: datasource, queryForce: queryForce, isRequest: isRequest.samples, actions: actions, isVisible: ResultTypes.Samples === activeTabKey, canDownload: canDownload }) }, ResultTypes.Samples\n      )] }\n    ) }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}