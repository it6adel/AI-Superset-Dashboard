{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var NativeFilterType;\n(function (NativeFilterType) {\n  NativeFilterType[\"NativeFilter\"] = \"NATIVE_FILTER\";\n  NativeFilterType[\"Divider\"] = \"DIVIDER\";\n})(NativeFilterType || (NativeFilterType = {}));\nexport var DataMaskType;\n(function (DataMaskType) {\n  DataMaskType[\"NativeFilters\"] = \"nativeFilters\";\n  DataMaskType[\"CrossFilters\"] = \"crossFilters\";\n})(DataMaskType || (DataMaskType = {}));\nexport function isAppliedCrossFilterType(filterElement) {\n  return filterElement.filterType === undefined &&\n  filterElement.hasOwnProperty('values');\n}\nexport function isAppliedNativeFilterType(filterElement) {\n  return filterElement.filterType === 'filter_select' &&\n  filterElement.hasOwnProperty('values');\n}\nexport function isNativeFilter(filterElement) {\n  return filterElement.type === NativeFilterType.NativeFilter;\n}\nexport function isNativeFilterWithDataMask(filterElement) {var _filterElement$dataMa, _filterElement$dataMa2;\n  return isNativeFilter(filterElement) && ((_filterElement$dataMa =\n  filterElement.dataMask) == null ? void 0 : (_filterElement$dataMa2 = _filterElement$dataMa.filterState) == null ? void 0 : _filterElement$dataMa2.value);\n}\nexport function isFilterDivider(filterElement) {\n  return filterElement.type === NativeFilterType.Divider;\n}\nexport default {};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}