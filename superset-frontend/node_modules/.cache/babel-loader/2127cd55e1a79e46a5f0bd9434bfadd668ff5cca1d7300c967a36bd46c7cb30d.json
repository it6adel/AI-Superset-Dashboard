{"ast":null,"code":"export const retainFormDataSuffix = (formData, controlSuffix) => {\n  /*\n   * retain controls by suffix and return a new formData\n   * eg:\n   * > const fd = { metrics: ['foo', 'bar'], metrics_b: ['zee'], limit: 100, ... }\n   * > removeFormDataSuffix(fd, '_b')\n   * { metrics: ['zee'], limit: 100, ... }\n   * */\n  const newFormData = {};\n  Object.entries(formData).\n  sort(([a], [b]) => {\n    // items contained suffix before others\n    const weight_a = a.endsWith(controlSuffix) ? 1 : 0;\n    const weight_b = b.endsWith(controlSuffix) ? 1 : 0;\n    return weight_b - weight_a;\n  }).\n  forEach(([key, value]) => {\n    if (key.endsWith(controlSuffix)) {\n      newFormData[key.slice(0, -controlSuffix.length)] = value;\n    }\n    if (!key.endsWith(controlSuffix) && !(key in newFormData)) {\n      // ignore duplication\n      newFormData[key] = value;\n    }\n  });\n  return newFormData;\n};\nexport const removeFormDataSuffix = (formData, controlSuffix) => {\n  /*\n   * remove unused controls by suffix and return a new formData\n   * eg:\n   * > const fd = { metrics: ['foo', 'bar'], metrics_b: ['zee'], limit: 100, ... }\n   * > removeUnusedFormData(fd, '_b')\n   * { metrics: ['foo', 'bar'], limit: 100, ... }\n   * */\n  const newFormData = {};\n  Object.entries(formData).forEach(([key, value]) => {\n    if (!key.endsWith(controlSuffix)) {\n      newFormData[key] = value;\n    }\n  });\n  return newFormData;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}