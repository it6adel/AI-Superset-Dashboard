{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { t, css, styled, FeatureFlag, isFeatureEnabled, getExtensionsRegistry, usePrevious } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { Switch } from 'src/components/Switch';\nimport { Menu } from 'src/components/Menu';\nimport Checkbox from 'src/components/Checkbox';\nimport { noOp } from 'src/utils/common';\nimport { fetchUISpecificReport, toggleActive } from 'src/features/reports/ReportModal/actions';\nimport { reportSelector } from 'src/views/CRUD/hooks';\nimport { MenuItemWithCheckboxContainer } from 'src/explore/components/useExploreAdditionalActionsMenu/index';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst deleteColor = (theme) => css`\n  color: ${theme.colors.error.base};\n`;\nconst onMenuHover = (theme) => css`\n  & .antd5-menu-item {\n    padding: 5px 12px;\n    margin-top: 0px;\n    margin-bottom: 4px;\n    :hover {\n      color: ${theme.colors.grayscale.dark1};\n    }\n  }\n  :hover {\n    background-color: ${theme.colors.secondary.light5};\n  }\n`;\nconst onMenuItemHover = (theme) => css`\n  &:hover {\n    color: ${theme.colors.grayscale.dark1};\n    background-color: ${theme.colors.secondary.light5};\n  }\n`;\nconst StyledDropdownItemWithIcon = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  > *:first-child {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst DropdownItemExtension = extensionsRegistry.get('report-modal.dropdown.item.icon');\nexport var CreationMethod;\n(function (CreationMethod) {\n  CreationMethod[\"Charts\"] = \"charts\";\n  CreationMethod[\"Dashboards\"] = \"dashboards\";\n})(CreationMethod || (CreationMethod = {}));\n// Same instance to be used in useEffects\nconst EMPTY_OBJECT = {};\nexport default function HeaderReportDropDown({ dashboardId, chart, useTextMenu = false, setShowReportSubMenu, submenuTitle, showReportModal, setCurrentReportDeleting }) {\n  const dispatch = useDispatch();\n  const report = useSelector((state) => {\n    const resourceType = dashboardId ?\n    CreationMethod.Dashboards :\n    CreationMethod.Charts;\n    return reportSelector(state, resourceType, dashboardId || (chart == null ? void 0 : chart.id)) ||\n    EMPTY_OBJECT;\n  });\n  const isReportActive = (report == null ? void 0 : report.active) || false;\n  const user = useSelector((state) => state.user);\n  const canAddReports = () => {\n    if (!isFeatureEnabled(FeatureFlag.AlertReports)) {\n      return false;\n    }\n    if (!(user != null && user.userId)) {\n      // this is in the case that there is an anonymous user.\n      return false;\n    }\n    // Cannot add reports if the resource is not saved\n    if (!(dashboardId || chart != null && chart.id)) {\n      return false;\n    }\n    const roles = Object.keys(user.roles || []);\n    const permissions = roles.map((key) => user.roles[key].filter((perms) => perms[0] === 'menu_access' && perms[1] === 'Manage'));\n    return permissions.some((permission) => permission.length > 0);\n  };\n  const prevDashboard = usePrevious(dashboardId);\n  const toggleActiveKey = async (data, checked) => {\n    if (data != null && data.id) {\n      dispatch(toggleActive(data, checked));\n    }\n  };\n  const shouldFetch = canAddReports() &&\n  !!(dashboardId && prevDashboard !== dashboardId || chart != null && chart.id);\n  useEffect(() => {\n    if (shouldFetch) {\n      dispatch(fetchUISpecificReport({\n        userId: user.userId,\n        filterField: dashboardId ? 'dashboard_id' : 'chart_id',\n        creationMethod: dashboardId ? 'dashboards' : 'charts',\n        resourceId: dashboardId || (chart == null ? void 0 : chart.id)\n      }));\n    }\n  }, []);\n  const showReportSubMenu = report && setShowReportSubMenu && canAddReports();\n  useEffect(() => {\n    if (showReportSubMenu) {\n      setShowReportSubMenu(true);\n    } else\n    if (!report && setShowReportSubMenu) {\n      setShowReportSubMenu(false);\n    }\n  }, [report]);\n  const handleShowMenu = () => {\n    showReportModal();\n  };\n  const handleDeleteMenuClick = () => {\n    setCurrentReportDeleting(report);\n  };\n  const textMenu = () => _isEmpty(report) ? _jsxs(Menu.SubMenu, { title: submenuTitle, css: onMenuHover, children: [\n    _jsx(Menu.Item, { onClick: handleShowMenu, children:\n      DropdownItemExtension ? _jsxs(StyledDropdownItemWithIcon, { children: [\n        _jsx(\"div\", { children: t('Set up an email report') }),\n        _jsx(DropdownItemExtension, {})] }\n      ) : t('Set up an email report') }\n    ),\n    _jsx(Menu.Divider, {})] }\n  ) : _jsxs(Menu.SubMenu, { title: submenuTitle, css: css`\n          border: none;\n        `, children: [\n    _jsx(Menu.Item, { css: onMenuItemHover, onClick: () => toggleActiveKey(report, !isReportActive), children:\n      _jsxs(MenuItemWithCheckboxContainer, { children: [\n        _jsx(Checkbox, { checked: isReportActive, onChange: noOp }),\n        t('Email reports active')] }\n      ) }\n    ),\n    _jsx(Menu.Item, { css: onMenuItemHover, onClick: handleShowMenu, children:\n      t('Edit email report') }\n    ),\n    _jsx(Menu.Item, { css: onMenuItemHover, onClick: handleDeleteMenuClick, children:\n      t('Delete email report') }\n    )] }\n  );\n  const menu = (title) => _jsxs(Menu.SubMenu, { title: title, css: css`\n        width: 200px;\n      `, children: [\n    _jsxs(Menu.Item, { children: [\n      t('Email reports active'),\n      _jsx(Switch, { checked: isReportActive, onClick: (checked) => toggleActiveKey(report, checked), size: \"small\", css: (theme) => css`\n            margin-left: ${theme.gridUnit * 2}px;\n          ` })] }\n    ),\n    _jsx(Menu.Item, { onClick: () => showReportModal(), children:\n      t('Edit email report') }\n    ),\n    _jsx(Menu.Item, { onClick: () => setCurrentReportDeleting(report), css: deleteColor, children:\n      t('Delete email report') }\n    )] }\n  );\n  const iconMenu = () => _isEmpty(report) ? _jsx(\"span\", { role: \"button\", title: t('Schedule email report'), tabIndex: 0, className: \"action-button action-schedule-report\", onClick: () => showReportModal(), children:\n    _jsx(Icons.CalendarOutlined, {}) }\n  ) : menu(_jsx(Icons.CalendarOutlined, {}));\n  return _jsx(_Fragment, { children: canAddReports() && (useTextMenu ? textMenu() : iconMenu()) });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}