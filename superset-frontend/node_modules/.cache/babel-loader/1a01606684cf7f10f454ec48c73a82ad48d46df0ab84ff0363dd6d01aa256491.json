{"ast":null,"code":"import _omit from \"lodash/omit\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { SupersetClient } from '@superset-ui/core';\nconst TEMPORARY_CONTROLS = ['url_params'];\nexport const sanitizeFormData = (formData) => _omit(formData, TEMPORARY_CONTROLS);\nconst assembleEndpoint = (key, tabId) => {\n  let endpoint = 'api/v1/explore/form_data';\n  if (key) {\n    endpoint = endpoint.concat(`/${key}`);\n  }\n  if (tabId) {\n    endpoint = endpoint.concat(`?tab_id=${tabId}`);\n  }\n  return endpoint;\n};\nconst assemblePayload = (datasourceId, datasourceType, formData, chartId) => {\n  const payload = {\n    datasource_id: datasourceId,\n    datasource_type: datasourceType,\n    form_data: JSON.stringify(sanitizeFormData(formData))\n  };\n  if (chartId) {\n    payload.chart_id = chartId;\n  }\n  return payload;\n};\nexport const postFormData = (datasourceId, datasourceType, formData, chartId, tabId) => SupersetClient.post({\n  endpoint: assembleEndpoint(undefined, tabId),\n  jsonPayload: assemblePayload(datasourceId, datasourceType, formData, chartId)\n}).then((r) => r.json.key);\nexport const putFormData = (datasourceId, datasourceType, key, formData, chartId, tabId) => SupersetClient.put({\n  endpoint: assembleEndpoint(key, tabId),\n  jsonPayload: assemblePayload(datasourceId, datasourceType, formData, chartId)\n}).then((r) => r.json.message);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}