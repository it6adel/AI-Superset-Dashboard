{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetApiError } from './types';\n/**\n * Handle API request errors, convert to consistent Superset API error.\n * @param error the catched error from SupersetClient.request(...)\n */\nexport default async function handleError(error) {\n  // already a Superset error\n  if (error instanceof SupersetApiError) {\n    throw error;\n  }\n  // string is the error message itself\n  if (typeof error === 'string') {\n    throw new SupersetApiError({ message: error });\n  }\n  // JS errors, normally happens before request was sent\n  if (error instanceof Error) {\n    throw new SupersetApiError({\n      message: error.message || 'Unknown Error',\n      originalError: error\n    });\n  }\n  let errorJson;\n  let originalError;\n  let errorMessage = 'Unknown Error';\n  let status;\n  let statusText;\n  // catch HTTP errors\n  if (error instanceof Response) {\n    const { status: responseStatus, statusText: responseStatusText } = error;\n    status = responseStatus;\n    statusText = responseStatusText;\n    errorMessage = `${status} ${statusText}`;\n    try {\n      errorJson = await error.json();\n      originalError = errorJson;\n    }\n    catch (error_) {\n      originalError = error;\n    }\n  } else\n  if (error) {\n    errorJson = error;\n  }\n  // when API returns 200 but operation fails (see Python API json_error_response(...))\n  // or when frontend promise rejects with `{ error: ... }`\n  if (errorJson && (\n  'error' in errorJson || 'message' in errorJson || 'errors' in errorJson)) {\n    let err;\n    if ('errors' in errorJson) {var _errorJson$errors;\n      err = ((_errorJson$errors = errorJson.errors) == null ? void 0 : _errorJson$errors[0]) || {};\n    } else\n    if (typeof errorJson.error === 'object') {\n      err = errorJson.error;\n    } else\n    {\n      err = errorJson;\n    }\n    errorMessage =\n    err.message ||\n    err.error ||\n    err.error_type ||\n    errorMessage;\n    throw new SupersetApiError({\n      status,\n      statusText,\n      message: errorMessage,\n      originalError,\n      ...err\n    });\n  }\n  // all unknown error\n  throw new SupersetApiError({\n    status,\n    statusText,\n    message: errorMessage,\n    originalError: error\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}