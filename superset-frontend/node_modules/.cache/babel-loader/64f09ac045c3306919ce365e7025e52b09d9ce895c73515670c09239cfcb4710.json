{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { formatSelectOptionsForRange, getStandardizedControls } from '@superset-ui/chart-controls';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst sortAxisChoices = [\n['alpha_asc', t('Axis ascending')],\n['alpha_desc', t('Axis descending')],\n['value_asc', t('Metric ascending')],\n['value_desc', t('Metric descending')]];\n\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['x_axis'],\n    ['time_grain_sqla'],\n    ['groupby'],\n    ['metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_x_axis',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort X Axis'),\n        choices: sortAxisChoices,\n        renderTrigger: false,\n        clearable: true\n      }\n    }],\n\n    [\n    {\n      name: 'sort_y_axis',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort Y Axis'),\n        choices: sortAxisChoices,\n        renderTrigger: false,\n        clearable: true\n      }\n    }],\n\n    [\n    {\n      name: 'normalize_across',\n      config: {\n        type: 'SelectControl',\n        label: t('Normalize Across'),\n        choices: [\n        ['heatmap', t('heatmap')],\n        ['x', t('x')],\n        ['y', t('y')]],\n\n        default: 'heatmap',\n        renderTrigger: false,\n        description: _jsxs(_Fragment, { children: [\n          _jsx(\"div\", { children:\n            t('Color will be shaded based the normalized (0% to 100%) value of a given cell against the other cells in the selected range: ') }\n          ),\n          _jsxs(\"ul\", { children: [\n            _jsx(\"li\", { children: t('x: values are normalized within each column') }),\n            _jsx(\"li\", { children: t('y: values are normalized within each row') }),\n            _jsx(\"li\", { children:\n              t('heatmap: values are normalized across the entire heatmap') }\n            )] }\n          )] }\n        )\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'legend_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Legend Type'),\n        renderTrigger: true,\n        choices: [\n        ['continuous', t('Continuous')],\n        ['piecewise', t('Piecewise')]],\n\n        default: 'continuous',\n        clearable: false\n      }\n    }],\n\n    ['linear_color_scheme'],\n    [\n    {\n      name: 'border_color',\n      config: {\n        type: 'ColorPickerControl',\n        label: t('Border color'),\n        renderTrigger: true,\n        description: t('The color of the elements border'),\n        default: { r: 0, g: 0, b: 0, a: 1 }\n      }\n    },\n    {\n      name: 'border_width',\n      config: {\n        type: 'SliderControl',\n        label: t('Border width'),\n        renderTrigger: true,\n        min: 0,\n        max: 2,\n        default: 0,\n        step: 0.1,\n        description: t('The width of the elements border')\n      }\n    }],\n\n    [\n    {\n      name: 'xscale_interval',\n      config: {\n        type: 'SelectControl',\n        label: t('XScale Interval'),\n        renderTrigger: true,\n        choices: [[-1, t('Auto')]].concat(formatSelectOptionsForRange(1, 50)),\n        default: -1,\n        clearable: false,\n        description: t('Number of steps to take between ticks when displaying the X scale')\n      }\n    }],\n\n    [\n    {\n      name: 'yscale_interval',\n      config: {\n        type: 'SelectControl',\n        label: t('YScale Interval'),\n        choices: [[-1, t('Auto')]].concat(formatSelectOptionsForRange(1, 50)),\n        default: -1,\n        clearable: false,\n        renderTrigger: true,\n        description: t('Number of steps to take between ticks when displaying the Y scale')\n      }\n    }],\n\n    [\n    {\n      name: 'left_margin',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        clearable: false,\n        label: t('Left Margin'),\n        choices: [\n        ['auto', t('Auto')],\n        [50, '50'],\n        [75, '75'],\n        [100, '100'],\n        [125, '125'],\n        [150, '150'],\n        [200, '200']],\n\n        default: 'auto',\n        renderTrigger: true,\n        description: t('Left margin, in pixels, allowing for more room for axis labels')\n      }\n    }],\n\n    [\n    {\n      name: 'bottom_margin',\n      config: {\n        type: 'SelectControl',\n        clearable: false,\n        freeForm: true,\n        label: t('Bottom Margin'),\n        choices: [\n        ['auto', t('Auto')],\n        [50, '50'],\n        [75, '75'],\n        [100, '100'],\n        [125, '125'],\n        [150, '150'],\n        [200, '200']],\n\n        default: 'auto',\n        renderTrigger: true,\n        description: t('Bottom margin, in pixels, allowing for more room for axis labels')\n      }\n    }],\n\n    [\n    {\n      name: 'value_bounds',\n      config: {\n        type: 'BoundsControl',\n        label: t('Value bounds'),\n        renderTrigger: true,\n        default: [null, null],\n        description: t('Hard value bounds applied for color coding.')\n      }\n    }],\n\n    ['y_axis_format'],\n    ['x_axis_time_format'],\n    ['currency_format'],\n    [\n    {\n      name: 'show_legend',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Legend'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to display the legend (toggles)')\n      }\n    }],\n\n    [\n    {\n      name: 'show_percentage',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show percentage'),\n        renderTrigger: true,\n        description: t('Whether to include the percentage in the tooltip'),\n        default: true\n      }\n    }],\n\n    [\n    {\n      name: 'show_values',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Values'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to display the numerical values within the cells')\n      }\n    }],\n\n    [\n    {\n      name: 'normalized',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Normalized'),\n        renderTrigger: true,\n        description: t('Whether to apply a normal distribution based on rank on the color scale'),\n        default: false\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    groupby: {\n      label: t('Y-Axis'),\n      description: t('Dimension to use on y-axis.'),\n      multi: false,\n      validators: [validateNonEmpty]\n    },\n    y_axis_format: {\n      label: t('Value Format')\n    }\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}