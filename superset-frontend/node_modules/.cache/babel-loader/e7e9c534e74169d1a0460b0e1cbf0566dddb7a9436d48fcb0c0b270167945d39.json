{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Alert from 'src/components/Alert';\nimport Button from 'src/components/Button';\nimport { isDefined, styled, SupersetClient, getClientErrorObject, t, useTheme, css } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport Modal from 'src/components/Modal';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { startMetaDataLoading, stopMetaDataLoading, syncDatasourceMetadata } from 'src/explore/actions/exploreActions';\nimport { fetchSyncedColumns, updateColumns } from 'src/components/Datasource/utils';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst DatasourceEditor = AsyncEsmComponent(() => import('./DatasourceEditor'));\nconst StyledDatasourceModal = styled(Modal)`\n  .modal-content {\n    height: 900px;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .modal-header {\n    flex: 0 1 auto;\n  }\n  .modal-body {\n    flex: 1 1 auto;\n    overflow: auto;\n  }\n\n  .modal-footer {\n    flex: 0 1 auto;\n  }\n`;\nfunction buildExtraJsonObject(item) {\n  const certification = item != null && item.certified_by || item != null && item.certification_details ?\n  {\n    certified_by: item == null ? void 0 : item.certified_by,\n    details: item == null ? void 0 : item.certification_details\n  } :\n  undefined;\n  return JSON.stringify({\n    certification,\n    warning_markdown: item == null ? void 0 : item.warning_markdown\n  });\n}\nconst DatasourceModal = ({ addSuccessToast, addDangerToast, datasource, onDatasourceSave, onHide, show }) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const [currentDatasource, setCurrentDatasource] = useState(datasource);\n  const currencies = useSelector((state) => {var _state$common;return (_state$common = state.common) == null ? void 0 : _state$common.currencies;});\n  const [errors, setErrors] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const dialog = useRef(null);\n  const [modal, contextHolder] = Modal.useModal();\n  const buildPayload = (datasource) => {var _datasource$database, _datasource$tableSele, _datasource$databaseS, _datasource$metrics, _datasource$columns;return {\n      table_name: datasource.table_name,\n      database_id: (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id,\n      sql: datasource.sql,\n      filter_select_enabled: datasource.filter_select_enabled,\n      fetch_values_predicate: datasource.fetch_values_predicate,\n      schema: ((_datasource$tableSele = datasource.tableSelector) == null ? void 0 : _datasource$tableSele.schema) || ((_datasource$databaseS =\n      datasource.databaseSelector) == null ? void 0 : _datasource$databaseS.schema) ||\n      datasource.schema,\n      description: datasource.description,\n      main_dttm_col: datasource.main_dttm_col,\n      normalize_columns: datasource.normalize_columns,\n      always_filter_main_dttm: datasource.always_filter_main_dttm,\n      offset: datasource.offset,\n      default_endpoint: datasource.default_endpoint,\n      cache_timeout: datasource.cache_timeout === '' ? null : datasource.cache_timeout,\n      is_sqllab_view: datasource.is_sqllab_view,\n      template_params: datasource.template_params,\n      extra: datasource.extra,\n      is_managed_externally: datasource.is_managed_externally,\n      external_url: datasource.external_url,\n      metrics: datasource == null ? void 0 : (_datasource$metrics = datasource.metrics) == null ? void 0 : _datasource$metrics.map((metric) => {\n        const metricBody = {\n          expression: metric.expression,\n          description: metric.description,\n          metric_name: metric.metric_name,\n          metric_type: metric.metric_type,\n          d3format: metric.d3format || null,\n          currency: !isDefined(metric.currency) ?\n          null :\n          JSON.stringify(metric.currency),\n          verbose_name: metric.verbose_name,\n          warning_text: metric.warning_text,\n          uuid: metric.uuid,\n          extra: buildExtraJsonObject(metric)\n        };\n        if (!Number.isNaN(Number(metric.id))) {\n          metricBody.id = metric.id;\n        }\n        return metricBody;\n      }),\n      columns: datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.map((column) => ({\n        id: typeof column.id === 'number' ? column.id : undefined,\n        column_name: column.column_name,\n        type: column.type,\n        advanced_data_type: column.advanced_data_type,\n        verbose_name: column.verbose_name,\n        description: column.description,\n        expression: column.expression,\n        filterable: column.filterable,\n        groupby: column.groupby,\n        is_active: column.is_active,\n        is_dttm: column.is_dttm,\n        python_date_format: column.python_date_format || null,\n        uuid: column.uuid,\n        extra: buildExtraJsonObject(column)\n      })),\n      owners: datasource.owners.map((o) => o.value || o.id)\n    };};\n  const onConfirmSave = async () => {\n    // Pull out extra fields into the extra object\n    setIsSaving(true);\n    try {\n      await SupersetClient.put({\n        endpoint: `/api/v1/dataset/${currentDatasource.id}`,\n        jsonPayload: buildPayload(currentDatasource)\n      });\n      if (datasource.sql !== currentDatasource.sql) {\n        // if sql has changed, save a second time with synced columns\n        dispatch(startMetaDataLoading());\n        try {\n          const columnJson = await fetchSyncedColumns(currentDatasource);\n          const columnChanges = updateColumns(currentDatasource.columns, columnJson, addSuccessToast);\n          currentDatasource.columns = columnChanges.finalColumns;\n          dispatch(syncDatasourceMetadata(currentDatasource));\n          dispatch(stopMetaDataLoading());\n          addSuccessToast(t('Metadata has been synced'));\n        }\n        catch (error) {\n          dispatch(stopMetaDataLoading());\n          addDangerToast(t('An error has occurred while syncing virtual dataset columns'));\n        }\n        await SupersetClient.put({\n          endpoint: `/api/v1/dataset/${currentDatasource.id}`,\n          jsonPayload: buildPayload(currentDatasource)\n        });\n      }\n      const { json } = await SupersetClient.get({\n        endpoint: `/api/v1/dataset/${currentDatasource == null ? void 0 : currentDatasource.id}`\n      });\n      addSuccessToast(t('The dataset has been saved'));\n      // eslint-disable-next-line no-param-reassign\n      json.result.type = 'table';\n      onDatasourceSave({\n        ...json.result,\n        owners: currentDatasource.owners\n      });\n      onHide();\n    }\n    catch (response) {var _error$errors;\n      setIsSaving(false);\n      const error = await getClientErrorObject(response);\n      let errorResponse;\n      let errorText;\n      // sip-40 error response\n      if (error != null && (_error$errors = error.errors) != null && _error$errors.length) {\n        errorResponse = error.errors[0];\n      } else\n      if (typeof error.error === 'string') {\n        // backward compatible with old error messages\n        errorText = error.error;\n      }\n      modal.error({\n        title: t('Error saving dataset'),\n        okButtonProps: { danger: true, className: 'btn-danger' },\n        content: _jsx(ErrorMessageWithStackTrace, { error: errorResponse, source: \"crud\", fallback: errorText })\n      });\n    }\n  };\n  const onDatasourceChange = (data, err) => {\n    setCurrentDatasource({\n      ...data,\n      metrics: data == null ? void 0 : data.metrics.map((metric) => ({\n        ...metric,\n        is_certified: (metric == null ? void 0 : metric.certified_by) || (metric == null ? void 0 : metric.certification_details)\n      }))\n    });\n    setErrors(err);\n  };\n  const renderSaveDialog = () => _jsxs(\"div\", { children: [\n    _jsx(Alert, { css: (theme) => ({\n        marginTop: theme.gridUnit * 4,\n        marginBottom: theme.gridUnit * 4\n      }), type: \"warning\", showIcon: true, message: t(`The dataset configuration exposed here\n                affects all the charts using this dataset.\n                Be mindful that changing settings\n                here may affect other charts\n                in undesirable ways.`) }),\n    t('Are you sure you want to save and apply changes?')] }\n  );\n  const onClickSave = () => {\n    dialog.current = modal.confirm({\n      title: t('Confirm save'),\n      content: renderSaveDialog(),\n      onOk: onConfirmSave,\n      icon: null,\n      okText: t('OK'),\n      cancelText: t('Cancel')\n    });\n  };\n  return _jsxs(StyledDatasourceModal, { show: show, onHide: onHide, title: _jsxs(\"span\", { children: [\n      _jsx(Icons.EditOutlined, { iconSize: \"l\", css: css`\n              margin: auto ${theme.gridUnit * 2}px auto 0;\n            ` }),\n      t('Edit Dataset '),\n      _jsx(\"strong\", { children: currentDatasource.table_name })] }\n    ), maskClosable: !isEditing, footer: _jsxs(_Fragment, { children: [\n      _jsx(Button, { buttonSize: \"small\", className: \"m-r-5\", onClick: onHide, children:\n        t('Cancel') }\n      ),\n      _jsx(Button, { buttonSize: \"small\", buttonStyle: \"primary\", onClick: onClickSave, disabled: isSaving ||\n        errors.length > 0 ||\n        currentDatasource.is_managed_externally, tooltip: currentDatasource.is_managed_externally ?\n        t(\"This dataset is managed externally, and can't be edited in Superset\") :\n        '', children:\n        t('Save') }\n      )] }\n    ), responsive: true, children: [\n    _jsx(DatasourceEditor, { showLoadingForImport: true, height: 500, datasource: currentDatasource, onChange: onDatasourceChange, setIsEditing: setIsEditing, currencies: currencies }),\n    contextHolder] }\n  );\n};\nexport default withToasts(DatasourceModal);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}