{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createRef, useCallback, useMemo } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport Tabs from 'src/components/Tabs';\nimport { css, styled, t, useTheme } from '@superset-ui/core';\nimport { removeTables, setActiveSouthPaneTab } from 'src/SqlLab/actions/sqlLab';\nimport Label from 'src/components/Label';\nimport Icons from 'src/components/Icons';\nimport QueryHistory from '../QueryHistory';\nimport { STATUS_OPTIONS, STATE_TYPE_MAP, STATUS_OPTIONS_LOCALIZED } from '../../constants';\nimport Results from './Results';\nimport TablePreview from '../TablePreview';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst TAB_HEIGHT = 130;\nconst StyledPane = styled.div`\n  width: 100%;\n  height: ${(props) => props.height}px;\n  .ant-tabs .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .SouthPaneTabs {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .ant-tabs-tabpane {\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .tab-content {\n    .alert {\n      margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    button.fetch {\n      margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\nconst SouthPane = ({ queryEditorId, latestQueryId, height, displayLimit, defaultQueryLimit }) => {var _useSelector;\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { offline, tables } = useSelector(({ sqlLab: { offline, tables } }) => ({\n    offline,\n    tables\n  }), shallowEqual);\n  const activeSouthPaneTab = (_useSelector = useSelector((state) => state.sqlLab.activeSouthPaneTab)) != null ? _useSelector : 'Results';\n  const pinnedTables = useMemo(() => tables.filter(({ queryEditorId: qeId }) => String(queryEditorId) === qeId), [queryEditorId, tables]);\n  const pinnedTableKeys = useMemo(() => Object.fromEntries(pinnedTables.map(({ id, dbId, catalog, schema, name }) => [\n  id,\n  [dbId, catalog, schema, name].join(':')]\n  )), [pinnedTables]);\n  const innerTabContentHeight = height - TAB_HEIGHT;\n  const southPaneRef = /*#__PURE__*/createRef();\n  const switchTab = (id) => {\n    dispatch(setActiveSouthPaneTab(id));\n  };\n  const removeTable = useCallback((key, action) => {\n    if (action === 'remove') {\n      const table = pinnedTables.find(({ dbId, catalog, schema, name }) => [dbId, catalog, schema, name].join(':') === key);\n      dispatch(removeTables([table]));\n    }\n  }, [dispatch, pinnedTables]);\n  return offline ? _jsx(Label, { className: \"m-r-3\", type: STATE_TYPE_MAP[STATUS_OPTIONS.offline], children:\n    STATUS_OPTIONS_LOCALIZED.offline }\n  ) : _jsx(StyledPane, { className: \"SouthPane\", height: height, ref: southPaneRef, children:\n    _jsxs(Tabs, { type: \"editable-card\", activeKey: pinnedTableKeys[activeSouthPaneTab] || activeSouthPaneTab, className: \"SouthPaneTabs\", onChange: switchTab, id: nanoid(11), fullWidth: false, animated: false, onEdit: removeTable, hideAdd: true, children: [\n      _jsx(Tabs.TabPane, { tab: t('Results'), closable: false, children:\n        _jsx(Results, { height: innerTabContentHeight, latestQueryId: latestQueryId, displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit }) }, \"Results\"\n      ),\n      _jsx(Tabs.TabPane, { tab: t('Query history'), closable: false, children:\n        _jsx(QueryHistory, { queryEditorId: queryEditorId, displayLimit: displayLimit, latestQueryId: latestQueryId }) }, \"History\"\n      ),\n      pinnedTables.map(({ id, dbId, catalog, schema, name }) => _jsx(Tabs.TabPane, { tab: _jsxs(_Fragment, { children: [\n          _jsx(Icons.InsertRowAboveOutlined, { iconSize: \"l\", css: css`\n                    margin-bottom: ${theme.gridUnit * 0.5}px;\n                    margin-right: ${theme.gridUnit}px;\n                  ` }),\n          `${schema}.${decodeURIComponent(name)}`] }\n        ), children:\n        _jsx(TablePreview, { dbId: dbId, catalog: catalog, schema: schema, tableName: name }) }, pinnedTableKeys[id]\n      ))] }\n    ) }\n  );\n};\nexport default SouthPane;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}