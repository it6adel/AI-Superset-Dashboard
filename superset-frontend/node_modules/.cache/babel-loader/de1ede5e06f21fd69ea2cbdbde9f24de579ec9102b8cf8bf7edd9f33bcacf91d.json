{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, ensureIsArray, normalizeOrderBy, isXAxisSet, getXAxisColumn } from '@superset-ui/core';\nimport { pivotOperator, renameOperator, flattenOperator, isTimeComparison, timeComparePivotOperator, rollingWindowOperator, timeCompareOperator, resampleOperator } from '@superset-ui/chart-controls';\nimport { retainFormDataSuffix, removeFormDataSuffix } from '../utils/formDataSuffix';\nexport default function buildQuery(formData) {\n  const baseFormData = {\n    ...formData\n  };\n  const formData1 = removeFormDataSuffix(baseFormData, '_b');\n  const formData2 = retainFormDataSuffix(baseFormData, '_b');\n  const queryContexts = [formData1, formData2].map((fd) => buildQueryContext(fd, (baseQueryObject) => {\n    const queryObject = {\n      ...baseQueryObject,\n      columns: [\n      ...(isXAxisSet(formData) ?\n      ensureIsArray(getXAxisColumn(formData)) :\n      []),\n      ...ensureIsArray(fd.groupby)],\n\n      series_columns: fd.groupby,\n      ...(isXAxisSet(formData) ? {} : { is_timeseries: true })\n    };\n    const pivotOperatorInRuntime = isTimeComparison(fd, queryObject) ?\n    timeComparePivotOperator(fd, queryObject) :\n    pivotOperator(fd, queryObject);\n    const tmpQueryObject = {\n      ...queryObject,\n      time_offsets: isTimeComparison(fd, queryObject) ? fd.time_compare : [],\n      post_processing: [\n      pivotOperatorInRuntime,\n      rollingWindowOperator(fd, queryObject),\n      timeCompareOperator(fd, queryObject),\n      resampleOperator(fd, queryObject),\n      renameOperator(fd, queryObject),\n      flattenOperator(fd, queryObject)]\n\n    };\n    return [normalizeOrderBy(tmpQueryObject)];\n  }));\n  return {\n    ...queryContexts[0],\n    queries: [...queryContexts[0].queries, ...queryContexts[1].queries]\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}