{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t, tn } from '@superset-ui/core';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Select } from 'src/components';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport default function PluginFilterTimegrain(props) {\n  const { data, formData, height, width, setDataMask, setHoveredFilter, unsetHoveredFilter, setFocusedFilter, unsetFocusedFilter, setFilterActive, filterState, inputRef } = props;\n  const { defaultValue } = formData;\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : []);\n  const durationMap = useMemo(() => data.reduce((agg, { duration, name }) => ({\n    ...agg,\n    [duration]: name\n  }), {}), [JSON.stringify(data)]);\n  const handleChange = (values) => {\n    const resultValue = ensureIsArray(values);\n    const [timeGrain] = resultValue;\n    const label = timeGrain ? durationMap[timeGrain] : undefined;\n    const extraFormData = {};\n    if (timeGrain) {\n      extraFormData.time_grain_sqla = timeGrain;\n    }\n    setValue(resultValue);\n    setDataMask({\n      extraFormData,\n      filterState: {\n        label,\n        value: resultValue.length ? resultValue : null\n      }\n    });\n  };\n  useEffect(() => {\n    handleChange(defaultValue != null ? defaultValue : []);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue)]);\n  useEffect(() => {var _filterState$value;\n    handleChange((_filterState$value = filterState.value) != null ? _filterState$value : []);\n  }, [JSON.stringify(filterState.value)]);\n  const placeholderText = (data || []).length === 0 ?\n  t('No data') :\n  tn('%s option', '%s options', data.length, data.length);\n  const formItemData = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = _jsx(StatusMessage, { status: filterState.validateStatus, children:\n      filterState.validateMessage }\n    );\n  }\n  const options = (data || []).map((row) => {\n    const { name, duration } = row;\n    return {\n      label: name,\n      value: duration\n    };\n  });\n  return _jsx(FilterPluginStyle, { height: height, width: width, children:\n    _jsx(StyledFormItem, { validateStatus: filterState.validateStatus, ...formItemData, children:\n      _jsx(Select, { name: formData.nativeFilterId, allowClear: true, value: value, placeholder: placeholderText\n        // @ts-ignore\n        , onChange: handleChange, onBlur: unsetFocusedFilter, onFocus: setFocusedFilter, onMouseEnter: setHoveredFilter, onMouseLeave: unsetHoveredFilter, ref: inputRef, options: options, onDropdownVisibleChange: setFilterActive }) }\n    ) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}