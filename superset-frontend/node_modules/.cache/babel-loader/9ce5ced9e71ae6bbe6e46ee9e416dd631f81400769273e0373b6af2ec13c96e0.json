{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { AntdForm } from 'src/components';\nimport ScopingTree from './ScopingTree';\nimport { getDefaultScopeValue } from './utils';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  & > * {\n    margin-bottom: ${({ theme }) => theme.gridUnit}px;\n  }\n  padding: 0px ${({ theme }) => theme.gridUnit * 4}px;\n`;\nconst CleanFormItem = styled(AntdForm.Item)`\n  margin-bottom: 0;\n`;\nconst FilterScope = ({ pathToFormValue = [], formFilterScope, forceUpdate, filterScope, updateFormValues, chartId, initiallyExcludedCharts }) => {\n  const initialFilterScope = useMemo(() => filterScope || getDefaultScopeValue(chartId, initiallyExcludedCharts), [chartId, filterScope, initiallyExcludedCharts]);\n  const [hasScopeBeenModified, setHasScopeBeenModified] = useState(false);\n  const onUpdateFormValues = useCallback((formValues) => {\n    updateFormValues(formValues);\n    setHasScopeBeenModified(true);\n  }, [updateFormValues]);\n  const updateScopes = useCallback((updatedFormValues) => {\n    if (hasScopeBeenModified) {\n      return;\n    }\n    updateFormValues(updatedFormValues, false);\n  }, [hasScopeBeenModified, updateFormValues]);\n  useEffect(() => {\n    const updatedFormValues = {\n      scope: initialFilterScope\n    };\n    updateScopes(updatedFormValues);\n  }, [initialFilterScope, updateScopes]);\n  return _jsxs(Wrapper, { children: [\n    _jsx(ScopingTree, { updateFormValues: onUpdateFormValues, initialScope: initialFilterScope, formScope: formFilterScope, forceUpdate: forceUpdate, chartId: chartId, initiallyExcludedCharts: initiallyExcludedCharts }),\n    _jsx(CleanFormItem, { name: [...pathToFormValue, 'scope'], hidden: true, initialValue: initialFilterScope })] }\n  );\n};\nexport default FilterScope;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}