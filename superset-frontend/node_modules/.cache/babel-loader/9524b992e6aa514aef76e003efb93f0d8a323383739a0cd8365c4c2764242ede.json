{"ast":null,"code":"/**\n * Array.sort(...) comparator for potential numeric values with the ability to\n * treat null and NaN as the smallest or largest values or always sort to bottom.\n */\nexport default function sortNumericValues(valueA, valueB, { descending = false, nanTreatment = 'alwaysLast' } = {}) {\n  let orderByIsNaN = Number(valueA == null) - Number(valueB == null) ||\n  Number(Number.isNaN(Number(valueA))) - Number(Number.isNaN(Number(valueB)));\n  // if A is null or NaN and B is not, `orderByIsNaN` is 1,\n  // which will make A come after B in the sorted array,\n  // since we want to treat A as smallest number, we need to flip the sign\n  // when sorting in ascending order.\n  if (nanTreatment === 'asSmallest' && !descending) {\n    orderByIsNaN = -orderByIsNaN;\n  }\n  if (nanTreatment === 'asLargest' && descending) {\n    orderByIsNaN = -orderByIsNaN;\n  }\n  return orderByIsNaN || (Number(valueA) - Number(valueB)) * (descending ? -1 : 1);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}