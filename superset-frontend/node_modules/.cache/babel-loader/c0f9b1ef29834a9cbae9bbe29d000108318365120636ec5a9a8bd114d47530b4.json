{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isColumnMeta } from '@superset-ui/chart-controls';\nimport { ensureIsArray, isPhysicalColumn, t } from '@superset-ui/core';\nconst getColumnNameOrAdhocColumn = (column) => {\n  if (isColumnMeta(column)) {\n    return column.column_name;\n  }\n  return column;\n};\nexport class OptionSelector {\n\n\n\n  constructor(options, multi, initialValues) {this.values = void 0;this.options = void 0;this.multi = void 0;\n    this.options = options;\n    this.multi = multi;\n    this.values = ensureIsArray(initialValues).\n    map((value) => {\n      if (value && isPhysicalColumn(value) && value in options) {\n        return options[value];\n      }\n      if (!isPhysicalColumn(value)) {\n        return value;\n      }\n      return {\n        type_generic: 'UNKNOWN',\n        column_name: value,\n        error_text: t('This column might be incompatible with current dataset')\n      };\n    }).\n    filter(Boolean);\n  }\n  add(value) {\n    if (isPhysicalColumn(value) && value in this.options) {\n      this.values.push(this.options[value]);\n    } else\n    if (!isPhysicalColumn(value)) {\n      this.values.push(value);\n    }\n  }\n  del(idx) {\n    this.values.splice(idx, 1);\n  }\n  replace(idx, value) {\n    if (this.values[idx]) {\n      this.values[idx] = isPhysicalColumn(value) ? this.options[value] : value;\n    }\n  }\n  swap(a, b) {\n    [this.values[a], this.values[b]] = [this.values[b], this.values[a]];\n  }\n  has(value) {\n    return this.values.some((col) => {\n      if (isPhysicalColumn(value)) {\n        return col.column_name === value ||\n        col.label === value;\n      }\n      return col.column_name === value.label ||\n      col.label === value.label;\n    });\n  }\n  getValues() {\n    if (!this.multi) {\n      return this.values.length > 0 ?\n      getColumnNameOrAdhocColumn(this.values[0]) :\n      undefined;\n    }\n    return this.values.map(getColumnNameOrAdhocColumn);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}