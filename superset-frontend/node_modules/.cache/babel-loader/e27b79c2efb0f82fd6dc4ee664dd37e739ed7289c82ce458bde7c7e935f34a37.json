{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { format as d3Format, formatLocale } from 'd3-format';\nimport { isRequired } from '../../utils';\nimport NumberFormatter from '../NumberFormatter';\nexport default function createD3NumberFormatter(config) {\n  const { description, formatString = isRequired('config.formatString'), label, locale } = config;\n  let formatFunc;\n  let isInvalid = false;\n  try {\n    formatFunc =\n    typeof locale === 'undefined' ?\n    d3Format(formatString) :\n    formatLocale(locale).format(formatString);\n  }\n  catch (error) {\n    formatFunc = (value) => `${value} (Invalid format: ${formatString})`;\n    isInvalid = true;\n  }\n  return new NumberFormatter({\n    description,\n    formatFunc,\n    id: formatString,\n    isInvalid,\n    label\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}