{"ast":null,"code":"import _throttle from \"lodash/throttle\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Mousetrap from 'mousetrap';\nimport { css, styled, t } from '@superset-ui/core';\n\nimport { LOCALSTORAGE_MAX_USAGE_KB, LOCALSTORAGE_WARNING_THRESHOLD, LOCALSTORAGE_WARNING_MESSAGE_THROTTLE_MS } from 'src/SqlLab/constants';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { logEvent } from 'src/logger/actions';\nimport { LOG_ACTIONS_SQLLAB_WARN_LOCAL_STORAGE_USAGE, LOG_ACTIONS_SQLLAB_MONITOR_LOCAL_STORAGE_USAGE } from 'src/logger/LogUtils';\nimport TabbedSqlEditors from '../TabbedSqlEditors';\nimport QueryAutoRefresh from '../QueryAutoRefresh';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst SqlLabStyles = styled.div`\n  ${({ theme }) => css`\n    &.SqlLab {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      padding: 0 ${theme.gridUnit * 2}px;\n\n      pre:not(.code) {\n        padding: 0 !important;\n        margin: 0;\n        border: none;\n        font-size: ${theme.typography.sizes.s}px;\n        background: transparent !important;\n      }\n\n      .north-pane {\n        display: flex;\n        flex-direction: column;\n      }\n\n      .ace_editor {\n        flex-grow: 1;\n      }\n\n      .ace_content {\n        height: 100%;\n      }\n\n      .ant-tabs-content-holder {\n        /* This is needed for Safari */\n        height: 100%;\n      }\n\n      .ant-tabs-content {\n        height: 100%;\n        position: relative;\n        background-color: ${theme.colors.grayscale.light5};\n        overflow-x: auto;\n        overflow-y: auto;\n\n        > .ant-tabs-tabpane {\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n        }\n      }\n\n      .ResultsModal .antd5-modal-body {\n        min-height: ${theme.gridUnit * 140}px;\n      }\n\n      .antd5-modal-body {\n        overflow: auto;\n      }\n    }\n  `};\n`;\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);this.hasLoggedLocalStorageUsage = void 0;\n    this.state = {\n      hash: window.location.hash\n    };\n    this.showLocalStorageUsageWarning = _throttle(this.showLocalStorageUsageWarning, LOCALSTORAGE_WARNING_MESSAGE_THROTTLE_MS, { trailing: false });\n  }\n  componentDidMount() {\n    window.addEventListener('hashchange', this.onHashChanged.bind(this));\n    // Horrible hack to disable side swipe navigation when in SQL Lab. Even though the\n    // docs say setting this style on any div will prevent it, turns out it only works\n    // when set on the body element.\n    document.body.style.overscrollBehaviorX = 'none';\n  }\n  componentDidUpdate() {\n    const { localStorageUsageInKilobytes, actions, queries } = this.props;\n    const queryCount = Object.keys(queries || {}).length || 0;\n    if (localStorageUsageInKilobytes >=\n    LOCALSTORAGE_WARNING_THRESHOLD * LOCALSTORAGE_MAX_USAGE_KB) {\n      this.showLocalStorageUsageWarning(localStorageUsageInKilobytes, queryCount);\n    }\n    if (localStorageUsageInKilobytes > 0 && !this.hasLoggedLocalStorageUsage) {\n      const eventData = {\n        current_usage: localStorageUsageInKilobytes,\n        query_count: queryCount\n      };\n      actions.logEvent(LOG_ACTIONS_SQLLAB_MONITOR_LOCAL_STORAGE_USAGE, eventData);\n      this.hasLoggedLocalStorageUsage = true;\n    }\n  }\n  componentWillUnmount() {\n    window.removeEventListener('hashchange', this.onHashChanged.bind(this));\n    // And now we need to reset the overscroll behavior back to the default.\n    document.body.style.overscrollBehaviorX = 'auto';\n    Mousetrap.reset();\n  }\n  onHashChanged() {\n    this.setState({ hash: window.location.hash });\n  }\n  showLocalStorageUsageWarning(currentUsage, queryCount) {\n    this.props.actions.addDangerToast(t(\"SQL Lab uses your browser's local storage to store queries and results.\" +\n    '\\nCurrently, you are using %(currentUsage)s KB out of %(maxStorage)d KB storage space.' +\n    '\\nTo keep SQL Lab from crashing, please delete some query tabs.' +\n    '\\nYou can re-access these queries by using the Save feature before you delete the tab.' +\n    '\\nNote that you will need to close other SQL Lab windows before you do this.', {\n      currentUsage: currentUsage.toFixed(2),\n      maxStorage: LOCALSTORAGE_MAX_USAGE_KB\n    }));\n    const eventData = {\n      current_usage: currentUsage,\n      query_count: queryCount\n    };\n    this.props.actions.logEvent(LOG_ACTIONS_SQLLAB_WARN_LOCAL_STORAGE_USAGE, eventData);\n  }\n  render() {\n    const { queries, queriesLastUpdate } = this.props;\n    if (this.state.hash && this.state.hash === '#search') {\n      return _jsx(Redirect, { to: {\n          pathname: '/sqllab/history/'\n        } });\n    }\n    return _jsxs(SqlLabStyles, { className: \"App SqlLab\", children: [\n      _jsx(QueryAutoRefresh, { queries: queries, queriesLastUpdate: queriesLastUpdate }),\n      _jsx(TabbedSqlEditors, {})] }\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  const { common, localStorageUsageInKilobytes, sqlLab } = state;\n  return {\n    common,\n    localStorageUsageInKilobytes,\n    queries: sqlLab == null ? void 0 : sqlLab.queries,\n    queriesLastUpdate: sqlLab == null ? void 0 : sqlLab.queriesLastUpdate\n  };\n}\nconst mapDispatchToProps = {\n  addDangerToast,\n  logEvent\n};\nfunction mergeProps(stateProps, dispatchProps, state) {\n  return {\n    ...state,\n    ...stateProps,\n    actions: dispatchProps\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(App);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}