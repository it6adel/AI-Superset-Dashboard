{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { t, useTheme } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { AddControlLabel, DndLabelsContainer, HeaderContainer } from 'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';\nimport { DraggingContext, DropzoneContext } from '../../ExploreContainer';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport default function DndSelectLabel({ displayGhostButton = true, accept, valuesRenderer, isLoading, ...props }) {\n  const theme = useTheme();\n  const canDropProp = props.canDrop;\n  const canDropValueProp = props.canDropValue;\n  const dropValidator = useCallback((item) => {var _canDropValueProp;return canDropProp(item) && ((_canDropValueProp = canDropValueProp == null ? void 0 : canDropValueProp(item.value)) != null ? _canDropValueProp : true);}, [canDropProp, canDropValueProp]);\n  const [{ isOver, canDrop }, datasourcePanelDrop] = useDrop({\n    accept: isLoading ? [] : accept,\n    drop: (item) => {\n      props.onDrop(item);\n      props.onDropValue == null ? void 0 : props.onDropValue(item.value);\n    },\n    canDrop: dropValidator,\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      type: monitor.getItemType()\n    })\n  });\n  const dispatch = useContext(DropzoneContext)[1];\n  useEffect(() => {\n    dispatch({ key: props.name, canDrop: dropValidator });\n    return () => {\n      dispatch({ key: props.name });\n    };\n  }, [dispatch, props.name, dropValidator]);\n  const isDragging = useContext(DraggingContext);\n  const values = useMemo(() => valuesRenderer(), [valuesRenderer]);\n  function renderGhostButton() {\n    return _jsxs(AddControlLabel, { cancelHover: !props.onClickGhostButton, onClick: props.onClickGhostButton, children: [\n      _jsx(Icons.PlusOutlined, { iconSize: \"m\", iconColor: theme.colors.grayscale.light1, css: (theme) => ({\n          margin: `auto ${theme.gridUnit}px auto 0`\n        }) }),\n      t(props.ghostButtonText)] }\n    );\n  }\n  return _jsxs(\"div\", { ref: datasourcePanelDrop, children: [\n    _jsx(HeaderContainer, { children:\n      _jsx(ControlHeader, { ...props }) }\n    ),\n    _jsxs(DndLabelsContainer, { canDrop: canDrop, isOver: isOver, isDragging: isDragging, isLoading: isLoading, children: [\n      values,\n      displayGhostButton && renderGhostButton()] }\n    )] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}