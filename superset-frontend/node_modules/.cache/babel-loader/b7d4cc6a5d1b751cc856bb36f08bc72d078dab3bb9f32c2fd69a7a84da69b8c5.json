{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeSingleton } from '@superset-ui/core';\nimport { isStandardizedFormData } from '../types';\nclass StandardizedControlsManager {\n\n  constructor() {this.controls = void 0;\n    this.controls = {\n      metrics: [],\n      columns: []\n    };\n  }\n  setStandardizedControls(formData) {\n    if (isStandardizedFormData(formData)) {\n      const { controls } = formData.standardizedFormData;\n      this.controls = {\n        metrics: controls.metrics,\n        columns: controls.columns\n      };\n    }\n  }\n  shiftMetric() {\n    return this.controls.metrics.shift();\n  }\n  shiftColumn() {\n    return this.controls.columns.shift();\n  }\n  popAllMetrics() {\n    return this.controls.metrics.splice(0, this.controls.metrics.length);\n  }\n  popAllColumns() {\n    return this.controls.columns.splice(0, this.controls.columns.length);\n  }\n  clear() {\n    this.controls = {\n      metrics: [],\n      columns: []\n    };\n  }\n}\nexport const getStandardizedControls = makeSingleton(StandardizedControlsManager);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}