{"ast":null,"code":"import _throttle from \"lodash/throttle\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { POPOVER_INITIAL_HEIGHT, POPOVER_INITIAL_WIDTH } from 'src/explore/constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst RESIZE_THROTTLE_MS = 50;\nexport default function useResizeButton(minWidth, minHeight) {\n  const [width, setWidth] = useState(POPOVER_INITIAL_WIDTH);\n  const [height, setHeight] = useState(POPOVER_INITIAL_HEIGHT);\n  const [clientX, setClientX] = useState(0);\n  const [clientY, setClientY] = useState(0);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [dragStartY, setDragStartY] = useState(0);\n  const [dragStartWidth, setDragStartWidth] = useState(width);\n  const [dragStartHeight, setDragStartHeight] = useState(height);\n  const [isDragging, setIsDragging] = useState(false);\n  const onMouseMove = useCallback((ev) => {\n    ev.preventDefault();\n    setClientX(ev.clientX);\n    setClientY(ev.clientY);\n  }, []);\n  const onMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n  const onDragDown = useCallback((ev) => {\n    setDragStartX(ev.clientX);\n    setDragStartY(ev.clientY);\n    setIsDragging(true);\n  }, []);\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', onMouseMove);\n    } else\n    {\n      setDragStartWidth(width);\n      setDragStartHeight(height);\n      document.removeEventListener('mousemove', onMouseMove);\n    }\n  }, [onMouseMove, isDragging]);\n  const handleResize = useCallback(_throttle(({ dragStartX, dragStartY, dragStartWidth, dragStartHeight, clientX, clientY, minWidth, minHeight }) => {\n    setWidth(Math.max(dragStartWidth + (clientX - dragStartX), minWidth));\n    setHeight(Math.max(dragStartHeight + (clientY - dragStartY), minHeight));\n  }, RESIZE_THROTTLE_MS), [setHeight, setWidth]);\n  useEffect(() => {\n    if (isDragging) {\n      handleResize({\n        dragStartX,\n        dragStartY,\n        dragStartWidth,\n        dragStartHeight,\n        clientX,\n        clientY,\n        minWidth,\n        minHeight\n      });\n    }\n  }, [\n  isDragging,\n  clientX,\n  clientY,\n  dragStartWidth,\n  dragStartHeight,\n  dragStartX,\n  dragStartY]\n  );\n  useEffect(() => {\n    document.addEventListener('mouseup', onMouseUp);\n    return () => document.removeEventListener('mouseup', onMouseUp);\n  }, [onMouseUp]);\n  return [\n  // TODO: Remove fa-icon\n  // eslint-disable-next-line icons/no-fa-icons-usage\n  _jsx(\"i\", { role: \"button\", \"aria-label\": \"Resize\", tabIndex: 0, onMouseDown: onDragDown, className: \"fa fa-expand edit-popover-resize text-muted\" }),\n  width,\n  height];\n\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}