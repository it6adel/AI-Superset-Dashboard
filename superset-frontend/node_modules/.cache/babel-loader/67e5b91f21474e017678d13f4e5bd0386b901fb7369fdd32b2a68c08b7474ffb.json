{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useLayoutEffect } from 'react';\nimport { css, SafeMarkdown, styled } from '@superset-ui/core';\nimport { Tooltip } from './Tooltip';\nimport { ColumnTypeLabel } from './ColumnTypeLabel/ColumnTypeLabel';\nimport CertifiedIconWithTooltip from './CertifiedIconWithTooltip';\nimport { getColumnLabelText, getColumnTooltipNode, getColumnTypeTooltipNode } from './labelUtils';\nimport { SQLPopover } from './SQLPopover';\nimport InfoTooltipWithTrigger from './InfoTooltipWithTrigger';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyleOverrides = styled.span`\n  display: flex;\n  align-items: center;\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nexport function ColumnOption({ column, labelRef, showType = false }) {\n  const { expression, column_name, type_generic } = column;\n  const hasExpression = expression && expression !== column_name;\n  const warningMarkdown = column.warning_markdown || column.warning_text || column.error_text;\n  const type = hasExpression ? 'expression' : type_generic;\n  const [tooltipText, setTooltipText] = useState(column.column_name);\n  const [columnTypeTooltipText, setcolumnTypeTooltipText] = useState(column.type);\n  useLayoutEffect(() => {\n    setTooltipText(getColumnTooltipNode(column, labelRef));\n    setcolumnTypeTooltipText(getColumnTypeTooltipNode(column));\n  }, [labelRef, column]);\n  return _jsxs(StyleOverrides, { children: [\n    showType && type !== undefined && _jsx(Tooltip, { id: \"metric-type-tooltip\", title: columnTypeTooltipText, placement: \"bottomRight\", align: { offset: [8, -2] }, children:\n      _jsx(\"span\", { children:\n        _jsx(ColumnTypeLabel, { type: type }) }\n      ) }\n    ),\n    _jsx(Tooltip, { id: \"metric-name-tooltip\", title: tooltipText, children:\n      _jsx(\"span\", { className: \"option-label column-option-label\", css: (theme) => css`\n            margin-right: ${theme.gridUnit}px;\n          `, ref: labelRef, children:\n        getColumnLabelText(column) }\n      ) }\n    ),\n    hasExpression && _jsx(SQLPopover, { sqlExpression: expression }),\n    column.is_certified && _jsx(CertifiedIconWithTooltip, { metricName: column.metric_name, certifiedBy: column.certified_by, details: column.certification_details }),\n    warningMarkdown && _jsx(InfoTooltipWithTrigger, { className: \"text-warning\", icon: \"warning\", tooltip: _jsx(SafeMarkdown, { source: warningMarkdown }), label: `warn-${column.column_name}`, iconsStyle: { marginLeft: 0 }, ...(column.error_text && {\n        className: 'text-danger',\n        icon: 'exclamation-circle'\n      }) })] }\n  );\n}\nexport default ColumnOption;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}