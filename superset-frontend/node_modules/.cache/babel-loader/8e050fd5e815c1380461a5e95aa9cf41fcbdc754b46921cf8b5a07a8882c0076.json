{"ast":null,"code":"import { Tag } from 'src/components';\nimport { useTheme } from '@superset-ui/core';\nimport DatasetTypeLabel from 'src/components/Label/reusable/DatasetTypeLabel';\nimport PublishedLabel from 'src/components/Label/reusable/PublishedLabel';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport default function Label(props) {\n  const theme = useTheme();\n  const { colors, transitionTiming } = theme;\n  const { type = 'default', monospace = false, style, onClick, children, icon, ...rest } = props;\n  const { primary, secondary, grayscale, success, warning, error, info } = colors;\n  let baseColor;\n  if (type === 'primary') {\n    baseColor = primary;\n  } else\n  if (type === 'secondary') {\n    baseColor = secondary;\n  } else\n  if (type === 'success') {\n    baseColor = success;\n  } else\n  if (type === 'warning') {\n    baseColor = warning;\n  } else\n  if (type === 'danger') {\n    baseColor = error;\n  } else\n  if (type === 'info') {\n    baseColor = info;\n  } else\n  {\n    baseColor = grayscale;\n  }\n  const color = baseColor.dark2;\n  let borderColor = baseColor.light1;\n  let backgroundColor = baseColor.light2;\n  // TODO - REMOVE IF BLOCK LOGIC WHEN shades are fixed to be aligned in terms of brightness\n  // currently shades for >=light2 are not aligned for primary, default and secondary\n  if (['default', 'primary', 'secondary'].includes(type)) {\n    // @ts-ignore\n    backgroundColor = baseColor.light4;\n    borderColor = baseColor.light2;\n  }\n  const backgroundColorHover = onClick ? baseColor.light1 : backgroundColor;\n  const borderColorHover = onClick ? baseColor.base : borderColor;\n  if (type === 'default') {\n    // Lighter for default\n    backgroundColor = grayscale.light3;\n  }\n  const css = {\n    transition: `background-color ${transitionTiming}s`,\n    whiteSpace: 'nowrap',\n    cursor: onClick ? 'pointer' : 'default',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    backgroundColor,\n    borderRadius: 8,\n    borderColor,\n    padding: '0.35em 0.8em',\n    lineHeight: 1,\n    color,\n    display: 'inline-flex',\n    verticalAlign: 'middle',\n    alignItems: 'center',\n    maxWidth: '100%',\n    '&:hover': {\n      backgroundColor: backgroundColorHover,\n      borderColor: borderColorHover,\n      opacity: 1\n    },\n    ...(monospace ?\n    { 'font-family': theme.typography.families.monospace } :\n    {})\n  };\n  return _jsx(Tag, { onClick: onClick, role: onClick ? 'button' : undefined, style: style, icon: icon, ...rest, css: css, children:\n    children }\n  );\n}\nexport { DatasetTypeLabel, PublishedLabel };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}