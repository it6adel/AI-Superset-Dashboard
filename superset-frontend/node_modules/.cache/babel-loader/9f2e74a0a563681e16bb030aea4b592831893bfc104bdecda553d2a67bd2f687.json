{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, t } from '@superset-ui/core';\nimport ContourPopoverTrigger from './ContourPopoverTrigger';\nimport OptionWrapper from '../DndColumnSelectControl/OptionWrapper';import { jsxs as _jsxs, jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst StyledOptionWrapper = styled(OptionWrapper)`\n  max-width: 100%;\n  min-width: 100%;\n`;\nconst StyledListItem = styled.li`\n  display: flex;\n  align-items: center;\n`;\nconst ColorPatch = styled.div`\n  background-color: ${({ formattedColor }) => formattedColor};\n  height: ${({ theme }) => theme.gridUnit}px;\n  width: ${({ theme }) => theme.gridUnit}px;\n  margin: 0 ${({ theme }) => theme.gridUnit}px;\n`;\nconst ContourOption = ({ contour, index, saveContour, onClose, onShift }) => {\n  const { lowerThreshold, upperThreshold, color, strokeWidth } = contour;\n  const isIsoband = upperThreshold;\n  const formattedColor = color ?\n  `rgba(${color.r}, ${color.g}, ${color.b}, 1)` :\n  'undefined';\n  const formatIsoline = (threshold, width) => `${t('Threshold')}: ${threshold}, ${t('color')}: ${formattedColor}, ${t('stroke width')}: ${width}`;\n  const formatIsoband = (threshold) => `${t('Threshold')}: [${threshold[0]}, ${threshold[1]}], color: ${formattedColor}`;\n  const displayString = isIsoband ?\n  formatIsoband([lowerThreshold || -1, upperThreshold]) :\n  formatIsoline(lowerThreshold || -1, strokeWidth);\n  const overlay = _jsxs(\"div\", { className: \"contour-tooltip-overlay\", children: [\n    _jsxs(StyledListItem, { children: [\n      t('Threshold: '),\n      isIsoband ?\n      `[${lowerThreshold}, ${upperThreshold}]` :\n      `${lowerThreshold}`] }\n    ),\n    _jsxs(StyledListItem, { children: [\n      t('Color: '),\n      _jsx(ColorPatch, { formattedColor: formattedColor }), \" \", formattedColor] }\n    ),\n    !isIsoband && _jsx(StyledListItem, { children: `${t('Stroke Width:')} ${strokeWidth}` })] }\n  );\n  return _jsx(ContourPopoverTrigger, { saveContour: saveContour, value: contour, children:\n    _jsx(StyledOptionWrapper, { index: index, label: displayString, type: \"ContourOption\", withCaret: true, clickClose: onClose, onShiftOptions: onShift, tooltipOverlay: overlay }) }\n  );\n};\nexport default ContourOption;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}