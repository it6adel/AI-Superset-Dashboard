{"ast":null,"code":"function findParentId(structure) {\n  let parentId = null;\n  if (structure) {\n    const { childId, layout = {} } = structure;\n    // default assignment to layout only works if value is undefined, not null\n    if (layout) {\n      const ids = Object.keys(layout);\n      for (let i = 0; i <= ids.length - 1; i += 1) {var _component$children;\n        const id = ids[i];\n        const component = layout[id] || {};\n        if (id !== childId && component != null && (_component$children = component.children) != null && _component$children.includes != null && _component$children.includes(childId)) {\n          parentId = id;\n          break;\n        }\n      }\n    }\n  }\n  return parentId;\n}\nconst cache = {};\nexport default function findParentIdWithCache(structure) {\n  let parentId = null;\n  if (structure) {\n    const { childId, layout = {} } = structure;\n    const cachedValue = cache[childId];\n    if (cachedValue) {var _lastParent$children;\n      const lastParent = (layout == null ? void 0 : layout[cachedValue]) || {};\n      if (lastParent != null && lastParent.children && lastParent != null && (_lastParent$children = lastParent.children) != null && _lastParent$children.includes != null && _lastParent$children.includes(childId)) {\n        return lastParent.id;\n      }\n    }\n    parentId = findParentId({ childId, layout });\n    cache[childId] = parentId;\n  }\n  return parentId;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}