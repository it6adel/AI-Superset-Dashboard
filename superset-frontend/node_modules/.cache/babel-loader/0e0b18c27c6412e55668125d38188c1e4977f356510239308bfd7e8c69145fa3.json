{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport cx from 'classnames';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { addAlpha, css, styled, t, useTheme, useElementOnScreen } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport BuilderComponentPane from 'src/dashboard/components/BuilderComponentPane';\nimport DashboardHeader from 'src/dashboard/components/Header';\nimport Icons from 'src/components/Icons';\nimport IconButton from 'src/dashboard/components/IconButton';\nimport { Droppable } from 'src/dashboard/components/dnd/DragDroppable';\nimport DashboardComponent from 'src/dashboard/containers/DashboardComponent';\nimport WithPopoverMenu from 'src/dashboard/components/menu/WithPopoverMenu';\nimport getDirectPathToTabIndex from 'src/dashboard/util/getDirectPathToTabIndex';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport { setDirectPathToChild, setEditMode } from 'src/dashboard/actions/dashboardState';\nimport { deleteTopLevelTabs, handleComponentDrop, clearDashboardHistory } from 'src/dashboard/actions/dashboardLayout';\nimport { DASHBOARD_GRID_ID, DASHBOARD_ROOT_DEPTH, DASHBOARD_ROOT_ID, DashboardStandaloneMode } from 'src/dashboard/util/constants';\nimport FilterBar from 'src/dashboard/components/nativeFilters/FilterBar';\nimport Loading from 'src/components/Loading';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { useUiConfig } from 'src/components/UiConfigContext';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { BUILDER_SIDEPANEL_WIDTH, CLOSED_FILTER_BAR_WIDTH, FILTER_BAR_HEADER_HEIGHT, MAIN_HEADER_HEIGHT, OPEN_FILTER_BAR_MAX_WIDTH, OPEN_FILTER_BAR_WIDTH, EMPTY_CONTAINER_Z_INDEX } from 'src/dashboard/constants';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport { getRootLevelTabsComponent, shouldFocusTabs } from './utils';\nimport DashboardContainer from './DashboardContainer';\nimport { useNativeFilters } from './state';\nimport DashboardWrapper from './DashboardWrapper';\n// @z-index-above-dashboard-charts + 1 = 11\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";const FiltersPanel = styled.div`\n  grid-column: 1;\n  grid-row: 1 / span 2;\n  z-index: 11;\n  width: ${({ width }) => width}px;\n  ${({ hidden }) => hidden && `display: none;`}\n`;\nconst StickyPanel = styled.div`\n  position: sticky;\n  top: -1px;\n  width: ${({ width }) => width}px;\n  flex: 0 0 ${({ width }) => width}px;\n`;\n// @z-index-above-dashboard-popovers (99) + 1 = 100\nconst StyledHeader = styled.div`\n  ${({ theme }) => css`\n    grid-column: 2;\n    grid-row: 1;\n    position: sticky;\n    top: 0;\n    z-index: 99;\n    max-width: 100vw;\n\n    .empty-droptarget:before {\n      position: absolute;\n      content: '';\n      display: none;\n      width: calc(100% - ${theme.gridUnit * 2}px);\n      height: calc(100% - ${theme.gridUnit * 2}px);\n      left: ${theme.gridUnit}px;\n      top: ${theme.gridUnit}px;\n      border: 1px dashed transparent;\n      border-radius: ${theme.gridUnit}px;\n      opacity: 0.5;\n    }\n  `}\n`;\nconst StyledContent = styled.div`\n  grid-column: 2;\n  grid-row: 2;\n  // @z-index-above-dashboard-header (100) + 1 = 101\n  ${({ fullSizeChartId }) => fullSizeChartId && `z-index: 101;`}\n`;\nconst DashboardContentWrapper = styled.div`\n  ${({ theme }) => css`\n    &.dashboard {\n      position: relative;\n      flex-grow: 1;\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n\n      /* drop shadow for top-level tabs only */\n      & .dashboard-component-tabs {\n        box-shadow: 0 ${theme.gridUnit}px ${theme.gridUnit}px 0\n          ${addAlpha(theme.colors.grayscale.dark2, parseFloat(theme.opacity.light) / 100)};\n        padding-left: ${theme.gridUnit *\n2}px; /* note this is added to tab-level padding, to match header */\n      }\n\n      .dropdown-toggle.btn.btn-primary .caret {\n        color: ${theme.colors.grayscale.light5};\n      }\n\n      .background--transparent {\n        background-color: transparent;\n      }\n\n      .background--white {\n        background-color: ${theme.colors.grayscale.light5};\n      }\n    }\n    &.dashboard--editing {\n      .grid-row:after,\n      .dashboard-component-tabs > .hover-menu:hover + div:after {\n        border: 1px dashed transparent;\n        content: '';\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        z-index: 1;\n        pointer-events: none;\n      }\n\n      .grid-row.grid-row--hovered:after,\n      .dashboard-component-tabs > .grid-row--hovered:after {\n        border: 2px dashed ${theme.colors.primary.base};\n      }\n\n      .resizable-container {\n        & .dashboard-component-chart-holder {\n          .dashboard-chart {\n            .chart-container {\n              cursor: move;\n              opacity: 0.2;\n            }\n\n            .slice_container {\n              /* disable chart interactions in edit mode */\n              pointer-events: none;\n            }\n          }\n\n          &:hover .dashboard-chart .chart-container {\n            opacity: 0.7;\n          }\n        }\n\n        &:hover,\n        &.resizable-container--resizing:hover {\n          & > .dashboard-component-chart-holder:after {\n            border: 1px dashed ${theme.colors.primary.base};\n          }\n        }\n      }\n\n      .resizable-container--resizing:hover > .grid-row:after,\n      .hover-menu:hover + .grid-row:after,\n      .dashboard-component-tabs > .hover-menu:hover + div:after {\n        border: 1px dashed ${theme.colors.primary.base};\n        z-index: 2;\n      }\n\n      .grid-row:after,\n      .dashboard-component-tabs > .hover-menu + div:after {\n        border: 1px dashed ${theme.colors.grayscale.light2};\n      }\n\n      /* provide hit area in case row contents is edge to edge */\n      .dashboard-component-tabs-content {\n        > .dragdroppable-row {\n          padding-top: ${theme.gridUnit * 4}px;\n        }\n      }\n\n      .dashboard-component-chart-holder {\n        &:after {\n          content: '';\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          top: 0;\n          left: 0;\n          z-index: 1;\n          pointer-events: none;\n          border: 1px solid transparent;\n        }\n\n        &:hover:after {\n          border: 1px dashed ${theme.colors.primary.base};\n          z-index: 2;\n        }\n      }\n\n      .contract-trigger:before {\n        display: none;\n      }\n    }\n\n    & .dashboard-component-tabs-content {\n      & > div:not(:last-child):not(.empty-droptarget) {\n        margin-bottom: ${theme.gridUnit * 4}px;\n      }\n\n      & > .empty-droptarget {\n        z-index: ${EMPTY_CONTAINER_Z_INDEX};\n        position: absolute;\n        width: 100%;\n      }\n\n      & > .empty-droptarget:first-child:not(.empty-droptarget--full) {\n        height: ${theme.gridUnit * 4}px;\n        top: 0;\n      }\n\n      & > .empty-droptarget:last-child {\n        height: ${theme.gridUnit * 4}px;\n        bottom: ${-theme.gridUnit * 4}px;\n      }\n    }\n  `}\n`;\nconst StyledDashboardContent = styled.div`\n  ${({ theme, editMode, marginLeft }) => css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    height: auto;\n    flex: 1;\n\n    .grid-container .dashboard-component-tabs {\n      box-shadow: none;\n      padding-left: 0;\n    }\n\n    .grid-container {\n      /* without this, the grid will not get smaller upon toggling the builder panel on */\n      width: 0;\n      flex: 1;\n      position: relative;\n      margin-top: ${theme.gridUnit * 6}px;\n      margin-right: ${theme.gridUnit * 8}px;\n      margin-bottom: ${theme.gridUnit * 6}px;\n      margin-left: ${marginLeft}px;\n\n      ${editMode &&\n`\n      max-width: calc(100% - ${BUILDER_SIDEPANEL_WIDTH + theme.gridUnit * 16}px);\n    `}\n\n      /* this is the ParentSize wrapper */\n    & > div:first-child {\n        height: inherit !important;\n      }\n    }\n\n    .dashboard-builder-sidepane {\n      width: ${BUILDER_SIDEPANEL_WIDTH}px;\n      z-index: 1;\n    }\n\n    .dashboard-component-chart-holder {\n      width: 100%;\n      height: 100%;\n      background-color: ${theme.colors.grayscale.light5};\n      position: relative;\n      padding: ${theme.gridUnit * 4}px;\n      overflow-y: visible;\n\n      // transitionable traits to show filter relevance\n      transition:\n        opacity ${theme.transitionTiming}s ease-in-out,\n        border-color ${theme.transitionTiming}s ease-in-out,\n        box-shadow ${theme.transitionTiming}s ease-in-out;\n\n      &.fade-in {\n        border-radius: ${theme.borderRadius}px;\n        box-shadow:\n          inset 0 0 0 2px ${theme.colors.primary.base},\n          0 0 0 3px\n            ${addAlpha(theme.colors.primary.base, parseFloat(theme.opacity.light) / 100)};\n      }\n\n      &.fade-out {\n        border-radius: ${theme.borderRadius}px;\n        box-shadow: none;\n      }\n\n      & .missing-chart-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        overflow-y: auto;\n        justify-content: center;\n\n        .missing-chart-body {\n          font-size: ${theme.typography.sizes.s}px;\n          position: relative;\n          display: flex;\n        }\n      }\n    }\n  `}\n`;\nconst ELEMENT_ON_SCREEN_OPTIONS = {\n  threshold: [1]\n};\nconst DashboardBuilder = () => {var _dashboardLayout$DASH, _dashboardLayout$DASH2;\n  const dispatch = useDispatch();\n  const uiConfig = useUiConfig();\n  const theme = useTheme();\n  const dashboardId = useSelector(({ dashboardInfo }) => `${dashboardInfo.id}`);\n  const dashboardLayout = useSelector((state) => state.dashboardLayout.present);\n  const editMode = useSelector((state) => state.dashboardState.editMode);\n  const canEdit = useSelector(({ dashboardInfo }) => dashboardInfo.dash_edit_perm);\n  const dashboardIsSaving = useSelector(({ dashboardState }) => dashboardState.dashboardIsSaving);\n  const fullSizeChartId = useSelector((state) => state.dashboardState.fullSizeChartId);\n  const filterBarOrientation = useSelector(({ dashboardInfo }) => dashboardInfo.filterBarOrientation);\n  const handleChangeTab = useCallback(({ pathToTabIndex }) => {\n    dispatch(setDirectPathToChild(pathToTabIndex));\n    window.scrollTo(0, 0);\n  }, [dispatch]);\n  const handleDeleteTopLevelTabs = useCallback(() => {\n    dispatch(deleteTopLevelTabs());\n    const firstTab = getDirectPathToTabIndex(getRootLevelTabsComponent(dashboardLayout), 0);\n    dispatch(setDirectPathToChild(firstTab));\n  }, [dashboardLayout, dispatch]);\n  const handleDrop = useCallback((dropResult) => dispatch(handleComponentDrop(dropResult)), [dispatch]);\n  const headerRef = useRef(null);\n  const dashboardRoot = dashboardLayout[DASHBOARD_ROOT_ID];\n  const rootChildId = dashboardRoot == null ? void 0 : dashboardRoot.children[0];\n  const topLevelTabs = rootChildId !== DASHBOARD_GRID_ID ?\n  dashboardLayout[rootChildId] :\n  undefined;\n  const standaloneMode = getUrlParam(URL_PARAMS.standalone);\n  const isReport = standaloneMode === DashboardStandaloneMode.Report;\n  const hideDashboardHeader = uiConfig.hideTitle ||\n  standaloneMode === DashboardStandaloneMode.HideNavAndTitle ||\n  isReport;\n  const [barTopOffset, setBarTopOffset] = useState(0);\n  useEffect(() => {var _headerRef$current, _headerRef$current$ge;\n    setBarTopOffset(((_headerRef$current = headerRef.current) == null ? void 0 : (_headerRef$current$ge = _headerRef$current.getBoundingClientRect()) == null ? void 0 : _headerRef$current$ge.height) || 0);\n    let observer;\n    if (global.hasOwnProperty('ResizeObserver') && headerRef.current) {\n      observer = new ResizeObserver((entries) => {\n        setBarTopOffset((current) => {var _entries$, _entries$$contentRect;return (entries == null ? void 0 : (_entries$ = entries[0]) == null ? void 0 : (_entries$$contentRect = _entries$.contentRect) == null ? void 0 : _entries$$contentRect.height) || current;});\n      });\n      observer.observe(headerRef.current);\n    }\n    return () => {var _observer;\n      (_observer = observer) == null ? void 0 : _observer.disconnect();\n    };\n  }, []);\n  const { showDashboard, missingInitialFilters, dashboardFiltersOpen, toggleDashboardFiltersOpen, nativeFiltersEnabled } = useNativeFilters();\n  const [containerRef, isSticky] = useElementOnScreen(ELEMENT_ON_SCREEN_OPTIONS);\n  const showFilterBar = !editMode;\n  const offset = FILTER_BAR_HEADER_HEIGHT + (\n  isSticky || standaloneMode ? 0 : MAIN_HEADER_HEIGHT);\n  const filterBarHeight = `calc(100vh - ${offset}px)`;\n  const filterBarOffset = dashboardFiltersOpen ? 0 : barTopOffset + 20;\n  const draggableStyle = useMemo(() => ({\n    marginLeft: dashboardFiltersOpen ||\n    editMode ||\n    !nativeFiltersEnabled ||\n    filterBarOrientation === FilterBarOrientation.Horizontal ?\n    0 :\n    -32\n  }), [\n  dashboardFiltersOpen,\n  editMode,\n  filterBarOrientation,\n  nativeFiltersEnabled]\n  );\n  // If a new tab was added, update the directPathToChild to reflect it\n  const currentTopLevelTabs = useRef(topLevelTabs);\n  useEffect(() => {var _currentTopLevelTabs$, _currentTopLevelTabs$2, _topLevelTabs$childre;\n    const currentTabsLength = (_currentTopLevelTabs$ = currentTopLevelTabs.current) == null ? void 0 : (_currentTopLevelTabs$2 = _currentTopLevelTabs$.children) == null ? void 0 : _currentTopLevelTabs$2.length;\n    const newTabsLength = topLevelTabs == null ? void 0 : (_topLevelTabs$childre = topLevelTabs.children) == null ? void 0 : _topLevelTabs$childre.length;\n    if (currentTabsLength !== undefined &&\n    newTabsLength !== undefined &&\n    newTabsLength > currentTabsLength) {\n      const lastTab = getDirectPathToTabIndex(getRootLevelTabsComponent(dashboardLayout), newTabsLength - 1);\n      dispatch(setDirectPathToChild(lastTab));\n    }\n    currentTopLevelTabs.current = topLevelTabs;\n  }, [topLevelTabs]);\n  const renderDraggableContent = useCallback(({ dropIndicatorProps }) => _jsxs(\"div\", { children: [\n    !hideDashboardHeader && _jsx(DashboardHeader, {}),\n    showFilterBar &&\n    filterBarOrientation === FilterBarOrientation.Horizontal && _jsx(FilterBar, { orientation: FilterBarOrientation.Horizontal, hidden: isReport }),\n    dropIndicatorProps && _jsx(\"div\", { ...dropIndicatorProps }),\n    !isReport && topLevelTabs && !uiConfig.hideNav && _jsx(WithPopoverMenu, { shouldFocus: shouldFocusTabs, menuItems: [\n      _jsx(IconButton, { icon: _jsx(Icons.FallOutlined, { iconSize: \"xl\" }), label: t('Collapse tab content'), onClick: handleDeleteTopLevelTabs })],\n      editMode: editMode, children:\n\n      _jsx(DashboardComponent, { id: topLevelTabs == null ? void 0 : topLevelTabs.id, parentId: DASHBOARD_ROOT_ID, depth: DASHBOARD_ROOT_DEPTH + 1, index: 0, renderTabContent: false, renderHoverMenu: false, onChangeTab: handleChangeTab }) }\n    )] }\n  ), [\n  nativeFiltersEnabled,\n  filterBarOrientation,\n  editMode,\n  handleChangeTab,\n  handleDeleteTopLevelTabs,\n  hideDashboardHeader,\n  isReport,\n  topLevelTabs,\n  uiConfig.hideNav]\n  );\n  const dashboardContentMarginLeft = !dashboardFiltersOpen &&\n  !editMode &&\n  nativeFiltersEnabled &&\n  filterBarOrientation !== FilterBarOrientation.Horizontal ?\n  0 :\n  theme.gridUnit * 8;\n  const renderChild = useCallback((adjustedWidth) => {\n    const filterBarWidth = dashboardFiltersOpen ?\n    adjustedWidth :\n    CLOSED_FILTER_BAR_WIDTH;\n    return _jsx(FiltersPanel, { width: filterBarWidth, hidden: isReport, children:\n      _jsx(StickyPanel, { ref: containerRef, width: filterBarWidth, children:\n        _jsx(ErrorBoundary, { children:\n          _jsx(FilterBar, { orientation: FilterBarOrientation.Vertical, verticalConfig: {\n              filtersOpen: dashboardFiltersOpen,\n              toggleFiltersBar: toggleDashboardFiltersOpen,\n              width: filterBarWidth,\n              height: filterBarHeight,\n              offset: filterBarOffset\n            } }) }\n        ) }\n      ) }\n    );\n  }, [\n  dashboardFiltersOpen,\n  toggleDashboardFiltersOpen,\n  filterBarHeight,\n  filterBarOffset,\n  isReport]\n  );\n  return _jsxs(DashboardWrapper, { children: [\n    showFilterBar &&\n    filterBarOrientation === FilterBarOrientation.Vertical && _jsx(_Fragment, { children:\n      _jsx(ResizableSidebar, { id: `dashboard:${dashboardId}`, enable: dashboardFiltersOpen, minWidth: OPEN_FILTER_BAR_WIDTH, maxWidth: OPEN_FILTER_BAR_MAX_WIDTH, initialWidth: OPEN_FILTER_BAR_WIDTH, children:\n        renderChild }\n      ) }\n    ),\n    _jsx(StyledHeader, { ref: headerRef, children:\n\n      _jsx(Droppable, { className: cx(!topLevelTabs && editMode && 'empty-droptarget'), component: dashboardRoot, parentComponent: null, depth: DASHBOARD_ROOT_DEPTH, index: 0, orientation: \"column\", onDrop: handleDrop, editMode: editMode\n        // you cannot drop on/displace tabs if they already exist\n        , disableDragDrop: !!topLevelTabs, style: draggableStyle, children:\n        renderDraggableContent }\n      ) }\n    ),\n    _jsxs(StyledContent, { fullSizeChartId: fullSizeChartId, children: [\n      !editMode &&\n      !topLevelTabs &&\n      ((_dashboardLayout$DASH = dashboardLayout[DASHBOARD_GRID_ID]) == null ? void 0 : (_dashboardLayout$DASH2 = _dashboardLayout$DASH.children) == null ? void 0 : _dashboardLayout$DASH2.length) === 0 && _jsx(EmptyState, { title: t('There are no charts added to this dashboard'), size: \"large\", description: canEdit &&\n        t('Go to the edit mode to configure the dashboard and add charts'), buttonText: canEdit && t('Edit the dashboard'), buttonAction: () => {\n          dispatch(setEditMode(true));\n          dispatch(clearDashboardHistory());\n        }, image: \"dashboard.svg\" }),\n      _jsx(DashboardContentWrapper, { className: cx('dashboard', editMode && 'dashboard--editing'), children:\n        _jsxs(StyledDashboardContent, { className: \"dashboard-content\", editMode: editMode, marginLeft: dashboardContentMarginLeft, children: [\n          showDashboard ? missingInitialFilters.length > 0 ? _jsx(\"div\", { css: css`\n                    display: flex;\n                    flex-direction: row;\n                    align-items: center;\n                    justify-content: center;\n                    flex: 1;\n                    & div {\n                      width: 500px;\n                    }\n                  `, children:\n            _jsx(BasicErrorAlert, { title: t('Unable to load dashboard'), body: t(`The following filters have the 'Select first filter value by default'\n                    option checked and could not be loaded, which is preventing the dashboard\n                    from rendering: %s`, missingInitialFilters.join(', ')) }) }\n          ) : _jsx(DashboardContainer, { topLevelTabs: topLevelTabs }) : _jsx(Loading, {}),\n          editMode && _jsx(BuilderComponentPane, { topOffset: barTopOffset })] }\n        ) }\n      )] }\n    ),\n    dashboardIsSaving && _jsx(Loading, { css: css`\n            && {\n              position: fixed;\n            }\n          ` })] }\n  );\n};\nexport default /*#__PURE__*/memo(DashboardBuilder);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}