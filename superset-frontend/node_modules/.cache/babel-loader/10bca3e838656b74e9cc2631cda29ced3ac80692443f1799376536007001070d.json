{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, NO_TIME_RANGE } from '@superset-ui/core';\nimport { useCallback, useEffect } from 'react';\nimport DateFilterControl from 'src/explore/components/controls/DateFilterControl';\nimport { FilterPluginStyle } from '../common';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst TimeFilterStyles = styled(FilterPluginStyle)`\n  display: flex;\n  align-items: center;\n  overflow-x: auto;\n\n  & .ant-tag {\n    margin-right: 0;\n  }\n`;\nconst ControlContainer = styled.div`\n  display: flex;\n  height: 100%;\n  max-width: 100%;\n  width: 100%;\n  & > div,\n  & > div:hover {\n    ${({ validateStatus, theme }) => {var _theme$colors$validat;return validateStatus && `border-color: ${(_theme$colors$validat = theme.colors[validateStatus]) == null ? void 0 : _theme$colors$validat.base}`;}}\n  }\n`;\nexport default function TimeFilterPlugin(props) {var _props$formData;\n  const { setDataMask, setHoveredFilter, unsetHoveredFilter, setFocusedFilter, unsetFocusedFilter, setFilterActive, width, height, filterState, inputRef, isOverflowingFilterBar = false } = props;\n  const handleTimeRangeChange = useCallback((timeRange) => {\n    const isSet = timeRange && timeRange !== NO_TIME_RANGE;\n    setDataMask({\n      extraFormData: isSet ?\n      {\n        time_range: timeRange\n      } :\n      {},\n      filterState: {\n        value: isSet ? timeRange : undefined\n      }\n    });\n  }, [setDataMask]);\n  useEffect(() => {\n    handleTimeRangeChange(filterState.value);\n  }, [filterState.value]);\n  return (_props$formData = props.formData) != null && _props$formData.inView ? _jsx(TimeFilterStyles, { width: width, height: height, children:\n    _jsx(ControlContainer, { ref: inputRef, validateStatus: filterState.validateStatus, onFocus: setFocusedFilter, onBlur: unsetFocusedFilter, onMouseEnter: setHoveredFilter, onMouseLeave: unsetHoveredFilter, children:\n      _jsx(DateFilterControl, { value: filterState.value || NO_TIME_RANGE, name: props.formData.nativeFilterId || 'time_range', onChange: handleTimeRangeChange, onOpenPopover: () => setFilterActive(true), onClosePopover: () => {\n          setFilterActive(false);\n          unsetHoveredFilter();\n          unsetFocusedFilter();\n        }, isOverflowingFilterBar: isOverflowingFilterBar }) }\n    ) }\n  ) : null;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}