{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\nimport {\n  addDangerToast,\n  addSuccessToast } from\n'src/components/MessageToasts/actions';\n\n\nexport const SET_REPORT = 'SET_REPORT';\nexport function setReport(report, resourceId, creationMethod, filterField) {\n  return { type: SET_REPORT, report, resourceId, creationMethod, filterField };\n}\n\nexport function fetchUISpecificReport({\n  userId,\n  filterField,\n  creationMethod,\n  resourceId\n}) {\n  const queryParams = rison.encode({\n    filters: [\n    {\n      col: filterField,\n      opr: 'eq',\n      value: resourceId\n    },\n    {\n      col: 'creation_method',\n      opr: 'eq',\n      value: creationMethod\n    },\n    {\n      col: 'created_by',\n      opr: 'rel_o_m',\n      value: userId\n    }]\n\n  });\n  return function fetchUISpecificReportThunk(dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/?q=${queryParams}`\n    }).\n    then(({ json }) => {\n      dispatch(setReport(json, resourceId, creationMethod, filterField));\n    }).\n    catch(() =>\n    dispatch(\n      addDangerToast(\n        t(\n          'There was an issue fetching reports attached to this dashboard.'\n        )\n      )\n    )\n    );\n  };\n}\n\nconst structureFetchAction = (dispatch, getState) => {\n  const state = getState();\n  const { user, dashboardInfo, charts, explore } = state;\n  if (!_isEmpty(dashboardInfo)) {\n    dispatch(\n      fetchUISpecificReport({\n        userId: user.userId,\n        filterField: 'dashboard_id',\n        creationMethod: 'dashboards',\n        resourceId: dashboardInfo.id\n      })\n    );\n  } else {var _explore$user;\n    const [chartArr] = Object.keys(charts);\n    dispatch(\n      fetchUISpecificReport({\n        userId: ((_explore$user = explore.user) == null ? void 0 : _explore$user.userId) || (user == null ? void 0 : user.userId),\n        filterField: 'chart_id',\n        creationMethod: 'charts',\n        resourceId: charts[chartArr].id\n      })\n    );\n  }\n};\n\nexport const ADD_REPORT = 'ADD_REPORT';\n\nexport const addReport = (report) => (dispatch) =>\nSupersetClient.post({\n  endpoint: `/api/v1/report/`,\n  jsonPayload: report\n}).then(({ json }) => {\n  dispatch({ type: ADD_REPORT, json });\n  dispatch(addSuccessToast(t('The report has been created')));\n});\n\nexport const EDIT_REPORT = 'EDIT_REPORT';\n\nexport const editReport = (id, report) => (dispatch) =>\nSupersetClient.put({\n  endpoint: `/api/v1/report/${id}`,\n  jsonPayload: report\n}).then(({ json }) => {\n  dispatch({ type: EDIT_REPORT, json });\n  dispatch(addSuccessToast(t('Report updated')));\n});\n\nexport function toggleActive(report, isActive) {\n  return function toggleActiveThunk(dispatch) {\n    return SupersetClient.put({\n      endpoint: encodeURI(`/api/v1/report/${report.id}`),\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        active: isActive\n      })\n    }).\n    catch(() => {\n      dispatch(\n        addDangerToast(\n          t('We were unable to active or deactivate this report.')\n        )\n      );\n    }).\n    finally(() => {\n      dispatch(structureFetchAction);\n    });\n  };\n}\n\nexport const DELETE_REPORT = 'DELETE_REPORT';\n\nexport function deleteActiveReport(report) {\n  return function deleteActiveReportThunk(dispatch) {\n    return SupersetClient.delete({\n      endpoint: encodeURI(`/api/v1/report/${report.id}`)\n    }).\n    catch(() => {\n      dispatch(addDangerToast(t('Your report could not be deleted')));\n    }).\n    finally(() => {\n      dispatch({ type: DELETE_REPORT, report });\n      dispatch(addSuccessToast(t('Deleted: %s', report.name)));\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}