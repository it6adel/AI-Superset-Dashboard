{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { AsyncSelect } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport StyledModal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { styled, t, SupersetClient, VizType } from '@superset-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport dayjs from 'dayjs';\nimport rison from 'rison';\nimport { createDatasource } from 'src/SqlLab/actions/sqlLab';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { DatasetRadioState, EXPLORE_CHART_DEFAULT } from 'src/SqlLab/types';\nimport { mountExploreUrl } from 'src/explore/exploreUtils';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { URL_PARAMS } from 'src/constants';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst Styles = styled.div`\n  ${({ theme }) => `\n  .sdm-body {\n    margin: 0 ${theme.gridUnit * 2}px;\n  }\n  .sdm-input {\n    margin-left: ${theme.gridUnit * 10}px;\n    width: 401px;\n  }\n  .sdm-autocomplete {\n    width: 401px;\n    align-self: center;\n    margin-left: ${theme.gridUnit}px;\n  }\n  .sdm-radio {\n    height: 30px;\n    margin: 10px 0px;\n    line-height: 30px;\n  }\n  .sdm-radio span {\n    display: inline-flex;\n    padding-right: 0px;\n  }\n  .sdm-overwrite-msg {\n    margin: ${theme.gridUnit * 2}px;\n  }\n  .sdm-overwrite-container {\n    flex: 1 1 auto;\n    display: flex;\n  `}\n`;\nconst updateDataset = async (dbId, datasetId, sql, columns, owners, overrideColumns) => {\n  const endpoint = `api/v1/dataset/${datasetId}?override_columns=${overrideColumns}`;\n  const headers = { 'Content-Type': 'application/json' };\n  const body = JSON.stringify({\n    sql,\n    columns,\n    owners,\n    database_id: dbId\n  });\n  const data = await SupersetClient.put({\n    endpoint,\n    headers,\n    body\n  });\n  return data.json.result;\n};\nconst UNTITLED = t('Untitled Dataset');\nexport const SaveDatasetModal = ({ visible, onHide, buttonTextOnSave, buttonTextOnOverwrite, modalDescription, datasource, openWindow = true, formData = {} }) => {\n  const defaultVizType = useSelector((state) => {var _state$common, _state$common$conf;return ((_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.DEFAULT_VIZ_TYPE) || VizType.Table;});\n  const getDefaultDatasetName = () => `${(datasource == null ? void 0 : datasource.name) || UNTITLED} ${dayjs().format('L HH:mm:ss')}`;\n  const [datasetName, setDatasetName] = useState(getDefaultDatasetName());\n  const [newOrOverwrite, setNewOrOverwrite] = useState(DatasetRadioState.SaveNew);\n  const [shouldOverwriteDataset, setShouldOverwriteDataset] = useState(false);\n  const [datasetToOverwrite, setDatasetToOverwrite] = useState({});\n  const [selectedDatasetToOverwrite, setSelectedDatasetToOverwrite] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const user = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const createWindow = (url) => {\n    if (openWindow) {\n      window.open(url, '_blank', 'noreferrer');\n    } else\n    {\n      window.location.href = url;\n    }\n  };\n  const formDataWithDefaults = {\n    ...EXPLORE_CHART_DEFAULT,\n    ...(formData || {})\n  };\n  const handleOverwriteDataset = async () => {var _datasource$columns, _datasetToOverwrite$o, _datasource$columns2;\n    // if user wants to overwrite a dataset we need to prompt them\n    if (!shouldOverwriteDataset) {\n      setShouldOverwriteDataset(true);\n      return;\n    }\n    setLoading(true);\n    const [, key] = await Promise.all([\n    updateDataset(datasource == null ? void 0 : datasource.dbId, datasetToOverwrite == null ? void 0 : datasetToOverwrite.datasetid, datasource == null ? void 0 : datasource.sql, datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.map((d) => ({\n      column_name: d.column_name,\n      type: d.type,\n      is_dttm: d.is_dttm\n    })), datasetToOverwrite == null ? void 0 : (_datasetToOverwrite$o = datasetToOverwrite.owners) == null ? void 0 : _datasetToOverwrite$o.map((o) => o.id), true),\n    postFormData(datasetToOverwrite.datasetid, 'table', {\n      ...formDataWithDefaults,\n      datasource: `${datasetToOverwrite.datasetid}__table`,\n      ...(defaultVizType === VizType.Table && {\n        all_columns: datasource == null ? void 0 : (_datasource$columns2 = datasource.columns) == null ? void 0 : _datasource$columns2.map((column) => column.column_name)\n      })\n    })]\n    );\n    setLoading(false);\n    const url = mountExploreUrl(null, {\n      [URL_PARAMS.formDataKey.name]: key\n    });\n    createWindow(url);\n    setShouldOverwriteDataset(false);\n    setDatasetName(getDefaultDatasetName());\n    onHide();\n  };\n  const loadDatasetOverwriteOptions = useCallback(async (input = '') => {\n    const { userId } = user;\n    const queryParams = rison.encode({\n      filters: [\n      {\n        col: 'table_name',\n        opr: 'ct',\n        value: input\n      },\n      {\n        col: 'owners',\n        opr: 'rel_m_m',\n        value: userId\n      }],\n\n      order_column: 'changed_on_delta_humanized',\n      order_direction: 'desc'\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/?q=${queryParams}`\n    }).then((response) => ({\n      data: response.json.result.map((r) => ({\n        value: r.table_name,\n        label: r.table_name,\n        datasetid: r.id,\n        owners: r.owners\n      })),\n      totalCount: response.json.count\n    }));\n  }, [user]);\n  const handleSaveInDataset = () => {var _datasource$columns3, _datasource$database;\n    setLoading(true);\n    const selectedColumns = (_datasource$columns3 = datasource == null ? void 0 : datasource.columns) != null ? _datasource$columns3 : [];\n    // The filters param is only used to test jinja templates.\n    // Remove the special filters entry from the templateParams\n    // before saving the dataset.\n    let templateParams;\n    if (typeof (datasource == null ? void 0 : datasource.templateParams) === 'string') {\n      const p = JSON.parse(datasource.templateParams);\n      /* eslint-disable-next-line no-underscore-dangle */\n      if (p._filters) {\n        /* eslint-disable-next-line no-underscore-dangle */\n        delete p._filters;\n        // eslint-disable-next-line no-param-reassign\n        templateParams = JSON.stringify(p);\n      }\n    }\n    dispatch(createDatasource({\n      sql: datasource.sql,\n      dbId: datasource.dbId || (datasource == null ? void 0 : (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id),\n      catalog: datasource == null ? void 0 : datasource.catalog,\n      schema: datasource == null ? void 0 : datasource.schema,\n      templateParams,\n      datasourceName: datasetName\n    })).\n    then((data) => postFormData(data.id, 'table', {\n      ...formDataWithDefaults,\n      datasource: `${data.id}__table`,\n      ...(defaultVizType === VizType.Table && {\n        all_columns: selectedColumns.map((column) => column.column_name)\n      })\n    })).\n    then((key) => {\n      setLoading(false);\n      const url = mountExploreUrl(null, {\n        [URL_PARAMS.formDataKey.name]: key\n      });\n      createWindow(url);\n      setDatasetName(getDefaultDatasetName());\n      onHide();\n    }).\n    catch(() => {\n      setLoading(false);\n      addDangerToast(t('An error occurred saving dataset'));\n    });\n  };\n  const handleOverwriteDatasetOption = (value, option) => {\n    setDatasetToOverwrite(option);\n    setSelectedDatasetToOverwrite(value);\n  };\n  const handleDatasetNameChange = (e) => {\n    // @ts-expect-error\n    setDatasetName(e.target.value);\n  };\n  const handleOverwriteCancel = () => {\n    setShouldOverwriteDataset(false);\n    setDatasetToOverwrite({});\n  };\n  const disableSaveAndExploreBtn = newOrOverwrite === DatasetRadioState.SaveNew &&\n  datasetName.length === 0 ||\n  newOrOverwrite === DatasetRadioState.OverwriteDataset &&\n  _isEmpty(selectedDatasetToOverwrite);\n  const filterAutocompleteOption = (inputValue, option) => option.value.toLowerCase().includes(inputValue.toLowerCase());\n  return _jsx(StyledModal, { show: visible, title: t('Save or Overwrite Dataset'), onHide: onHide, footer: _jsxs(_Fragment, { children: [\n      newOrOverwrite === DatasetRadioState.SaveNew && _jsx(Button, { disabled: disableSaveAndExploreBtn, buttonStyle: \"primary\", onClick: handleSaveInDataset, loading: loading, children:\n        buttonTextOnSave }\n      ),\n      newOrOverwrite === DatasetRadioState.OverwriteDataset && _jsxs(_Fragment, { children: [\n        shouldOverwriteDataset && _jsx(Button, { onClick: handleOverwriteCancel, children: t('Back') }),\n        _jsx(Button, { className: \"md\", buttonStyle: \"primary\", onClick: handleOverwriteDataset, disabled: disableSaveAndExploreBtn, loading: loading, children:\n          buttonTextOnOverwrite }\n        )] }\n      )] }\n    ), children:\n    _jsxs(Styles, { children: [\n      !shouldOverwriteDataset && _jsxs(\"div\", { className: \"sdm-body\", children: [\n        modalDescription && _jsx(\"div\", { className: \"sdm-prompt\", children: modalDescription }),\n        _jsxs(Radio.Group, { onChange: (e) => {\n            setNewOrOverwrite(Number(e.target.value));\n          }, value: newOrOverwrite, children: [\n          _jsxs(Radio, { className: \"sdm-radio\", value: 1, children: [\n            t('Save as new'),\n            _jsx(Input, { className: \"sdm-input\", value: datasetName, onChange: handleDatasetNameChange, disabled: newOrOverwrite !== 1 })] }\n          ),\n          _jsxs(\"div\", { className: \"sdm-overwrite-container\", children: [\n            _jsx(Radio, { className: \"sdm-radio\", value: 2, children:\n              t('Overwrite existing') }\n            ),\n            _jsx(\"div\", { className: \"sdm-autocomplete\", children:\n              _jsx(AsyncSelect, { allowClear: true, showSearch: true, placeholder: t('Select or type dataset name'), ariaLabel: t('Existing dataset'), onChange: handleOverwriteDatasetOption, options: (input) => loadDatasetOverwriteOptions(input), value: selectedDatasetToOverwrite, filterOption: filterAutocompleteOption, disabled: newOrOverwrite !== 2, getPopupContainer: () => document.body }) }\n            )] }\n          )] }\n        )] }\n      ),\n      shouldOverwriteDataset && _jsx(\"div\", { className: \"sdm-overwrite-msg\", children:\n        t('Are you sure you want to overwrite this dataset?') }\n      )] }\n    ) }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}