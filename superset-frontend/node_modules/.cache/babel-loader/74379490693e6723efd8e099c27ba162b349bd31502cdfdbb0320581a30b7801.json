{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport rison from 'rison';\nimport querystring from 'query-string';\nimport { isDefined, styled, SupersetClient, t } from '@superset-ui/core';\nimport { withTheme } from '@emotion/react';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { FilterPlugins, URL_PARAMS } from 'src/constants';\nimport { Link, withRouter } from 'react-router-dom';\nimport Button from 'src/components/Button';\nimport { AsyncSelect } from 'src/components';\nimport { Steps } from 'src/components/Steps';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport VizTypeGallery, { MAX_ADVISABLE_VIZ_GALLERY_WIDTH } from 'src/explore/components/controls/VizTypeControl/VizTypeGallery';\nimport { findPermission } from 'src/utils/findPermission';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { DatasetSelectLabel } from 'src/features/datasets/DatasetSelectLabel';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst ESTIMATED_NAV_HEIGHT = 56;\nconst ELEMENTS_EXCEPT_VIZ_GALLERY = ESTIMATED_NAV_HEIGHT + 250;\nconst bootstrapData = getBootstrapData();\nconst denyList = (bootstrapData.common.conf.VIZ_TYPE_DENYLIST || []).concat(Object.values(FilterPlugins));\nconst StyledContainer = styled.div`\n  ${({ theme }) => `\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    max-width: ${MAX_ADVISABLE_VIZ_GALLERY_WIDTH}px;\n    max-height: calc(100vh - ${ESTIMATED_NAV_HEIGHT}px);\n    border-radius: ${theme.gridUnit}px;\n    background-color: ${theme.colors.grayscale.light5};\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: ${theme.gridUnit * 4}px;\n    padding-right: ${theme.gridUnit * 4}px;\n    padding-bottom: ${theme.gridUnit * 4}px;\n\n    h3 {\n      padding-bottom: ${theme.gridUnit * 3}px;\n    }\n\n    & .dataset {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      margin-bottom: ${theme.gridUnit * 5}px;\n\n      & > div {\n        min-width: 200px;\n        width: 300px;\n      }\n\n      & > span {\n        color: ${theme.colors.grayscale.light1};\n        margin-left: ${theme.gridUnit * 4}px;\n      }\n    }\n\n    & .viz-gallery {\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n      margin: ${theme.gridUnit}px 0px;\n      max-height: calc(100vh - ${ELEMENTS_EXCEPT_VIZ_GALLERY}px);\n      flex: 1;\n    }\n\n    & .footer {\n      flex: 1;\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-end;\n      align-items: center;\n\n      & > span {\n        color: ${theme.colors.grayscale.light1};\n        margin-right: ${theme.gridUnit * 4}px;\n      }\n    }\n\n    /* The following extra ampersands (&&&&) are used to boost selector specificity */\n\n    &&&& .antd5-steps-item-tail {\n      display: none;\n    }\n\n    &&&& .antd5-steps-item-icon {\n      margin-right: ${theme.gridUnit * 2}px;\n      width: ${theme.gridUnit * 5}px;\n      height: ${theme.gridUnit * 5}px;\n      line-height: ${theme.gridUnit * 5}px;\n    }\n\n    &&&& .antd5-steps-item-title {\n      line-height: ${theme.gridUnit * 5}px;\n    }\n\n    &&&& .antd5-steps-item-content {\n      overflow: unset;\n\n      .antd5-steps-item-description {\n        margin-top: ${theme.gridUnit}px;\n        padding-bottom: ${theme.gridUnit}px;\n      }\n    }\n\n    &&&& .antd5-tooltip-open {\n      display: inline;\n    }\n\n    &&&& .ant-select-selector {\n      padding: 0;\n    }\n\n    &&&& .ant-select-selection-placeholder {\n      padding-left: ${theme.gridUnit * 3}px;\n    }\n\n    &&&& .ant-select-selection-item {\n      padding-left: ${theme.gridUnit * 3}px;\n    }\n  `}\n`;\nconst StyledStepTitle = styled.span`\n  ${({ theme: { typography: { sizes, weights } } }) => `\n      font-size: ${sizes.m}px;\n      font-weight: ${weights.bold};\n    `}\n`;\nconst StyledStepDescription = styled.div`\n  ${({ theme: { gridUnit } }) => `\n    margin-top: ${gridUnit * 4}px;\n    margin-bottom: ${gridUnit * 3}px;\n  `}\n`;\nexport class ChartCreation extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vizType: null,\n      canCreateDataset: findPermission('can_write', 'Dataset', props.user.roles)\n    };\n    this.changeDatasource = this.changeDatasource.bind(this);\n    this.changeVizType = this.changeVizType.bind(this);\n    this.gotoSlice = this.gotoSlice.bind(this);\n    this.loadDatasources = this.loadDatasources.bind(this);\n    this.onVizTypeDoubleClick = this.onVizTypeDoubleClick.bind(this);\n  }\n  componentDidMount() {var _querystring$parse;\n    const params = (_querystring$parse = querystring.parse(window.location.search)) == null ? void 0 : _querystring$parse.dataset;\n    if (params) {\n      this.loadDatasources(params, 0, 1).then((r) => {\n        const datasource = r.data[0];\n        // override here to force styling of option label\n        // which expects a reactnode instead of string\n        // @ts-expect-error\n        datasource.label = datasource.customLabel;\n        this.setState({ datasource });\n      });\n      this.props.addSuccessToast(t('The dataset has been saved'));\n    }\n  }\n  exploreUrl() {var _this$state$datasourc;\n    const dashboardId = getUrlParam(URL_PARAMS.dashboardId);\n    let url = `/explore/?viz_type=${this.state.vizType}&datasource=${(_this$state$datasourc = this.state.datasource) == null ? void 0 : _this$state$datasourc.value}`;\n    if (isDefined(dashboardId)) {\n      url += `&dashboard_id=${dashboardId}`;\n    }\n    return url;\n  }\n  gotoSlice() {\n    this.props.history.push(this.exploreUrl());\n  }\n  changeDatasource(datasource) {\n    this.setState({ datasource });\n  }\n  changeVizType(vizType) {\n    this.setState({ vizType });\n  }\n  isBtnDisabled() {var _this$state$datasourc2;\n    return !((_this$state$datasourc2 = this.state.datasource) != null && _this$state$datasourc2.value && this.state.vizType);\n  }\n  onVizTypeDoubleClick() {\n    if (!this.isBtnDisabled()) {\n      this.gotoSlice();\n    }\n  }\n  loadDatasources(search, page, pageSize) {\n    const query = rison.encode({\n      columns: [\n      'id',\n      'table_name',\n      'datasource_type',\n      'database.database_name',\n      'schema'],\n\n      filters: [{ col: 'table_name', opr: 'ct', value: search }],\n      page,\n      page_size: pageSize,\n      order_column: 'table_name',\n      order_direction: 'asc'\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        id: item.id,\n        value: `${item.id}__${item.datasource_type}`,\n        customLabel: DatasetSelectLabel(item),\n        label: item.table_name\n      }));\n      return {\n        data: list,\n        totalCount: response.json.count\n      };\n    });\n  }\n  render() {var _this$state$datasourc3;\n    const { theme } = this.props;\n    const isButtonDisabled = this.isBtnDisabled();\n    const VIEW_INSTRUCTIONS_TEXT = t('view instructions');\n    const datasetHelpText = this.state.canCreateDataset ? _jsxs(\"span\", { children: [\n      _jsx(Link, { to: \"/dataset/add/\", children:\n        t('Add a dataset') }\n      ),\n      t('or'), ' ',\n      _jsxs(\"a\", { href: \"https://superset.apache.org/docs/creating-charts-dashboards/creating-your-first-dashboard/#registering-a-new-table\", rel: \"noopener noreferrer\", target: \"_blank\", children: [\n        `${VIEW_INSTRUCTIONS_TEXT} `,\n        _jsx(Icons.Full, { iconSize: \"m\", iconColor: theme.colors.primary.dark1 })] }\n      ), \".\"] }\n\n    ) : _jsxs(\"span\", { children: [\n      _jsxs(\"a\", { href: \"https://superset.apache.org/docs/creating-charts-dashboards/creating-your-first-dashboard/#registering-a-new-table\", rel: \"noopener noreferrer\", target: \"_blank\", children: [\n        `${VIEW_INSTRUCTIONS_TEXT} `,\n        _jsx(Icons.Full, { iconSize: \"m\", iconColor: theme.colors.primary.dark1 })] }\n      ), \".\"] }\n\n    );\n    return _jsxs(StyledContainer, { children: [\n      _jsx(\"h3\", { children: t('Create a new chart') }),\n      _jsxs(Steps, { direction: \"vertical\", size: \"small\", children: [\n        _jsx(Steps.Step, { title: _jsx(StyledStepTitle, { children: t('Choose a dataset') }), status: (_this$state$datasourc3 = this.state.datasource) != null && _this$state$datasourc3.value ? 'finish' : 'process', description: _jsxs(StyledStepDescription, { className: \"dataset\", children: [\n            _jsx(AsyncSelect, { autoFocus: true, ariaLabel: t('Dataset'), name: \"select-datasource\", onChange: this.changeDatasource, options: this.loadDatasources, optionFilterProps: ['id', 'label'], placeholder: t('Choose a dataset'), showSearch: true, value: this.state.datasource }),\n            datasetHelpText] }\n          ) }),\n        _jsx(Steps.Step, { title: _jsx(StyledStepTitle, { children: t('Choose chart type') }), status: this.state.vizType ? 'finish' : 'process', description: _jsx(StyledStepDescription, { children:\n            _jsx(VizTypeGallery, { denyList: denyList, className: \"viz-gallery\", onChange: this.changeVizType, onDoubleClick: this.onVizTypeDoubleClick, selectedViz: this.state.vizType }) }\n          ) })] }\n      ),\n      _jsxs(\"div\", { className: \"footer\", children: [\n        isButtonDisabled && _jsx(\"span\", { children:\n          t('Please select both a Dataset and a Chart type to proceed') }\n        ),\n        _jsx(Button, { buttonStyle: \"primary\", disabled: isButtonDisabled, onClick: this.gotoSlice, children:\n          t('Create new chart') }\n        )] }\n      )] }\n    );\n  }\n}\nexport default withRouter(withToasts(withTheme(ChartCreation)));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}