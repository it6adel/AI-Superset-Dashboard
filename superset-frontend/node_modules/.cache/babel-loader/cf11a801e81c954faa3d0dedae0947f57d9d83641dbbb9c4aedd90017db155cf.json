{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useMemo, forwardRef, useImperativeHandle } from 'react';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport AsyncSelect from 'src/components/Select/AsyncSelect';\nimport { FilterContainer } from './Base';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nfunction SelectFilter({ Header, name, fetchSelects, initialValue, onSelect, selects = [] }, ref) {\n  const [selectedOption, setSelectedOption] = useState(initialValue);\n  const onChange = (selected) => {\n    onSelect(selected ? { label: selected.label, value: selected.value } : undefined);\n    setSelectedOption(selected);\n  };\n  const onClear = () => {\n    onSelect(undefined, true);\n    setSelectedOption(undefined);\n  };\n  useImperativeHandle(ref, () => ({\n    clearFilter: () => {\n      onClear();\n    }\n  }));\n  const fetchAndFormatSelects = useMemo(() => async (inputValue, page, pageSize) => {\n    if (fetchSelects) {\n      const selectValues = await fetchSelects(inputValue, page, pageSize);\n      return {\n        data: selectValues.data,\n        totalCount: selectValues.totalCount\n      };\n    }\n    return {\n      data: [],\n      totalCount: 0\n    };\n  }, [fetchSelects]);\n  return _jsx(FilterContainer, { children:\n    fetchSelects ? _jsx(AsyncSelect, { allowClear: true, ariaLabel: typeof Header === 'string' ? Header : name || t('Filter'), header: _jsx(FormLabel, { children: Header }), onChange: onChange, onClear: onClear, options: fetchAndFormatSelects, placeholder: t('Select or type a value'), showSearch: true, value: selectedOption }) : _jsx(Select, { allowClear: true, ariaLabel: typeof Header === 'string' ? Header : name || t('Filter'), header: _jsx(FormLabel, { children: Header }), labelInValue: true, onChange: onChange, onClear: onClear, options: selects, placeholder: t('Select or type a value'), showSearch: true, value: selectedOption }) }\n  );\n}\nexport default /*#__PURE__*/forwardRef(SelectFilter);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}