{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { getMetricLabel, getValueFormatter, getNumberFormatter, ensureIsArray } from '@superset-ui/core';\nimport { getComparisonFontSize, getHeaderFontSize } from './utils';\ndayjs.extend(utc);\nexport const parseMetricValue = (metricValue) => {\n  if (typeof metricValue === 'string') {\n    const dateObject = dayjs.utc(metricValue, undefined, true);\n    if (dateObject.isValid()) {\n      return dateObject.valueOf();\n    }\n    return 0;\n  }\n  return metricValue != null ? metricValue : 0;\n};\nexport default function transformProps(chartProps) {var _chartProps$rawFormDa, _chartProps$rawFormDa2, _chartProps$rawFormDa3, _chartProps$rawFormDa4, _chartProps$rawFormDa5, _formData$extraFormDa;\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your CustomViz.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const { width, height, formData, queriesData, datasource: { currencyFormats = {}, columnFormats = {} } } = chartProps;\n  const { boldText, headerFontSize, headerText, metric, yAxisFormat, currencyFormat, subheaderFontSize, comparisonColorScheme, comparisonColorEnabled, percentDifferenceFormat } = formData;\n  const { data: dataA = [] } = queriesData[0];\n  const data = dataA;\n  const metricName = metric ? getMetricLabel(metric) : '';\n  const timeComparison = ensureIsArray((_chartProps$rawFormDa = chartProps.rawFormData) == null ? void 0 : _chartProps$rawFormDa.time_compare)[0];\n  const startDateOffset = (_chartProps$rawFormDa2 = chartProps.rawFormData) == null ? void 0 : _chartProps$rawFormDa2.start_date_offset;\n  const currentTimeRangeFilter = (_chartProps$rawFormDa3 = chartProps.rawFormData) == null ? void 0 : (_chartProps$rawFormDa4 = _chartProps$rawFormDa3.adhoc_filters) == null ? void 0 : (_chartProps$rawFormDa5 = _chartProps$rawFormDa4.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE')) == null ? void 0 : _chartProps$rawFormDa5[0];\n  const isCustomOrInherit = timeComparison === 'custom' || timeComparison === 'inherit';\n  let dataOffset = [];\n  if (isCustomOrInherit) {\n    if (timeComparison && timeComparison === 'custom') {\n      dataOffset = [startDateOffset];\n    } else\n    {\n      dataOffset = ensureIsArray(timeComparison) || [];\n    }\n  }\n  const { value1, value2 } = data.reduce((acc, curr) => {\n    Object.keys(curr).forEach((key) => {\n      if (key.includes(`${metricName}__${!isCustomOrInherit ? timeComparison : dataOffset[0]}`)) {\n        acc.value2 += curr[key];\n      } else\n      if (key.includes(metricName)) {\n        acc.value1 += curr[key];\n      }\n    });\n    return acc;\n  }, { value1: 0, value2: 0 });\n  let bigNumber = data.length === 0 ? 0 : parseMetricValue(value1);\n  let prevNumber = data.length === 0 ? 0 : parseMetricValue(value2);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, yAxisFormat, currencyFormat);\n  const compTitles = {\n    r: 'Range',\n    y: 'Year',\n    m: 'Month',\n    w: 'Week'\n  };\n  const formatPercentChange = getNumberFormatter(percentDifferenceFormat);\n  let valueDifference = bigNumber - prevNumber;\n  let percentDifferenceNum;\n  if (!bigNumber && !prevNumber) {\n    percentDifferenceNum = 0;\n  } else\n  if (!bigNumber || !prevNumber) {\n    percentDifferenceNum = bigNumber ? 1 : -1;\n  } else\n  {\n    percentDifferenceNum = (bigNumber - prevNumber) / Math.abs(prevNumber);\n  }\n  const compType = compTitles[formData.timeComparison];\n  bigNumber = numberFormatter(bigNumber);\n  prevNumber = numberFormatter(prevNumber);\n  valueDifference = numberFormatter(valueDifference);\n  const percentDifference = formatPercentChange(percentDifferenceNum);\n  return {\n    width,\n    height,\n    data,\n    metricName,\n    bigNumber,\n    prevNumber,\n    valueDifference,\n    percentDifferenceFormattedString: percentDifference,\n    boldText,\n    headerFontSize: getHeaderFontSize(headerFontSize),\n    subheaderFontSize: getComparisonFontSize(subheaderFontSize),\n    headerText,\n    compType,\n    comparisonColorEnabled,\n    comparisonColorScheme,\n    percentDifferenceNumber: percentDifferenceNum,\n    currentTimeRangeFilter,\n    startDateOffset,\n    shift: timeComparison,\n    dashboardTimeRange: formData == null ? void 0 : (_formData$extraFormDa = formData.extraFormData) == null ? void 0 : _formData$extraFormDa.time_range\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}