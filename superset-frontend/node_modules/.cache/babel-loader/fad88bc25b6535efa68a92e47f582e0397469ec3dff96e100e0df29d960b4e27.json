{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport { COMMON_ERR_MESSAGES, t } from '@superset-ui/core';\nimport { VALIDATION_DEBOUNCE_MS } from 'src/SqlLab/constants';\nimport { useQueryValidationsQuery } from 'src/hooks/apiResources';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nconst EMPTY = [];\nexport function useAnnotations(params) {\n  const { sql, dbId, schema, templateParams } = params;\n  const debouncedSql = useDebounceValue(sql, VALIDATION_DEBOUNCE_MS);\n  const hasValidator = useSelector(({ sqlLab, common }) => {var _common$conf, _common$conf$SQL_VALI, _sqlLab$databases, _sqlLab$databases2;return (\n      // Check whether or not we can validate the current query based on whether\n      // or not the backend has a validator configured for it.\n      Boolean(common == null ? void 0 : (_common$conf = common.conf) == null ? void 0 : (_common$conf$SQL_VALI = _common$conf.SQL_VALIDATORS_BY_ENGINE) == null ? void 0 : _common$conf$SQL_VALI[sqlLab == null ? void 0 : (_sqlLab$databases = sqlLab.databases) == null ? void 0 : (_sqlLab$databases2 = _sqlLab$databases[dbId || '']) == null ? void 0 : _sqlLab$databases2.backend]));});\n  return useQueryValidationsQuery({\n    dbId,\n    schema,\n    sql: debouncedSql,\n    templateParams\n  }, {\n    skip: !(hasValidator && dbId && sql),\n    selectFromResult: ({ isLoading, isError, error, data }) => {\n      const errorObj = error != null ? error : {};\n      let message = (errorObj == null ? void 0 : errorObj.error) || (errorObj == null ? void 0 : errorObj.statusText) || t('Unknown error');\n      if (message.includes('CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      return {\n        data: !isLoading && data != null && data.length ?\n        data.map((err) => ({\n          type: 'error',\n          row: (err.line_number || 0) - 1,\n          column: (err.start_column || 0) - 1,\n          text: err.message\n        })) :\n        isError ?\n        [\n        {\n          type: 'error',\n          row: 0,\n          column: 0,\n          text: `The server failed to validate your query.\\n${message}`\n        }] :\n\n        EMPTY\n      };\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}