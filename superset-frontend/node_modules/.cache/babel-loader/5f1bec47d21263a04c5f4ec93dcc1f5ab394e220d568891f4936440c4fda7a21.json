{"ast":null,"code":"import _pick from \"lodash/pick\";\nimport { tableApiUtil } from 'src/hooks/apiResources/tables';\nimport { BYTES_PER_CHAR, KB_STORAGE, LOCALSTORAGE_MAX_QUERY_AGE_MS, LOCALSTORAGE_MAX_QUERY_RESULTS_KB } from '../constants';\nconst PERSISTENT_QUERY_EDITOR_KEYS = new Set([\n'version',\n'remoteId',\n'autorun',\n'dbId',\n'height',\n'id',\n'latestQueryId',\n'northPercent',\n'queryLimit',\n'schema',\n'selectedText',\n'southPercent',\n'sql',\n'templateParams',\n'name',\n'hideLeftBar']\n);\nfunction shouldEmptyQueryResults(query) {var _JSON$stringify;\n  const { startDttm, results } = query;\n  return Date.now() - startDttm > LOCALSTORAGE_MAX_QUERY_AGE_MS ||\n  (((_JSON$stringify = JSON.stringify(results)) == null ? void 0 : _JSON$stringify.length) || 0) * BYTES_PER_CHAR / KB_STORAGE >\n  LOCALSTORAGE_MAX_QUERY_RESULTS_KB;\n}\nexport function emptyTablePersistData(tables) {\n  return tables.\n  map((table) => _pick(table, [\n  'id',\n  'name',\n  'dbId',\n  'schema',\n  'dataPreviewQueryId',\n  'queryEditorId']\n  )).\n  filter(({ queryEditorId }) => Boolean(queryEditorId));\n}\nexport function emptyQueryResults(queries) {\n  return Object.keys(queries).reduce((accu, key) => {\n    const { results } = queries[key];\n    const query = {\n      ...queries[key],\n      results: shouldEmptyQueryResults(queries[key]) ? {} : results\n    };\n    const updatedQueries = {\n      ...accu,\n      [key]: query\n    };\n    return updatedQueries;\n  }, {});\n}\nexport function clearQueryEditors(queryEditors) {\n  return queryEditors.map((editor) =>\n  // only return selected keys\n  Object.keys(editor).\n  filter((key) => PERSISTENT_QUERY_EDITOR_KEYS.has(key)).\n  reduce((accumulator, key) => ({\n    ...accumulator,\n    [key]: editor[key]\n  }), {}));\n}\nexport function rehydratePersistedState(dispatch, state) {\n  // Rehydrate server side persisted table metadata\n  state.sqlLab.tables.forEach(({ name: table, catalog, schema, dbId, persistData }) => {\n    if (dbId && schema && table && persistData != null && persistData.columns) {\n      dispatch(tableApiUtil.upsertQueryData('tableMetadata', { dbId, catalog, schema, table }, persistData));\n      dispatch(tableApiUtil.upsertQueryData('tableExtendedMetadata', { dbId, catalog, schema, table }, {}));\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}