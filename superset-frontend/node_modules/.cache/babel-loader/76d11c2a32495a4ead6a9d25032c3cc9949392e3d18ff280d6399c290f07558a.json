{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TABS_TYPE } from './componentTypes';\nimport { DROP_LEFT, DROP_RIGHT } from './getDropPosition';\n\nexport function reorder(list, startIndex, endIndex) {\n  const result = [...list];\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n\nexport default function reorderItem({\n  entitiesMap,\n  source,\n  destination,\n  position\n}) {\n  const current = [...entitiesMap[source.id].children];\n  const next = [...entitiesMap[destination.id].children];\n  const target = current[source.index];\n\n  const isSameSource = source.id === destination.id;\n  const isTabsType = source.type && destination.type === TABS_TYPE;\n\n  // moving to same list\n  let dropIndex = destination.index;\n\n  if (isSameSource) {\n    if (isTabsType) {\n      if (position === DROP_LEFT) {\n        dropIndex = Math.max(dropIndex, 0);\n      } else if (position === DROP_RIGHT) {\n        dropIndex += 1;\n      }\n\n      const isRightPosition =\n      position === DROP_RIGHT && source.index === destination.index + 1;\n      const isLeftPosition =\n      position === DROP_LEFT && source.index === destination.index - 1;\n\n      const sameTabSourceIndex = isRightPosition || isLeftPosition;\n\n      if (sameTabSourceIndex) {\n        // If the source tab is dropped to be the same index as the source\n        // tab, no change is needed in entitiesMap\n        return entitiesMap;\n      }\n\n      // Adjust dropIndex to account for the source tab being removed\n      if (dropIndex > source.index) {\n        dropIndex -= 1;\n      }\n    }\n    const reordered = reorder(current, source.index, dropIndex);\n\n    const result = {\n      ...entitiesMap,\n      [source.id]: {\n        ...entitiesMap[source.id],\n        children: reordered\n      }\n    };\n\n    return result;\n  }\n\n  if (isTabsType) {\n    // Ensure the dropIndex is within the bounds of the destination children\n    if (position === DROP_LEFT) {\n      dropIndex = Math.max(dropIndex, 0);\n    } else if (position === DROP_RIGHT) {\n      dropIndex = Math.min(dropIndex + 1, current.length - 1);\n    }\n  }\n\n  // moving to different list\n  current.splice(source.index, 1); // remove from original\n  next.splice(dropIndex, 0, target); // insert into next\n\n  const result = {\n    ...entitiesMap,\n    [source.id]: {\n      ...entitiesMap[source.id],\n      children: current\n    },\n    [destination.id]: {\n      ...entitiesMap[destination.id],\n      children: next\n    }\n  };\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}