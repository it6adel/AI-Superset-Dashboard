{"ast":null,"code":"import _omit from \"lodash/omit\";function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { Input } from 'src/components/Input';\nimport { FormItem } from 'src/components/Form';\nimport jsonStringify from 'json-stringify-pretty-compact';\nimport Button from 'src/components/Button';\nimport { AntdForm, AsyncSelect, Col, Row } from 'src/components';\nimport rison from 'rison';\nimport { ensureIsArray, isFeatureEnabled, FeatureFlag, getCategoricalSchemeRegistry, styled, SupersetClient, t, getClientErrorObject, css } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';\nimport ColorSchemeControlWrapper from 'src/dashboard/components/ColorSchemeControlWrapper';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { fetchTags, OBJECT_TYPES } from 'src/features/tags/tags';\nimport { loadTags } from 'src/components/Tags/utils';\nimport { applyColors, getColorNamespace, getFreshLabelsColorMapEntries } from 'src/utils/colorScheme';\nimport getOwnerName from 'src/utils/getOwnerName';\nimport { useDispatch } from 'react-redux';\nimport { setColorScheme, setDashboardMetadata } from 'src/dashboard/actions/dashboardState';\nimport { areObjectsEqual } from 'src/reduxUtils';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\nconst StyledJsonEditor = styled(JsonEditor)`\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ theme }) => theme.colors.secondary.light2};\n`;var _ref = process.env.NODE_ENV === \"production\" ? { name: \"1blj7km\", styles: \"margin-top:1em\" } : { name: \"1gtq0eh-PropertiesModal\", styles: \"margin-top:1em;label:PropertiesModal;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nconst PropertiesModal = ({ addSuccessToast, addDangerToast, colorScheme: currentColorScheme, dashboardId, dashboardInfo: currentDashboardInfo, dashboardTitle, onHide = () => {}, onlyApply = false, onSubmit = () => {}, show = false }) => {\n  const dispatch = useDispatch();\n  const [form] = AntdForm.useForm();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);\n  const [colorScheme, setCurrentColorScheme] = useState(currentColorScheme);\n  const [jsonMetadata, setJsonMetadata] = useState('');\n  const [dashboardInfo, setDashboardInfo] = useState();\n  const [owners, setOwners] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const saveLabel = onlyApply ? t('Apply') : t('Save');\n  const [tags, setTags] = useState([]);\n  const categoricalSchemeRegistry = getCategoricalSchemeRegistry();\n  const originalDashboardMetadata = useRef({});\n  const tagsAsSelectValues = useMemo(() => {\n    const selectTags = tags.map((tag) => ({\n      value: tag.id,\n      label: tag.name\n    }));\n    return selectTags;\n  }, [tags.length]);\n  const handleErrorResponse = async (response) => {\n    const { error, statusText, message } = await getClientErrorObject(response);\n    let errorText = error || statusText || t('An error has occurred');\n    if (typeof message === 'object' && 'json_metadata' in message) {\n      errorText = message.json_metadata;\n    } else\n    if (typeof message === 'string') {\n      errorText = message;\n      if (message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n    }\n    Modal.error({\n      title: t('Error'),\n      content: errorText,\n      okButtonProps: { danger: true, className: 'btn-danger' }\n    });\n  };\n  const loadAccessOptions = useCallback((accessType = 'owners', input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/related/${accessType}?q=${query}`\n    }).then((response) => ({\n      data: response.json.result.\n      filter((item) => item.extra.active !== undefined ? item.extra.active : true).\n      map((item) => ({\n        value: item.value,\n        label: item.text\n      })),\n      totalCount: response.json.count\n    }));\n  }, []);\n  const handleDashboardData = useCallback((dashboardData) => {\n    const { id, dashboard_title, slug, certified_by, certification_details, owners, roles, metadata, is_managed_externally } = dashboardData;\n    const dashboardInfo = {\n      id,\n      title: dashboard_title,\n      slug: slug || '',\n      certifiedBy: certified_by || '',\n      certificationDetails: certification_details || '',\n      isManagedExternally: is_managed_externally || false,\n      metadata\n    };\n    form.setFieldsValue(dashboardInfo);\n    setDashboardInfo(dashboardInfo);\n    setOwners(owners);\n    setRoles(roles);\n    setCurrentColorScheme(metadata.color_scheme);\n    const metaDataCopy = _omit(metadata, [\n    'positions',\n    'shared_label_colors',\n    'map_label_colors',\n    'color_scheme_domain']\n    );\n    setJsonMetadata(metaDataCopy ? jsonStringify(metaDataCopy) : '');\n    originalDashboardMetadata.current = metadata;\n  }, [form]);\n  const fetchDashboardDetails = useCallback(() => {\n    setIsLoading(true);\n    // We fetch the dashboard details because not all code\n    // that renders this component have all the values we need.\n    // At some point when we have a more consistent frontend\n    // datamodel, the dashboard could probably just be passed as a prop.\n    SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${dashboardId}`\n    }).then((response) => {var _dashboard$json_metad;\n      const dashboard = response.json.result;\n      const jsonMetadataObj = (_dashboard$json_metad = dashboard.json_metadata) != null && _dashboard$json_metad.length ?\n      JSON.parse(dashboard.json_metadata) :\n      {};\n      handleDashboardData({\n        ...dashboard,\n        metadata: jsonMetadataObj\n      });\n      setIsLoading(false);\n    }, handleErrorResponse);\n  }, [dashboardId, handleDashboardData]);\n  const getJsonMetadata = () => {\n    try {\n      const jsonMetadataObj = jsonMetadata != null && jsonMetadata.length ?\n      JSON.parse(jsonMetadata) :\n      {};\n      return jsonMetadataObj;\n    }\n    catch (_) {\n      return {};\n    }\n  };\n  const handleOnChangeOwners = (owners) => {\n    const parsedOwners = ensureIsArray(owners).map((o) => ({\n      id: o.value,\n      full_name: o.label\n    }));\n    setOwners(parsedOwners);\n  };\n  const handleOnChangeRoles = (roles) => {\n    const parsedRoles = ensureIsArray(roles).map((r) => ({\n      id: r.value,\n      name: r.label\n    }));\n    setRoles(parsedRoles);\n  };\n  const handleOwnersSelectValue = () => {\n    const parsedOwners = (owners || []).map((owner) => ({\n      value: owner.id,\n      label: getOwnerName(owner)\n    }));\n    return parsedOwners;\n  };\n  const handleRolesSelectValue = () => {\n    const parsedRoles = (roles || []).map((role) => ({\n      value: role.id,\n      label: `${role.name}`\n    }));\n    return parsedRoles;\n  };\n  const handleOnCancel = () => onHide();\n  const onColorSchemeChange = (colorScheme = '', { updateMetadata = true } = {}) => {\n    // check that color_scheme is valid\n    const colorChoices = categoricalSchemeRegistry.keys();\n    const jsonMetadataObj = getJsonMetadata();\n    // only fire if the color_scheme is present and invalid\n    if (colorScheme && !colorChoices.includes(colorScheme)) {\n      Modal.error({\n        title: t('Error'),\n        content: t('A valid color scheme is required'),\n        okButtonProps: { danger: true, className: 'btn-danger' }\n      });\n      onHide();\n      throw new Error('A valid color scheme is required');\n    }\n    jsonMetadataObj.color_scheme = colorScheme;\n    jsonMetadataObj.label_colors = jsonMetadataObj.label_colors || {};\n    setCurrentColorScheme(colorScheme);\n    dispatch(setColorScheme(colorScheme));\n    // update metadata to match selection\n    if (updateMetadata) {\n      setJsonMetadata(jsonStringify(jsonMetadataObj));\n    }\n  };\n  const onFinish = () => {var _metadata, _metadata2, _metadata3, _metadata4;\n    const { title, slug, certifiedBy, certificationDetails } = form.getFieldsValue();\n    let currentJsonMetadata = jsonMetadata;\n    // validate currentJsonMetadata\n    let metadata;\n    try {\n      if (!currentJsonMetadata.startsWith('{') ||\n      !currentJsonMetadata.endsWith('}')) {\n        throw new Error();\n      }\n      metadata = JSON.parse(currentJsonMetadata);\n    }\n    catch (error) {\n      addDangerToast(t('JSON metadata is invalid!'));\n      return;\n    }\n    const colorNamespace = getColorNamespace((_metadata = metadata) == null ? void 0 : _metadata.color_namespace);\n    // color scheme in json metadata has precedence over selection\n    const updatedColorScheme = ((_metadata2 = metadata) == null ? void 0 : _metadata2.color_scheme) || colorScheme;\n    const shouldGoFresh = updatedColorScheme !== originalDashboardMetadata.current.color_scheme;\n    const shouldResetCustomLabels = !areObjectsEqual(originalDashboardMetadata.current.label_colors || {}, ((_metadata3 = metadata) == null ? void 0 : _metadata3.label_colors) || {});\n    const currentCustomLabels = Object.keys(((_metadata4 = metadata) == null ? void 0 : _metadata4.label_colors) || {});\n    const prevCustomLabels = Object.keys(originalDashboardMetadata.current.label_colors || {});\n    const resettableCustomLabels = currentCustomLabels.length > 0 ? currentCustomLabels : prevCustomLabels;\n    const freshCustomLabels = shouldResetCustomLabels && resettableCustomLabels.length > 0 ?\n    resettableCustomLabels :\n    false;\n    const jsonMetadataObj = getJsonMetadata();\n    const customLabelColors = jsonMetadataObj.label_colors || {};\n    const updatedDashboardMetadata = {\n      ...originalDashboardMetadata.current,\n      label_colors: customLabelColors,\n      color_scheme: updatedColorScheme\n    };\n    originalDashboardMetadata.current = updatedDashboardMetadata;\n    applyColors(updatedDashboardMetadata, shouldGoFresh || freshCustomLabels);\n    dispatch(setDashboardMetadata({\n      ...updatedDashboardMetadata,\n      map_label_colors: getFreshLabelsColorMapEntries(customLabelColors)\n    }));\n    onColorSchemeChange(updatedColorScheme, {\n      updateMetadata: false\n    });\n    currentJsonMetadata = jsonStringify(metadata);\n    const moreOnSubmitProps = {};\n    const morePutProps = {};\n    if (isFeatureEnabled(FeatureFlag.DashboardRbac)) {\n      moreOnSubmitProps.roles = roles;\n      morePutProps.roles = (roles || []).map((r) => r.id);\n    }\n    if (isFeatureEnabled(FeatureFlag.TaggingSystem)) {\n      morePutProps.tags = tags.map((tag) => tag.id);\n    }\n    const onSubmitProps = {\n      id: dashboardId,\n      title,\n      slug,\n      jsonMetadata: currentJsonMetadata,\n      owners,\n      colorScheme: currentColorScheme,\n      colorNamespace,\n      certifiedBy,\n      certificationDetails,\n      ...moreOnSubmitProps\n    };\n    if (onlyApply) {\n      onSubmit(onSubmitProps);\n      onHide();\n      addSuccessToast(t('Dashboard properties updated'));\n    } else\n    {\n      SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${dashboardId}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          dashboard_title: title,\n          slug: slug || null,\n          json_metadata: currentJsonMetadata || null,\n          owners: (owners || []).map((o) => o.id),\n          certified_by: certifiedBy || null,\n          certification_details: certifiedBy && certificationDetails ? certificationDetails : null,\n          ...morePutProps\n        })\n      }).then(() => {\n        onSubmit(onSubmitProps);\n        onHide();\n        addSuccessToast(t('The dashboard has been saved'));\n      }, handleErrorResponse);\n    }\n  };\n  const getRowsWithoutRoles = () => {\n    const jsonMetadataObj = getJsonMetadata();\n    const hasCustomLabelsColor = !!Object.keys((jsonMetadataObj == null ? void 0 : jsonMetadataObj.label_colors) || {}).length;\n    return _jsxs(Row, { gutter: 16, children: [\n      _jsxs(Col, { xs: 24, md: 12, children: [\n        _jsx(\"h3\", { style: { marginTop: '1em' }, children: t('Access') }),\n        _jsx(StyledFormItem, { label: t('Owners'), children:\n          _jsx(AsyncSelect, { allowClear: true, ariaLabel: t('Owners'), disabled: isLoading, mode: \"multiple\", onChange: handleOnChangeOwners, options: (input, page, pageSize) => loadAccessOptions('owners', input, page, pageSize), value: handleOwnersSelectValue() }) }\n        ),\n        _jsx(\"p\", { className: \"help-block\", children:\n          t('Owners is a list of users who can alter the dashboard. Searchable by name or username.') }\n        )] }\n      ),\n      _jsxs(Col, { xs: 24, md: 12, children: [\n        _jsx(\"h3\", { style: { marginTop: '1em' }, children: t('Colors') }),\n        _jsx(ColorSchemeControlWrapper, { hasCustomLabelsColor: hasCustomLabelsColor, onChange: onColorSchemeChange, colorScheme: colorScheme })] }\n      )] }\n    );\n  };\n  const getRowsWithRoles = () => {\n    const jsonMetadataObj = getJsonMetadata();\n    const hasCustomLabelsColor = !!Object.keys((jsonMetadataObj == null ? void 0 : jsonMetadataObj.label_colors) || {}).length;\n    return _jsxs(_Fragment, { children: [\n      _jsx(Row, { children:\n        _jsx(Col, { xs: 24, md: 24, children:\n          _jsx(\"h3\", { style: { marginTop: '1em' }, children: t('Access') }) }\n        ) }\n      ),\n      _jsxs(Row, { gutter: 16, children: [\n        _jsxs(Col, { xs: 24, md: 12, children: [\n          _jsx(StyledFormItem, { label: t('Owners'), children:\n            _jsx(AsyncSelect, { allowClear: true, allowNewOptions: true, ariaLabel: t('Owners'), disabled: isLoading, mode: \"multiple\", onChange: handleOnChangeOwners, options: (input, page, pageSize) => loadAccessOptions('owners', input, page, pageSize), value: handleOwnersSelectValue() }) }\n          ),\n          _jsx(\"p\", { className: \"help-block\", children:\n            t('Owners is a list of users who can alter the dashboard. Searchable by name or username.') }\n          )] }\n        ),\n        _jsxs(Col, { xs: 24, md: 12, children: [\n          _jsx(StyledFormItem, { label: t('Roles'), children:\n            _jsx(AsyncSelect, { allowClear: true, ariaLabel: t('Roles'), disabled: isLoading, mode: \"multiple\", onChange: handleOnChangeRoles, options: (input, page, pageSize) => loadAccessOptions('roles', input, page, pageSize), value: handleRolesSelectValue() }) }\n          ),\n          _jsx(\"p\", { className: \"help-block\", children:\n            t('Roles is a list which defines access to the dashboard. Granting a role access to a dashboard will bypass dataset level checks. If no roles are defined, regular access permissions apply.') }\n          )] }\n        )] }\n      ),\n      _jsx(Row, { children:\n        _jsx(Col, { xs: 24, md: 12, children:\n          _jsx(ColorSchemeControlWrapper, { hasCustomLabelsColor: hasCustomLabelsColor, onChange: onColorSchemeChange, colorScheme: colorScheme }) }\n        ) }\n      )] }\n    );\n  };\n  useEffect(() => {\n    if (show) {\n      if (!currentDashboardInfo) {\n        fetchDashboardDetails();\n      } else\n      {\n        handleDashboardData(currentDashboardInfo);\n      }\n    }\n    JsonEditor.preload();\n  }, [currentDashboardInfo, fetchDashboardDetails, handleDashboardData, show]);\n  useEffect(() => {\n    // the title can be changed inline in the dashboard, this catches it\n    if (dashboardTitle &&\n    dashboardInfo &&\n    dashboardInfo.title !== dashboardTitle) {\n      form.setFieldsValue({\n        ...dashboardInfo,\n        title: dashboardTitle\n      });\n    }\n  }, [dashboardInfo, dashboardTitle, form]);\n  useEffect(() => {\n    if (!isFeatureEnabled(FeatureFlag.TaggingSystem))\n    return;\n    try {\n      fetchTags({\n        objectType: OBJECT_TYPES.DASHBOARD,\n        objectId: dashboardId,\n        includeTypes: false\n      }, (tags) => setTags(tags), (error) => {\n        addDangerToast(`Error fetching tags: ${error.text}`);\n      });\n    }\n    catch (error) {\n      handleErrorResponse(error);\n    }\n  }, [dashboardId]);\n  const handleChangeTags = (tags) => {\n    const parsedTags = ensureIsArray(tags).map((r) => ({\n      id: r.value,\n      name: r.label\n    }));\n    setTags(parsedTags);\n  };\n  return _jsx(Modal, { show: show, onHide: handleOnCancel, title: t('Dashboard properties'), footer: _jsxs(_Fragment, { children: [\n      _jsx(Button, { htmlType: \"button\", buttonSize: \"small\", onClick: handleOnCancel, cta: true, children:\n        t('Cancel') }\n      ),\n      _jsx(Button, { onClick: form.submit, buttonSize: \"small\", buttonStyle: \"primary\", className: \"m-r-5\", cta: true, disabled: dashboardInfo == null ? void 0 : dashboardInfo.isManagedExternally, tooltip: dashboardInfo != null && dashboardInfo.isManagedExternally ?\n        t(\"This dashboard is managed externally, and can't be edited in Superset\") :\n        '', children:\n        saveLabel }\n      )] }\n    ), responsive: true, children:\n    _jsxs(AntdForm, { form: form, onFinish: onFinish, layout: \"vertical\", initialValues: dashboardInfo, children: [\n      _jsx(Row, { children:\n        _jsx(Col, { xs: 24, md: 24, children:\n          _jsx(\"h3\", { children: t('Basic information') }) }\n        ) }\n      ),\n      _jsxs(Row, { gutter: 16, children: [\n        _jsx(Col, { xs: 24, md: 12, children:\n          _jsx(FormItem, { label: t('Name'), name: \"title\", children:\n            _jsx(Input, { type: \"text\", disabled: isLoading }) }\n          ) }\n        ),\n        _jsxs(Col, { xs: 24, md: 12, children: [\n          _jsx(StyledFormItem, { label: t('URL slug'), name: \"slug\", children:\n            _jsx(Input, { type: \"text\", disabled: isLoading }) }\n          ),\n          _jsx(\"p\", { className: \"help-block\", children:\n            t('A readable URL for your dashboard') }\n          )] }\n        )] }\n      ),\n      isFeatureEnabled(FeatureFlag.DashboardRbac) ?\n      getRowsWithRoles() :\n      getRowsWithoutRoles(),\n      _jsx(Row, { children:\n        _jsx(Col, { xs: 24, md: 24, children:\n          _jsx(\"h3\", { children: t('Certification') }) }\n        ) }\n      ),\n      _jsxs(Row, { gutter: 16, children: [\n        _jsxs(Col, { xs: 24, md: 12, children: [\n          _jsx(StyledFormItem, { label: t('Certified by'), name: \"certifiedBy\", children:\n            _jsx(Input, { type: \"text\", disabled: isLoading }) }\n          ),\n          _jsx(\"p\", { className: \"help-block\", children:\n            t('Person or group that has certified this dashboard.') }\n          )] }\n        ),\n        _jsxs(Col, { xs: 24, md: 12, children: [\n          _jsx(StyledFormItem, { label: t('Certification details'), name: \"certificationDetails\", children:\n            _jsx(Input, { type: \"text\", disabled: isLoading }) }\n          ),\n          _jsx(\"p\", { className: \"help-block\", children:\n            t('Any additional detail to show in the certification tooltip.') }\n          )] }\n        )] }\n      ),\n      isFeatureEnabled(FeatureFlag.TaggingSystem) ? _jsx(Row, { gutter: 16, children:\n        _jsx(Col, { xs: 24, md: 12, children:\n          _jsx(\"h3\", { css: _ref, children: t('Tags') }) }\n        ) }\n      ) : null,\n      isFeatureEnabled(FeatureFlag.TaggingSystem) ? _jsx(Row, { gutter: 16, children:\n        _jsxs(Col, { xs: 24, md: 12, children: [\n          _jsx(StyledFormItem, { children:\n            _jsx(AsyncSelect, { ariaLabel: \"Tags\", mode: \"multiple\", value: tagsAsSelectValues, options: loadTags, onChange: handleChangeTags, allowClear: true }) }\n          ),\n          _jsx(\"p\", { className: \"help-block\", children:\n            t('A list of tags that have been applied to this chart.') }\n          )] }\n        ) }\n      ) : null,\n      _jsx(Row, { children:\n        _jsxs(Col, { xs: 24, md: 24, children: [\n          _jsx(\"h3\", { style: { marginTop: '1em' }, children:\n            _jsxs(Button, { buttonStyle: \"link\", onClick: () => setIsAdvancedOpen(!isAdvancedOpen), css: css`\n                  padding: 0;\n                `, children: [\n\n              _jsx(\"i\", { className: `fa fa-angle-${isAdvancedOpen ? 'down' : 'right'}`, style: { minWidth: '1em' } }),\n              t('Advanced')] }\n            ) }\n          ),\n          isAdvancedOpen && _jsxs(_Fragment, { children: [\n            _jsx(StyledFormItem, { label: t('JSON metadata'), children:\n              _jsx(StyledJsonEditor, { showLoadingForImport: true, name: \"json_metadata\", value: jsonMetadata, onChange: setJsonMetadata, tabSize: 2, width: \"100%\", height: \"200px\", wrapEnabled: true }) }\n            ),\n            _jsxs(\"p\", { className: \"help-block\", children: [\n              t('This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter specific parameters.'),\n              onlyApply && _jsxs(_Fragment, { children: [\n                ' ',\n                t('Please DO NOT overwrite the \"filter_scopes\" key.'), ' ',\n                _jsx(FilterScopeModal, { triggerNode: _jsx(\"span\", { className: \"alert-link\", children:\n                    t('Use \"%(menuName)s\" menu instead.', {\n                      menuName: t('Set filter mapping')\n                    }) }\n                  ) })] }\n              )] }\n            )] }\n          )] }\n        ) }\n      )] }\n    ) }\n  );\n};\nexport default withToasts(PropertiesModal);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}