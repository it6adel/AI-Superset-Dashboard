{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getBBoxCeil from './svg/getBBoxCeil';\nimport { hiddenSvgFactory, textFactory } from './svg/factories';\nimport updateTextNode from './svg/updateTextNode';\n/**\n * get dimensions of multiple texts with same style\n * @param input\n * @param defaultDimension\n */\nexport default function getMultipleTextDimensions(input, defaultDimension) {\n  const { texts, className, style, container } = input;\n  const cache = new Map();\n  // for empty string\n  cache.set('', { height: 0, width: 0 });\n  let textNode;\n  let svgNode;\n  const dimensions = texts.map((text) => {\n    // Check if this string has been computed already\n    if (cache.has(text)) {\n      return cache.get(text);\n    }\n    // Lazy creation of text and svg nodes\n    if (!textNode) {\n      svgNode = hiddenSvgFactory.createInContainer(container);\n      textNode = textFactory.createInContainer(svgNode);\n    }\n    // Update text and get dimension\n    updateTextNode(textNode, { className, style, text });\n    const dimension = getBBoxCeil(textNode, defaultDimension);\n    // Store result to cache\n    cache.set(text, dimension);\n    return dimension;\n  });\n  // Remove svg node, if any\n  if (svgNode && textNode) {\n    // The nodes are added to the DOM briefly only to make getBBox works.\n    // (If not added to DOM getBBox will always return 0x0.)\n    // After that the svg nodes are not needed.\n    // We delay its removal in case there are subsequent calls to this function\n    // that can reuse the svg nodes.\n    // Experiments have shown that reusing existing nodes\n    // instead of deleting and adding new ones can save lot of time.\n    setTimeout(() => {\n      textFactory.removeFromContainer(svgNode);\n      hiddenSvgFactory.removeFromContainer(container);\n    }, 500);\n  }\n  return dimensions;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}