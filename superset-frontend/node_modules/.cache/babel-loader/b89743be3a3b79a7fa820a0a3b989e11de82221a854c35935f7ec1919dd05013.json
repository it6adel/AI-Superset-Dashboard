{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * License); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useRef } from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport AntTable from 'antd/lib/table'; // TODO: Remove antd\nimport { t, useTheme, logging, styled } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport InteractiveTableUtils from './utils/InteractiveTableUtils';\nimport VirtualTable from './VirtualTable';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const SUPERSET_TABLE_COLUMN = 'superset/table-column';\nexport var SelectionType;\n(function (SelectionType) {\n  SelectionType[\"Disabled\"] = \"disabled\";\n  SelectionType[\"Single\"] = \"single\";\n  SelectionType[\"Multi\"] = \"multi\";\n})(SelectionType || (SelectionType = {}));\nexport var ETableAction;\n(function (ETableAction) {\n  ETableAction[\"Paginate\"] = \"paginate\";\n  ETableAction[\"Sort\"] = \"sort\";\n  ETableAction[\"Filter\"] = \"filter\";\n})(ETableAction || (ETableAction = {}));\nexport var TableSize;\n(function (TableSize) {\n  TableSize[\"Small\"] = \"small\";\n  TableSize[\"Middle\"] = \"middle\";\n})(TableSize || (TableSize = {}));\nconst defaultRowSelection = [];\nconst PAGINATION_HEIGHT = 40;\nconst HEADER_HEIGHT = 68;\nconst StyledTable = styled(AntTable)(({ theme, height }) => `\n    .ant-table-body {\n      overflow: auto;\n      height: ${height ? `${height}px` : undefined};\n    }\n\n    th.ant-table-cell {\n      font-weight: ${theme.typography.weights.bold};\n      color: ${theme.colors.grayscale.dark1};\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .ant-table-tbody > tr > td {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      border-bottom: 1px solid ${theme.colors.grayscale.light3};\n    }\n\n    .ant-pagination-item-active {\n      border-color: ${theme.colors.primary.base};\n    }\n\n    .ant-table.ant-table-small {\n      font-size: ${theme.typography.sizes.s}px;\n    }\n  `);\nconst StyledVirtualTable = styled(VirtualTable)(({ theme }) => `\n  .virtual-table .ant-table-container:before,\n  .virtual-table .ant-table-container:after {\n    display: none;\n  }\n  .virtual-table-cell {\n    box-sizing: border-box;\n    padding: ${theme.gridUnit * 4}px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`);\nconst defaultLocale = {\n  filterTitle: t('Filter menu'),\n  filterConfirm: t('OK'),\n  filterReset: t('Reset'),\n  filterEmptyText: t('No filters'),\n  filterCheckall: t('Select all items'),\n  filterSearchPlaceholder: t('Search in filters'),\n  emptyText: t('No data'),\n  selectAll: t('Select current page'),\n  selectInvert: t('Invert current page'),\n  selectNone: t('Clear all data'),\n  selectionAll: t('Select all data'),\n  sortTitle: t('Sort'),\n  expand: t('Expand row'),\n  collapse: t('Collapse row'),\n  triggerDesc: t('Click to sort descending'),\n  triggerAsc: t('Click to sort ascending'),\n  cancelSort: t('Click to cancel sorting')\n};\nconst selectionMap = {\n  [SelectionType.Multi]: 'checkbox',\n  [SelectionType.Single]: 'radio',\n  [SelectionType.Disabled]: null\n};\nconst noop = () => {};\nexport function Table(props) {\n  const { data, bordered, columns, selectedRows = defaultRowSelection, handleRowSelection, size = TableSize.Small, selectionType = SelectionType.Disabled, sticky = true, loading = false, resizable = false, reorderable = false, usePagination = true, defaultPageSize = 15, pageSizeOptions = ['5', '15', '25', '50', '100'], hideData = false, locale, height, virtualize = false, onChange = noop, recordCount, onRow, allowHTML = false, childrenColumnName } = props;\n  const wrapperRef = useRef(null);\n  const [derivedColumns, setDerivedColumns] = useState(columns);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n  const [mergedLocale, setMergedLocale] = useState({ ...defaultLocale });\n  const [selectedRowKeys, setSelectedRowKeys] = useState(selectedRows);\n  const interactiveTableUtils = useRef(null);\n  const onSelectChange = (newSelectedRowKeys) => {\n    setSelectedRowKeys(newSelectedRowKeys);\n    handleRowSelection == null ? void 0 : handleRowSelection(newSelectedRowKeys);\n  };\n  const selectionTypeValue = selectionMap[selectionType];\n  const rowSelection = {\n    type: selectionMap[selectionType],\n    selectedRowKeys,\n    onChange: onSelectChange\n  };\n  // Log use of experimental features\n  useEffect(() => {\n    if (reorderable === true) {\n      logging.warn('EXPERIMENTAL FEATURE ENABLED: The \"reorderable\" prop of Table is experimental and NOT recommended for use in production deployments.');\n    }\n    if (resizable === true) {\n      logging.warn('EXPERIMENTAL FEATURE ENABLED: The \"resizable\" prop of Table is experimental and NOT recommended for use in production deployments.');\n    }\n  }, [reorderable, resizable]);\n  useEffect(() => {\n    let updatedLocale;\n    if (locale) {\n      // This spread allows for locale to only contain a subset of locale overrides on props\n      updatedLocale = { ...defaultLocale, ...locale };\n    } else\n    {\n      updatedLocale = { ...defaultLocale };\n    }\n    setMergedLocale(updatedLocale);\n  }, [locale]);\n  useEffect(() => setDerivedColumns(columns), [columns]);\n  useEffect(() => {var _wrapperRef$current;\n    if (interactiveTableUtils.current) {var _interactiveTableUtil;\n      (_interactiveTableUtil = interactiveTableUtils.current) == null ? void 0 : _interactiveTableUtil.clearListeners();\n    }\n    const table = (_wrapperRef$current = wrapperRef.current) == null ? void 0 : _wrapperRef$current.getElementsByTagName('table')[0];\n    if (table) {\n      interactiveTableUtils.current = new InteractiveTableUtils(table, derivedColumns, setDerivedColumns);\n      if (reorderable) {var _interactiveTableUtil2;\n        interactiveTableUtils == null ? void 0 : (_interactiveTableUtil2 = interactiveTableUtils.current) == null ? void 0 : _interactiveTableUtil2.initializeDragDropColumns(reorderable, table);\n      }\n      if (resizable) {var _interactiveTableUtil3;\n        interactiveTableUtils == null ? void 0 : (_interactiveTableUtil3 = interactiveTableUtils.current) == null ? void 0 : _interactiveTableUtil3.initializeResizableColumns(resizable, table);\n      }\n    }\n    return () => {var _interactiveTableUtil4;\n      interactiveTableUtils == null ? void 0 : (_interactiveTableUtil4 = interactiveTableUtils.current) == null ? void 0 : _interactiveTableUtil4.clearListeners == null ? void 0 : _interactiveTableUtil4.clearListeners();\n    };\n    /**\n     * We DO NOT want this effect to trigger when derivedColumns changes as it will break functionality\n     * The exclusion from the effect dependencies is intentional and should not be modified\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [wrapperRef, reorderable, resizable, virtualize, interactiveTableUtils]);\n  const theme = useTheme();\n  const paginationSettings = usePagination ?\n  {\n    hideOnSinglePage: true,\n    pageSize,\n    pageSizeOptions,\n    onShowSizeChange: (page, size) => setPageSize(size)\n  } :\n  false;\n  /**\n   * When recordCount is provided it lets the user of Table control total number of pages\n   * independent from data.length.  This allows the parent component do things like server side paging\n   * where the user can be shown the total mount of data they can page through, but the component can provide\n   * data one page at a time, and respond to the onPageChange event to fetch and set new data\n   */\n  if (paginationSettings && recordCount) {\n    paginationSettings.total = recordCount;\n  }\n  let bodyHeight = height;\n  if (bodyHeight) {\n    bodyHeight -= HEADER_HEIGHT;\n    const hasPagination = usePagination && recordCount && recordCount > pageSize;\n    if (hasPagination) {\n      bodyHeight -= PAGINATION_HEIGHT;\n    }\n  }\n  const sharedProps = {\n    loading: { spinning: loading != null ? loading : false, indicator: _jsx(Loading, {}) },\n    hasData: hideData ? false : data,\n    columns: derivedColumns,\n    dataSource: hideData ? undefined : data,\n    size,\n    pagination: paginationSettings,\n    locale: mergedLocale,\n    showSorterTooltip: false,\n    onChange,\n    onRow,\n    theme,\n    height: bodyHeight,\n    bordered,\n    expandable: {\n      childrenColumnName\n    }\n  };\n  return _jsxs(\"div\", { ref: wrapperRef, children: [\n    !virtualize && _jsx(StyledTable, { ...sharedProps, rowSelection: selectionTypeValue !== null ? rowSelection : undefined, sticky: sticky }),\n    virtualize && _jsx(StyledVirtualTable, { ...sharedProps, scroll: {\n        y: 300,\n        x: '100vw',\n        // To avoid jest failure by scrollTo\n        ...(process.env.WEBPACK_MODE === 'test' && {\n          scrollToFirstRowOnChange: false\n        })\n      }, allowHTML: allowHTML })] }\n  );\n}\nexport default Table;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}