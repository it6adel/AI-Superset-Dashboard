{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ControlHeader } from '@superset-ui/chart-controls';\nimport { css, styled, t } from '@superset-ui/core';\nimport Popover from 'src/components/Popover';\nimport { useState } from 'react';\nimport LayerConfigsPopoverContent from './LayerConfigsPopoverContent';\nimport FlatLayerTree from './FlatLayerTree';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const StyledFlatLayerTree = styled(FlatLayerTree)`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: column;\n\n    border: solid;\n    border-width: 1px;\n    border-radius: ${theme.borderRadius}px;\n    border-color: ${theme.colors.grayscale.light2};\n\n    & .add-layer-btn {\n      display: flex;\n      align-items: center;\n\n      margin: 4px;\n\n      color: ${theme.colors.grayscale.light1};\n      font-size: ${theme.typography.sizes.s}px;\n      font-weight: ${theme.typography.weights.normal};\n\n      &:hover {\n        background-color: ${theme.colors.grayscale.light4};\n        border-color: ${theme.colors.grayscale.light2};\n      }\n    }\n\n    & .ant-tree .ant-tree-treenode {\n      display: block;\n    }\n\n    & .ant-tree-list-holder-inner {\n      display: block !important;\n    }\n\n    & .ant-tree-node-content-wrapper {\n      display: block;\n    }\n\n    & .ant-tree-node-content-wrapper:hover {\n      background-color: unset;\n    }\n  `}\n`;\nconst getEmptyEditItem = () => ({\n  idx: NaN,\n  layerConf: {\n    type: 'WMS',\n    version: '1.3.0',\n    title: '',\n    url: '',\n    layersParam: ''\n  }\n});\nexport const LayerConfigsControl = ({ value, onChange = () => {}, name, label, description, renderTrigger, hovered, validationErrors }) => {\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [editItem, setEditItem] = useState(getEmptyEditItem());\n  const onAddClick = () => {\n    setEditItem(getEmptyEditItem());\n    setPopoverVisible(true);\n  };\n  const onEditClick = (layerConf, idx) => {\n    if (popoverVisible) {\n      return;\n    }\n    setEditItem({\n      idx,\n      layerConf: { ...layerConf }\n    });\n    setPopoverVisible(true);\n  };\n  const onRemoveClick = (idx) => {\n    const newValue = value ? [...value] : [];\n    newValue.splice(idx, 1);\n    onChange(newValue);\n  };\n  const onPopoverClose = () => {\n    setPopoverVisible(false);\n  };\n  const computeNewValue = (layerConf) => {\n    const newValue = value ? [...value] : [];\n    if (!editItem) {\n      return undefined;\n    }\n    if (Number.isNaN(editItem.idx)) {\n      newValue.unshift(layerConf);\n    } else\n    if (editItem) {\n      newValue[editItem.idx] = layerConf;\n    }\n    return newValue;\n  };\n  const onPopoverSave = (layerConf) => {\n    const newValue = computeNewValue(layerConf);\n    setPopoverVisible(false);\n    if (!newValue) {\n      return;\n    }\n    onChange(newValue);\n  };\n  const onMoveLayer = (newConfigs) => {\n    onChange(newConfigs);\n  };\n  const popoverTitle = editItem.layerConf.title ?\n  editItem.layerConf.title :\n  t('Add Layer');\n  const controlHeaderProps = {\n    name,\n    label,\n    description,\n    renderTrigger,\n    hovered,\n    validationErrors\n  };\n  return _jsxs(\"div\", { children: [\n    _jsx(ControlHeader, { ...controlHeaderProps }),\n    _jsx(Popover, { open: popoverVisible, trigger: \"click\", title: popoverTitle, placement: \"right\", overlayStyle: {\n        maxWidth: '400px',\n        maxHeight: '700px',\n        overflowY: 'auto'\n      }, content: _jsx(LayerConfigsPopoverContent, { layerConf: editItem.layerConf, onClose: onPopoverClose, onSave: onPopoverSave }), children:\n      _jsx(StyledFlatLayerTree, { layerConfigs: value != null ? value : [], onMoveLayer: onMoveLayer, onEditLayer: onEditClick, onRemoveLayer: onRemoveClick, onAddLayer: onAddClick, draggable: !popoverVisible }) }\n    )] }\n  );\n};\nexport default LayerConfigsControl;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}