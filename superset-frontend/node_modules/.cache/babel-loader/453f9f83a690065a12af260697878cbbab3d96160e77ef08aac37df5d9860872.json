{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint react/sort-comp: 'off' */\nimport { PureComponent } from 'react';\nimport ChartClient from '../clients/ChartClient';\nclass ChartDataProvider extends PureComponent {\n\n  constructor(props) {\n    super(props);this.chartClient = void 0;this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    handleFetchData = () => {\n      const { loadDatasource, formDataRequestOptions, datasourceRequestOptions, queryRequestOptions } = this.props;\n      this.setState({ status: 'loading' }, () => {\n        try {\n          this.chartClient.\n          loadFormData(this.extractSliceIdAndFormData(), formDataRequestOptions).\n          then((formData) => Promise.all([\n          loadDatasource ?\n          this.chartClient.loadDatasource(formData.datasource, datasourceRequestOptions) :\n          Promise.resolve(undefined),\n          this.chartClient.loadQueryData(formData, queryRequestOptions)]\n          ).then(([datasource, queriesData]) => (\n          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n          {\n            datasource,\n            formData,\n            queriesData\n          }))).\n          then(this.handleReceiveData).\n          catch(this.handleError);\n        }\n        catch (error) {\n          this.handleError(error);\n        }\n      });\n    };this.\n    handleReceiveData = (payload) => {\n      const { onLoaded } = this.props;\n      if (onLoaded)\n      onLoaded(payload);\n      this.setState({ payload, status: 'loaded' });\n    };this.\n    handleError = (error) => {\n      const { onError } = this.props;\n      if (onError)\n      onError(error);\n      this.setState({ error, status: 'error' });\n    };this.state = { status: 'uninitialized' };this.chartClient = new ChartClient({ client: props.client });}componentDidMount() {this.handleFetchData();}componentDidUpdate(prevProps) {const { formData, sliceId } = this.props;if (formData !== prevProps.formData || sliceId !== prevProps.sliceId) {this.handleFetchData();}}extractSliceIdAndFormData() {const { formData, sliceId } = this.props;return formData ? { formData } : { sliceId: sliceId };}\n  render() {\n    const { children } = this.props;\n    const { status, payload, error } = this.state;\n    switch (status) {\n      case 'loading':\n        return children({ loading: true });\n      case 'loaded':\n        return children({ payload });\n      case 'error':\n        return children({ error });\n      case 'uninitialized':\n      default:\n        return null;\n    }\n  }\n}\nexport default ChartDataProvider;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}