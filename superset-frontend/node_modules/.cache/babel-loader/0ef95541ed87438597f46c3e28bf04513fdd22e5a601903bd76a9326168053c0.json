{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SET_NATIVE_FILTERS_CONFIG_COMPLETE, SET_IN_SCOPE_STATUS_OF_FILTERS, SET_FOCUSED_NATIVE_FILTER, UNSET_FOCUSED_NATIVE_FILTER, SET_HOVERED_NATIVE_FILTER, UNSET_HOVERED_NATIVE_FILTER, UPDATE_CASCADE_PARENT_IDS } from 'src/dashboard/actions/nativeFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nexport function getInitialState({ filterConfig, state: prevState }) {\n  const state = {};\n  const filters = {};\n  if (filterConfig) {\n    filterConfig.forEach((filter) => {\n      const { id } = filter;\n      filters[id] = filter;\n    });\n    state.filters = filters;\n  } else\n  {var _prevState$filters;\n    state.filters = (_prevState$filters = prevState == null ? void 0 : prevState.filters) != null ? _prevState$filters : {};\n  }\n  state.focusedFilterId = undefined;\n  return state;\n}\nfunction handleFilterChangesComplete(state, filters) {\n  const modifiedFilters = Object.fromEntries(filters.map((filter) => [filter.id, filter]));\n  return {\n    ...state,\n    filters: modifiedFilters\n  };\n}\nexport default function nativeFilterReducer(state = {\n  filters: {}\n}, action) {\n  switch (action.type) {\n    case HYDRATE_DASHBOARD:\n      return {\n        filters: action.data.nativeFilters.filters\n      };\n    case SET_IN_SCOPE_STATUS_OF_FILTERS:\n      return getInitialState({ filterConfig: action.filterConfig, state });\n    case SET_NATIVE_FILTERS_CONFIG_COMPLETE:\n      return handleFilterChangesComplete(state, action.filterChanges);\n    case SET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: action.id\n      };\n    case UNSET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: undefined\n      };\n    case SET_HOVERED_NATIVE_FILTER:\n      return {\n        ...state,\n        hoveredFilterId: action.id\n      };\n    case UNSET_HOVERED_NATIVE_FILTER:\n      return {\n        ...state,\n        hoveredFilterId: undefined\n      };\n    case UPDATE_CASCADE_PARENT_IDS:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.id]: {\n            ...state.filters[action.id],\n            cascadeParentIds: action.parentIds\n          }\n        }\n      };\n    // TODO handle SET_FILTER_CONFIG_FAIL action\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}