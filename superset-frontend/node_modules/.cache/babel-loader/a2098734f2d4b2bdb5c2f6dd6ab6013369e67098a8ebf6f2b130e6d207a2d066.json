{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, ensureIsArray, getCurrencySymbol, styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport ControlHeader from '../../ControlHeader';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst CurrencyControlContainer = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    align-items: center;\n\n    & > :first-child {\n      margin-right: ${theme.gridUnit * 4}px;\n      min-width: 0;\n      flex: 1;\n    }\n\n    & > :nth-child(2) {\n      min-width: 0;\n      flex: 1;\n    }\n  `}\n`;\nexport const CURRENCY_SYMBOL_POSITION_OPTIONS = [\n{ value: 'prefix', label: t('Prefix') },\n{ value: 'suffix', label: t('Suffix') }];\n\nexport const CurrencyControl = ({ onChange, value: currency = {}, symbolSelectOverrideProps = {}, currencySelectOverrideProps = {}, symbolSelectAdditionalStyles, currencySelectAdditionalStyles, ...props }) => {\n  const currencies = useSelector((state) => {var _state$common;return (_state$common = state.common) == null ? void 0 : _state$common.currencies;});\n  const currenciesOptions = useMemo(() => ensureIsArray(currencies).map((currencyCode) => ({\n    value: currencyCode,\n    label: `${getCurrencySymbol({\n      symbol: currencyCode\n    })} (${currencyCode})`\n  })), [currencies]);\n  return _jsxs(_Fragment, { children: [\n    _jsx(ControlHeader, { ...props }),\n    _jsxs(CurrencyControlContainer, { css: css`\n          & > :first-child {\n            ${symbolSelectAdditionalStyles};\n          }\n          & > :nth-child(2) {\n            ${currencySelectAdditionalStyles};\n          }\n        `, className: \"currency-control-container\", children: [\n      _jsx(Select, { ariaLabel: t('Currency prefix or suffix'), options: CURRENCY_SYMBOL_POSITION_OPTIONS, placeholder: t('Prefix or suffix'), onChange: (symbolPosition) => {\n          onChange({ ...currency, symbolPosition });\n        }, onClear: () => onChange({ ...currency, symbolPosition: undefined }), value: currency == null ? void 0 : currency.symbolPosition, allowClear: true, ...symbolSelectOverrideProps }),\n      _jsx(Select, { ariaLabel: t('Currency symbol'), options: currenciesOptions, placeholder: t('Currency'), onChange: (symbol) => {\n          onChange({ ...currency, symbol });\n        }, onClear: () => onChange({ ...currency, symbol: undefined }), value: currency == null ? void 0 : currency.symbol, allowClear: true, allowNewOptions: true, ...currencySelectOverrideProps })] }\n    )] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}