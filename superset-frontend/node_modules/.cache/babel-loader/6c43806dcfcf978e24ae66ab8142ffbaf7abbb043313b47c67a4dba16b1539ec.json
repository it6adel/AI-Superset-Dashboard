{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType } from '@superset-ui/core';\nimport Tabs from 'src/components/Tabs';\nimport { SHARED_COLUMN_CONFIG_PROPS } from './constants';\nimport { isTabLayoutItem } from './types';\nimport ControlForm, { ControlFormItem, ControlFormRow } from './ControlForm';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport default function ColumnConfigPopover({ column, configFormLayout, onChange }) {\n  const renderRow = (row, i) => _jsx(ControlFormRow, { children:\n    row.map((meta) => {\n      const key = typeof meta === 'string' ? meta : meta.name;\n      const override = typeof meta === 'string' ?\n      {} :\n      'override' in meta ?\n      meta.override :\n      meta.config;\n      const props = {\n        ...(key in SHARED_COLUMN_CONFIG_PROPS ?\n        SHARED_COLUMN_CONFIG_PROPS[key] :\n        undefined),\n        ...override\n      };\n      return _jsx(ControlFormItem, { name: key, ...props }, key);\n    }) }, i\n  );\n  const layout = configFormLayout[column.type === undefined ? GenericDataType.String : column.type];\n  if (isTabLayoutItem(layout[0])) {\n    return _jsx(Tabs, { centered: true, children:\n      layout.map((item, i) => isTabLayoutItem(item) ? _jsx(Tabs.TabPane, { tab: item.tab, children:\n        _jsx(ControlForm, { onChange: onChange, value: column.config, children:\n          item.children.map((row, i) => renderRow(row, i)) }\n        ) }, i\n      ) : null) }\n    );\n  }\n  return _jsx(ControlForm, { onChange: onChange, value: column.config, children:\n    layout.map((row, i) => renderRow(row, i)) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}