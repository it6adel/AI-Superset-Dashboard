{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { timeFormatLocale, timeFormat, utcFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport TimeFormatter from '../TimeFormatter';\nexport default function createMultiFormatter({ id, label, description, formats = {}, useLocalTime = false, locale }) {\n  const { millisecond = '.%L', second = ':%S', minute = '%I:%M', hour = '%I %p', day = '%a %d', week = '%b %d', month = '%B', year = '%Y' } = formats;\n  let formatFunc;\n  if (typeof locale === 'undefined') {\n    formatFunc = useLocalTime ? timeFormat : utcFormat;\n  } else\n  {\n    const formatLocale = timeFormatLocale(locale);\n    formatFunc = useLocalTime ? formatLocale.format : formatLocale.utcFormat;\n  }\n  const formatMillisecond = formatFunc(millisecond);\n  const formatSecond = formatFunc(second);\n  const formatMinute = formatFunc(minute);\n  const formatHour = formatFunc(hour);\n  const formatDay = formatFunc(day);\n  const formatFirstDayOfWeek = formatFunc(week);\n  const formatMonth = formatFunc(month);\n  const formatYear = formatFunc(year);\n  const { hasMillisecond, hasSecond, hasMinute, hasHour, isNotFirstDayOfMonth, isNotFirstDayOfWeek, isNotFirstMonth } = useLocalTime ? localTimeUtils : utcUtils;\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n    if (hasHour(date)) {\n      return formatHour;\n    }\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n    return formatYear;\n  }\n  return new TimeFormatter({\n    description,\n    formatFunc: (date) => multiFormatFunc(date)(date),\n    id,\n    label,\n    useLocalTime\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}