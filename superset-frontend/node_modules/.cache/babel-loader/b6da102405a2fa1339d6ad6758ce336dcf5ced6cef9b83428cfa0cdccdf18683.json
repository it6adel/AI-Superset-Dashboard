{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createContext, useEffect, useState, useReducer } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { useDragDropManager } from 'react-dnd';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const DraggingContext = /*#__PURE__*/createContext(false);\nexport const DropzoneContext = /*#__PURE__*/createContext([\n{},\n() => {}]\n);\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  min-height: 0;\n`;\nconst reducer = (state = {}, action) => {\n  if (action.canDrop) {\n    return {\n      ...state,\n      [action.key]: action.canDrop\n    };\n  }\n  if (action.key) {\n    const newState = { ...state };\n    delete newState[action.key];\n    return newState;\n  }\n  return state;\n};\nconst ExploreContainer = ({ children }) => {\n  const dragDropManager = useDragDropManager();\n  const [dragging, setDragging] = useState(dragDropManager.getMonitor().isDragging());\n  useEffect(() => {\n    const monitor = dragDropManager.getMonitor();\n    const unsub = monitor.subscribeToStateChange(() => {\n      const item = monitor.getItem() || {};\n      // don't show dragging state for the sorting item\n      if ('dragIndex' in item) {\n        return;\n      }\n      const isDragging = monitor.isDragging();\n      setDragging(isDragging);\n    });\n    return () => {\n      unsub();\n    };\n  }, [dragDropManager]);\n  const dropzoneValue = useReducer(reducer, {});\n  return _jsx(DropzoneContext.Provider, { value: dropzoneValue, children:\n    _jsx(DraggingContext.Provider, { value: dragging, children:\n      _jsx(StyledDiv, { children: children }) }\n    ) }\n  );\n};\nexport default ExploreContainer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}