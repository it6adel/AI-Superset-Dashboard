{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { t, styled, useTheme } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport { DropdownButton } from 'src/components/DropdownButton';\nimport { detectOS } from 'src/utils/common';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { LOG_ACTIONS_SQLLAB_RUN_QUERY, LOG_ACTIONS_SQLLAB_STOP_QUERY } from 'src/logger/LogUtils';\nimport useLogAction from 'src/logger/useLogAction';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst buildText = (shouldShowStopButton, selectedText, theme) => {\n  if (shouldShowStopButton) {\n    return _jsxs(_Fragment, { children: [\n      _jsx(Icons.Square, { iconSize: \"xs\", iconColor: theme.colors.primary.light5 }),\n      t('Stop')] }\n    );\n  }\n  if (selectedText) {\n    return t('Run selection');\n  }\n  return t('Run');\n};\nconst onClick = (shouldShowStopButton, allowAsync, runQuery = () => undefined, stopQuery = () => {}, logAction) => {\n  const eventName = shouldShowStopButton ?\n  LOG_ACTIONS_SQLLAB_STOP_QUERY :\n  LOG_ACTIONS_SQLLAB_RUN_QUERY;\n  logAction(eventName, { shortcut: false });\n  if (shouldShowStopButton)\n  return stopQuery();\n  if (allowAsync) {\n    return runQuery(true);\n  }\n  return runQuery(false);\n};\nconst StyledButton = styled.span`\n  button {\n    line-height: 13px;\n    // this is to over ride a previous transition built into the component\n    transition: background-color 0ms;\n    &:last-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n    span[name='caret-down'] {\n      display: flex;\n      margin-left: ${({ theme }) => theme.gridUnit * 1}px;\n    }\n  }\n`;\nconst RunQueryActionButton = ({ allowAsync = false, queryEditorId, queryState, overlayCreateAsMenu, runQuery, stopQuery }) => {\n  const theme = useTheme();\n  const logAction = useLogAction({ queryEditorId });\n  const userOS = detectOS();\n  const { selectedText, sql } = useQueryEditor(queryEditorId, [\n  'selectedText',\n  'sql']\n  );\n  const shouldShowStopBtn = !!queryState && ['running', 'pending'].indexOf(queryState) > -1;\n  const ButtonComponent = overlayCreateAsMenu ?\n  DropdownButton :\n  Button;\n  const sqlContent = selectedText || sql || '';\n  const isDisabled = !(sqlContent != null && sqlContent.\n  replace(/(\\/\\*[^*]*\\*\\/)|(\\/\\/[^*]*)|(--[^.].*)/gm, '').\n  trim());\n  const stopButtonTooltipText = useMemo(() => userOS === 'MacOS' ?\n  t('Stop running (Ctrl + x)') :\n  t('Stop running (Ctrl + e)'), [userOS]);\n  return _jsx(StyledButton, { children:\n    _jsx(ButtonComponent, { onClick: () => onClick(shouldShowStopBtn, allowAsync, runQuery, stopQuery, logAction), disabled: isDisabled, tooltip: !isDisabled && (\n      shouldShowStopBtn ?\n      stopButtonTooltipText :\n      t('Run query (Ctrl + Return)')), cta: true, ...(overlayCreateAsMenu ?\n      {\n        overlay: overlayCreateAsMenu,\n        icon: _jsx(Icons.DownOutlined, { iconColor: isDisabled ?\n          theme.colors.grayscale.base :\n          theme.colors.grayscale.light5 }),\n        trigger: 'click'\n      } :\n      {\n        buttonStyle: shouldShowStopBtn ? 'warning' : 'primary'\n      }), children:\n      buildText(shouldShowStopBtn, selectedText, theme) }\n    ) }\n  );\n};\nexport default RunQueryActionButton;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}