{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { t, useTheme } from '@superset-ui/core';\nimport { useChartEditModal, useFavoriteStatus, useListViewResource } from 'src/views/CRUD/hooks';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useHistory } from 'react-router-dom';\nimport { TableTab } from 'src/views/CRUD/types';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { CardContainer, getFilterValues, PAGE_SIZE } from 'src/views/CRUD/utils';\nimport { LoadingCards } from 'src/pages/Home';\nimport ChartCard from 'src/features/charts/ChartCard';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport Icons from 'src/components/Icons';\nimport EmptyState from './EmptyState';\nimport { WelcomeTable } from './types';\nimport SubMenu from './SubMenu';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction ChartTable({ user, addDangerToast, addSuccessToast, mine, showThumbnails, otherTabData, otherTabFilters, otherTabTitle }) {\n  const theme = useTheme();\n  const history = useHistory();\n  const initialTab = getItem(LocalStorageKeys.HomepageChartFilter, TableTab.Other);\n  const filteredOtherTabData = otherTabData == null ? void 0 : otherTabData.filter((obj) => 'viz_type' in obj);\n  const { state: { loading, resourceCollection: charts, bulkSelectEnabled }, setResourceCollection: setCharts, hasPerm, refreshData, fetchData } = useListViewResource('chart', t('chart'), addDangerToast, true, initialTab === TableTab.Mine ? mine : filteredOtherTabData, [], false);\n  const chartIds = useMemo(() => charts.map((c) => c.id), [charts]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('chart', chartIds, addDangerToast);\n  const { sliceCurrentlyEditing, openChartEditModal, handleChartUpdated, closeChartEditModal } = useChartEditModal(setCharts, charts);\n  const [activeTab, setActiveTab] = useState(initialTab);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const getData = (tab) => fetchData({\n    pageIndex: 0,\n    pageSize: PAGE_SIZE,\n    sortBy: [\n    {\n      id: 'changed_on_delta_humanized',\n      desc: true\n    }],\n\n    filters: getFilterValues(tab, WelcomeTable.Charts, user, otherTabFilters)\n  });\n  useEffect(() => {\n    if (loaded || activeTab === TableTab.Favorite) {\n      getData(activeTab);\n    }\n    setLoaded(true);\n  }, [activeTab]);\n  const handleBulkChartExport = (chartsToExport) => {\n    const ids = chartsToExport.map(({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const menuTabs = [\n  {\n    name: TableTab.Favorite,\n    label: t('Favorite'),\n    onClick: () => {\n      setActiveTab(TableTab.Favorite);\n      setItem(LocalStorageKeys.HomepageChartFilter, TableTab.Favorite);\n    }\n  },\n  {\n    name: TableTab.Mine,\n    label: t('Mine'),\n    onClick: () => {\n      setActiveTab(TableTab.Mine);\n      setItem(LocalStorageKeys.HomepageChartFilter, TableTab.Mine);\n    }\n  }];\n\n  if (otherTabData) {\n    menuTabs.push({\n      name: TableTab.Other,\n      label: otherTabTitle,\n      onClick: () => {\n        setActiveTab(TableTab.Other);\n        setItem(LocalStorageKeys.HomepageChartFilter, TableTab.Other);\n      }\n    });\n  }\n  if (loading)\n  return _jsx(LoadingCards, { cover: showThumbnails });\n  return _jsxs(ErrorBoundary, { children: [\n    sliceCurrentlyEditing && _jsx(PropertiesModal, { onHide: closeChartEditModal, onSave: handleChartUpdated, show: true, slice: sliceCurrentlyEditing }),\n\n    _jsx(SubMenu, { activeChild: activeTab, tabs: menuTabs, buttons: [\n      {\n        name: _jsxs(_Fragment, { children: [\n          _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.dark1, iconSize: \"m\" }),\n          t('Chart')] }\n        ),\n        buttonStyle: 'tertiary',\n        onClick: () => {\n          window.location.assign('/chart/add');\n        }\n      },\n      {\n        name: t('View All Â»'),\n        buttonStyle: 'link',\n        onClick: () => {\n          const target = activeTab === TableTab.Favorite ?\n          `/chart/list/?filters=(favorite:(label:${t('Yes')},value:!t))` :\n          '/chart/list/';\n          history.push(target);\n        }\n      }] }\n    ),\n    charts != null && charts.length ? _jsx(CardContainer, { showThumbnails: showThumbnails, children:\n      charts.map((e) => _jsx(ChartCard, { openChartEditModal: openChartEditModal, chartFilter: activeTab, chart: e, userId: user == null ? void 0 : user.userId, hasPerm: hasPerm, showThumbnails: showThumbnails, bulkSelectEnabled: bulkSelectEnabled, refreshData: refreshData, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, favoriteStatus: favoriteStatus[e.id], saveFavoriteStatus: saveFavoriteStatus, handleBulkChartExport: handleBulkChartExport }, `${e.id}`)) }\n    ) : _jsx(EmptyState, { tableName: WelcomeTable.Charts, tab: activeTab, otherTabTitle: otherTabTitle }),\n    preparingExport && _jsx(Loading, {})] }\n  );\n}\nexport default withToasts(ChartTable);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}