{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css, styled, t } from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport { Button, Form, Tabs } from 'antd'; // TODO: Remove antd\nimport { mix } from 'polished';\nimport WfsDataParser from 'geostyler-wfs-parser';\nimport { useEffect, useState } from 'react';\nimport { isWfsLayerConf, isWmsLayerConf, isXyzLayerConf } from './typeguards';\nimport { getServiceVersions, hasAllRequiredWfsParams } from './serviceUtil';\nimport { ControlFormItem } from '../ColumnConfigControl/ControlForm';\nimport GeoStylerWrapper from './GeoStylerWrapper';\n// Enum for the different tabs\nimport { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";const LAYER_CONFIG_TABS = {\n  LAYER: '1',\n  GEOSTYLER: '2'\n};\nexport const StyledButtonContainer = styled.div`\n  display: flex;\n  margin: 8px;\n`;\nexport const StyledCloseButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-right: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.light4};\n    color: ${theme.colors.primary.dark1};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${mix(0.1, theme.colors.primary.base, theme.colors.primary.light4)};\n      color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nexport const StyledControlFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n  `}\n`;\nexport const StyledControlNumberFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n    width: 100%;\n  `}\n`;\nexport const StyledGeoStyler = styled(GeoStylerWrapper)`\n  ${({ theme }) => css`\n    h2 {\n      font-weight: ${theme.typography.weights.normal};\n      font-size: ${theme.typography.sizes.xl}px;\n    }\n    .ant-form-item-control {\n      flex: unset;\n    }\n  `}\n`;\nexport const StyledSaveButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-left: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.base};\n    color: ${theme.colors.grayscale.light5};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nexport const LayerConfigsPopoverContent = ({ onClose = () => {}, onSave = () => {}, layerConf }) => {\n  const [currentLayerConf, setCurrentLayerConf] = useState(layerConf);\n  const initialWmsVersion = layerConf.type === 'WMS' ? layerConf.version : undefined;\n  const [wmsVersion, setWmsVersion] = useState(initialWmsVersion);\n  const initialWfsVersion = layerConf.type === 'WFS' ? layerConf.version : undefined;\n  const [wfsVersion, setWfsVersion] = useState(initialWfsVersion);\n  const [geostylerData, setGeoStylerData] = useState(undefined);\n  const serviceVersions = getServiceVersions();\n  // This is needed to force mounting the form every time\n  // we get a new layerConf prop. Otherwise the input fields\n  // will not be updated properly, since ControlFormItem only\n  // recognises the `value` property once and then handles the\n  // values in its on state. Remounting creates a new component\n  // and thereby starts with a fresh state.\n  const [formKey, setFormKey] = useState(0);\n  useEffect(() => {\n    setCurrentLayerConf({ ...layerConf });\n    setFormKey((oldFormKey) => oldFormKey + 1);\n  }, [layerConf]);\n  const onFieldValueChange = (value, key) => {\n    setCurrentLayerConf({\n      ...currentLayerConf,\n      [key]: value\n    });\n  };\n  const onLayerTypeChange = (value) => {\n    if (value === 'WFS') {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value,\n        version: serviceVersions[value][0],\n        style: {\n          name: 'Default Style',\n          rules: [\n          {\n            name: 'Default Rule',\n            symbolizers: [\n            {\n              kind: 'Line',\n              // eslint-disable-next-line theme-colors/no-literal-colors\n              color: '#000000',\n              width: 2\n            },\n            {\n              kind: 'Mark',\n              wellKnownName: 'circle',\n              // eslint-disable-next-line theme-colors/no-literal-colors\n              color: '#000000'\n            },\n            {\n              kind: 'Fill',\n              // eslint-disable-next-line theme-colors/no-literal-colors\n              color: '#000000'\n            }]\n\n          }]\n\n        }\n      });\n    } else\n    if (value === 'XYZ') {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value\n      });\n    } else\n    {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value,\n        version: serviceVersions[value][0]\n      });\n    }\n  };\n  const onLayerTitleChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'title');\n  };\n  const onLayerUrlChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'url');\n  };\n  const onLayersParamChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'layersParam');\n  };\n  const onTypeNameChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'typeName');\n  };\n  const onWmsVersionChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'version');\n    setWmsVersion(fieldValue);\n  };\n  const onWfsVersionChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'version');\n    setWfsVersion(fieldValue);\n  };\n  const onMaxFeaturesChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'maxFeatures');\n  };\n  const onStyleChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'style');\n  };\n  const onAttributionChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'attribution');\n  };\n  const onCloseClick = () => {\n    onClose();\n  };\n  const onSaveClick = () => {\n    const baseConfs = {\n      title: currentLayerConf.title,\n      url: currentLayerConf.url,\n      type: currentLayerConf.type,\n      attribution: currentLayerConf.attribution\n    };\n    let conf;\n    if (isWmsLayerConf(currentLayerConf)) {\n      conf = {\n        ...baseConfs,\n        version: currentLayerConf.version,\n        type: currentLayerConf.type,\n        layersParam: currentLayerConf.layersParam\n      };\n    } else\n    if (isXyzLayerConf(currentLayerConf)) {\n      conf = {\n        ...baseConfs,\n        type: currentLayerConf.type\n      };\n    } else\n    {\n      conf = {\n        ...baseConfs,\n        type: currentLayerConf.type,\n        version: currentLayerConf.version,\n        typeName: currentLayerConf.typeName,\n        maxFeatures: currentLayerConf.maxFeatures,\n        style: currentLayerConf.style\n      };\n    }\n    onSave(conf);\n  };\n  useEffect(() => {\n    if (!isWfsLayerConf(currentLayerConf) ||\n    !hasAllRequiredWfsParams(currentLayerConf)) {\n      setGeoStylerData(undefined);\n      return undefined;\n    }\n    const readWfsData = async (conf) => {\n      const wfsParser = new WfsDataParser();\n      try {\n        let requestParams = {};\n        if (conf.version.startsWith('1.')) {\n          requestParams = {\n            version: conf.version,\n            maxFeatures: conf.maxFeatures,\n            typeName: conf.typeName\n          };\n        }\n        if (conf.version.startsWith('2.')) {\n          requestParams = {\n            version: conf.version,\n            count: conf.maxFeatures,\n            typeNames: conf.typeName\n          };\n        }\n        const gsData = await wfsParser.readData({\n          url: conf.url,\n          requestParams\n        });\n        setGeoStylerData(gsData);\n      }\n      catch {\n        console.warn('Could not read geostyler data');\n        setGeoStylerData(undefined);\n      }\n    };\n    // debounce function\n    const timer = setTimeout(() => readWfsData(currentLayerConf), 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [currentLayerConf]);\n  const layerTabLabel = t('Layer');\n  const styleTabLabel = t('Style');\n  const layerTypeLabel = t('Layer type');\n  const layerTypeDescription = t('The type of the layer');\n  const serviceVersionLabel = t('Service version');\n  const serviceVersionDescription = t('The version of the service');\n  const layersParamLabel = t('Layer Name');\n  const layersParamDescription = t('The name of the layer as described in GetCapabilities');\n  const layersParamPlaceholder = t('Layer Name');\n  const layerTitleLabel = t('Layer title');\n  const layerTitleDescription = t('The visible title of the layer');\n  const layerTitlePlaceholder = t('Insert Layer title');\n  const layerUrlLabel = t('Layer URL');\n  const layerUrlDescription = t('The service url of the layer');\n  const layerUrlPlaceholder = t('Insert Layer URL');\n  const maxFeaturesLabel = t('Max. features');\n  const maxFeaturesDescription = t('Maximum number of features to fetch from service');\n  const maxFeaturesPlaceholder = t('10000');\n  const attributionLabel = t('Attribution');\n  const attributionDescription = t('The layer attribution');\n  const attributionPlaceholder = t('© Layer attribution');\n  const wmsVersionOptions = serviceVersions.WMS.map((version) => ({ value: version, label: version }));\n  const wfsVersionOptions = serviceVersions.WFS.map((version) => ({ value: version, label: version }));\n  return _jsx(\"div\", { children:\n    _jsxs(Form, { children: [\n      _jsxs(Tabs, { defaultActiveKey: LAYER_CONFIG_TABS.LAYER, children: [\n        _jsxs(Tabs.TabPane, { tab: layerTabLabel, children: [\n          _jsx(StyledControlFormItem, { controlType: \"Input\", label: layerUrlLabel, description: layerUrlDescription, placeholder: layerUrlPlaceholder, value: currentLayerConf.url, name: \"url\", onChange: onLayerUrlChange }),\n          _jsx(StyledControlFormItem, { controlType: \"Select\", label: layerTypeLabel, description: layerTypeDescription, options: [\n            { value: 'WMS', label: t('WMS') },\n            { value: 'WFS', label: t('WFS') },\n            { value: 'XYZ', label: t('XYZ') }],\n            value: currentLayerConf.type, defaultValue: currentLayerConf.type, name: \"type\", onChange: onLayerTypeChange }),\n          isWmsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Select\", label: serviceVersionLabel, description: serviceVersionDescription, options: wmsVersionOptions, value: wmsVersion, defaultValue: wmsVersionOptions[0].value, name: \"wmsVersion\", onChange: onWmsVersionChange }),\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Select\", label: serviceVersionLabel, description: serviceVersionDescription, options: wfsVersionOptions, value: wfsVersion, defaultValue: wfsVersionOptions[0].value, name: \"wfsVersion\", onChange: onWfsVersionChange }),\n          isWmsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Input\", label: layersParamLabel, description: layersParamDescription, placeholder: layersParamPlaceholder, value: currentLayerConf.layersParam, name: \"layersParam\", onChange: onLayersParamChange }),\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Input\", label: layersParamLabel, description: layersParamDescription, placeholder: layersParamPlaceholder, value: currentLayerConf.typeName, name: \"typeName\", onChange: onTypeNameChange }),\n          _jsx(StyledControlFormItem, { controlType: \"Input\", label: layerTitleLabel, description: layerTitleDescription, placeholder: layerTitlePlaceholder, value: currentLayerConf.title, name: \"title\", onChange: onLayerTitleChange }),\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledControlNumberFormItem, { controlType: \"InputNumber\", label: maxFeaturesLabel, description: maxFeaturesDescription, placeholder: maxFeaturesPlaceholder, value: currentLayerConf.maxFeatures, name: \"maxFeatures\", onChange: onMaxFeaturesChange }),\n          _jsx(StyledControlFormItem, { controlType: \"Input\", label: attributionLabel, description: attributionDescription, placeholder: attributionPlaceholder, value: currentLayerConf.attribution, name: \"attribution\", onChange: onAttributionChange })] }, LAYER_CONFIG_TABS.LAYER\n        ),\n        _jsx(Tabs.TabPane, { tab: styleTabLabel, disabled: !isWfsLayerConf(currentLayerConf), children:\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledGeoStyler, { style: currentLayerConf.style, onStyleChange: onStyleChange, data: geostylerData }) }, LAYER_CONFIG_TABS.GEOSTYLER\n        )] }\n      ),\n      _jsxs(StyledButtonContainer, { children: [\n        _jsx(StyledCloseButton, { type: \"default\", onClick: onCloseClick, children:\n          t('Close') }\n        ),\n        _jsx(StyledSaveButton, { type: \"primary\", onClick: onSaveClick, children:\n          t('Save') }\n        )] }\n      )] }, JSON.stringify(formKey)\n    ) }\n  );\n};\nexport default LayerConfigsPopoverContent;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}