{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport { t, getNumberFormatter, getTimeFormatter, SMART_DATE_VERBOSE_ID, computeMaxFontSize, BRAND_COLOR, styled } from '@superset-ui/core';\nimport Echart from '../components/Echart';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst defaultNumberFormatter = getNumberFormatter();\nconst PROPORTION = {\n  // text size: proportion of the chart container sans trendline\n  KICKER: 0.1,\n  HEADER: 0.3,\n  SUBHEADER: 0.125,\n  // trendline size: proportion of the whole chart container\n  TRENDLINE: 0.3\n};\nclass BigNumberVis extends PureComponent {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  getClassName() {\n    const { className, showTrendLine, bigNumberFallback } = this.props;\n    const names = `superset-legacy-chart-big-number ${className} ${bigNumberFallback ? 'is-fallback-value' : ''}`;\n    if (showTrendLine)\n    return names;\n    return `${names} no-trendline`;\n  }\n  createTemporaryContainer() {\n    const container = document.createElement('div');\n    container.className = this.getClassName();\n    container.style.position = 'absolute'; // so it won't disrupt page layout\n    container.style.opacity = '0'; // and not visible\n    return container;\n  }\n  renderFallbackWarning() {\n    const { bigNumberFallback, formatTime, showTimestamp } = this.props;\n    if (!formatTime || !bigNumberFallback || showTimestamp)\n    return null;\n    return _jsx(\"span\", { className: \"alert alert-warning\", role: \"alert\", title: t(`Last available value seen on %s`, formatTime(bigNumberFallback[0])), children:\n      t('Not up to date') }\n    );\n  }\n  renderKicker(maxHeight) {\n    const { timestamp, showTimestamp, formatTime, width } = this.props;\n    if (!formatTime ||\n    !showTimestamp ||\n    typeof timestamp === 'string' ||\n    typeof timestamp === 'bigint' ||\n    typeof timestamp === 'boolean')\n    return null;\n    const text = timestamp === null ? '' : formatTime(timestamp);\n    const container = this.createTemporaryContainer();\n    document.body.append(container);\n    const fontSize = computeMaxFontSize({\n      text,\n      maxWidth: width,\n      maxHeight,\n      className: 'kicker',\n      container\n    });\n    container.remove();\n    return _jsx(\"div\", { className: \"kicker\", style: {\n        fontSize,\n        height: 'auto'\n      }, children:\n      text }\n    );\n  }\n  renderHeader(maxHeight) {\n    const { bigNumber, headerFormatter, width, colorThresholdFormatters } = this.props;\n    // @ts-ignore\n    const text = bigNumber === null ? t('No data') : headerFormatter(bigNumber);\n    const hasThresholdColorFormatter = Array.isArray(colorThresholdFormatters) &&\n    colorThresholdFormatters.length > 0;\n    let numberColor;\n    if (hasThresholdColorFormatter) {\n      colorThresholdFormatters.forEach((formatter) => {\n        const formatterResult = bigNumber ?\n        formatter.getColorFromValue(bigNumber) :\n        false;\n        if (formatterResult) {\n          numberColor = formatterResult;\n        }\n      });\n    } else\n    {\n      numberColor = 'black';\n    }\n    const container = this.createTemporaryContainer();\n    document.body.append(container);\n    const fontSize = computeMaxFontSize({\n      text,\n      maxWidth: width * 0.9,\n      maxHeight,\n      className: 'header-line',\n      container\n    });\n    container.remove();\n    const onContextMenu = (e) => {\n      if (this.props.onContextMenu) {\n        e.preventDefault();\n        this.props.onContextMenu(e.nativeEvent.clientX, e.nativeEvent.clientY);\n      }\n    };\n    return _jsx(\"div\", { className: \"header-line\", style: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize,\n        height: 'auto',\n        color: numberColor\n      }, onContextMenu: onContextMenu, children:\n      text }\n    );\n  }\n  renderSubheader(maxHeight) {\n    const { bigNumber, subheader, width, bigNumberFallback } = this.props;\n    let fontSize = 0;\n    const NO_DATA_OR_HASNT_LANDED = t('No data after filtering or data is NULL for the latest time record');\n    const NO_DATA = t('Try applying different filters or ensuring your datasource has data');\n    let text = subheader;\n    if (bigNumber === null) {\n      text = bigNumberFallback ? NO_DATA : NO_DATA_OR_HASNT_LANDED;\n    }\n    if (text) {\n      const container = this.createTemporaryContainer();\n      document.body.append(container);\n      fontSize = computeMaxFontSize({\n        text,\n        maxWidth: width * 0.9,\n        maxHeight,\n        className: 'subheader-line',\n        container\n      });\n      container.remove();\n      return _jsx(\"div\", { className: \"subheader-line\", style: {\n          fontSize,\n          height: maxHeight\n        }, children:\n        text }\n      );\n    }\n    return null;\n  }\n  renderTrendline(maxHeight) {\n    const { width, trendLineData, echartOptions, refs } = this.props;\n    // if can't find any non-null values, no point rendering the trendline\n    if (!(trendLineData != null && trendLineData.some((d) => d[1] !== null))) {\n      return null;\n    }\n    const eventHandlers = {\n      contextmenu: (eventParams) => {\n        if (this.props.onContextMenu) {\n          eventParams.event.stop();\n          const { data } = eventParams;\n          if (data) {var _this$props$formData, _this$props$formData2, _this$props$xValueFor, _this$props;\n            const pointerEvent = eventParams.event.event;\n            const drillToDetailFilters = [];\n            drillToDetailFilters.push({\n              col: (_this$props$formData = this.props.formData) == null ? void 0 : _this$props$formData.granularitySqla,\n              grain: (_this$props$formData2 = this.props.formData) == null ? void 0 : _this$props$formData2.timeGrainSqla,\n              op: '==',\n              val: data[0],\n              formattedVal: (_this$props$xValueFor = (_this$props = this.props).xValueFormatter) == null ? void 0 : _this$props$xValueFor.call(_this$props, data[0])\n            });\n            this.props.onContextMenu(pointerEvent.clientX, pointerEvent.clientY, { drillToDetail: drillToDetailFilters });\n          }\n        }\n      }\n    };\n    return echartOptions && _jsx(Echart, { refs: refs, width: Math.floor(width), height: maxHeight, echartOptions: echartOptions, eventHandlers: eventHandlers });\n  }\n  render() {\n    const { showTrendLine, height, kickerFontSize, headerFontSize, subheaderFontSize } = this.props;\n    const className = this.getClassName();\n    if (showTrendLine) {\n      const chartHeight = Math.floor(PROPORTION.TRENDLINE * height);\n      const allTextHeight = height - chartHeight;\n      return _jsxs(\"div\", { className: className, children: [\n        _jsxs(\"div\", { className: \"text-container\", style: { height: allTextHeight }, children: [\n          this.renderFallbackWarning(),\n          this.renderKicker(Math.ceil((kickerFontSize || 0) * (1 - PROPORTION.TRENDLINE) * height)),\n          this.renderHeader(Math.ceil(headerFontSize * (1 - PROPORTION.TRENDLINE) * height)),\n          this.renderSubheader(Math.ceil(subheaderFontSize * (1 - PROPORTION.TRENDLINE) * height))] }\n        ),\n        this.renderTrendline(chartHeight)] }\n      );\n    }\n    return _jsxs(\"div\", { className: className, style: { height }, children: [\n      this.renderFallbackWarning(),\n      this.renderKicker((kickerFontSize || 0) * height),\n      this.renderHeader(Math.ceil(headerFontSize * height)),\n      this.renderSubheader(Math.ceil(subheaderFontSize * height))] }\n    );\n  }\n}BigNumberVis.defaultProps = { className: '', headerFormatter: defaultNumberFormatter, formatTime: getTimeFormatter(SMART_DATE_VERBOSE_ID), headerFontSize: PROPORTION.HEADER, kickerFontSize: PROPORTION.KICKER, mainColor: BRAND_COLOR, showTimestamp: false, showTrendLine: false, startYAxisAtZero: true, subheader: '', subheaderFontSize: PROPORTION.SUBHEADER, timeRangeFixed: false };\nexport default styled(BigNumberVis)`\n  ${({ theme }) => `\n    font-family: ${theme.typography.families.sansSerif};\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n\n    &.no-trendline .subheader-line {\n      padding-bottom: 0.3em;\n    }\n\n    .text-container {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: flex-start;\n      .alert {\n        font-size: ${theme.typography.sizes.s};\n        margin: -0.5em 0 0.4em;\n        line-height: 1;\n        padding: ${theme.gridUnit}px;\n        border-radius: ${theme.gridUnit}px;\n      }\n    }\n\n    .kicker {\n      line-height: 1em;\n      padding-bottom: 2em;\n    }\n\n    .header-line {\n      position: relative;\n      line-height: 1em;\n      white-space: nowrap;\n      margin-bottom:${theme.gridUnit * 2}px;\n      span {\n        position: absolute;\n        bottom: 0;\n      }\n    }\n\n    .subheader-line {\n      line-height: 1em;\n      padding-bottom: 0;\n    }\n\n    &.is-fallback-value {\n      .kicker,\n      .header-line,\n      .subheader-line {\n        opacity: ${theme.opacity.mediumHeavy};\n      }\n    }\n  `}\n`;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}