{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useCallback, useMemo, useRef } from 'react';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport geojsonExtent from '@mapbox/geojson-extent';\nimport { DeckGLContainerStyledWrapper } from '../../DeckGLContainer';\nimport { hexToRGB } from '../../utils/colors';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\nimport fitViewport from '../../utils/fitViewport';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst propertyMap = {\n  fillColor: 'fillColor',\n  color: 'fillColor',\n  fill: 'fillColor',\n  'fill-color': 'fillColor',\n  strokeColor: 'strokeColor',\n  'stroke-color': 'strokeColor',\n  'stroke-width': 'strokeWidth'\n};\nconst alterProps = (props, propOverrides) => {\n  const newProps = {};\n  Object.keys(props).forEach((k) => {\n    if (k in propertyMap) {\n      newProps[propertyMap[k]] = props[k];\n    } else\n    {\n      newProps[k] = props[k];\n    }\n  });\n  if (typeof props.fillColor === 'string') {\n    newProps.fillColor = hexToRGB(props.fillColor);\n  }\n  if (typeof props.strokeColor === 'string') {\n    newProps.strokeColor = hexToRGB(props.strokeColor);\n  }\n  return {\n    ...newProps,\n    ...propOverrides\n  };\n};\nlet features = [];\nconst recurseGeoJson = (node, propOverrides, extraProps) => {\n  if (node != null && node.features) {\n    node.features.forEach((obj) => {\n      recurseGeoJson(obj, propOverrides, node.extraProps || extraProps);\n    });\n  }\n  if (node != null && node.geometry) {\n    const newNode = {\n      ...node,\n      properties: alterProps(node.properties, propOverrides)\n    };\n    if (!newNode.extraProps) {\n      newNode.extraProps = extraProps;\n    }\n    features.push(newNode);\n  }\n};\nfunction setTooltipContent(o) {var _o$object;\n  return ((_o$object = o.object) == null ? void 0 : _o$object.extraProps) && _jsx(\"div\", { className: \"deckgl-tooltip\", children:\n    Object.keys(o.object.extraProps).map((prop, index) => {var _o$object$extraProps;return _jsx(TooltipRow, { label: `${prop}: `, value: `${(_o$object$extraProps = o.object.extraProps) == null ? void 0 : _o$object$extraProps[prop]}` }, `prop-${index}`);}) }\n  );\n}\nconst getFillColor = (feature) => {var _feature$properties;return feature == null ? void 0 : (_feature$properties = feature.properties) == null ? void 0 : _feature$properties.fillColor;};\nconst getLineColor = (feature) => {var _feature$properties2;return feature == null ? void 0 : (_feature$properties2 = feature.properties) == null ? void 0 : _feature$properties2.strokeColor;};\nexport function getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  const fillColor = [fc.r, fc.g, fc.b, 255 * fc.a];\n  const strokeColor = [sc.r, sc.g, sc.b, 255 * sc.a];\n  const propOverrides = {};\n  if (fillColor[3] > 0) {\n    propOverrides.fillColor = fillColor;\n  }\n  if (strokeColor[3] > 0) {\n    propOverrides.strokeColor = strokeColor;\n  }\n  features = [];\n  recurseGeoJson(payload.data, propOverrides);\n  let processedFeatures = features;\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    processedFeatures = jsFnMutator(features);\n  }\n  return new GeoJsonLayer({\n    id: `geojson-layer-${fd.slice_id}`,\n    data: processedFeatures,\n    extruded: fd.extruded,\n    filled: fd.filled,\n    stroked: fd.stroked,\n    getFillColor,\n    getLineColor,\n    getLineWidth: fd.line_width || 1,\n    pointRadiusScale: fd.point_radius_scale,\n    lineWidthUnits: fd.line_width_unit,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent)\n  });\n}\nconst DeckGLGeoJson = (props) => {var _payload$data2;\n  const containerRef = useRef();\n  const setTooltip = useCallback((tooltip) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n  const { formData, payload, setControlValue, onAddFilter, height, width } = props;\n  const viewport = useMemo(() => {\n    if (formData.autozoom) {var _payload$data, _payload$data$feature;\n      const points = (payload == null ? void 0 : (_payload$data = payload.data) == null ? void 0 : (_payload$data$feature = _payload$data.features) == null ? void 0 : _payload$data$feature.reduce == null ? void 0 : _payload$data$feature.reduce((acc, feature) => {\n        const bounds = geojsonExtent(feature);\n        if (bounds) {\n          return [...acc, [bounds[0], bounds[1]], [bounds[2], bounds[3]]];\n        }\n        return acc;\n      }, [])) || [];\n      if (points.length) {\n        return fitViewport(props.viewport, {\n          width,\n          height,\n          points\n        });\n      }\n    }\n    return props.viewport;\n  }, [\n  formData.autozoom,\n  height,\n  payload == null ? void 0 : (_payload$data2 = payload.data) == null ? void 0 : _payload$data2.features,\n  props.viewport,\n  width]\n  );\n  const layer = getLayer(formData, payload, onAddFilter, setTooltip);\n  return _jsx(DeckGLContainerStyledWrapper, { ref: containerRef, mapboxApiAccessToken: payload.data.mapboxApiKey, viewport: viewport, layers: [layer], mapStyle: formData.mapbox_style, setControlValue: setControlValue, height: height, width: width });\n};\nexport default /*#__PURE__*/memo(DeckGLGeoJson);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}