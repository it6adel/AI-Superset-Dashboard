{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { AntdForm, Col, Row } from 'src/components';\nimport { Form, FormLabel } from 'src/components/Form';\nimport { Radio } from 'src/components/Radio';\nimport { Input, TextArea } from 'src/components/Input';\n// eslint-disable-next-line no-restricted-imports\nimport { Input as AntdInput, Tooltip } from 'antd'; // TODO: Remove antd\nimport Icons from 'src/components/Icons';\nimport { AuthType } from '.';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledDiv = styled.div`\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n  label {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\nconst StyledRow = styled(Row)`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst StyledFormItem = styled(AntdForm.Item)`\n  margin-bottom: 0 !important;\n`;\nconst StyledInputPassword = styled(AntdInput.Password)`\n  margin: ${({ theme }) => `${theme.gridUnit}px 0 ${theme.gridUnit * 2}px`};\n`;\nconst SSHTunnelForm = ({ db, onSSHTunnelParametersChange, setSSHTunnelLoginMethod }) => {var _db$ssh_tunnel, _db$ssh_tunnel2, _db$ssh_tunnel3, _db$ssh_tunnel4, _db$ssh_tunnel5, _db$ssh_tunnel6;\n  const [usePassword, setUsePassword] = useState(AuthType.Password);\n  return _jsxs(Form, { children: [\n    _jsxs(StyledRow, { gutter: 16, children: [\n      _jsx(Col, { xs: 24, md: 12, children:\n        _jsxs(StyledDiv, { children: [\n          _jsx(FormLabel, { htmlFor: \"server_address\", required: true, children:\n            t('SSH Host') }\n          ),\n          _jsx(Input, { name: \"server_address\", type: \"text\", placeholder: t('e.g. 127.0.0.1'), value: (db == null ? void 0 : (_db$ssh_tunnel = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel.server_address) || '', onChange: onSSHTunnelParametersChange })] }\n        ) }\n      ),\n      _jsx(Col, { xs: 24, md: 12, children:\n        _jsxs(StyledDiv, { children: [\n          _jsx(FormLabel, { htmlFor: \"server_port\", required: true, children:\n            t('SSH Port') }\n          ),\n          _jsx(Input, { name: \"server_port\", placeholder: t('22'), type: \"number\", value: db == null ? void 0 : (_db$ssh_tunnel2 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel2.server_port, onChange: onSSHTunnelParametersChange })] }\n        ) }\n      )] }\n    ),\n    _jsx(StyledRow, { gutter: 16, children:\n      _jsx(Col, { xs: 24, children:\n        _jsxs(StyledDiv, { children: [\n          _jsx(FormLabel, { htmlFor: \"username\", required: true, children:\n            t('Username') }\n          ),\n          _jsx(Input, { name: \"username\", type: \"text\", placeholder: t('e.g. Analytics'), value: (db == null ? void 0 : (_db$ssh_tunnel3 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel3.username) || '', onChange: onSSHTunnelParametersChange })] }\n        ) }\n      ) }\n    ),\n    _jsx(StyledRow, { gutter: 16, children:\n      _jsx(Col, { xs: 24, children:\n        _jsxs(StyledDiv, { children: [\n          _jsx(FormLabel, { htmlFor: \"use_password\", required: true, children:\n            t('Login with') }\n          ),\n          _jsx(StyledFormItem, { name: \"use_password\", initialValue: usePassword, children:\n            _jsxs(Radio.Group, { onChange: ({ target: { value } }) => {\n                setUsePassword(value);\n                setSSHTunnelLoginMethod(value);\n              }, children: [\n              _jsx(Radio, { value: AuthType.Password, children:\n                t('Password') }\n              ),\n              _jsx(Radio, { value: AuthType.PrivateKey, children:\n                t('Private Key & Password') }\n              )] }\n            ) }\n          )] }\n        ) }\n      ) }\n    ),\n    usePassword === AuthType.Password && _jsx(StyledRow, { gutter: 16, children:\n      _jsx(Col, { xs: 24, children:\n        _jsxs(StyledDiv, { children: [\n          _jsx(FormLabel, { htmlFor: \"password\", required: true, children:\n            t('SSH Password') }\n          ),\n          _jsx(StyledInputPassword, { name: \"password\", placeholder: t('e.g. ********'), value: (db == null ? void 0 : (_db$ssh_tunnel4 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel4.password) || '', onChange: onSSHTunnelParametersChange, iconRender: (visible) => visible ? _jsx(Tooltip, { title: \"Hide password.\", children:\n              _jsx(Icons.EyeInvisibleOutlined, {}) }\n            ) : _jsx(Tooltip, { title: \"Show password.\", children:\n              _jsx(Icons.EyeOutlined, {}) }\n            ), role: \"textbox\" })] }\n        ) }\n      ) }\n    ),\n    usePassword === AuthType.PrivateKey && _jsxs(_Fragment, { children: [\n      _jsx(StyledRow, { gutter: 16, children:\n        _jsx(Col, { xs: 24, children:\n          _jsxs(StyledDiv, { children: [\n            _jsx(FormLabel, { htmlFor: \"private_key\", required: true, children:\n              t('Private Key') }\n            ),\n            _jsx(TextArea, { name: \"private_key\", placeholder: t('Paste Private Key here'), value: (db == null ? void 0 : (_db$ssh_tunnel5 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel5.private_key) || '', onChange: onSSHTunnelParametersChange, rows: 4 })] }\n          ) }\n        ) }\n      ),\n      _jsx(StyledRow, { gutter: 16, children:\n        _jsx(Col, { xs: 24, children:\n          _jsxs(StyledDiv, { children: [\n            _jsx(FormLabel, { htmlFor: \"private_key_password\", required: true, children:\n              t('Private Key Password') }\n            ),\n            _jsx(StyledInputPassword, { name: \"private_key_password\", placeholder: t('e.g. ********'), value: (db == null ? void 0 : (_db$ssh_tunnel6 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel6.private_key_password) || '', onChange: onSSHTunnelParametersChange, iconRender: (visible) => visible ? _jsx(Tooltip, { title: \"Hide password.\", children:\n                _jsx(Icons.EyeInvisibleOutlined, {}) }\n              ) : _jsx(Tooltip, { title: \"Show password.\", children:\n                _jsx(Icons.EyeOutlined, {}) }\n              ), role: \"textbox\" })] }\n          ) }\n        ) }\n      )] }\n    )] }\n  );\n};\nexport default SSHTunnelForm;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}