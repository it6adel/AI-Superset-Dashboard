{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Util for geometry related operations.\n */\nimport GeoJSON from 'ol/format/GeoJSON';\nimport VectorSource from 'ol/source/Vector';\n/**\n * Extracts the coordinate from a Point GeoJSON in the current map projection.\n *\n * @param geoJsonPoint The GeoJSON string for the point\n *\n * @returns The coordinate\n */\nexport const getProjectedCoordinateFromPointGeoJson = (geoJsonPoint) => {\n  const geom = new GeoJSON().readGeometry(geoJsonPoint, {\n    // TODO: adapt to map projection\n    featureProjection: 'EPSG:3857'\n  });\n  return geom.getCoordinates();\n};\n/**\n * Computes the extent for an array of features.\n *\n * @param features An Array of OpenLayers features\n * @returns The OpenLayers extent or undefined\n */\nexport const getExtentFromFeatures = (features) => {\n  if (features.length === 0) {\n    return undefined;\n  }\n  const source = new VectorSource();\n  source.addFeatures(features);\n  return source.getExtent();\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}