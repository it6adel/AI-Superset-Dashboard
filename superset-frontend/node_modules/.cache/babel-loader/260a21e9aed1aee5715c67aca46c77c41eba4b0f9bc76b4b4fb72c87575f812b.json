{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { t, styled, useTheme } from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst StyledInput = styled(Input)`\n  border-radius: ${({ theme }) => theme.borderRadius};\n  height: 26px;\n  padding-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n`;\n\nexport const DndColumnSelectPopoverTitle = ({\n  title,\n  onChange,\n  isEditDisabled,\n  hasCustomLabel\n}) => {\n  const theme = useTheme();\n  const [isHovered, setIsHovered] = useState(false);\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  const onMouseOver = useCallback(() => {\n    setIsHovered(true);\n  }, []);\n\n  const onMouseOut = useCallback(() => {\n    setIsHovered(false);\n  }, []);\n\n  const onClick = useCallback(() => {\n    setIsEditMode(true);\n  }, []);\n\n  const onBlur = useCallback(() => {\n    setIsEditMode(false);\n  }, []);\n\n  const onInputBlur = useCallback(\n    (e) => {\n      if (e.target.value === '') {\n        onChange(e);\n      }\n      onBlur();\n    },\n    [onBlur, onChange]\n  );\n\n  const defaultLabel = t('My column');\n\n  if (isEditDisabled) {\n    return _jsx(\"span\", { children: title || defaultLabel });\n  }\n\n  return isEditMode ?\n  _jsx(StyledInput, {\n    type: \"text\",\n    placeholder: title,\n    value: hasCustomLabel ? title : '',\n    autoFocus: true,\n    onChange: onChange,\n    onBlur: onInputBlur }\n  ) :\n\n  _jsx(Tooltip, { placement: \"top\", title: t('Click to edit label'), children:\n    _jsxs(\"span\", {\n      className: \"AdhocMetricEditPopoverTitle inline-editable\",\n\n      onMouseOver: onMouseOver,\n      onMouseOut: onMouseOut,\n      onClick: onClick,\n      onBlur: onBlur,\n      role: \"button\",\n      tabIndex: 0, children: [\n\n      title || defaultLabel, \"\\xA0\",\n\n      _jsx(Icons.EditOutlined, {\n        iconColor:\n        isHovered ? theme.colors.primary.base : theme.colors.grayscale.base,\n\n        iconSize: \"m\" }\n      )] }\n    ) }\n  );\n\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}