{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { styled, t, useTruncation } from '@superset-ui/core';\nimport { Tooltip } from '../Tooltip';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledTruncatedList = styled.div`\n  & > span {\n    width: 100%;\n    display: flex;\n\n    .antd5-tooltip-open {\n      display: inline;\n    }\n  }\n`;\nconst StyledVisibleItems = styled.span`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  display: inline-block;\n  width: 100%;\n  vertical-align: bottom;\n`;\nconst StyledVisibleItem = styled.span`\n  &:not(:last-child)::after {\n    content: ', ';\n  }\n`;\nconst StyledTooltipItem = styled.div`\n  .link {\n    color: ${({ theme }) => theme.colors.grayscale.light5};\n    display: block;\n    text-decoration: underline;\n  }\n`;\nconst StyledPlus = styled.span`\n  ${({ theme }) => `\n  cursor: pointer;\n  color: ${theme.colors.primary.dark1};\n  font-weight: ${theme.typography.weights.normal};\n  `}\n`;\nexport default function TruncatedList({ items, renderVisibleItem = (item) => item, renderTooltipItem = (item) => item, getKey = (item) => item, maxLinks = 20 }) {\n  const [itemsNotInTooltipRef, plusRef, elementsTruncated, hasHiddenElements] = useTruncation();\n  const nMoreItems = useMemo(() => items.length > maxLinks ? items.length - maxLinks : undefined, [items, maxLinks]);\n  const itemsNotInTooltip = useMemo(() => _jsx(StyledVisibleItems, { ref: itemsNotInTooltipRef, children:\n    items.map((item) => _jsx(StyledVisibleItem, { children:\n      renderVisibleItem(item) }, getKey(item)\n    )) }\n  ), [getKey, items, renderVisibleItem]);\n  const itemsInTooltip = useMemo(() => items.\n  slice(0, maxLinks).\n  map((item) => _jsx(StyledTooltipItem, { children:\n    renderTooltipItem(item) }, getKey(item)\n  )), [getKey, items, maxLinks, renderTooltipItem]);\n  return _jsx(StyledTruncatedList, { children:\n    _jsxs(Tooltip, { placement: \"top\", title: elementsTruncated ? _jsxs(_Fragment, { children: [\n        itemsInTooltip,\n        nMoreItems && _jsx(\"span\", { children: t('+ %s more', nMoreItems) })] }\n      ) : null, children: [\n      itemsNotInTooltip,\n      hasHiddenElements && _jsxs(StyledPlus, { ref: plusRef, children: [\"+\", elementsTruncated] })] }\n    ) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}