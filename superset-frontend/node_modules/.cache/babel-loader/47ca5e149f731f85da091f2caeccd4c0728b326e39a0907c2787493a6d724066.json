{"ast":null,"code":"export const getRelevantDataMask = (dataMask, prop) => Object.values(dataMask).\nfilter((item) => item[prop]).\nreduce((prev, next) => ({\n  ...prev,\n  [next.id]: prop ? next[prop] : next\n}), {});\nexport const getAllActiveFilters = ({ chartConfiguration, nativeFilters, dataMask, allSliceIds }) => {\n  const activeFilters = {};\n  // Combine native filters with cross filters, because they have similar logic\n  Object.values(dataMask).forEach(({ id: filterId, extraFormData = {} }) => {var _ref, _ref2, _nativeFilters$filter, _nativeFilters$filter2, _chartConfiguration$p, _chartConfiguration$p2, _nativeFilters$filter3, _nativeFilters$filter4, _nativeFilters$filter5;\n    const scope = (_ref = (_ref2 = (_nativeFilters$filter = nativeFilters == null ? void 0 : (_nativeFilters$filter2 = nativeFilters[filterId]) == null ? void 0 : _nativeFilters$filter2.chartsInScope) != null ? _nativeFilters$filter :\n    chartConfiguration == null ? void 0 : (_chartConfiguration$p = chartConfiguration[parseInt(filterId, 10)]) == null ? void 0 : (_chartConfiguration$p2 = _chartConfiguration$p.crossFilters) == null ? void 0 : _chartConfiguration$p2.\n    chartsInScope) != null ? _ref2 :\n    allSliceIds) != null ? _ref :\n    [];\n    const filterType = nativeFilters == null ? void 0 : (_nativeFilters$filter3 = nativeFilters[filterId]) == null ? void 0 : _nativeFilters$filter3.filterType;\n    const targets = (_nativeFilters$filter4 = nativeFilters == null ? void 0 : (_nativeFilters$filter5 = nativeFilters[filterId]) == null ? void 0 : _nativeFilters$filter5.targets) != null ? _nativeFilters$filter4 : scope;\n    // Iterate over all roots to find all affected charts\n    activeFilters[filterId] = {\n      scope,\n      filterType,\n      targets,\n      values: extraFormData\n    };\n  });\n  return activeFilters;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}