{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ControlSubSectionHeader, getStandardizedControls, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst requiredEntity = {\n  ...sharedControls.entity,\n  clearable: false\n};\nconst optionalEntity = {\n  ...sharedControls.entity,\n  clearable: true,\n  validators: []\n};\nconst controlPanel = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'id',\n      config: {\n        ...requiredEntity,\n        label: t('Id'),\n        description: t('Name of the id column')\n      }\n    }],\n\n    [\n    {\n      name: 'parent',\n      config: {\n        ...requiredEntity,\n        label: t('Parent'),\n        description: t('Name of the column containing the id of the parent node')\n      }\n    }],\n\n    [\n    {\n      name: 'name',\n      config: {\n        ...optionalEntity,\n        label: t('Name'),\n        description: t('Optional name of the data column.')\n      }\n    }],\n\n    [\n    {\n      name: 'root_node_id',\n      config: {\n        ...optionalEntity,\n        renderTrigger: true,\n        type: 'TextControl',\n        label: t('Root node id'),\n        description: t('Id of root node of the tree.')\n      }\n    }],\n\n    [\n    {\n      name: 'metric',\n      config: {\n        ...optionalEntity,\n        type: 'DndMetricSelect',\n        label: t('Metric'),\n        description: t('Metric for node values')\n      }\n    }],\n\n    ['adhoc_filters'],\n    ['row_limit']]\n\n  },\n  {\n    label: t('Chart options'),\n    expanded: true,\n    controlSetRows: [\n    [_jsx(ControlSubSectionHeader, { children: t('Layout') })],\n    [\n    {\n      name: 'layout',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Tree layout'),\n        default: DEFAULT_FORM_DATA.layout,\n        options: [\n        ['orthogonal', t('Orthogonal')],\n        ['radial', t('Radial')]],\n\n        description: t('Layout type of tree')\n      }\n    }],\n\n    [\n    {\n      name: 'orient',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Tree orientation'),\n        default: DEFAULT_FORM_DATA.orient,\n        options: [\n        ['LR', t('Left to Right')],\n        ['RL', t('Right to Left')],\n        ['TB', t('Top to Bottom')],\n        ['BT', t('Bottom to Top')]],\n\n        description: t('Orientation of tree'),\n        visibility({ form_data: { layout } }) {\n          return (layout || DEFAULT_FORM_DATA.layout) === 'orthogonal';\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'node_label_position',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Node label position'),\n        default: DEFAULT_FORM_DATA.nodeLabelPosition,\n        options: [\n        ['left', t('left')],\n        ['top', t('top')],\n        ['right', t('right')],\n        ['bottom', t('bottom')]],\n\n        description: t('Position of intermediate node label on tree')\n      }\n    }],\n\n    [\n    {\n      name: 'child_label_position',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Child label position'),\n        default: DEFAULT_FORM_DATA.childLabelPosition,\n        options: [\n        ['left', t('left')],\n        ['top', t('top')],\n        ['right', t('right')],\n        ['bottom', t('bottom')]],\n\n        description: t('Position of child node label on tree')\n      }\n    }],\n\n    [\n    {\n      name: 'emphasis',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Emphasis'),\n        default: DEFAULT_FORM_DATA.emphasis,\n        options: [\n        ['ancestor', t('ancestor')],\n        ['descendant', t('descendant')]],\n\n        description: t('Which relatives to highlight on hover'),\n        visibility({ form_data: { layout } }) {\n          return (layout || DEFAULT_FORM_DATA.layout) === 'orthogonal';\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'symbol',\n      config: {\n        type: 'SelectControl',\n        renderTrigger: true,\n        label: t('Symbol'),\n        default: DEFAULT_FORM_DATA.symbol,\n        options: [\n        {\n          label: t('Empty circle'),\n          value: 'emptyCircle'\n        },\n        {\n          label: t('Circle'),\n          value: 'circle'\n        },\n        {\n          label: t('Rectangle'),\n          value: 'rect'\n        },\n        {\n          label: t('Triangle'),\n          value: 'triangle'\n        },\n        {\n          label: t('Diamond'),\n          value: 'diamond'\n        },\n        {\n          label: t('Pin'),\n          value: 'pin'\n        },\n        {\n          label: t('Arrow'),\n          value: 'arrow'\n        },\n        {\n          label: t('None'),\n          value: 'none'\n        }],\n\n        description: t('Layout type of tree')\n      }\n    }],\n\n    [\n    {\n      name: 'symbolSize',\n      config: {\n        type: 'SliderControl',\n        label: t('Symbol size'),\n        renderTrigger: true,\n        min: 5,\n        max: 30,\n        step: 2,\n        default: DEFAULT_FORM_DATA.symbolSize,\n        description: t('Size of edge symbols')\n      }\n    }],\n\n    [\n    {\n      name: 'roam',\n      config: {\n        type: 'SelectControl',\n        label: t('Enable graph roaming'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.roam,\n        choices: [\n        [false, t('Disabled')],\n        ['scale', t('Scale only')],\n        ['move', t('Move only')],\n        [true, t('Scale and Move')]],\n\n        description: t('Whether to enable changing graph position and scaling.')\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric()\n  })\n};\nexport default controlPanel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}