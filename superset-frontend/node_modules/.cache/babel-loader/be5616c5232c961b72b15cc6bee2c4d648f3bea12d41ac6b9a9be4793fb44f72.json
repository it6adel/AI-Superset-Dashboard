{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { defineSavedMetrics } from '@superset-ui/chart-controls';\nimport { t } from '@superset-ui/core';\nimport { getQueryMode, isAggMode, validateAggControlValues } from './shared';\nconst percentMetrics = {\n  type: 'MetricsControl',\n  label: t('Percentage metrics'),\n  description: t('Select one or many metrics to display, that will be displayed in the percentages of total. ' +\n  'Percentage metrics will be calculated only from data within the row limit. ' +\n  'You can use an aggregation function on a column or write custom SQL to create a percentage metric.'),\n  multi: true,\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => {var _controls$groupby, _controls$metrics;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type,\n      queryMode: getQueryMode(controls),\n      externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby =\n      controls.groupby) == null ? void 0 : _controls$groupby.value, (_controls$metrics =\n      controls.metrics) == null ? void 0 : _controls$metrics.value,\n      controlState == null ? void 0 : controlState.value]\n      )\n    };},\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: []\n};\nconst dndPercentMetrics = {\n  ...percentMetrics,\n  type: 'DndMetricSelect'\n};\nexport const percentMetricsControlSetItem = {\n  name: 'percent_metrics',\n  config: {\n    ...dndPercentMetrics\n  }\n};\nexport const metricsControlSetItem = {\n  name: 'metrics',\n  override: {\n    validators: [],\n    visibility: isAggMode,\n    mapStateToProps: ({ controls, datasource, form_data }, controlState) => {var _datasource$columns$, _datasource$columns, _controls$groupby2, _controls$percent_met;return {\n        columns: datasource != null && (_datasource$columns$ = datasource.columns[0]) != null && _datasource$columns$.hasOwnProperty('filterable') ?\n        datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.filter((c) => c.filterable) :\n        datasource == null ? void 0 : datasource.columns,\n        savedMetrics: defineSavedMetrics(datasource),\n        // current active adhoc metrics\n        selectedMetrics: form_data.metrics || (form_data.metric ? [form_data.metric] : []),\n        datasource,\n        externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby2 =\n        controls.groupby) == null ? void 0 : _controls$groupby2.value, (_controls$percent_met =\n        controls.percent_metrics) == null ? void 0 : _controls$percent_met.value,\n        controlState.value]\n        )\n      };},\n    rerender: ['groupby', 'percent_metrics'],\n    resetOnHide: false\n  }\n};\nexport const showTotalsControlSetItem = {\n  name: 'show_totals',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show summary'),\n    default: false,\n    description: t('Show total aggregations of selected metrics. Note that row limit does not apply to the result.'),\n    visibility: isAggMode,\n    resetOnHide: false\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}