{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { css, t, useTheme, useTruncation } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { DependencyItem, Row, RowLabel, RowTruncationCount, RowValue, TooltipList } from './Styles';\nimport { useFilterDependencies } from './useFilterDependencies';\nimport { TooltipWithTruncation } from './TooltipWithTruncation';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DependencyValue = ({ dependency, hasSeparator }) => {\n  const dispatch = useDispatch();\n  const handleClick = useCallback(() => {\n    dispatch(setDirectPathToChild([dependency.id]));\n  }, [dependency.id, dispatch]);\n  return _jsxs(\"span\", { children: [\n    hasSeparator && _jsx(\"span\", { children: \", \" }),\n    _jsx(DependencyItem, { role: \"button\", onClick: handleClick, tabIndex: 0, children:\n      dependency.name }\n    )] }\n  );\n};\nexport const DependenciesRow = /*#__PURE__*/memo(({ filter }) => {\n  const dependencies = useFilterDependencies(filter);\n  const [dependenciesRef, plusRef, elementsTruncated, hasHiddenElements] = useTruncation();\n  const theme = useTheme();\n  const tooltipText = useMemo(() => elementsTruncated > 0 && dependencies ? _jsx(TooltipList, { children:\n    dependencies.map((dependency) => _jsx(\"li\", { children:\n      _jsx(DependencyValue, { dependency: dependency }) }\n    )) }\n  ) : null, [elementsTruncated, dependencies]);\n  if (!Array.isArray(dependencies) || dependencies.length === 0) {\n    return null;\n  }\n  return _jsxs(Row, { children: [\n    _jsxs(RowLabel, { css: css`\n          display: inline-flex;\n          align-items: center;\n        `, children: [\n      t('Dependent on'), ' ',\n      _jsx(TooltipWithTruncation, { title: t('Filter only displays values relevant to selections made in other filters.'), children:\n        _jsx(Icons.InfoCircleOutlined, { iconSize: \"m\", iconColor: theme.colors.grayscale.light1, css: css`\n              margin-left: ${theme.gridUnit}px;\n            ` }) }\n      )] }\n    ),\n    _jsxs(TooltipWithTruncation, { title: tooltipText, children: [\n      _jsx(RowValue, { ref: dependenciesRef, children:\n        dependencies.map((dependency, index) => _jsx(DependencyValue, { dependency: dependency, hasSeparator: index !== 0 }, dependency.id)) }\n      ),\n      hasHiddenElements && _jsxs(RowTruncationCount, { ref: plusRef, children: [\"+\",\n        elementsTruncated] }\n      )] }\n    )] }\n  );\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}