{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useCallback, useMemo, useState } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport querystring from 'query-string';\nimport { queryEditorSetDb, addTable, removeTables, collapseTable, expandTable, queryEditorSetCatalog, queryEditorSetSchema, setDatabases, addDangerToast, resetState } from 'src/SqlLab/actions/sqlLab';\nimport Button from 'src/components/Button';\nimport { t, styled, css } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Icons from 'src/components/Icons';\nimport { TableSelectorMultiple } from 'src/components/TableSelector';\nimport { IconTooltip } from 'src/components/IconTooltip';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport TableElement from '../TableElement';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\nconst collapseStyles = (theme) => css`\n  .ant-collapse-item {\n    margin-bottom: ${theme.gridUnit * 3}px;\n  }\n  .ant-collapse-header {\n    padding: 0px !important;\n    display: flex;\n    align-items: center;\n  }\n  .ant-collapse-content-box {\n    padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n  }\n  .ant-collapse-arrow {\n    padding: 0 !important;\n    bottom: ${theme.gridUnit}px !important;\n    right: ${theme.gridUnit * 4}px !important;\n    color: ${theme.colors.primary.dark1} !important;\n    &:hover {\n      color: ${theme.colors.primary.dark2} !important;\n    }\n  }\n`;\nconst LeftBarStyles = styled.div`\n  ${({ theme }) => css`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.grayscale.light4};\n      margin: ${theme.gridUnit * 4}px 0;\n    }\n  `}\n`;\nconst SqlEditorLeftBar = ({ database, queryEditorId, height = 500 }) => {\n  const allSelectedTables = useSelector(({ sqlLab }) => sqlLab.tables.filter((table) => table.queryEditorId === queryEditorId), shallowEqual);\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n  'dbId',\n  'catalog',\n  'schema']\n  );\n  const [_emptyResultsWithSearch, setEmptyResultsWithSearch] = useState(false);\n  const [userSelectedDb, setUserSelected] = useState(null);\n  const { dbId, catalog, schema } = queryEditor;\n  const tables = useMemo(() => allSelectedTables.filter((table) => table.dbId === dbId && table.schema === schema), [allSelectedTables, dbId, schema]);\n  useEffect(() => {\n    const bool = querystring.parse(window.location.search).db;\n    const userSelected = getItem(LocalStorageKeys.Database, null);\n    if (bool && userSelected) {\n      setUserSelected(userSelected);\n      setItem(LocalStorageKeys.Database, null);\n    } else\n    if (database) {\n      setUserSelected(database);\n    }\n  }, [database]);\n  const onEmptyResults = useCallback((searchText) => {\n    setEmptyResultsWithSearch(!!searchText);\n  }, []);\n  const onDbChange = ({ id: dbId }) => {\n    dispatch(queryEditorSetDb(queryEditor, dbId));\n  };\n  const selectedTableNames = useMemo(() => (tables == null ? void 0 : tables.map((table) => table.name)) || [], [tables]);\n  const onTablesChange = (tableNames, catalogName, schemaName) => {\n    if (!schemaName) {\n      return;\n    }\n    const currentTables = [...tables];\n    const tablesToAdd = tableNames.filter((name) => {\n      const index = currentTables.findIndex((table) => table.name === name);\n      if (index >= 0) {\n        currentTables.splice(index, 1);\n        return false;\n      }\n      return true;\n    });\n    tablesToAdd.forEach((tableName) => {\n      dispatch(addTable(queryEditor, tableName, catalogName, schemaName));\n    });\n    dispatch(removeTables(currentTables));\n  };\n  const onToggleTable = (updatedTables) => {\n    tables.forEach((table) => {\n      if (!updatedTables.includes(table.id.toString()) && table.expanded) {\n        dispatch(collapseTable(table));\n      } else\n      if (updatedTables.includes(table.id.toString()) &&\n      !table.expanded) {\n        dispatch(expandTable(table));\n      }\n    });\n  };\n  const renderExpandIconWithTooltip = ({ isActive }) => _jsx(IconTooltip, { css: css`\n        transform: rotate(90deg);\n      `, \"aria-label\": \"Collapse\", tooltip: isActive ? t('Collapse table preview') : t('Expand table preview'), children:\n    _jsx(Icons.RightOutlined, { iconSize: \"s\", css: css`\n          transform: ${isActive ? 'rotateY(180deg)' : ''};\n        ` }) }\n  );\n  const shouldShowReset = window.location.search === '?reset=1';\n  const tableMetaDataHeight = height - 130; // 130 is the height of the selects above\n  const handleCatalogChange = useCallback((catalog) => {\n    if (queryEditor) {\n      dispatch(queryEditorSetCatalog(queryEditor, catalog));\n    }\n  }, [dispatch, queryEditor]);\n  const handleSchemaChange = useCallback((schema) => {\n    if (queryEditor) {\n      dispatch(queryEditorSetSchema(queryEditor, schema));\n    }\n  }, [dispatch, queryEditor]);\n  const handleDbList = useCallback((result) => {\n    dispatch(setDatabases(result));\n  }, [dispatch]);\n  const handleError = useCallback((message) => {\n    dispatch(addDangerToast(message));\n  }, [dispatch]);\n  const handleResetState = useCallback(() => {\n    dispatch(resetState());\n  }, [dispatch]);\n  return _jsxs(LeftBarStyles, { children: [\n    _jsx(TableSelectorMultiple, { onEmptyResults: onEmptyResults, emptyState: _jsx(EmptyState, {}), database: userSelectedDb, getDbList: handleDbList, handleError: handleError, onDbChange: onDbChange, onCatalogChange: handleCatalogChange, catalog: catalog, onSchemaChange: handleSchemaChange, schema: schema, onTableSelectChange: onTablesChange, tableValue: selectedTableNames, sqlLabMode: true }),\n    _jsx(\"div\", { className: \"divider\" }),\n    _jsx(StyledScrollbarContainer, { children:\n      _jsx(\"div\", { css: css`\n            height: ${tableMetaDataHeight}px;\n          `, children:\n        _jsx(Collapse, { activeKey: tables.\n          filter(({ expanded }) => expanded).\n          map(({ id }) => id), css: collapseStyles, expandIconPosition: \"right\", ghost: true, onChange: onToggleTable, expandIcon: renderExpandIconWithTooltip, children:\n          tables.map((table) => _jsx(TableElement, { table: table }, table.id)) }\n        ) }\n      ) }\n    ),\n    shouldShowReset && _jsxs(Button, { buttonSize: \"small\", buttonStyle: \"danger\", onClick: handleResetState, children: [\n\n\n      _jsx(\"i\", { className: \"fa fa-bomb\" }), \" \", t('Reset state')] }\n    )] }\n  );\n};\nexport default SqlEditorLeftBar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}