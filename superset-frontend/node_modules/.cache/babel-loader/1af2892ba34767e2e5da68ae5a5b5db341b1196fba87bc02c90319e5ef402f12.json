{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { css, ensureIsArray, fetchTimeRange, getTimeOffset, parseDttmToDate, t } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { DEFAULT_DATE_PATTERN } from '@superset-ui/chart-controls';\nimport { extendedDayjs } from 'src/utils/dates';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DAYJS_FORMAT = 'YYYY-MM-DD';\nconst isTimeRangeEqual = (left, right) => _isEqual(left, right);\nconst isShiftEqual = (left, right) => _isEqual(left, right);\nconst oldChoices = {\n  r: 'inherit',\n  y: '1 year ago',\n  m: '1 month ago',\n  w: '1 week ago',\n  c: 'custom'\n};\nexport const ComparisonRangeLabel = ({ multi = true }) => {\n  const [labels, setLabels] = useState([]);\n  const currentTimeRangeFilters = useSelector((state) => state.explore.form_data.adhoc_filters.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE'), isTimeRangeEqual);\n  const previousCustomFilter = useSelector((state) => {var _state$explore$form_d;return (_state$explore$form_d = state.explore.form_data.adhoc_custom) == null ? void 0 : _state$explore$form_d.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE');}, isTimeRangeEqual);\n  const shifts = useSelector((state) => {\n    const formData = state.explore.form_data || {};\n    if (!(formData != null && formData.time_compare)) {\n      const previousTimeComparison = formData.time_comparison || '';\n      if (oldChoices.hasOwnProperty(previousTimeComparison)) {\n        const previousChoice = oldChoices[previousTimeComparison];\n        return [previousChoice];\n      }\n    }\n    return formData == null ? void 0 : formData.time_compare;\n  }, isShiftEqual);\n  const startDate = useSelector((state) => state.explore.form_data.start_date_offset);\n  useEffect(() => {\n    const shiftsArray = ensureIsArray(shifts);\n    if (_isEmpty(currentTimeRangeFilters) ||\n    _isEmpty(shiftsArray) && !startDate) {\n      setLabels([]);\n    } else\n    if (!_isEmpty(shifts) || startDate) {\n      let useStartDate = startDate;\n      if (!startDate && !_isEmpty(previousCustomFilter)) {var _previousCustomFilter;\n        useStartDate = (_previousCustomFilter = previousCustomFilter[0]) == null ? void 0 : _previousCustomFilter.comparator.split(' : ')[0];\n        useStartDate = extendedDayjs(parseDttmToDate(useStartDate)).format(DAYJS_FORMAT);\n      }\n      const promises = currentTimeRangeFilters.map((filter) => {\n        const nonCustomNorInheritShifts = shiftsArray.filter((shift) => shift !== 'custom' && shift !== 'inherit') || [];\n        const customOrInheritShifts = shiftsArray.filter((shift) => shift === 'custom' || shift === 'inherit') || [];\n        // There's no custom or inherit to compute, so we can just fetch the time range\n        if (_isEmpty(customOrInheritShifts)) {\n          return fetchTimeRange(filter.comparator, filter.subject, ensureIsArray(nonCustomNorInheritShifts));\n        }\n        // Need to compute custom or inherit shifts first and then mix with the non custom or inherit shifts\n        if (ensureIsArray(customOrInheritShifts).includes('custom') &&\n        startDate ||\n        ensureIsArray(customOrInheritShifts).includes('inherit')) {\n          return fetchTimeRange(filter.comparator, filter.subject).then((res) => {var _res$value;\n            const dates = res == null ? void 0 : (_res$value = res.value) == null ? void 0 : _res$value.match(DEFAULT_DATE_PATTERN);\n            const [parsedStartDate, parsedEndDate] = dates != null ? dates : [];\n            if (parsedStartDate) {\n              const parsedDateDayjs = extendedDayjs(parseDttmToDate(parsedStartDate));\n              const startDateDayjs = extendedDayjs(parseDttmToDate(startDate));\n              if (startDateDayjs.isSameOrBefore(parsedDateDayjs) ||\n              !startDate) {\n                const postProcessedShifts = getTimeOffset({\n                  timeRangeFilter: {\n                    ...filter,\n                    comparator: `${parsedStartDate} : ${parsedEndDate}`\n                  },\n                  shifts: customOrInheritShifts,\n                  startDate: useStartDate,\n                  includeFutureOffsets: false // So we don't trigger requests for future dates\n                });\n                return fetchTimeRange(filter.comparator, filter.subject, ensureIsArray(postProcessedShifts.concat(nonCustomNorInheritShifts)));\n              }\n            }\n            return Promise.resolve({ value: '' });\n          });\n        }\n        return Promise.resolve({ value: '' });\n      });\n      Promise.all(promises).then((res) => {\n        // access the value property inside the res and set the labels with it in the state\n        setLabels(res.map((r) => {var _r$value;return (_r$value = r.value) != null ? _r$value : '';}));\n      });\n    }\n  }, [currentTimeRangeFilters, shifts, startDate]);\n  return labels.length ? _jsxs(_Fragment, { children: [\n    _jsx(ControlHeader, { label: t('Actual range for comparison') }),\n    labels.flat().map((label) => _jsx(_Fragment, { children:\n      _jsx(\"div\", { css: (theme) => css`\n              font-size: ${theme.typography.sizes.m}px;\n              color: ${theme.colors.grayscale.dark1};\n            `, children:\n        label }, label\n      ) }\n    ))] }\n  ) : null;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}