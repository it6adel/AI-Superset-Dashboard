{"ast":null,"code":"import { ClassNames } from '@emotion/react';\nimport { styled, useTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledTooltip = (props) => {\n  const theme = useTheme();\n  return _jsx(ClassNames, { children:\n    ({ css }) => _jsx(Tooltip, { overlayClassName: css`\n            .antd5-tooltip-inner {\n              max-width: ${theme.gridUnit * 125}px;\n              word-wrap: break-word;\n              text-align: center;\n\n              pre {\n                background: transparent;\n                border: none;\n                text-align: left;\n                color: ${theme.colors.grayscale.light5};\n                font-size: ${theme.typography.sizes.xs}px;\n              }\n            }\n          `, ...props }) }\n  );\n};\nconst Hr = styled.hr`\n  margin-top: ${({ theme }) => theme.gridUnit * 1.5}px;\n`;\nconst iconMap = {\n  pk: 'fa-key',\n  fk: 'fa-link',\n  index: 'fa-bookmark'\n};\nconst tooltipTitleMap = {\n  pk: t('Primary key'),\n  fk: t('Foreign key'),\n  index: t('Index')\n};\nconst NowrapDiv = styled.div`\n  white-space: nowrap;\n`;\nconst ColumnElement = ({ column }) => {\n  let columnName = column.name;\n  let icons;\n  if (column.keys && column.keys.length > 0) {\n    columnName = _jsx(\"strong\", { children: column.name });\n    icons = column.keys.map((key, i) => _jsx(\"span\", { className: \"ColumnElement\", children:\n      _jsx(StyledTooltip, { placement: \"right\", title: _jsxs(_Fragment, { children: [\n          _jsx(\"strong\", { children: tooltipTitleMap[key.type] }),\n          _jsx(Hr, {}),\n          _jsx(\"pre\", { className: \"text-small\", children:\n            JSON.stringify(key, null, '  ') }\n          )] }\n        ), children:\n        _jsx(\"i\", { className: `fa text-muted m-l-2 ${iconMap[key.type]}` }) }\n      ) }, i\n    ));\n  }\n  return _jsxs(\"div\", { className: \"clearfix table-column\", children: [\n    _jsxs(\"div\", { className: \"pull-left m-l-10 col-name\", children: [\n      columnName,\n      icons] }\n    ),\n    _jsx(NowrapDiv, { className: \"pull-right text-muted\", children:\n      _jsxs(\"small\", { children: [\" \", column.type] }) }\n    )] }\n  );\n};\nexport default ColumnElement;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}