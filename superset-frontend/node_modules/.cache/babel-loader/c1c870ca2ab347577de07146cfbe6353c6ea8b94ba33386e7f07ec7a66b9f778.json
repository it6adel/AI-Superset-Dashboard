{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useContext, useMemo, useState } from 'react';\nimport { css, DatasourceType, styled, t } from '@superset-ui/core';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeList as List } from 'react-window';\nimport { matchSorter, rankings } from 'match-sorter';\nimport Alert from 'src/components/Alert';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport { Input } from 'src/components/Input';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport Control from 'src/explore/components/Control';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nimport DatasourcePanelItem, { ITEM_HEIGHT, DEFAULT_MAX_COLUMNS_LENGTH, DEFAULT_MAX_METRICS_LENGTH } from './DatasourcePanelItem';\nimport { DndItemType } from '../DndItemType';\nimport { DropzoneContext } from '../ExploreContainer';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DatasourceContainer = styled.div`\n  ${({ theme }) => css`\n    background-color: ${theme.colors.grayscale.light5};\n    position: relative;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    .ant-collapse {\n      height: auto;\n    }\n    .field-selections {\n      padding: 0 0 ${theme.gridUnit}px;\n      overflow: auto;\n      height: 100%;\n    }\n    .field-length {\n      margin-bottom: ${theme.gridUnit * 2}px;\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.light1};\n    }\n    .form-control.input-md {\n      display: inline-flex;\n      width: calc(100% - ${theme.gridUnit * 8}px);\n      height: ${theme.gridUnit * 8}px;\n      margin: ${theme.gridUnit * 2}px auto;\n    }\n    .type-label {\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.base};\n    }\n    .Control {\n      padding-bottom: 0;\n    }\n  `};\n`;\nconst StyledInfoboxWrapper = styled.div`\n  ${({ theme }) => css`\n    margin: 0 ${theme.gridUnit * 2.5}px;\n\n    span {\n      text-decoration: underline;\n    }\n  `}\n`;\nconst BORDER_WIDTH = 2;\nconst sortCertifiedFirst = (slice) => slice.sort((a, b) => {var _b$is_certified, _a$is_certified;return ((_b$is_certified = b == null ? void 0 : b.is_certified) != null ? _b$is_certified : 0) - ((_a$is_certified = a == null ? void 0 : a.is_certified) != null ? _a$is_certified : 0);});\nexport default function DataSourcePanel({ datasource, formData, controls: { datasource: datasourceControl }, actions, width }) {\n  const [dropzones] = useContext(DropzoneContext);\n  const { columns: _columns, metrics } = datasource;\n  const allowedColumns = useMemo(() => {\n    const validators = Object.values(dropzones);\n    if (!Array.isArray(_columns))\n    return [];\n    return _columns.filter((column) => validators.some((validator) => validator({\n      value: column,\n      type: DndItemType.Column\n    })));\n  }, [dropzones, _columns]);\n  // display temporal column first\n  const columns = useMemo(() => [...allowedColumns].sort((col1, col2) => {\n    if (col1 != null && col1.is_dttm && !(col2 != null && col2.is_dttm)) {\n      return -1;\n    }\n    if (col2 != null && col2.is_dttm && !(col1 != null && col1.is_dttm)) {\n      return 1;\n    }\n    return 0;\n  }), [allowedColumns]);\n  const allowedMetrics = useMemo(() => {\n    const validators = Object.values(dropzones);\n    return metrics.filter((metric) => validators.some((validator) => validator({ value: metric, type: DndItemType.Metric })));\n  }, [dropzones, metrics]);\n  const hiddenColumnCount = _columns.length - allowedColumns.length;\n  const hiddenMetricCount = metrics.length - allowedMetrics.length;\n  const [showSaveDatasetModal, setShowSaveDatasetModal] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [showAllMetrics, setShowAllMetrics] = useState(false);\n  const [showAllColumns, setShowAllColumns] = useState(false);\n  const [collapseMetrics, setCollapseMetrics] = useState(false);\n  const [collapseColumns, setCollapseColumns] = useState(false);\n  const searchKeyword = useDebounceValue(inputValue, FAST_DEBOUNCE);\n  const filteredColumns = useMemo(() => {\n    if (!searchKeyword) {\n      return columns != null ? columns : [];\n    }\n    return matchSorter(columns, searchKeyword, {\n      keys: [\n      {\n        key: 'verbose_name',\n        threshold: rankings.CONTAINS\n      },\n      {\n        key: 'column_name',\n        threshold: rankings.CONTAINS\n      },\n      {\n        key: (item) => {var _item$description, _item$expression;return [(_item$description = item == null ? void 0 : item.description) != null ? _item$description : '', (_item$expression = item == null ? void 0 : item.expression) != null ? _item$expression : ''].map((x) => (x == null ? void 0 : x.replace(/[_\\n\\s]+/g, ' ')) || '');},\n        threshold: rankings.CONTAINS,\n        maxRanking: rankings.CONTAINS\n      }],\n\n      keepDiacritics: true\n    });\n  }, [columns, searchKeyword]);\n  const filteredMetrics = useMemo(() => {\n    if (!searchKeyword) {\n      return allowedMetrics != null ? allowedMetrics : [];\n    }\n    return matchSorter(allowedMetrics, searchKeyword, {\n      keys: [\n      {\n        key: 'verbose_name',\n        threshold: rankings.CONTAINS\n      },\n      {\n        key: 'metric_name',\n        threshold: rankings.CONTAINS\n      },\n      {\n        key: (item) => {var _item$description2, _item$expression2;return [(_item$description2 = item == null ? void 0 : item.description) != null ? _item$description2 : '', (_item$expression2 = item == null ? void 0 : item.expression) != null ? _item$expression2 : ''].map((x) => (x == null ? void 0 : x.replace(/[_\\n\\s]+/g, ' ')) || '');},\n        threshold: rankings.CONTAINS,\n        maxRanking: rankings.CONTAINS\n      }],\n\n      keepDiacritics: true,\n      baseSort: (a, b) => {var _b$item$is_certified, _b$item, _a$item$is_certified, _a$item, _a$rankedValue, _b$rankedValue;return Number((_b$item$is_certified = b == null ? void 0 : (_b$item = b.item) == null ? void 0 : _b$item.is_certified) != null ? _b$item$is_certified : 0) -\n        Number((_a$item$is_certified = a == null ? void 0 : (_a$item = a.item) == null ? void 0 : _a$item.is_certified) != null ? _a$item$is_certified : 0) ||\n        String((_a$rankedValue = a == null ? void 0 : a.rankedValue) != null ? _a$rankedValue : '').localeCompare((_b$rankedValue = b == null ? void 0 : b.rankedValue) != null ? _b$rankedValue : '');}\n    });\n  }, [allowedMetrics, searchKeyword]);\n  const metricSlice = useMemo(() => showAllMetrics ?\n  filteredMetrics :\n  filteredMetrics == null ? void 0 : filteredMetrics.slice == null ? void 0 : filteredMetrics.slice(0, DEFAULT_MAX_METRICS_LENGTH), [filteredMetrics, showAllMetrics]);\n  const columnSlice = useMemo(() => showAllColumns ?\n  sortCertifiedFirst(filteredColumns) :\n  sortCertifiedFirst(filteredColumns == null ? void 0 : filteredColumns.slice == null ? void 0 : filteredColumns.slice(0, DEFAULT_MAX_COLUMNS_LENGTH)), [filteredColumns, showAllColumns]);\n  const showInfoboxCheck = () => {\n    try {\n      if (sessionStorage.getItem('showInfobox') === 'false')\n      return false;\n    }\n    catch (error) {\n\n      // continue regardless of error\n    }return true;\n  };\n  const saveableDatasets = {\n    query: DatasourceType.Query,\n    saved_query: DatasourceType.SavedQuery\n  };\n  const datasourceIsSaveable = datasource.type &&\n  saveableDatasets[datasource.type];\n  const mainBody = useMemo(() => _jsxs(_Fragment, { children: [\n    _jsx(Input, { allowClear: true, onChange: (evt) => {\n        setInputValue(evt.target.value);\n      }, value: inputValue, className: \"form-control input-md\", placeholder: t('Search Metrics & Columns') }),\n    _jsxs(\"div\", { className: \"field-selections\", children: [\n      datasourceIsSaveable && showInfoboxCheck() && _jsx(StyledInfoboxWrapper, { children:\n        _jsx(Alert, { closable: true, onClose: () => {\n            try {\n              sessionStorage.setItem('showInfobox', 'false');\n            }\n            catch (error) {\n\n              // continue regardless of error\n            }}, type: \"info\", message: \"\", description: _jsxs(_Fragment, { children: [\n            _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: () => setShowSaveDatasetModal(true), className: \"add-dataset-alert-description\", children:\n              t('Create a dataset') }\n            ),\n            t(' to edit or add columns and metrics.')] }\n          ) }) }\n      ),\n      _jsx(AutoSizer, { children:\n        ({ height }) => _jsx(List, { width: width - BORDER_WIDTH, height: height, itemSize: ITEM_HEIGHT, itemCount: (collapseMetrics ? 0 : metricSlice == null ? void 0 : metricSlice.length) + (\n          collapseColumns ? 0 : columnSlice.length) +\n          2 + (// Each section header row\n          collapseMetrics ? 0 : 2) + (\n          collapseColumns ? 0 : 2), itemData: {\n            metricSlice,\n            columnSlice,\n            width,\n            totalMetrics: filteredMetrics.length,\n            totalColumns: filteredColumns.length,\n            showAllMetrics,\n            onShowAllMetricsChange: setShowAllMetrics,\n            showAllColumns,\n            onShowAllColumnsChange: setShowAllColumns,\n            collapseMetrics,\n            onCollapseMetricsChange: setCollapseMetrics,\n            collapseColumns,\n            onCollapseColumnsChange: setCollapseColumns,\n            hiddenMetricCount,\n            hiddenColumnCount\n          }, overscanCount: 5, children:\n          DatasourcePanelItem }\n        ) }\n      )] }\n    )] }\n  ),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  columnSlice,\n  inputValue,\n  filteredColumns.length,\n  filteredMetrics.length,\n  metricSlice,\n  showAllColumns,\n  showAllMetrics,\n  collapseMetrics,\n  collapseColumns,\n  datasourceIsSaveable,\n  width]\n  );\n  return _jsxs(DatasourceContainer, { children: [\n    datasourceIsSaveable && showSaveDatasetModal && _jsx(SaveDatasetModal, { visible: showSaveDatasetModal, onHide: () => setShowSaveDatasetModal(false), buttonTextOnSave: t('Save'), buttonTextOnOverwrite: t('Overwrite'), datasource: getDatasourceAsSaveableDataset(datasource), openWindow: false, formData: formData }),\n\n    _jsx(Control, { ...datasourceControl, name: \"datasource\", actions: actions }),\n    datasource.id != null && mainBody] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}