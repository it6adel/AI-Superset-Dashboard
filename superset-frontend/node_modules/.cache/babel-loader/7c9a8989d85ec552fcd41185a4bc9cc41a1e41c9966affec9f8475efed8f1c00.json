{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Behavior, EXTRA_FORM_DATA_APPEND_KEYS, EXTRA_FORM_DATA_OVERRIDE_KEYS, getChartMetadataRegistry, t } from '@superset-ui/core';\nimport extractUrlParams from 'src/dashboard/util/extractUrlParams';\nimport { isIterable } from 'src/utils/types';\nimport { TAB_TYPE } from '../../util/componentTypes';\nimport getBootstrapData from '../../../utils/getBootstrapData';\nconst getDefaultRowLimit = () => {var _bootstrapData$common, _bootstrapData$common2;\n  const bootstrapData = getBootstrapData();\n  const nativeFilterDefaultRowLimit = bootstrapData == null ? void 0 : (_bootstrapData$common = bootstrapData.common) == null ? void 0 : (_bootstrapData$common2 = _bootstrapData$common.conf) == null ? void 0 : _bootstrapData$common2.NATIVE_FILTER_DEFAULT_ROW_LIMIT;\n  return nativeFilterDefaultRowLimit || 1000;\n};\nexport const getFormData = ({ datasetId, dependencies = {}, groupby, defaultDataMask, controlValues, filterType, sortMetric, adhoc_filters, time_range, granularity_sqla, type, dashboardId, id }) => {var _defaultDataMask$filt;\n  const otherProps = {};\n  if (datasetId) {\n    otherProps.datasource = `${datasetId}__table`;\n  }\n  if (groupby) {\n    otherProps.groupby = [groupby];\n  }\n  if (sortMetric) {\n    otherProps.sortMetric = sortMetric;\n  }\n  return {\n    ...controlValues,\n    ...otherProps,\n    adhoc_filters: adhoc_filters != null ? adhoc_filters : [],\n    extra_filters: [],\n    extra_form_data: dependencies,\n    granularity_sqla,\n    metrics: ['count'],\n    row_limit: getDefaultRowLimit(),\n    showSearch: true,\n    defaultValue: defaultDataMask == null ? void 0 : (_defaultDataMask$filt = defaultDataMask.filterState) == null ? void 0 : _defaultDataMask$filt.value,\n    time_range,\n    url_params: extractUrlParams('regular'),\n    inView: true,\n    viz_type: filterType,\n    type,\n    dashboardId,\n    native_filter_id: id\n  };\n};\nexport function mergeExtraFormData(originalExtra = {}, newExtra = {}) {\n  const mergedExtra = {};\n  EXTRA_FORM_DATA_APPEND_KEYS.forEach((key) => {\n    const originalExtraData = originalExtra[key];\n    const newExtraData = newExtra[key];\n    const mergedValues = [\n    ...(isIterable(originalExtraData) ? originalExtraData : []),\n    ...(isIterable(newExtraData) ? newExtraData : [])];\n\n    if (mergedValues.length) {\n      mergedExtra[key] = mergedValues;\n    }\n  });\n  EXTRA_FORM_DATA_OVERRIDE_KEYS.forEach((key) => {\n    const originalValue = originalExtra[key];\n    if (originalValue !== undefined) {\n      mergedExtra[key] =\n      originalValue;\n    }\n    const newValue = newExtra[key];\n    if (newValue !== undefined) {\n      mergedExtra[key] =\n      newValue;\n    }\n  });\n  return mergedExtra;\n}\nexport function isCrossFilter(vizType) {var _getChartMetadataRegi, _getChartMetadataRegi2;\n  // @ts-ignore need export from superset-ui `ItemWithValue`\n  return (_getChartMetadataRegi = getChartMetadataRegistry().items[vizType]) == null ? void 0 : (_getChartMetadataRegi2 = _getChartMetadataRegi.value.behaviors) == null ? void 0 : _getChartMetadataRegi2.includes(Behavior.InteractiveChart);\n}\nexport function getExtraFormData(dataMask, filterIdsAppliedOnChart) {\n  let extraFormData = {};\n  filterIdsAppliedOnChart.forEach((key) => {var _dataMask$key$extraFo, _dataMask$key;\n    extraFormData = mergeExtraFormData(extraFormData, (_dataMask$key$extraFo = (_dataMask$key = dataMask[key]) == null ? void 0 : _dataMask$key.extraFormData) != null ? _dataMask$key$extraFo : {});\n  });\n  return extraFormData;\n}\nexport function nativeFilterGate(behaviors) {\n  return !behaviors.includes(Behavior.NativeFilter) ||\n  behaviors.includes(Behavior.InteractiveChart);\n}\nexport const findTabsWithChartsInScope = (chartLayoutItems, chartsInScope) => new Set(chartsInScope.\nmap((chartId) => {var _chartLayoutItems$fin, _chartLayoutItems$fin2;return (_chartLayoutItems$fin = chartLayoutItems.\n  find((item) => {var _item$meta;return (item == null ? void 0 : (_item$meta = item.meta) == null ? void 0 : _item$meta.chartId) === chartId;})) == null ? void 0 : (_chartLayoutItems$fin2 = _chartLayoutItems$fin.\n  parents) == null ? void 0 : _chartLayoutItems$fin2.filter((parent) => parent.startsWith(`${TAB_TYPE}-`));}).\nfilter((id) => id !== undefined).\nflat());\nexport const getFilterValueForDisplay = (value) => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'string' || typeof value === 'number') {\n    return `${value}`;\n  }\n  if (Array.isArray(value)) {\n    return value.join(', ');\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n  return t('Unknown value');\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}