{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport UntypedJed from 'jed';\nimport logging from '../utils/logging';\nconst DEFAULT_LANGUAGE_PACK = {\n  domain: 'superset',\n  locale_data: {\n    superset: {\n      '': {\n        domain: 'superset',\n        lang: 'en',\n        plural_forms: 'nplurals=2; plural=(n != 1)'\n      }\n    }\n  }\n};\nexport default class Translator {\n\n\n  constructor(config = {}) {this.i18n = void 0;this.locale = void 0;\n    const { languagePack = DEFAULT_LANGUAGE_PACK } = config;\n    this.i18n = new UntypedJed(languagePack);\n    this.locale = this.i18n.options.locale_data.superset[''].lang;\n  }\n  /**\n   * Add additional translations on the fly, used by plugins.\n   */\n  addTranslation(key, texts) {\n    const translations = this.i18n.options.locale_data.superset;\n    if (process.env.WEBPACK_MODE !== 'test' && key in translations) {\n      logging.warn(`Duplicate translation key \"${key}\", will override.`);\n    }\n    translations[key] = texts;\n  }\n  /**\n   * Add a series of translations.\n   */\n  addTranslations(translations) {\n    if (translations && !Array.isArray(translations)) {\n      Object.entries(translations).forEach(([key, vals]) => this.addTranslation(key, vals));\n    } else\n    {\n      logging.warn('Invalid translations');\n    }\n  }\n  addLocaleData(data) {\n    // always fallback to English\n    const translations = (data == null ? void 0 : data[this.locale]) || (data == null ? void 0 : data.en);\n    if (translations) {\n      this.addTranslations(translations);\n    } else\n    {\n      logging.warn('Invalid locale data');\n    }\n  }\n  translate(input, ...args) {\n    return this.i18n.translate(input).fetch(...args);\n  }\n  translateWithNumber(key, ...args) {\n    const [plural, num, ...rest] = args;\n    if (typeof plural === 'number') {\n      return this.i18n.\n      translate(key).\n      ifPlural(plural, key).\n      fetch(plural, num, ...args);\n    }\n    return this.i18n.\n    translate(key).\n    ifPlural(num, plural).\n    fetch(...rest);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}