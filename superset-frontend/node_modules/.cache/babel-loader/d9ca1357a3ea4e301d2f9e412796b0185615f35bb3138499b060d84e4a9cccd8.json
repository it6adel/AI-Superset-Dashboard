{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsInt, t, validateNonEmpty } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_FORMAT_DOCS, D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_OPTIONS, getStandardizedControls, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { legendSection } from '../controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { donut, innerRadius, labelsOutside, labelType, labelLine, outerRadius, numberFormat, showLabels, roseType } = DEFAULT_FORM_DATA;\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        ...sharedControls.sort_by_metric,\n        default: true\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [\n    {\n      name: 'show_labels_threshold',\n      config: {\n        type: 'TextControl',\n        label: t('Percentage threshold'),\n        renderTrigger: true,\n        isFloat: true,\n        default: 5,\n        description: t('Minimum threshold in percentage points for showing labels.')\n      }\n    }],\n\n    [\n    {\n      name: 'roseType',\n      config: {\n        type: 'SelectControl',\n        label: t('Rose Type'),\n        default: roseType,\n        renderTrigger: true,\n        choices: [\n        ['area', t('Area')],\n        ['radius', t('Radius')],\n        [null, t('None')]],\n\n        description: t('Whether to show as Nightingale chart.')\n      }\n    }],\n\n    ...legendSection,\n    // eslint-disable-next-line react/jsx-key\n    [_jsx(ControlSubSectionHeader, { children: t('Labels') })],\n    [\n    {\n      name: 'label_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Label Type'),\n        default: labelType,\n        renderTrigger: true,\n        choices: [\n        ['key', t('Category Name')],\n        ['value', t('Value')],\n        ['percent', t('Percentage')],\n        ['key_value', t('Category and Value')],\n        ['key_percent', t('Category and Percentage')],\n        ['key_value_percent', t('Category, Value and Percentage')],\n        ['value_percent', t('Value and Percentage')],\n        ['template', t('Template')]],\n\n        description: t('What should be shown on the label?')\n      }\n    }],\n\n    [\n    {\n      name: 'label_template',\n      config: {\n        type: 'TextControl',\n        label: t('Label Template'),\n        renderTrigger: true,\n        description: t('Format data labels. ' +\n        'Use variables: {name}, {value}, {percent}. ' +\n        '\\\\n represents a new line. ' +\n        'ECharts compatibility:\\n' +\n        '{a} (series), {b} (name), {c} (value), {d} (percentage)'),\n        visibility: ({ controls }) => {var _controls$label_type;return (controls == null ? void 0 : (_controls$label_type = controls.label_type) == null ? void 0 : _controls$label_type.value) === 'template';}\n      }\n    }],\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: numberFormat,\n        choices: D3_FORMAT_OPTIONS,\n        description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`,\n        tokenSeparators: ['\\n', '\\t', ';']\n      }\n    }],\n\n    ['currency_format'],\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        default: 'smart_date',\n        description: D3_FORMAT_DOCS\n      }\n    }],\n\n    [\n    {\n      name: 'show_labels',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Labels'),\n        renderTrigger: true,\n        default: showLabels,\n        description: t('Whether to display the labels.')\n      }\n    }],\n\n    [\n    {\n      name: 'labels_outside',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Put labels outside'),\n        default: labelsOutside,\n        renderTrigger: true,\n        description: t('Put the labels outside of the pie?'),\n        visibility: ({ controls }) => {var _controls$show_labels;return Boolean(controls == null ? void 0 : (_controls$show_labels = controls.show_labels) == null ? void 0 : _controls$show_labels.value);}\n      }\n    }],\n\n    [\n    {\n      name: 'label_line',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Label Line'),\n        default: labelLine,\n        renderTrigger: true,\n        description: t('Draw line from Pie to label when labels outside?'),\n        visibility: ({ controls }) => {var _controls$show_labels2;return Boolean(controls == null ? void 0 : (_controls$show_labels2 = controls.show_labels) == null ? void 0 : _controls$show_labels2.value);}\n      }\n    }],\n\n    [\n    {\n      name: 'show_total',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Total'),\n        default: false,\n        renderTrigger: true,\n        description: t('Whether to display the aggregate count')\n      }\n    }],\n\n    // eslint-disable-next-line react/jsx-key\n    [_jsx(ControlSubSectionHeader, { children: t('Pie shape') })],\n    [\n    {\n      name: 'outerRadius',\n      config: {\n        type: 'SliderControl',\n        label: t('Outer Radius'),\n        renderTrigger: true,\n        min: 10,\n        max: 100,\n        step: 1,\n        default: outerRadius,\n        description: t('Outer edge of Pie chart')\n      }\n    }],\n\n    [\n    {\n      name: 'donut',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Donut'),\n        default: donut,\n        renderTrigger: true,\n        description: t('Do you want a donut or a pie?')\n      }\n    }],\n\n    [\n    {\n      name: 'innerRadius',\n      config: {\n        type: 'SliderControl',\n        label: t('Inner Radius'),\n        renderTrigger: true,\n        min: 0,\n        max: 100,\n        step: 1,\n        default: innerRadius,\n        description: t('Inner radius of donut hole'),\n        visibility: ({ controls }) => {var _controls$donut;return Boolean(controls == null ? void 0 : (_controls$donut = controls.donut) == null ? void 0 : _controls$donut.value);}\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    series: {\n      validators: [validateNonEmpty],\n      clearable: false\n    },\n    row_limit: {\n      default: 100\n    }\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n    groupby: getStandardizedControls().popAllColumns(),\n    row_limit: ensureIsInt(formData.row_limit, 100) >= 100 ? 100 : formData.row_limit\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}