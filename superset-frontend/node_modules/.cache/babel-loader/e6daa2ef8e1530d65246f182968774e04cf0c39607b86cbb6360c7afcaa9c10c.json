{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { api } from 'src/hooks/apiResources/queryApi';\nimport messageToastReducer from 'src/components/MessageToasts/reducers';\nimport charts from 'src/components/Chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport reports from 'src/features/reports/ReportModal/reducer';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport dashboardDatasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport saveModal from 'src/explore/reducers/saveModalReducer';\nimport explore from 'src/explore/reducers/exploreReducer';\nimport exploreDatasources from 'src/explore/reducers/datasourcesReducer';\nimport { persistSqlLabStateEnhancer } from 'src/SqlLab/middlewares/persistSqlLabStateEnhancer';\nimport sqlLabReducer from 'src/SqlLab/reducers/sqlLab';\nimport getInitialState from 'src/SqlLab/reducers/getInitialState';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport { nanoid } from 'nanoid';\nimport getBootstrapData from 'src/utils/getBootstrapData';\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer = (initialState) => (state = initialState) => state;\nconst bootstrapData = getBootstrapData();\nexport const USER_LOADED = 'USER_LOADED';\nexport const userReducer = (user = bootstrapData.user || {}, action) => {\n  if (action.type === USER_LOADED) {\n    return action.user;\n  }\n  return user;\n};\nconst getMiddleware = (getDefaultMiddleware) => process.env.REDUX_DEFAULT_MIDDLEWARE ?\ngetDefaultMiddleware({\n  immutableCheck: {\n    warnAfter: 200\n  },\n  serializableCheck: {\n    // Ignores AbortController instances\n    ignoredActionPaths: [/queryController/g],\n    ignoredPaths: [/queryController/g],\n    warnAfter: 200\n  }\n}).concat(logger, api.middleware) :\n[thunk, logger, api.middleware];\n// TODO: This reducer is a combination of the Dashboard and Explore reducers.\n// The correct way of handling this is to unify the actions and reducers from both\n// modules in shared files. This involves a big refactor to unify the parameter types\n// and move files around. We should tackle this in a specific PR.\nconst CombinedDatasourceReducers = (datasources, action) => {\n  if (action.type === DatasourcesAction.SetDatasources) {\n    return dashboardDatasources(datasources, action);\n  }\n  return exploreDatasources(datasources, action);\n};\nconst reducers = {\n  sqlLab: sqlLabReducer,\n  localStorageUsageInKilobytes: noopReducer(0),\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrapData.common),\n  user: userReducer,\n  impressionId: noopReducer(nanoid()),\n  charts,\n  datasources: CombinedDatasourceReducers,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities,\n  reports,\n  saveModal,\n  explore\n};\n/* In some cases the jinja template injects two separate React apps into basic.html\n * One for the top navigation Menu and one for the application below the Menu\n * The first app to connect to the Redux debugger wins which is the menu blocking\n * the application from being able to connect to the redux debugger.\n * setupStore with disableDebugger true enables the menu.tsx component to avoid connecting\n * to redux debugger so the application can connect to redux debugger\n */\nexport function setupStore({ disableDebugger = false, initialState = getInitialState(bootstrapData), rootReducers = reducers, ...overrides } = {}) {\n  return configureStore({\n    preloadedState: initialState,\n    reducer: {\n      [api.reducerPath]: api.reducer,\n      ...rootReducers\n    },\n    middleware: getMiddleware,\n    devTools: process.env.WEBPACK_MODE === 'development' && !disableDebugger,\n    enhancers: [persistSqlLabStateEnhancer],\n    ...overrides\n  });\n}\nexport const store = setupStore();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}