{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Suspense, useEffect } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport { BrowserRouter as Router, Switch, Route, useLocation } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { css } from '@superset-ui/core';\nimport { GlobalStyles } from 'src/GlobalStyles';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport Loading from 'src/components/Loading';\nimport { Layout } from 'src/components';\nimport Menu from 'src/features/home/Menu';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport ToastContainer from 'src/components/MessageToasts/ToastContainer';\nimport setupApp from 'src/setup/setupApp';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport { setupAGGridModules } from 'src/setup/setupAGGridModules';\nimport { routes, isFrontendRoute } from 'src/views/routes';\nimport { Logger, LOG_ACTIONS_SPA_NAVIGATION } from 'src/logger/LogUtils';\nimport setupExtensions from 'src/setup/setupExtensions';\nimport { logEvent } from 'src/logger/actions';\nimport { store } from 'src/views/store';\nimport { RootContextProviders } from './RootContextProviders';\nimport { ScrollToTop } from './ScrollToTop';import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nsetupApp();\nsetupPlugins();\nsetupExtensions();\nsetupAGGridModules();\nconst bootstrapData = getBootstrapData();\nlet lastLocationPathname;\nconst boundActions = bindActionCreators({ logEvent }, store.dispatch);\nconst LocationPathnameLogger = () => {\n  const location = useLocation();\n  useEffect(() => {\n    // This will log client side route changes for single page app user navigation\n    boundActions.logEvent(LOG_ACTIONS_SPA_NAVIGATION, {\n      path: location.pathname\n    });\n    // reset performance logger timer start point to avoid soft navigation\n    // cause dashboard perf measurement problem\n    if (lastLocationPathname && lastLocationPathname !== location.pathname) {\n      Logger.markTimeOrigin();\n    }\n    lastLocationPathname = location.pathname;\n  }, [location.pathname]);\n  return _jsx(_Fragment, {});\n};\nconst App = () => _jsxs(Router, { children: [\n  _jsx(ScrollToTop, {}),\n  _jsx(LocationPathnameLogger, {}),\n  _jsxs(RootContextProviders, { children: [\n    _jsx(GlobalStyles, {}),\n    _jsx(Menu, { data: bootstrapData.common.menu_data, isFrontendRoute: isFrontendRoute }),\n    _jsx(Switch, { children:\n      routes.map(({ path, Component, props = {}, Fallback = Loading }) => _jsx(Route, { path: path, children:\n        _jsx(Suspense, { fallback: _jsx(Fallback, {}), children:\n          _jsx(Layout.Content, { css: css`\n                  display: flex;\n                  flex-direction: column;\n                `, children:\n            _jsx(ErrorBoundary, { css: css`\n                    margin: 16px;\n                  `, children:\n              _jsx(Component, { user: bootstrapData.user, ...props }) }\n            ) }\n          ) }\n        ) }, path\n      )) }\n    ),\n    _jsx(ToastContainer, {})] }\n  )] }\n);\nexport default App;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}