{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { logEvent } from 'src/logger/actions';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { componentLookup } from 'src/dashboard/components/gridComponents';\nimport getDetailedComponentWidth from 'src/dashboard/util/getDetailedComponentWidth';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { COLUMN_TYPE, ROW_TYPE } from 'src/dashboard/util/componentTypes';\nimport {\n  createComponent,\n  deleteComponent,\n  updateComponents,\n  handleComponentDrop } from\n'src/dashboard/actions/dashboardLayout';\nimport {\n  setDirectPathToChild,\n  setActiveTab,\n  setFullSizeChartId } from\n'src/dashboard/actions/dashboardState';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  id: PropTypes.string,\n  parentId: PropTypes.string,\n  depth: PropTypes.number,\n  index: PropTypes.number,\n  renderHoverMenu: PropTypes.bool,\n  renderTabContent: PropTypes.bool,\n  onChangeTab: PropTypes.func,\n  directPathToChild: PropTypes.arrayOf(PropTypes.string),\n  directPathLastUpdated: PropTypes.number,\n  isComponentVisible: PropTypes.bool\n};\n\nconst DashboardComponent = (props) => {\n  const dispatch = useDispatch();\n  const dashboardLayout = useSelector((state) => state.dashboardLayout.present);\n  const dashboardInfo = useSelector((state) => state.dashboardInfo);\n  const editMode = useSelector((state) => state.dashboardState.editMode);\n  const fullSizeChartId = useSelector(\n    (state) => state.dashboardState.fullSizeChartId\n  );\n  const dashboardId = dashboardInfo.id;\n  const component = dashboardLayout[props.id];\n  const parentComponent = dashboardLayout[props.parentId];\n  const getComponentById = useCallback(\n    (id) => dashboardLayout[id],\n    [dashboardLayout]\n  );\n  const { isComponentVisible = true } = props;\n  const filters = getActiveFilters();\n  const embeddedMode = !dashboardInfo.userId;\n\n  const boundActionCreators = useMemo(\n    () =>\n    bindActionCreators(\n      {\n        addDangerToast,\n        createComponent,\n        deleteComponent,\n        updateComponents,\n        handleComponentDrop,\n        setDirectPathToChild,\n        setFullSizeChartId,\n        setActiveTab,\n        logEvent\n      },\n      dispatch\n    ),\n    [dispatch]\n  );\n\n  // rows and columns need more data about their child dimensions\n  // doing this allows us to not pass the entire component lookup to all Components\n  const { occupiedColumnCount, minColumnWidth } = useMemo(() => {\n    if (component) {\n      const componentType = component.type;\n      if (componentType === ROW_TYPE || componentType === COLUMN_TYPE) {\n        const { occupiedWidth, minimumWidth } = getDetailedComponentWidth({\n          id: props.id,\n          components: dashboardLayout\n        });\n\n        if (componentType === ROW_TYPE) {\n          return { occupiedColumnCount: occupiedWidth };\n        }\n        if (componentType === COLUMN_TYPE) {\n          return { minColumnWidth: minimumWidth };\n        }\n      }\n      return {};\n    }\n    return {};\n  }, [component, dashboardLayout, props.id]);\n\n  const Component = component ? componentLookup[component.type] : null;\n  return Component ?\n  _jsx(Component, { ...\n    props, ...\n    boundActionCreators,\n    component: component,\n    getComponentById: getComponentById,\n    parentComponent: parentComponent,\n    editMode: editMode,\n    filters: filters,\n    dashboardId: dashboardId,\n    dashboardInfo: dashboardInfo,\n    fullSizeChartId: fullSizeChartId,\n    occupiedColumnCount: occupiedColumnCount,\n    minColumnWidth: minColumnWidth,\n    isComponentVisible: isComponentVisible,\n    embeddedMode: embeddedMode }\n  ) :\n  null;\n};\n\nDashboardComponent.propTypes = propTypes;\n\nexport default /*#__PURE__*/memo(DashboardComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}