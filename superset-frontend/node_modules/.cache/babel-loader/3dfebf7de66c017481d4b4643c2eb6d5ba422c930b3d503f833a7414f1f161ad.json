{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState, useMemo, useEffect } from 'react';\nimport rison from 'rison';\nimport { ensureIsArray, t, useChangeEffect, getClientErrorObject } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';\n/** Special purpose AsyncSelect that selects a column from a dataset */\n// eslint-disable-next-line import/prefer-default-export\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";export function ColumnSelect({ allowClear = false, filterValues = () => true, form, formField = 'column', filterId, datasetId, value, onChange, mode }) {var _form$getFieldValue;\n  const [columns, setColumns] = useState();\n  const [loading, setLoading] = useState(false);\n  const { addDangerToast } = useToasts();\n  const resetColumnField = useCallback(() => {\n    form.setFields([\n    { name: ['filters', filterId, formField], touched: false, value: null }]\n    );\n  }, [form, filterId, formField]);\n  const options = useMemo(() => ensureIsArray(columns).\n  filter(filterValues).\n  map((col) => col.column_name).\n  map((column) => ({ label: column, value: column })), [columns, filterValues]);\n  const currentFilterType = (_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId].filterType;\n  const currentColumn = useMemo(() => columns == null ? void 0 : columns.find((column) => column.column_name === value), [columns, value]);\n  useEffect(() => {\n    if (currentColumn && !filterValues(currentColumn)) {\n      resetColumnField();\n    }\n  }, [currentColumn, currentFilterType, resetColumnField]);\n  useChangeEffect(datasetId, (previous) => {\n    if (previous != null) {\n      setColumns([]);\n      resetColumnField();\n    }\n    if (datasetId != null) {\n      setLoading(true);\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}?q=${rison.encode({\n          columns: [\n          'columns.column_name',\n          'columns.is_dttm',\n          'columns.type_generic']\n\n        })}`\n      }).\n      then(({ json: { result } }) => {\n        const lookupValue = Array.isArray(value) ? value : [value];\n        const valueExists = result.columns.some((column) => lookupValue == null ? void 0 : lookupValue.includes(column.column_name));\n        if (!valueExists) {\n          resetColumnField();\n        }\n        setColumns(result.columns);\n      }, async (badResponse) => {\n        const { error, message } = await getClientErrorObject(badResponse);\n        let errorText = message || error || t('An error has occurred');\n        if (message === 'Forbidden') {\n          errorText = t('You do not have permission to edit this dashboard');\n        }\n        addDangerToast(errorText);\n      }).\n      finally(() => setLoading(false));\n    }\n  });\n  return _jsx(Select, { mode: mode, value: mode === 'multiple' ? value || [] : value, ariaLabel: t('Column select'), loading: loading, onChange: onChange, options: options, placeholder: t('Select a column'), notFoundContent: t('No compatible columns found'), showSearch: true, allowClear: allowClear });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}