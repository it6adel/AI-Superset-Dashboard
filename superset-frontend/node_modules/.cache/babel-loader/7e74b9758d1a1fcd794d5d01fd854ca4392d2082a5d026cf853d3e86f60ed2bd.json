{"ast":null,"code":"import { RegistryWithDefaultKey, OverwritePolicy } from '../models';\nimport { DEFAULT_D3_FORMAT } from './D3FormatConfig';\nimport createD3NumberFormatter from './factories/createD3NumberFormatter';\nimport createSmartNumberFormatter from './factories/createSmartNumberFormatter';\nimport NumberFormats from './NumberFormats';\nexport default class NumberFormatterRegistry extends RegistryWithDefaultKey {\n\n  constructor() {\n    super({\n      name: 'NumberFormatter',\n      overwritePolicy: OverwritePolicy.Warn\n    });this.d3Format = void 0;\n    this.registerValue(NumberFormats.SMART_NUMBER, createSmartNumberFormatter());\n    this.registerValue(NumberFormats.SMART_NUMBER_SIGNED, createSmartNumberFormatter({ signed: true }));\n    this.setDefaultKey(NumberFormats.SMART_NUMBER);\n    this.d3Format = DEFAULT_D3_FORMAT;\n  }\n  setD3Format(d3Format) {\n    this.d3Format = { ...DEFAULT_D3_FORMAT, ...d3Format };\n    return this;\n  }\n  get(formatterId) {\n    const targetFormat = `${formatterId === null ||\n    typeof formatterId === 'undefined' ||\n    formatterId === '' ?\n    this.defaultKey :\n    formatterId}`.trim();\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat);\n    }\n    // Create new formatter if does not exist\n    const formatter = createD3NumberFormatter({\n      formatString: targetFormat,\n      locale: this.d3Format\n    });\n    this.registerValue(targetFormat, formatter);\n    return formatter;\n  }\n  format(formatterId, value) {\n    return this.get(formatterId)(value);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}