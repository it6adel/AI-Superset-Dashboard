{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { css, styled, t, useTheme } from '@superset-ui/core';\nimport { isCrossFilterScopeGlobal } from 'src/dashboard/types';\nimport { useSelector } from 'react-redux';\nimport { CHART_TYPE } from 'src/dashboard/util/componentTypes';\nimport Icons from 'src/components/Icons';\nimport Button from 'src/components/Button';\nimport { FilterTitle } from 'src/dashboard/components/nativeFilters/FiltersConfigModal/FilterTitleContainer';\nimport { NEW_CHART_SCOPING_ID } from './constants';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst AddButtonContainer = styled.div`\n  ${({ theme }) => css`\n    margin-top: ${theme.gridUnit * 2}px;\n    & button > [role='img']:first-of-type {\n      line-height: 0;\n    }\n    span[role='img'] {\n      padding-bottom: 1px;\n    }\n    button > span > :first-of-type {\n      margin-right: 0;\n    }\n    .antd5-btn > .anticon + span {\n      margin-left: 0;\n    }\n  `}\n`;\nconst ScopingTitle = ({ isActive, onClick, id, label, onRemove }) => {\n  const theme = useTheme();\n  return _jsxs(FilterTitle, { className: isActive ? 'active' : '', onClick: () => onClick(id), children: [\n    label,\n    _jsx(Icons.DeleteOutlined, { iconColor: theme.colors.grayscale.light3, iconSize: \"xl\", onClick: (event) => {\n        event.stopPropagation();\n        onRemove(id);\n      }, css: css`\n          margin: auto auto auto ${theme.gridUnit}px;\n        ` })] }\n  );\n};\nexport const ChartsScopingListPanel = ({ activeChartId, chartConfigs, setCurrentChartId, removeCustomScope, addNewCustomScope }) => {\n  const theme = useTheme();\n  const layout = useSelector((state) => state.dashboardLayout.present);\n  const customScopedCharts = useMemo(() => {\n    const chartLayoutItems = Object.values(layout).filter((item) => item.type === CHART_TYPE);\n    return Object.values(chartConfigs).\n    filter((config) => !isCrossFilterScopeGlobal(config.crossFilters.scope) &&\n    config.id !== NEW_CHART_SCOPING_ID).\n    map((config) => {\n      const chartLayoutItem = chartLayoutItems.find((item) => item.meta.chartId === config.id);\n      return {\n        id: config.id,\n        label: (chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceNameOverride) || (\n        chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceName) ||\n        ''\n      };\n    });\n  }, [chartConfigs, layout]);\n  const newScoping = chartConfigs[NEW_CHART_SCOPING_ID];\n  return _jsxs(_Fragment, { children: [\n    _jsx(AddButtonContainer, { children:\n      _jsxs(Button, { buttonStyle: \"link\", buttonSize: \"xsmall\", onClick: addNewCustomScope, children: [\n        _jsx(Icons.PlusOutlined, { iconSize: \"s\" }), \" \", t('Add custom scoping')] }\n      ) }\n    ),\n    _jsx(FilterTitle, { role: \"button\", onClick: () => setCurrentChartId(undefined), className: activeChartId === undefined ? 'active' : '', children:\n      t('All charts/global scoping') }\n    ),\n    _jsx(\"div\", { css: css`\n          width: 100%;\n          height: 1px;\n          background-color: ${theme.colors.grayscale.light3};\n          margin: ${theme.gridUnit * 3}px 0;\n        ` }),\n    customScopedCharts.map((chartInfo) => _jsx(ScopingTitle, { id: chartInfo.id, onClick: setCurrentChartId, onRemove: removeCustomScope, isActive: activeChartId === chartInfo.id, label: chartInfo.label }, chartInfo.id)),\n    newScoping && _jsx(ScopingTitle, { id: newScoping.id, onClick: setCurrentChartId, onRemove: removeCustomScope, isActive: activeChartId === newScoping.id, label: `[${t('new custom scoping')}]` })] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}