{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { OptionControlLabel } from 'src/explore/components/controls/OptionControls';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport columnType from './columnType';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\nimport AdhocMetricPopoverTrigger from './AdhocMetricPopoverTrigger';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  adhocMetric: PropTypes.instanceOf(AdhocMetric),\n  onMetricEdit: PropTypes.func.isRequired,\n  onRemoveMetric: PropTypes.func,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  savedMetric: savedMetricType,\n  datasource: PropTypes.object,\n  onMoveLabel: PropTypes.func,\n  onDropLabel: PropTypes.func,\n  index: PropTypes.number,\n  type: PropTypes.string,\n  multi: PropTypes.bool,\n  datasourceWarningMessage: PropTypes.string\n};\n\nclass AdhocMetricOption extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.onRemoveMetric = this.onRemoveMetric.bind(this);\n  }\n\n  onRemoveMetric(e) {\n    e == null ? void 0 : e.stopPropagation();\n    this.props.onRemoveMetric(this.props.index);\n  }\n\n  render() {\n    const {\n      adhocMetric,\n      onMetricEdit,\n      columns,\n      savedMetricsOptions,\n      savedMetric,\n      datasource,\n      onMoveLabel,\n      onDropLabel,\n      index,\n      type,\n      multi,\n      datasourceWarningMessage\n    } = this.props;\n    const withCaret = !savedMetric.error_text;\n\n    return (\n      _jsx(AdhocMetricPopoverTrigger, {\n        adhocMetric: adhocMetric,\n        onMetricEdit: onMetricEdit,\n        columns: columns,\n        savedMetricsOptions: savedMetricsOptions,\n        savedMetric: savedMetric,\n        datasource: datasource, children:\n\n        _jsx(OptionControlLabel, {\n          savedMetric: savedMetric,\n          adhocMetric: adhocMetric,\n          label: adhocMetric.label,\n          onRemove: this.onRemoveMetric,\n          onMoveLabel: onMoveLabel,\n          onDropLabel: onDropLabel,\n          index: index,\n          type: type != null ? type : DndItemType.AdhocMetricOption,\n          withCaret: withCaret,\n          isFunction: true,\n          multi: multi,\n          datasourceWarningMessage: datasourceWarningMessage }\n        ) }\n      ));\n\n  }\n}\n\nexport default AdhocMetricOption;\n\nAdhocMetricOption.propTypes = propTypes;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}