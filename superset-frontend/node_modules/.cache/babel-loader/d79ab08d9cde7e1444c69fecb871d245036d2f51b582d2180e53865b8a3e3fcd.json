{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport { getCategoricalSchemeRegistry, t } from '@superset-ui/core';\nimport { useEffect, useState } from 'react';\nimport ColorSchemeControl from 'src/explore/components/controls/ColorSchemeControl';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst ColorSchemeControlWrapper = ({ colorScheme, hasCustomLabelsColor = false, hovered = false, onChange = () => {} }) => {\n  const [choices, setChoices] = useState([]);\n  const [schemes, setSchemes] = useState({});\n  useEffect(() => {\n    // Registry initialization\n    const categoricalSchemeRegistry = getCategoricalSchemeRegistry();\n    setChoices(categoricalSchemeRegistry.keys().map((s) => [s, s]));\n    setSchemes(categoricalSchemeRegistry.getMap());\n  }, []); // Empty dependency array ensures this runs only once\n  return _jsx(ColorSchemeControl, { description: t(\"Any color palette selected here will override the colors applied to this dashboard's individual charts\"), name: \"color_scheme\", onChange: onChange, value: colorScheme != null ? colorScheme : '', choices: choices, clearable: true, hovered: hovered, schemes: schemes, hasCustomLabelsColor: hasCustomLabelsColor });\n};\nexport default ColorSchemeControlWrapper;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}