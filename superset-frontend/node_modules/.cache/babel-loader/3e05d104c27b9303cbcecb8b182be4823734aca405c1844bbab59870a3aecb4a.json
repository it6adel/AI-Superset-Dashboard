{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { SupersetClient } from '../../../connection';\nimport handleError from './handleError';\nconst validRequestTypes = new Set(['form', 'json', 'search', 'rison']);\nfunction isPayloadless(method) {\n  return !method || method === 'GET' || method === 'DELETE' || method === 'HEAD';\n}\n/**\n * Generate an API caller with predefined configs/typing and consistent\n * return values.\n */\nexport default function makeApi(options) {\n  const { endpoint, method, requestType: requestType_, responseType, processResponse, ...requestOptions } = options;\n  // use `search` payload (searchParams) when it's a GET request\n  const requestType = requestType_ || (isPayloadless(method) ? 'search' : 'json');\n  if (!validRequestTypes.has(requestType)) {\n    throw new Error(`Invalid request payload type, choose from: ${[...validRequestTypes].join(' | ')}`);\n  }\n  async function request(payload, { client = SupersetClient } = {\n    client: SupersetClient\n  }) {\n    try {\n      const requestConfig = {\n        ...requestOptions,\n        method,\n        endpoint,\n        searchParams: undefined,\n        postPayload: undefined,\n        jsonPayload: undefined\n      };\n      if (requestType === 'search') {\n        requestConfig.searchParams = payload;\n      } else\n      if (requestType === 'rison') {\n        requestConfig.endpoint = `${endpoint}?q=${rison.encode(payload)}`;\n      } else\n      if (requestType === 'form') {\n        requestConfig.postPayload = payload;\n      } else\n      {\n        requestConfig.jsonPayload = payload;\n      }\n      let result;\n      const response = await client.request({\n        ...requestConfig,\n        parseMethod: 'raw'\n      });\n      if (responseType === 'text') {\n        result = await response.text();\n      } else\n      if (responseType === 'raw' || responseType === null) {\n        result = response;\n      } else\n      {\n        result = await response.json();\n        // if response json has an \"error\" field\n        if (result && typeof result === 'object' && 'error' in result) {\n          return handleError(result);\n        }\n      }\n      const typedResult = result;\n      return processResponse ? processResponse(typedResult) : typedResult;\n    }\n    catch (error) {\n      return handleError(error);\n    }\n  }\n  request.method = method;\n  request.endpoint = endpoint;\n  request.requestType = requestType;\n  return request;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}