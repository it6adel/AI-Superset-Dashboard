{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { css, t, useTheme } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport ModalTrigger from 'src/components/ModalTrigger';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const ViewResultsModalTrigger = ({ canExplore, exploreUrl, triggerNode, modalTitle, modalBody, modalRef }) => {\n  const history = useHistory();\n  const exploreChart = () => history.push(exploreUrl);\n  const theme = useTheme();\n  const handleCloseModal = useCallback(() => {var _modalRef$current;\n    modalRef == null ? void 0 : (_modalRef$current = modalRef.current) == null ? void 0 : _modalRef$current.close();\n  }, [modalRef]);\n  return _jsx(ModalTrigger, { ref: modalRef, triggerNode: triggerNode, modalTitle: modalTitle, modalBody: modalBody, responsive: true, resizable: true, resizableConfig: {\n      minHeight: theme.gridUnit * 128,\n      minWidth: theme.gridUnit * 128,\n      defaultSize: {\n        width: 'auto',\n        height: '75vh'\n      }\n    }, draggable: true, destroyOnClose: true, modalFooter: _jsxs(_Fragment, { children: [\n      _jsx(Button, { buttonStyle: \"secondary\", buttonSize: \"small\", onClick: exploreChart, disabled: !canExplore, tooltip: !canExplore ?\n        t('You do not have sufficient permissions to edit the chart') :\n        undefined, children:\n        t('Edit chart') }\n      ),\n      _jsx(Button, { buttonStyle: \"primary\", buttonSize: \"small\", onClick: handleCloseModal, css: css`\n              margin-left: ${theme.gridUnit * 2}px;\n            `, children:\n        t('Close') }\n      )] }\n    ) });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}