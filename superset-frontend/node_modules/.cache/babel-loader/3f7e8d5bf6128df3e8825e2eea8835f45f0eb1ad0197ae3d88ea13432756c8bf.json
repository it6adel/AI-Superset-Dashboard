{"ast":null,"code":"import _last from \"lodash/last\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\n\nimport { logging, t, SupersetClient } from '@superset-ui/core';\nimport { LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE, LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF } from 'src/logger/LogUtils';\nimport { getDashboardUrlParams } from 'src/utils/urlUtils';\nimport { DownloadScreenshotFormat } from '../components/menu/DownloadMenuItems/types';\nconst RETRY_INTERVAL = 3000;\nconst MAX_RETRIES = 30;\nexport const useDownloadScreenshot = (dashboardId, logEvent) => {\n  const activeTabs = useSelector((state) => state.dashboardState.activeTabs || undefined);\n  const anchor = useSelector((state) => _last(state.dashboardState.directPathToChild) || undefined);\n  const dataMask = useSelector((state) => state.dataMask || undefined);\n  const { addDangerToast, addSuccessToast, addInfoToast } = useToasts();\n  const currentIntervalIds = useRef([]);\n  const stopIntervals = useCallback((message) => {\n    currentIntervalIds.current.forEach(clearInterval);\n    if (message === 'failure') {\n      addDangerToast(t('The screenshot could not be downloaded. Please, try again later.'));\n    }\n    if (message === 'success') {\n      addSuccessToast(t('The screenshot has been downloaded.'));\n    }\n  }, [addDangerToast, addSuccessToast]);\n  const downloadScreenshot = useCallback((format) => {\n    let retries = 0;\n    const toastIntervalId = setInterval(() => addInfoToast(t('The screenshot is being generated. Please, do not leave the page.'), { noDuplicate: true }), RETRY_INTERVAL);\n    currentIntervalIds.current = [\n    ...(currentIntervalIds.current || []),\n    toastIntervalId];\n\n    const checkImageReady = (cacheKey) => SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${dashboardId}/screenshot/${cacheKey}/?download_format=${format}`,\n      headers: { Accept: 'application/pdf, image/png' },\n      parseMethod: 'raw'\n    }).\n    then((response) => response.blob()).\n    then((blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `screenshot.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      stopIntervals('success');\n    }).\n    catch((err) => {\n      if (err.status === 404) {\n        throw new Error('Image not ready');\n      }\n    });\n    const fetchImageWithRetry = (cacheKey) => {\n      if (retries >= MAX_RETRIES) {\n        stopIntervals('failure');\n        logging.error('Max retries reached');\n        return;\n      }\n      checkImageReady(cacheKey).catch(() => {\n        retries += 1;\n      });\n    };\n    SupersetClient.post({\n      endpoint: `/api/v1/dashboard/${dashboardId}/cache_dashboard_screenshot/`,\n      jsonPayload: {\n        anchor,\n        activeTabs,\n        dataMask,\n        urlParams: getDashboardUrlParams(['edit'])\n      }\n    }).\n    then(({ json }) => {\n      const cacheKey = json == null ? void 0 : json.cache_key;\n      if (!cacheKey) {\n        throw new Error('No image URL in response');\n      }\n      const retryIntervalId = setInterval(() => {\n        fetchImageWithRetry(cacheKey);\n      }, RETRY_INTERVAL);\n      currentIntervalIds.current.push(retryIntervalId);\n      fetchImageWithRetry(cacheKey);\n    }).\n    catch((error) => {\n      logging.error(error);\n      stopIntervals('failure');\n    }).\n    finally(() => {\n      logEvent == null ? void 0 : logEvent(format === DownloadScreenshotFormat.PNG ?\n      LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE :\n      LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF);\n    });\n  }, [\n  dashboardId,\n  anchor,\n  activeTabs,\n  dataMask,\n  addInfoToast,\n  stopIntervals,\n  logEvent]\n  );\n  useEffect(() => () => {\n    if (currentIntervalIds.current.length > 0) {\n      stopIntervals();\n    }\n    currentIntervalIds.current = [];\n  }, [stopIntervals]);\n  return downloadScreenshot;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}