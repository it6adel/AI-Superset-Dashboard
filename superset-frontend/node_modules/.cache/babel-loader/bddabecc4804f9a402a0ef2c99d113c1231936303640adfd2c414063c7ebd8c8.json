{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nclass LRUCache {\n\n\n  constructor(capacity) {this.cache = void 0;this.capacity = void 0;\n    if (capacity < 1) {\n      throw new Error('The capacity in LRU must be greater than 0.');\n    }\n    this.capacity = capacity;\n    this.cache = new Map();\n  }\n  has(key) {\n    return this.cache.has(key);\n  }\n  get(key) {\n    // Prevent runtime errors\n    if (typeof key !== 'string') {\n      throw new TypeError('The LRUCache key must be string.');\n    }\n    if (this.cache.has(key)) {\n      const tmp = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, tmp);\n      return tmp;\n    }\n    return undefined;\n  }\n  set(key, value) {\n    // Prevent runtime errors\n    if (typeof key !== 'string') {\n      throw new TypeError('The LRUCache key must be string.');\n    }\n    if (this.cache.size >= this.capacity) {\n      this.cache.delete(this.cache.keys().next().value);\n    }\n    this.cache.set(key, value);\n  }\n  clear() {\n    this.cache.clear();\n  }\n  get size() {\n    return this.cache.size;\n  }\n  values() {\n    return [...this.cache.values()];\n  }\n}\nexport function lruCache(capacity = 100) {\n  return new LRUCache(capacity);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}