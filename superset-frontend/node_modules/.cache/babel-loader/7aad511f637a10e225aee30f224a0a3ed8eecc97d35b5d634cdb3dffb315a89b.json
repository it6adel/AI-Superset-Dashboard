{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { sharedControls, InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { t, validateNonEmpty, useTheme, SafeMarkdown } from '@superset-ui/core';\nimport { CodeEditor } from '../../components/CodeEditor/CodeEditor';\nimport { ControlHeader } from '../../components/ControlHeader/controlHeader';\nimport { debounceFunc } from '../../consts';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst HandlebarsTemplateControl = (props) => {\n  const theme = useTheme();\n  const val = String(props != null && props.value ? props == null ? void 0 : props.value : props != null && props.default ? props == null ? void 0 : props.default : '');\n  const helperDescriptionsHeader = t('Available Handlebars Helpers in Superset:');\n  const helperDescriptions = [\n  { key: 'dateFormat', descKey: 'Formats a date using a specified format.' },\n  { key: 'stringify', descKey: 'Converts an object to a JSON string.' },\n  {\n    key: 'formatNumber',\n    descKey: 'Formats a number using locale-specific formatting.'\n  },\n  {\n    key: 'parseJson',\n    descKey: 'Parses a JSON string into a JavaScript object.'\n  }];\n\n  const helpersTooltipContent = `\n${helperDescriptionsHeader}\n\n${helperDescriptions.\n  map(({ key, descKey }) => `- **${key}**: ${t(descKey)}`).\n  join('\\n')}\n`;\n  return _jsxs(\"div\", { children: [\n    _jsx(ControlHeader, { children:\n      _jsxs(\"div\", { children: [\n        props.label,\n        _jsx(InfoTooltipWithTrigger, { iconsStyle: { marginLeft: theme.gridUnit }, tooltip: _jsx(SafeMarkdown, { source: helpersTooltipContent }) })] }\n      ) }\n    ),\n    _jsx(CodeEditor, { theme: \"dark\", value: val, onChange: (source) => {\n        debounceFunc(props.onChange, source || '');\n      } })] }\n  );\n};\nexport const handlebarsTemplateControlSetItem = {\n  name: 'handlebarsTemplate',\n  config: {\n    ...sharedControls.entity,\n    type: HandlebarsTemplateControl,\n    label: t('Handlebars Template'),\n    description: t('A handlebars template that is applied to the data'),\n    default: `<ul class=\"data-list\">\n  {{#each data}}\n    <li>{{stringify this}}</li>\n  {{/each}}\n</ul>`,\n    isInt: false,\n    renderTrigger: true,\n    valueKey: null,\n    validators: [validateNonEmpty],\n    mapStateToProps: ({ controls }) => {var _controls$handlebars_;return {\n        value: controls == null ? void 0 : (_controls$handlebars_ = controls.handlebars_template) == null ? void 0 : _controls$handlebars_.value\n      };}\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}