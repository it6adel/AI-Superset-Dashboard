{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_TIME_FORMAT_DOCS, formatSelectOptions, getStandardizedControls, sections, sharedControls } from '@superset-ui/chart-controls';\nimport { legendSection, minorTicks, richTooltipSection, seriesOrderSection, showValueSection, truncateXAxis, xAxisBounds, xAxisLabelRotation } from '../../../controls';\nimport { OrientationType } from '../../types';\nimport { DEFAULT_FORM_DATA, TIME_SERIES_DESCRIPTION_TEXT } from '../../constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { logAxis, minorSplitLine, truncateYAxis, yAxisBounds, zoomable, orientation } = DEFAULT_FORM_DATA;\nfunction createAxisTitleControl(axis) {\n  const isXAxis = axis === 'x';\n  const isVertical = (controls) => Boolean((controls == null ? void 0 : controls.orientation.value) === OrientationType.Vertical);\n  const isHorizontal = (controls) => Boolean((controls == null ? void 0 : controls.orientation.value) === OrientationType.Horizontal);\n  return [\n  [\n  {\n    name: 'x_axis_title',\n    config: {\n      type: 'TextControl',\n      label: t('Axis Title'),\n      renderTrigger: true,\n      default: '',\n      description: t('Changing this control takes effect instantly'),\n      visibility: ({ controls }) => isXAxis ? isVertical(controls) : isHorizontal(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'x_axis_title_margin',\n    config: {\n      type: 'SelectControl',\n      freeForm: true,\n      clearable: true,\n      label: t('AXIS TITLE MARGIN'),\n      renderTrigger: true,\n      default: sections.TITLE_MARGIN_OPTIONS[0],\n      choices: formatSelectOptions(sections.TITLE_MARGIN_OPTIONS),\n      description: t('Changing this control takes effect instantly'),\n      visibility: ({ controls }) => isXAxis ? isVertical(controls) : isHorizontal(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'y_axis_title',\n    config: {\n      type: 'TextControl',\n      label: t('Axis Title'),\n      renderTrigger: true,\n      default: '',\n      description: t('Changing this control takes effect instantly'),\n      visibility: ({ controls }) => isXAxis ? isHorizontal(controls) : isVertical(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'y_axis_title_margin',\n    config: {\n      type: 'SelectControl',\n      freeForm: true,\n      clearable: true,\n      label: t('AXIS TITLE MARGIN'),\n      renderTrigger: true,\n      default: sections.TITLE_MARGIN_OPTIONS[1],\n      choices: formatSelectOptions(sections.TITLE_MARGIN_OPTIONS),\n      description: t('Changing this control takes effect instantly'),\n      visibility: ({ controls }) => isXAxis ? isHorizontal(controls) : isVertical(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'y_axis_title_position',\n    config: {\n      type: 'SelectControl',\n      freeForm: true,\n      clearable: false,\n      label: t('AXIS TITLE POSITION'),\n      renderTrigger: true,\n      default: sections.TITLE_POSITION_OPTIONS[0][0],\n      choices: sections.TITLE_POSITION_OPTIONS,\n      description: t('Changing this control takes effect instantly'),\n      visibility: ({ controls }) => isXAxis ? isHorizontal(controls) : isVertical(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }]];\n\n\n}\nfunction createAxisControl(axis) {\n  const isXAxis = axis === 'x';\n  const isVertical = (controls) => Boolean((controls == null ? void 0 : controls.orientation.value) === OrientationType.Vertical);\n  const isHorizontal = (controls) => Boolean((controls == null ? void 0 : controls.orientation.value) === OrientationType.Horizontal);\n  return [\n  [\n  {\n    name: 'x_axis_time_format',\n    config: {\n      ...sharedControls.x_axis_time_format,\n      default: 'smart_date',\n      description: `${D3_TIME_FORMAT_DOCS}. ${TIME_SERIES_DESCRIPTION_TEXT}`,\n      visibility: ({ controls }) => isXAxis ? isVertical(controls) : isHorizontal(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: xAxisLabelRotation.name,\n    config: {\n      ...xAxisLabelRotation.config,\n      visibility: ({ controls }) => isXAxis ? isVertical(controls) : isHorizontal(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'y_axis_format',\n    config: {\n      ...sharedControls.y_axis_format,\n      label: t('Axis Format'),\n      visibility: ({ controls }) => isXAxis ? isHorizontal(controls) : isVertical(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  ['currency_format'],\n  [\n  {\n    name: 'logAxis',\n    config: {\n      type: 'CheckboxControl',\n      label: t('Logarithmic axis'),\n      renderTrigger: true,\n      default: logAxis,\n      description: t('Logarithmic axis'),\n      visibility: ({ controls }) => isXAxis ? isHorizontal(controls) : isVertical(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'minorSplitLine',\n    config: {\n      type: 'CheckboxControl',\n      label: t('Minor Split Line'),\n      renderTrigger: true,\n      default: minorSplitLine,\n      description: t('Draw split lines for minor axis ticks'),\n      visibility: ({ controls }) => isXAxis ? isHorizontal(controls) : isVertical(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'truncateYAxis',\n    config: {\n      type: 'CheckboxControl',\n      label: t('Truncate Axis'),\n      default: truncateYAxis,\n      renderTrigger: true,\n      description: t('Itâ€™s not recommended to truncate axis in Bar chart.'),\n      visibility: ({ controls }) => isXAxis ? isHorizontal(controls) : isVertical(controls),\n      disableStash: true,\n      resetOnHide: false\n    }\n  }],\n\n  [\n  {\n    name: 'y_axis_bounds',\n    config: {\n      type: 'BoundsControl',\n      label: t('Axis Bounds'),\n      renderTrigger: true,\n      default: yAxisBounds,\n      description: t('Bounds for the axis. When left empty, the bounds are ' +\n      'dynamically defined based on the min/max of the data. Note that ' +\n      \"this feature will only expand the axis range. It won't \" +\n      \"narrow the data's extent.\"),\n      visibility: ({ controls }) => {var _controls$truncateYAx;return Boolean(controls == null ? void 0 : (_controls$truncateYAx = controls.truncateYAxis) == null ? void 0 : _controls$truncateYAx.value) && (\n        isXAxis ? isHorizontal(controls) : isVertical(controls));},\n      disableStash: true,\n      resetOnHide: false\n    }\n  }]];\n\n\n}\nconst config = {\n  controlPanelSections: [\n  sections.echartsTimeSeriesQueryWithXAxisSort,\n  sections.advancedAnalyticsControls,\n  sections.annotationsAndLayersControls,\n  sections.forecastIntervalControls,\n  {\n    label: t('Chart Orientation'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'orientation',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Bar orientation'),\n        default: orientation,\n        options: [\n        [OrientationType.Vertical, t('Vertical')],\n        [OrientationType.Horizontal, t('Horizontal')]],\n\n        description: t('Orientation of bar chart')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Chart Title'),\n    tabOverride: 'customize',\n    expanded: true,\n    controlSetRows: [\n    [_jsx(ControlSubSectionHeader, { children: t('X Axis') })],\n    ...createAxisTitleControl('x'),\n    [_jsx(ControlSubSectionHeader, { children: t('Y Axis') })],\n    ...createAxisTitleControl('y')]\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ...seriesOrderSection,\n    ['color_scheme'],\n    ['time_shift_color'],\n    ...showValueSection,\n    [minorTicks],\n    [\n    {\n      name: 'zoomable',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Data Zoom'),\n        default: zoomable,\n        renderTrigger: true,\n        description: t('Enable data zooming controls')\n      }\n    }],\n\n    ...legendSection,\n    [_jsx(ControlSubSectionHeader, { children: t('X Axis') })],\n    ...createAxisControl('x'),\n    [truncateXAxis],\n    [xAxisBounds],\n    ...richTooltipSection,\n    [_jsx(ControlSubSectionHeader, { children: t('Y Axis') })],\n    ...createAxisControl('y')]\n\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}