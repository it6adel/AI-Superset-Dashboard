{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, useEffect } from 'react';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useTheme, css } from '@superset-ui/core';\nimport { Global } from '@emotion/react';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport { getTooltipHTML } from './Tooltip';\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze async imports statically.\n */\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools'),\n  'ext/searchbox': () => import('brace/ext/searchbox')\n};\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(aceModules, { defaultMode, defaultTheme, defaultTabSize = 2, fontFamily = 'Menlo, Consolas, Courier New, Ubuntu Mono, source-code-pro, Lucida Console, monospace', placeholder } = {}) {\n  return AsyncEsmComponent(async () => {var _aceModules$find, _aceModules$find2;\n    const reactAcePromise = import('react-ace');\n    const aceBuildsConfigPromise = import('ace-builds');\n    const cssWorkerUrlPromise = import('ace-builds/src-min-noconflict/worker-css');\n    const acequirePromise = import('ace-builds/src-min-noconflict/ace');\n    const [{ default: ReactAceEditor }, { config }, { default: cssWorkerUrl }, { require: acequire }] = await Promise.all([\n    reactAcePromise,\n    aceBuildsConfigPromise,\n    cssWorkerUrlPromise,\n    acequirePromise]\n    );\n    config.setModuleUrl('ace/mode/css_worker', cssWorkerUrl);\n    await Promise.all(aceModules.map((x) => aceModuleLoaders[x]()));\n    const inferredMode = defaultMode || ((_aceModules$find =\n    aceModules.find((x) => x.startsWith('mode/'))) == null ? void 0 : _aceModules$find.replace('mode/', ''));\n    const inferredTheme = defaultTheme || ((_aceModules$find2 =\n    aceModules.find((x) => x.startsWith('theme/'))) == null ? void 0 : _aceModules$find2.replace('theme/', ''));\n    return /*#__PURE__*/forwardRef(function ExtendedAceEditor({ keywords, mode = inferredMode, theme = inferredTheme, tabSize = defaultTabSize, defaultValue = '', ...props }, ref) {\n      const supersetTheme = useTheme();\n      const langTools = acequire('ace/ext/language_tools');\n      const setCompleters = useEffectEvent((keywords) => {\n        const completer = {\n          getCompletions: (editor, session, pos, prefix, callback) => {\n            // If the prefix starts with a number, don't try to autocomplete\n            if (!Number.isNaN(parseInt(prefix, 10))) {\n              return;\n            }\n            if (session.getMode().$id === `ace/mode/${mode}`) {\n              callback(null, keywords);\n            }\n          }\n        };\n        langTools.setCompleters([completer]);\n      });\n      useEffect(() => {\n        if (keywords) {\n          setCompleters(keywords);\n        }\n      }, [keywords, setCompleters]);\n      return _jsxs(_Fragment, { children: [\n        _jsx(Global, { styles: css`\n                .ace_tooltip {\n                  margin-left: ${supersetTheme.gridUnit * 2}px;\n                  padding: 0px;\n                  border: 1px solid ${supersetTheme.colors.grayscale.light1};\n                }\n\n                & .tooltip-detail {\n                  background-color: ${supersetTheme.colors.grayscale.light5};\n                  white-space: pre-wrap;\n                  word-break: break-all;\n                  min-width: ${supersetTheme.gridUnit * 50}px;\n                  max-width: ${supersetTheme.gridUnit * 100}px;\n                  & .tooltip-detail-head {\n                    background-color: ${supersetTheme.colors.grayscale.light4};\n                    color: ${supersetTheme.colors.grayscale.dark1};\n                    display: flex;\n                    column-gap: ${supersetTheme.gridUnit}px;\n                    align-items: baseline;\n                    justify-content: space-between;\n                  }\n                  & .tooltip-detail-title {\n                    display: flex;\n                    column-gap: ${supersetTheme.gridUnit}px;\n                  }\n                  & .tooltip-detail-body {\n                    word-break: break-word;\n                  }\n                  & .tooltip-detail-head,\n                  & .tooltip-detail-body {\n                    padding: ${supersetTheme.gridUnit}px\n                      ${supersetTheme.gridUnit * 2}px;\n                  }\n                  & .tooltip-detail-footer {\n                    border-top: 1px ${supersetTheme.colors.grayscale.light2}\n                      solid;\n                    padding: 0 ${supersetTheme.gridUnit * 2}px;\n                    color: ${supersetTheme.colors.grayscale.dark1};\n                    font-size: ${supersetTheme.typography.sizes.xs}px;\n                  }\n                  & .tooltip-detail-meta {\n                    & > .ant-tag {\n                      margin-right: 0px;\n                    }\n                  }\n                }\n              ` }),\n        _jsx(ReactAceEditor, { ref: ref, mode: mode, theme: theme, tabSize: tabSize, defaultValue: defaultValue, setOptions: { fontFamily }, ...props })] }\n      );\n    });\n  }, placeholder);\n}\nexport const SQLEditor = AsyncAceEditor([\n'mode/sql',\n'theme/github',\n'ext/language_tools',\n'ext/searchbox']\n);\nexport const FullSQLEditor = AsyncAceEditor(['mode/sql', 'theme/github', 'ext/language_tools', 'ext/searchbox'], {\n  // a custom placeholder in SQL lab for less jumpy re-renders\n  placeholder: () => {\n    const gutterBackground = '#e8e8e8'; // from ace-github theme\n    return _jsxs(\"div\", { style: {\n        height: '100%'\n      }, children: [\n      _jsx(\"div\", { style: { width: 41, height: '100%', background: gutterBackground } }),\n\n      _jsx(\"div\", { className: \"ace_content\" })] }\n    );\n  }\n});\nexport const MarkdownEditor = AsyncAceEditor([\n'mode/markdown',\n'theme/textmate']\n);\nexport const TextAreaEditor = AsyncAceEditor([\n'mode/markdown',\n'mode/sql',\n'mode/json',\n'mode/html',\n'mode/javascript',\n'theme/textmate']\n);\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n'mode/json',\n'mode/yaml',\n'theme/github']\n);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}