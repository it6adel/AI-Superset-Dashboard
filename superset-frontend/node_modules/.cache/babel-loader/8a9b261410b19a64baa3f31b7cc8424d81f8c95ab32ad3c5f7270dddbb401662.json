{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { MetadataType } from '.';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Header = styled.div`\n  font-weight: ${({ theme }) => theme.typography.weights.bold};\n`;\nconst Info = ({ text, header }) => {\n  const values = ensureIsArray(text);\n  return _jsxs(_Fragment, { children: [\n    header && _jsx(Header, { children: header }),\n    values.map((value) => _jsx(\"div\", { children: value }, value))] }\n  );\n};\nconst config = (contentType) => {\n  const { type } = contentType;\n  /**\n   * Tooltips are very similar. It's pretty much blocks\n   * of header/text pairs. That's why they are implemented here.\n   * If more complex tooltips emerge, then we should extract the different\n   * types of tooltips to their own components and reference them here.\n   */\n  switch (type) {\n    case MetadataType.Dashboards:\n      return {\n        icon: Icons.FundProjectionScreenOutlined,\n        title: contentType.title,\n        tooltip: contentType.description ? _jsx(\"div\", { children:\n          _jsx(Info, { header: contentType.title, text: contentType.description }) }\n        ) : undefined\n      };\n    case MetadataType.Description:\n      return {\n        icon: Icons.BookOutlined,\n        title: contentType.value\n      };\n    case MetadataType.LastModified:\n      return {\n        icon: Icons.EditOutlined,\n        title: contentType.value,\n        tooltip: _jsxs(\"div\", { children: [\n          _jsx(Info, { header: t('Last modified'), text: contentType.value }),\n          _jsx(Info, { header: t('Modified by'), text: contentType.modifiedBy })] }\n        )\n      };\n    case MetadataType.Owner:\n      return {\n        icon: Icons.UserOutlined,\n        title: contentType.createdBy,\n        tooltip: _jsxs(\"div\", { children: [\n          _jsx(Info, { header: t('Created by'), text: contentType.createdBy }),\n          !!contentType.owners && _jsx(Info, { header: t('Owners'), text: contentType.owners }),\n          _jsx(Info, { header: t('Created on'), text: contentType.createdOn })] }\n        )\n      };\n    case MetadataType.Rows:\n      return {\n        icon: Icons.InsertRowBelowOutlined,\n        title: contentType.title,\n        tooltip: contentType.title\n      };\n    case MetadataType.Sql:\n      return {\n        icon: Icons.ConsoleSqlOutlined,\n        title: contentType.title,\n        tooltip: contentType.title\n      };\n    case MetadataType.Table:\n      return {\n        icon: Icons.InsertRowAboveOutlined,\n        title: contentType.title,\n        tooltip: contentType.title\n      };\n    case MetadataType.Tags:\n      return {\n        icon: Icons.TagsOutlined,\n        title: contentType.values.join(', '),\n        tooltip: _jsx(\"div\", { children:\n          _jsx(Info, { header: t('Tags'), text: contentType.values }) }\n        )\n      };\n    default:\n      throw Error(`Invalid type provided: ${type}`);\n  }\n};\nexport { config };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}