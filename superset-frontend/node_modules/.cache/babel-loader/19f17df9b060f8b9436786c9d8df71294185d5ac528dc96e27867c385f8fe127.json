{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useState, useEffect, useCallback } from 'react';\nimport { useParams, Link, useHistory } from 'react-router-dom';\nimport { css, t, useTheme, styled, SupersetClient, getClientErrorObject } from '@superset-ui/core';\nimport dayjs from 'dayjs';\nimport rison from 'rison';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ListView from 'src/components/ListView';\nimport SubMenu from 'src/features/home/SubMenu';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler } from 'src/views/CRUD/utils';\nimport AnnotationModal from 'src/features/annotations/AnnotationModal';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nconst StyledHeader = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n\n    a,\n    Link {\n      margin-left: ${theme.gridUnit * 4}px;\n      font-size: ${theme.typography.sizes.s}px;\n      font-weight: ${theme.typography.weights.normal};\n      text-decoration: underline;\n    }\n  `}\n`;\nfunction AnnotationList({ addDangerToast, addSuccessToast }) {\n  const theme = useTheme();\n  const { annotationLayerId } = useParams();\n  const { state: { loading, resourceCount: annotationsCount, resourceCollection: annotations, bulkSelectEnabled }, fetchData, refreshData, toggleBulkSelect } = useListViewResource(`annotation_layer/${annotationLayerId}/annotation`, t('annotation'), addDangerToast, false);\n  const [annotationModalOpen, setAnnotationModalOpen] = useState(false);\n  const [annotationLayerName, setAnnotationLayerName] = useState('');\n  const [currentAnnotation, setCurrentAnnotation] = useState(null);\n  const [annotationCurrentlyDeleting, setAnnotationCurrentlyDeleting] = useState(null);\n  const handleAnnotationEdit = (annotation) => {\n    setCurrentAnnotation(annotation);\n    setAnnotationModalOpen(true);\n  };\n  const fetchAnnotationLayer = useCallback(async function fetchAnnotationLayer() {\n    try {\n      const response = await SupersetClient.get({\n        endpoint: `/api/v1/annotation_layer/${annotationLayerId}`\n      });\n      setAnnotationLayerName(response.json.result.name);\n    }\n    catch (response) {\n      await getClientErrorObject(response).then(({ error }) => {\n        addDangerToast(error.error || error.statusText || error);\n      });\n    }\n  }, [annotationLayerId]);\n  const handleAnnotationDelete = ({ id, short_descr }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/annotation_layer/${annotationLayerId}/annotation/${id}`\n    }).then(() => {\n      refreshData();\n      setAnnotationCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', short_descr));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', short_descr, errMsg))));\n  };\n  const handleBulkAnnotationsDelete = (annotationsToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/annotation_layer/${annotationLayerId}/annotation/?q=${rison.encode(annotationsToDelete.map(({ id }) => id))}`\n    }).then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected annotations: %s', errMsg))));\n  };\n  // get the Annotation Layer\n  useEffect(() => {\n    fetchAnnotationLayer();\n  }, [fetchAnnotationLayer]);\n  const initialSort = [{ id: 'short_descr', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'short_descr',\n    Header: t('Name')\n  },\n  {\n    accessor: 'long_descr',\n    Header: t('Description')\n  },\n  {\n    Cell: ({ row: { original: { start_dttm: startDttm } } }) => dayjs(new Date(startDttm)).format('ll'),\n    Header: t('Start'),\n    accessor: 'start_dttm'\n  },\n  {\n    Cell: ({ row: { original: { end_dttm: endDttm } } }) => dayjs(new Date(endDttm)).format('ll'),\n    Header: t('End'),\n    accessor: 'end_dttm'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleAnnotationEdit(original);\n      const handleDelete = () => setAnnotationCurrentlyDeleting(original);\n      const actions = [\n      {\n        label: 'edit-action',\n        tooltip: t('Edit annotation'),\n        placement: 'bottom',\n        icon: 'EditOutlined',\n        onClick: handleEdit\n      },\n      {\n        label: 'delete-action',\n        tooltip: t('Delete annotation'),\n        placement: 'bottom',\n        icon: 'DeleteOutlined',\n        onClick: handleDelete\n      }];\n\n      return _jsx(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true\n  }],\n  [true, true]);\n  const subMenuButtons = [];\n  subMenuButtons.push({\n    name: _jsxs(_Fragment, { children: [\n      _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n            margin: auto ${theme.gridUnit * 2}px auto 0;\n            vertical-align: text-top;\n          ` }),\n      t('Annotation')] }\n    ),\n    buttonStyle: 'primary',\n    onClick: () => {\n      handleAnnotationEdit(null);\n    }\n  });\n  subMenuButtons.push({\n    name: t('Bulk select'),\n    onClick: toggleBulkSelect,\n    buttonStyle: 'secondary'\n\n  });\n  let hasHistory = true;\n  try {\n    useHistory();\n  }\n  catch (err) {\n    // If error is thrown, we know not to use <Link> in render\n    hasHistory = false;\n  }\n  const emptyState = {\n    title: t('No annotation yet'),\n    image: 'filter-results.svg',\n    buttonAction: () => {\n      handleAnnotationEdit(null);\n    },\n    buttonText: _jsxs(_Fragment, { children: [\n      _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n            margin: auto ${theme.gridUnit * 2}px auto 0;\n            vertical-align: text-top;\n          ` }),\n      t('Annotation')] }\n    )\n  };\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { name: _jsxs(StyledHeader, { children: [\n        _jsx(\"span\", { children: t('Annotation Layer %s', annotationLayerName) }),\n        _jsx(\"span\", { children:\n          hasHistory ? _jsx(Link, { to: \"/annotationlayer/list/\", children: t('Back to all') }) : _jsx(\"a\", { href: \"/annotationlayer/list/\", children: t('Back to all') }) }\n        )] }\n      ), buttons: subMenuButtons }),\n    _jsx(AnnotationModal, { addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, annotation: currentAnnotation, show: annotationModalOpen, onAnnotationAdd: () => refreshData(), annotationLayerId: annotationLayerId, onHide: () => setAnnotationModalOpen(false) }),\n    annotationCurrentlyDeleting && _jsx(DeleteModal, { description: t('Are you sure you want to delete %s?', annotationCurrentlyDeleting == null ? void 0 : annotationCurrentlyDeleting.short_descr), onConfirm: () => {\n        if (annotationCurrentlyDeleting) {\n          handleAnnotationDelete(annotationCurrentlyDeleting);\n        }\n      }, onHide: () => setAnnotationCurrentlyDeleting(null), open: true, title: t('Delete Annotation?') }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected annotations?'), onConfirm: handleBulkAnnotationsDelete, children:\n      (confirmDelete) => {\n        const bulkActions = [\n        {\n          key: 'delete',\n          name: t('Delete'),\n          onSelect: confirmDelete,\n          type: 'danger'\n        }];\n\n        return _jsx(ListView, { className: \"annotations-list-view\", bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, columns: columns, count: annotationsCount, data: annotations, disableBulkSelect: toggleBulkSelect, emptyState: emptyState, fetchData: fetchData, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: refreshData, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE });\n      } }\n    )] }\n  );\n}\nexport default withToasts(AnnotationList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}