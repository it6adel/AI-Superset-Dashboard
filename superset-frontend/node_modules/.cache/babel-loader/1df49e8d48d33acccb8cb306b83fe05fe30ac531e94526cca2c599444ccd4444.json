{"ast":null,"code":"import _uniqWith from \"lodash/uniqWith\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\n\nimport { styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { config } from './ContentConfig';\nimport { HORIZONTAL_PADDING, ICON_PADDING, ICON_WIDTH, VERTICAL_PADDING, TEXT_MIN_WIDTH, TEXT_MAX_WIDTH, SPACE_BETWEEN_ITEMS, ORDER, MIN_NUMBER_ITEMS, MAX_NUMBER_ITEMS } from './constants';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Bar = styled.div`\n  ${({ theme, count }) => `\n    display: flex;\n    align-items: center;\n    padding: ${VERTICAL_PADDING}px ${HORIZONTAL_PADDING}px;\n    background-color: ${theme.colors.grayscale.light4};\n    color: ${theme.colors.grayscale.base};\n    font-size: ${theme.typography.sizes.s}px;\n    min-width: ${HORIZONTAL_PADDING * 2 +\n(ICON_WIDTH + SPACE_BETWEEN_ITEMS) * count -\nSPACE_BETWEEN_ITEMS}px;\n    border-radius: ${theme.borderRadius}px;\n    line-height: 1;\n  `}\n`;\nconst StyledItem = styled.div`\n  ${({ theme, collapsed, last, onClick }) => `\n    display: flex;\n    align-items: center;\n    max-width: ${ICON_WIDTH +\nICON_PADDING +\nTEXT_MAX_WIDTH + (\nlast ? 0 : SPACE_BETWEEN_ITEMS)}px;\n    min-width: ${collapsed ?\nICON_WIDTH + (last ? 0 : SPACE_BETWEEN_ITEMS) :\nICON_WIDTH +\nICON_PADDING +\nTEXT_MIN_WIDTH + (\nlast ? 0 : SPACE_BETWEEN_ITEMS)}px;\n    padding-right: ${last ? 0 : SPACE_BETWEEN_ITEMS}px;\n    cursor: ${onClick ? 'pointer' : 'default'};\n    & .metadata-icon {\n      color: ${onClick && collapsed ?\ntheme.colors.primary.base :\ntheme.colors.grayscale.base};\n      padding-right: ${collapsed ? 0 : ICON_PADDING}px;\n      & .anticon {\n        line-height: 0;\n      }\n    }\n    & .metadata-text {\n      min-width: ${TEXT_MIN_WIDTH}px;\n      overflow: hidden;\n      text-overflow: ${collapsed ? 'unset' : 'ellipsis'};\n      white-space: nowrap;\n      text-decoration: ${onClick ? 'underline' : 'none'};\n      line-height: 1.4;\n    }\n  `}\n`;\n// Make sure big tooltips are truncated\nconst TooltipContent = styled.div`\n  display: -webkit-box;\n  -webkit-line-clamp: 20;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\nconst Item = ({ barWidth, contentType, collapsed, last = false, tooltipPlacement }) => {\n  const { icon, title, tooltip = title } = config(contentType);\n  const [isTruncated, setIsTruncated] = useState(false);\n  const ref = useRef(null);\n  const Icon = icon;\n  const { type, onClick } = contentType;\n  useEffect(() => {\n    setIsTruncated(ref.current ? ref.current.scrollWidth > ref.current.clientWidth : false);\n  }, [barWidth, setIsTruncated, contentType]);\n  const content = _jsxs(StyledItem, { collapsed: collapsed, last: last, onClick: onClick ? () => onClick(type) : undefined, role: onClick ? 'button' : undefined, children: [\n    _jsx(Icon, { iconSize: \"l\", className: \"metadata-icon\" }),\n    !collapsed && _jsx(\"span\", { ref: ref, className: \"metadata-text\", children:\n      title }\n    )] }\n  );\n  return isTruncated || collapsed || tooltip && tooltip !== title ? _jsx(Tooltip, { placement: tooltipPlacement, title: _jsx(TooltipContent, { children: tooltip }), children:\n    content }\n  ) : content;\n};\n/**\n * The metadata bar component is used to display additional information about an entity.\n * Content types are predefined and consistent across the whole app. This means that\n * they will be displayed and behave in a consistent manner, keeping the same ordering,\n * information formatting, and interactions.\n * To extend the list of content types, a developer needs to request the inclusion of the new type in the design system.\n * This process is important to make sure the new type is reviewed by the design team, improving Superset consistency.\n */\nconst MetadataBar = ({ items, tooltipPlacement = 'top' }) => {\n  const [width, setWidth] = useState();\n  const [collapsed, setCollapsed] = useState(false);\n  const uniqueItems = _uniqWith(items, (a, b) => a.type === b.type);\n  const sortedItems = uniqueItems.sort((a, b) => ORDER[a.type] - ORDER[b.type]);\n  const count = sortedItems.length;\n  if (count < MIN_NUMBER_ITEMS) {\n    throw Error('The minimum number of items for the metadata bar is 2.');\n  }\n  if (count > MAX_NUMBER_ITEMS) {\n    throw Error('The maximum number of items for the metadata bar is 6.');\n  }\n  const onResize = useCallback((width) => {\n    // Calculates the breakpoint width to collapse the bar.\n    // The last item does not have a space, so we subtract SPACE_BETWEEN_ITEMS from the total.\n    const breakpoint = (ICON_WIDTH + ICON_PADDING + TEXT_MIN_WIDTH + SPACE_BETWEEN_ITEMS) *\n    count -\n    SPACE_BETWEEN_ITEMS;\n    setWidth(width);\n    setCollapsed(Boolean(width && width < breakpoint));\n  }, [count]);\n  const { ref } = useResizeDetector({ onResize });\n  return _jsx(Bar, { ref: ref, count: count, children:\n    sortedItems.map((item, index) => _jsx(Item, { barWidth: width, contentType: item, collapsed: collapsed, last: index === count - 1, tooltipPlacement: tooltipPlacement }, index)) }\n  );\n};\nexport default MetadataBar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}