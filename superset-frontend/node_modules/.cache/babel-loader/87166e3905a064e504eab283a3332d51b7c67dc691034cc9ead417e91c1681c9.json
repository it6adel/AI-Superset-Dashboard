{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport { Dropdown } from 'src/components/Dropdown';\nimport rison from 'rison';\nimport { Menu } from 'src/components/Menu';\nimport Button from 'src/components/Button';\nimport { t, styled, SupersetClient } from '@superset-ui/core';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { CssEditor as AceCssEditor } from 'src/components/AsyncAceEditor';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledWrapper = styled.div`\n  ${({ theme }) => `\n    .css-editor-header {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      margin-bottom: ${theme.gridUnit * 2}px;\n\n      h5 {\n        margin-top: ${theme.gridUnit}px;\n      }\n    }\n    .css-editor {\n      border: 1px solid ${theme.colors.grayscale.light1};\n    }\n  `}\n`;\nclass CssEditor extends PureComponent {\n\n\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.initialCss\n    };\n    this.changeCss = this.changeCss.bind(this);\n    this.changeCssTemplate = this.changeCssTemplate.bind(this);\n  }\n  componentDidMount() {\n    AceCssEditor.preload();\n    const query = rison.encode({ columns: ['template_name', 'css'] });\n    SupersetClient.get({ endpoint: `/api/v1/css_template/?q=${query}` }).\n    then(({ json }) => {\n      const templates = json.result.map((row) => ({\n        value: row.template_name,\n        css: row.css,\n        label: row.template_name\n      }));\n      this.setState({ templates });\n    }).\n    catch(() => {\n      this.props.addDangerToast(t('An error occurred while fetching available CSS templates'));\n    });\n  }\n  changeCss(css) {\n    this.setState({ css }, () => {\n      this.props.onChange(css);\n    });\n  }\n  changeCssTemplate(info) {\n    const keyAsString = String(info.key);\n    this.changeCss(keyAsString);\n  }\n  renderTemplateSelector() {\n    if (this.state.templates) {\n      const menu = _jsx(Menu, { onClick: this.changeCssTemplate, children:\n        this.state.templates.map((template) => _jsx(Menu.Item, { children: template.label }, template.css)) }\n      );\n      return _jsx(Dropdown, { dropdownRender: () => menu, placement: \"bottomRight\", children:\n        _jsx(Button, { children: t('Load a CSS template') }) }\n      );\n    }\n    return null;\n  }\n  render() {\n    return _jsx(ModalTrigger, { triggerNode: this.props.triggerNode, modalTitle: t('CSS'), modalBody: _jsxs(StyledWrapper, { children: [\n        _jsxs(\"div\", { className: \"css-editor-header\", children: [\n          _jsx(\"h5\", { children: t('Live CSS editor') }),\n          this.renderTemplateSelector()] }\n        ),\n        _jsx(AceCssEditor, { className: \"css-editor\", minLines: 12, maxLines: 30, onChange: this.changeCss, height: \"200px\", width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, value: this.state.css || '' })] }\n      ) });\n  }\n}CssEditor.defaultProps = { initialCss: '', onChange: () => {} };\nexport default CssEditor;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}