{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { t, isFeatureEnabled, FeatureFlag } from '@superset-ui/core';\nimport { Switch } from 'src/components/Switch';\nimport InfoTooltip from 'src/components/InfoTooltip';\n\nimport { infoTooltip, toggleStyle } from './styles';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst SSHTunnelSwitch = ({ clearValidationErrors, changeMethods, db, dbModel }) => {var _dbModel$engine_infor, _db$parameters2, _db$parameters4;\n  const [isChecked, setChecked] = useState(false);\n  const sshTunnelEnabled = isFeatureEnabled(FeatureFlag.SshTunneling);\n  const disableSSHTunnelingForEngine = (dbModel == null ? void 0 : (_dbModel$engine_infor = dbModel.engine_information) == null ? void 0 : _dbModel$engine_infor.disable_ssh_tunneling) || false;\n  const isSSHTunnelEnabled = sshTunnelEnabled && !disableSSHTunnelingForEngine;\n  const handleOnChange = (changed) => {\n    setChecked(changed);\n    changeMethods.onParametersChange({\n      target: {\n        type: 'toggle',\n        name: 'ssh',\n        checked: true,\n        value: changed\n      }\n    });\n    clearValidationErrors();\n  };\n  useEffect(() => {var _db$parameters;\n    if (isSSHTunnelEnabled && (db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters.ssh) !== undefined) {\n      setChecked(db.parameters.ssh);\n    }\n  }, [db == null ? void 0 : (_db$parameters2 = db.parameters) == null ? void 0 : _db$parameters2.ssh, isSSHTunnelEnabled]);\n  useEffect(() => {var _db$parameters3;\n    if (isSSHTunnelEnabled &&\n    (db == null ? void 0 : (_db$parameters3 = db.parameters) == null ? void 0 : _db$parameters3.ssh) === undefined &&\n    !_isEmpty(db == null ? void 0 : db.ssh_tunnel)) {\n      // reflecting the state of the ssh tunnel on first load\n      changeMethods.onParametersChange({\n        target: {\n          type: 'toggle',\n          name: 'ssh',\n          checked: true,\n          value: true\n        }\n      });\n    }\n  }, [changeMethods, db == null ? void 0 : (_db$parameters4 = db.parameters) == null ? void 0 : _db$parameters4.ssh, db == null ? void 0 : db.ssh_tunnel, isSSHTunnelEnabled]);\n  return isSSHTunnelEnabled ? _jsxs(\"div\", { css: (theme) => infoTooltip(theme), children: [\n    _jsx(Switch, { checked: isChecked, onChange: handleOnChange }),\n    _jsx(\"span\", { css: toggleStyle, children: t('SSH Tunnel') }),\n    _jsx(InfoTooltip, { tooltip: t('SSH Tunnel configuration parameters'), placement: \"right\", viewBox: \"0 -5 24 24\" })] }\n  ) : null;\n};\nexport default SSHTunnelSwitch;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}