{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t, useTheme } from '@superset-ui/core';\nimport Popover from 'src/components/Popover';\nimport { FiltersContainer, FiltersDetailsContainer, Separator, SectionName } from 'src/dashboard/components/FiltersBadge/Styles';\nimport FilterIndicator from 'src/dashboard/components/FiltersBadge/FilterIndicator';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DetailsPanelPopover = ({ appliedCrossFilterIndicators = [], appliedIndicators = [], onHighlightFilterSource, children, popoverVisible, popoverContentRef, popoverTriggerRef, setPopoverVisible }) => {\n  const activeTabs = useSelector((state) => {var _state$dashboardState;return (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.activeTabs;});\n  // Combined ref array for all filter indicator elements\n  const indicatorRefs = useRef([]);\n  const handleKeyDown = (event) => {\n    switch (event.key) {\n      case 'Escape':\n      case 'Enter':\n        // timing out to allow for filter selection to happen first\n        setTimeout(() => {var _popoverTriggerRef$cu;\n          // move back to the popover trigger element\n          popoverTriggerRef == null ? void 0 : (_popoverTriggerRef$cu = popoverTriggerRef.current) == null ? void 0 : _popoverTriggerRef$cu.focus();\n          // Close popover on ESC or ENTER\n          setPopoverVisible(false);\n        });\n        break;\n      case 'ArrowDown':\n      case 'ArrowUp':{var _indicatorRefs$curren;\n          event.preventDefault(); // Prevent scrolling\n          // Navigate through filters with arrows up/down\n          const currentFocusIndex = indicatorRefs.current.findIndex((ref) => ref === document.activeElement);\n          const maxIndex = indicatorRefs.current.length - 1;\n          let nextFocusIndex = 0;\n          if (event.key === 'ArrowDown') {\n            nextFocusIndex =\n            currentFocusIndex >= maxIndex ? 0 : currentFocusIndex + 1;\n          } else\n          if (event.key === 'ArrowUp') {\n            nextFocusIndex =\n            currentFocusIndex <= 0 ? maxIndex : currentFocusIndex - 1;\n          }\n          (_indicatorRefs$curren = indicatorRefs.current[nextFocusIndex]) == null ? void 0 : _indicatorRefs$curren.focus();\n          break;\n        }\n      case 'Tab':\n        // forcing popover context until ESC or ENTER are pressed\n        event.preventDefault();\n        break;\n      default:\n        break;\n    }\n  };\n  const handleVisibility = (isOpen) => {\n    setPopoverVisible(isOpen);\n  };\n  // we don't need to clean up useEffect, setting { once: true } removes the event listener after handle function is called\n  useEffect(() => {\n    if (popoverVisible) {\n      window.addEventListener('resize', () => setPopoverVisible(false), {\n        once: true\n      });\n    }\n  }, [popoverVisible]);\n  // if tabs change, popover doesn't close automatically\n  useEffect(() => {\n    setPopoverVisible(false);\n  }, [activeTabs]);\n  const indicatorKey = (indicator) => `${indicator.column} - ${indicator.name}`;\n  const theme = useTheme();\n  const content = _jsx(FiltersDetailsContainer, { ref: popoverContentRef, tabIndex: -1, onMouseLeave: () => setPopoverVisible(false), onKeyDown: handleKeyDown, role: \"menu\", children:\n    _jsxs(\"div\", { children: [\n      appliedCrossFilterIndicators.length ? _jsxs(\"div\", { children: [\n        _jsx(SectionName, { children:\n          t('Applied cross-filters (%d)', appliedCrossFilterIndicators.length) }\n        ),\n        _jsx(FiltersContainer, { children:\n          appliedCrossFilterIndicators.map((indicator) => _jsx(FilterIndicator, { ref: (el) => indicatorRefs.current.push(el), indicator: indicator, onClick: onHighlightFilterSource }, indicatorKey(indicator))) }\n        )] }\n      ) : null,\n      appliedCrossFilterIndicators.length && appliedIndicators.length ? _jsx(Separator, {}) : null,\n      appliedIndicators.length ? _jsxs(\"div\", { children: [\n        _jsx(SectionName, { children:\n          t('Applied filters (%d)', appliedIndicators.length) }\n        ),\n        _jsx(FiltersContainer, { children:\n          appliedIndicators.map((indicator) => _jsx(FilterIndicator, { ref: (el) => indicatorRefs.current.push(el), indicator: indicator, onClick: onHighlightFilterSource }, indicatorKey(indicator))) }\n        )] }\n      ) : null] }\n    ) }\n  );\n  return _jsx(Popover, { color: `${theme.colors.grayscale.dark2}cc`, content: content, open: popoverVisible, onOpenChange: handleVisibility, placement: \"bottomRight\", trigger: ['hover'], children:\n    children }\n  );\n};\nexport default DetailsPanelPopover;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}