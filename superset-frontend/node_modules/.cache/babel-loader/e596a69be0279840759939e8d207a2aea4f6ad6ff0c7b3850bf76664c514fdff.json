{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isFeatureEnabled, FeatureFlag } from '@superset-ui/core';\nimport { isUserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { findPermission } from 'src/utils/findPermission';\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\nexport const isUserAdmin = (user) => isUserWithPermissionsAndRoles(user) &&\nObject.keys(user.roles || {}).some((role) => role.toLowerCase() === ADMIN_ROLE_NAME);\nconst isUserDashboardOwner = (dashboard, user) => isUserWithPermissionsAndRoles(user) &&\ndashboard.owners.some((owner) => owner.id === user.userId);\nexport const canUserEditDashboard = (dashboard, user) => isUserWithPermissionsAndRoles(user) && (\nisUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\nfindPermission('can_write', 'Dashboard', user == null ? void 0 : user.roles);\nexport function userHasPermission(user, viewName, permissionName) {\n  return isUserAdmin(user) ||\n  isUserWithPermissionsAndRoles(user) &&\n  Object.values(user.roles || {}).\n  flat().\n  some((permissionView) => permissionView[0] === permissionName &&\n  permissionView[1] === viewName);\n}\nexport const canUserSaveAsDashboard = (dashboard, user) => isUserWithPermissionsAndRoles(user) &&\nfindPermission('can_write', 'Dashboard', user == null ? void 0 : user.roles) && (\n!isFeatureEnabled(FeatureFlag.DashboardRbac) ||\nisUserAdmin(user) ||\nisUserDashboardOwner(dashboard, user));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}