{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nclass DebouncedMessageQueue {\n  constructor({\n    callback = () => {},\n    sizeThreshold = 1000,\n    delayThreshold = 1000\n  }) {\n    this.queue = [];\n    this.sizeThreshold = sizeThreshold;\n    this.delayThreshold = delayThreshold;\n\n    this.trigger = _debounce(this.trigger.bind(this), this.delayThreshold);\n    this.callback = callback;\n  }\n\n  append(eventData) {\n    this.queue.push(eventData);\n    this.trigger();\n  }\n\n  trigger() {\n    if (this.queue.length > 0) {\n      const events = this.queue.splice(0, this.sizeThreshold);\n      this.callback.call(null, events);\n\n      // If there are remaining items, call it again.\n      if (this.queue.length > 0) {\n        this.trigger();\n      }\n    }\n  }\n}\n\nexport default DebouncedMessageQueue;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}