{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Behavior, getChartMetadataRegistry, isDefined } from '@superset-ui/core';\nimport { getChartIdsInFilterScope } from './getChartIdsInFilterScope';\nimport { GLOBAL_SCOPE_POINTER, isCrossFilterScopeGlobal } from '../types';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from '../constants';\nimport { CHART_TYPE } from './componentTypes';\nexport const isCrossFiltersEnabled = (metadataCrossFiltersEnabled) => metadataCrossFiltersEnabled === undefined || metadataCrossFiltersEnabled;\nexport const getCrossFiltersConfiguration = (dashboardLayout, metadata, charts) => {var _metadata$global_char;\n  const chartLayoutItems = Object.values(dashboardLayout).filter((item) => (item == null ? void 0 : item.type) === CHART_TYPE);\n  const globalChartConfiguration = (_metadata$global_char = metadata.global_chart_configuration) != null && _metadata$global_char.scope ?\n  {\n    scope: metadata.global_chart_configuration.scope,\n    chartsInScope: getChartIdsInFilterScope(metadata.global_chart_configuration.scope, Object.values(charts).map((chart) => chart.id), chartLayoutItems)\n  } :\n  {\n    scope: DEFAULT_CROSS_FILTER_SCOPING,\n    chartsInScope: Object.values(charts).map((chart) => chart.id)\n  };\n  // If user just added cross filter to dashboard it's not saving its scope on server,\n  // so we tweak it until user will update scope and will save it in server\n  const chartConfiguration = {};\n  chartLayoutItems.forEach((layoutItem) => {var _layoutItem$meta, _behaviors, _ref, _getChartMetadataRegi, _charts$chartId, _charts$chartId$form_;\n    const chartId = (_layoutItem$meta = layoutItem.meta) == null ? void 0 : _layoutItem$meta.chartId;\n    if (!isDefined(chartId)) {\n      return;\n    }\n    const behaviors = (_behaviors = (_ref = (_getChartMetadataRegi = getChartMetadataRegistry().get((_charts$chartId = charts[chartId]) == null ? void 0 : (_charts$chartId$form_ = _charts$chartId.form_data) == null ? void 0 : _charts$chartId$form_.viz_type)) != null ? _getChartMetadataRegi :\n    {}) == null ? void 0 : _ref.behaviors) != null ? _behaviors : [];\n    if (behaviors.includes(Behavior.InteractiveChart)) {var _metadata$chart_confi;\n      if ((_metadata$chart_confi = metadata.chart_configuration) != null && _metadata$chart_confi[chartId]) {\n        // We need to clone to avoid mutating Redux state\n        chartConfiguration[chartId] = _cloneDeep(metadata.chart_configuration[chartId]);\n      }\n      if (!chartConfiguration[chartId]) {\n        chartConfiguration[chartId] = {\n          id: chartId,\n          crossFilters: {\n            scope: GLOBAL_SCOPE_POINTER,\n            chartsInScope: []\n          }\n        };\n      }\n      chartConfiguration[chartId].crossFilters.chartsInScope =\n      isCrossFilterScopeGlobal(chartConfiguration[chartId].crossFilters.scope) ?\n      globalChartConfiguration.chartsInScope.filter((id) => id !== Number(chartId)) :\n      getChartIdsInFilterScope(chartConfiguration[chartId].crossFilters.\n      scope, Object.values(charts).map((chart) => chart.id), chartLayoutItems);\n    }\n  });\n  return { chartConfiguration, globalChartConfiguration };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}