{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport { useCallback, useMemo } from 'react';\nimport { isFilterDivider } from '@superset-ui/core';\nimport { CHART_TYPE, TAB_TYPE } from '../../util/componentTypes';\nconst defaultFilterConfiguration = [];\nexport function useFilterConfiguration() {\n  return useSelector((state) => {var _state$dashboardInfo, _state$dashboardInfo$;return ((_state$dashboardInfo = state.dashboardInfo) == null ? void 0 : (_state$dashboardInfo$ = _state$dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.native_filter_configuration) ||\n    defaultFilterConfiguration;});\n}\n/**\n * returns the dashboard's filter configuration,\n * converted into a map of id -> filter\n */\nexport function useFilterConfigMap() {\n  const filterConfig = useFilterConfiguration();\n  return useMemo(() => filterConfig.reduce((acc, filter) => {\n    acc[filter.id] = filter;\n    return acc;\n  }, {}), [filterConfig]);\n}\nexport function useDashboardLayout() {\n  return useSelector((state) => {var _state$dashboardLayou;return (_state$dashboardLayou = state.dashboardLayout) == null ? void 0 : _state$dashboardLayou.present;});\n}\nexport function useDashboardHasTabs() {\n  const dashboardLayout = useDashboardLayout();\n  return useMemo(() => Object.values(dashboardLayout).some((element) => element.type === TAB_TYPE), [dashboardLayout]);\n}\nfunction useActiveDashboardTabs() {\n  return useSelector((state) => {var _state$dashboardState;return (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.activeTabs;});\n}\nfunction useSelectChartTabParents() {\n  const dashboardLayout = useDashboardLayout();\n  const layoutChartItems = useMemo(() => Object.values(dashboardLayout).filter((item) => item.type === CHART_TYPE), [dashboardLayout]);\n  return useCallback((chartId) => {var _chartLayoutItem$pare;\n    const chartLayoutItem = layoutChartItems.find((layoutItem) => {var _layoutItem$meta;return ((_layoutItem$meta = layoutItem.meta) == null ? void 0 : _layoutItem$meta.chartId) === chartId;});\n    return chartLayoutItem == null ? void 0 : (_chartLayoutItem$pare = chartLayoutItem.parents) == null ? void 0 : _chartLayoutItem$pare.filter((parent) => {var _dashboardLayout$pare;return ((_dashboardLayout$pare = dashboardLayout[parent]) == null ? void 0 : _dashboardLayout$pare.type) === TAB_TYPE;});\n  }, [dashboardLayout, layoutChartItems]);\n}\nexport function useIsFilterInScope() {\n  const activeTabs = useActiveDashboardTabs();\n  const selectChartTabParents = useSelectChartTabParents();\n  // Filter is in scope if any of its charts is visible.\n  // Chart is visible if it's placed in an active tab tree or if it's not attached to any tab.\n  // Chart is in an active tab tree if all of its ancestors of type TAB are active\n  // Dividers are always in scope\n  return useCallback((filter) => {var _filter$scope;\n    if (isFilterDivider(filter))\n    return true;\n    const isChartInScope = Array.isArray(filter.chartsInScope) &&\n    filter.chartsInScope.length > 0 &&\n    filter.chartsInScope.some((chartId) => {\n      const tabParents = selectChartTabParents(chartId);\n      return !tabParents ||\n      tabParents.length === 0 ||\n      tabParents.every((tab) => activeTabs.includes(tab));\n    });\n    const isFilterInActiveTab = ((_filter$scope = filter.scope) == null ? void 0 : _filter$scope.rootPath) &&\n    filter.scope.rootPath.some((tab) => activeTabs.includes(tab));\n    return isChartInScope || isFilterInActiveTab;\n  }, [selectChartTabParents, activeTabs]);\n}\nexport function useSelectFiltersInScope(filters) {\n  const dashboardHasTabs = useDashboardHasTabs();\n  const isFilterInScope = useIsFilterInScope();\n  return useMemo(() => {\n    let filtersInScope = [];\n    const filtersOutOfScope = [];\n    // we check native filters scopes only on dashboards with tabs\n    if (!dashboardHasTabs) {\n      filtersInScope = filters;\n    } else\n    {\n      filters.forEach((filter) => {\n        const filterInScope = isFilterInScope(filter);\n        if (filterInScope) {\n          filtersInScope.push(filter);\n        } else\n        {\n          filtersOutOfScope.push(filter);\n        }\n      });\n    }\n    return [filtersInScope, filtersOutOfScope];\n  }, [filters, dashboardHasTabs, isFilterInScope]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}