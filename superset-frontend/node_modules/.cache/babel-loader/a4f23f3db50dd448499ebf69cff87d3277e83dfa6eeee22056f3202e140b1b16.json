{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\n\nimport { setDataMaskForFilterChangesComplete } from 'src/dataMask/actions';\nimport { dashboardInfoChanged, nativeFiltersConfigChanged } from './dashboardInfo';\nexport const SET_NATIVE_FILTERS_CONFIG_BEGIN = 'SET_NATIVE_FILTERS_CONFIG_BEGIN';\nexport const SET_NATIVE_FILTERS_CONFIG_COMPLETE = 'SET_NATIVE_FILTERS_CONFIG_COMPLETE';\nexport const SET_NATIVE_FILTERS_CONFIG_FAIL = 'SET_NATIVE_FILTERS_CONFIG_FAIL';\nexport const SET_IN_SCOPE_STATUS_OF_FILTERS = 'SET_IN_SCOPE_STATUS_OF_FILTERS';\nconst isFilterChangesEmpty = (filterChanges) => Object.values(filterChanges).every((array) => Array.isArray(array) && !array.length);\nexport const setFilterConfiguration = (filterChanges) => async (dispatch, getState) => {var _getState$nativeFilte;\n  if (isFilterChangesEmpty(filterChanges)) {\n    return;\n  }\n  const { id } = getState().dashboardInfo;\n  const oldFilters = (_getState$nativeFilte = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte.filters;\n  dispatch({\n    type: SET_NATIVE_FILTERS_CONFIG_BEGIN,\n    filterChanges\n  });\n  const updateFilters = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}/filters`\n  });\n  try {\n    const response = await updateFilters(filterChanges);\n    dispatch(nativeFiltersConfigChanged(response.result));\n    dispatch({\n      type: SET_NATIVE_FILTERS_CONFIG_COMPLETE,\n      filterChanges: response.result\n    });\n    dispatch(setDataMaskForFilterChangesComplete(filterChanges, oldFilters));\n  }\n  catch (err) {\n    dispatch({\n      type: SET_NATIVE_FILTERS_CONFIG_FAIL,\n      filterConfig: filterChanges\n    });\n  }\n};\nexport const setInScopeStatusOfFilters = (filterScopes) => async (dispatch, getState) => {var _getState$nativeFilte2;\n  const filters = (_getState$nativeFilte2 = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte2.filters;\n  const filtersWithScopes = filterScopes.map((scope) => ({\n    ...filters[scope.filterId],\n    chartsInScope: scope.chartsInScope,\n    tabsInScope: scope.tabsInScope\n  }));\n  dispatch({\n    type: SET_IN_SCOPE_STATUS_OF_FILTERS,\n    filterConfig: filtersWithScopes\n  });\n  // need to update native_filter_configuration in the dashboard metadata\n  const metadata = _cloneDeep(getState().dashboardInfo.metadata);\n  const filterConfig = metadata.native_filter_configuration;\n  const mergedFilterConfig = filterConfig.map((filter) => {\n    const filterWithScope = filtersWithScopes.find((scope) => scope.id === filter.id);\n    if (!filterWithScope) {\n      return filter;\n    }\n    return { ...filterWithScope, ...filter };\n  });\n  metadata.native_filter_configuration = mergedFilterConfig;\n  dispatch(dashboardInfoChanged({\n    metadata\n  }));\n};\nexport const SET_FOCUSED_NATIVE_FILTER = 'SET_FOCUSED_NATIVE_FILTER';\nexport const UNSET_FOCUSED_NATIVE_FILTER = 'UNSET_FOCUSED_NATIVE_FILTER';\nexport function setFocusedNativeFilter(id) {\n  return {\n    type: SET_FOCUSED_NATIVE_FILTER,\n    id\n  };\n}\nexport function unsetFocusedNativeFilter() {\n  return {\n    type: UNSET_FOCUSED_NATIVE_FILTER\n  };\n}\nexport const SET_HOVERED_NATIVE_FILTER = 'SET_HOVERED_NATIVE_FILTER';\nexport const UNSET_HOVERED_NATIVE_FILTER = 'UNSET_HOVERED_NATIVE_FILTER';\nexport function setHoveredNativeFilter(id) {\n  return {\n    type: SET_HOVERED_NATIVE_FILTER,\n    id\n  };\n}\nexport function unsetHoveredNativeFilter() {\n  return {\n    type: UNSET_HOVERED_NATIVE_FILTER\n  };\n}\nexport const UPDATE_CASCADE_PARENT_IDS = 'UPDATE_CASCADE_PARENT_IDS';\nexport function updateCascadeParentIds(id, parentIds) {\n  return {\n    type: UPDATE_CASCADE_PARENT_IDS,\n    id,\n    parentIds\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}