{"ast":null,"code":"import { styled, css, t } from '@superset-ui/core';\nimport Button from 'src/components/Button';\n// Importing svg images\nimport FilterResultsImage from 'src/assets/images/filter-results.svg';\nimport ChartImage from 'src/assets/images/chart.svg';\nimport FilterImage from 'src/assets/images/filter.svg';\nimport EmptyChartsImage from 'src/assets/images/empty-charts.svg';\nimport EmptyDashboardImage from 'src/assets/images/empty-dashboard.svg';\nimport UnionImage from 'src/assets/images/union.svg';\nimport EmptyQueriesImage from 'src/assets/images/empty-queries.svg';\nimport StarCircleImage from 'src/assets/images/star-circle.svg';\nimport VectorImage from 'src/assets/images/vector.svg';\nimport DocumentImage from 'src/assets/images/document.svg';\nimport DatasetImage from 'src/assets/images/empty-dataset.svg';\nimport EmptySqlChartImage from 'src/assets/images/empty_sql_chart.svg';\nimport EmptyQueryImage from 'src/assets/images/empty-query.svg';\nimport EmptyTableImage from 'src/assets/images/empty-table.svg';\nimport EmptyImage from 'src/assets/images/empty.svg';\nimport { Empty } from './Empty';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const imageMap = {\n  'chart.svg': _jsx(ChartImage, {}),\n  'document.svg': _jsx(DocumentImage, {}),\n  'empty-charts.svg': _jsx(EmptyChartsImage, {}),\n  'empty-dashboard.svg': _jsx(EmptyDashboardImage, {}),\n  'empty-dataset.svg': _jsx(DatasetImage, {}),\n  'empty-queries.svg': _jsx(EmptyQueriesImage, {}),\n  'empty-query.svg': _jsx(EmptyQueryImage, {}),\n  'empty-table.svg': _jsx(EmptyTableImage, {}),\n  'empty.svg': _jsx(EmptyImage, {}),\n  'empty_sql_chart.svg': _jsx(EmptySqlChartImage, {}),\n  'filter-results.svg': _jsx(FilterResultsImage, {}),\n  'filter.svg': _jsx(FilterImage, {}),\n  'star-circle.svg': _jsx(StarCircleImage, {}),\n  'union.svg': _jsx(UnionImage, {}),\n  'vector.svg': _jsx(VectorImage, {})\n};\nconst EmptyStateContainer = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    color: ${theme.colors.grayscale.light2};\n    align-items: center;\n    justify-content: center;\n    padding: ${theme.gridUnit * 4}px;\n    text-align: center;\n\n    & .antd5-empty-image svg {\n      width: auto;\n    }\n\n    & a,\n    & span[role='button'] {\n      color: inherit;\n      text-decoration: underline;\n      &:hover {\n        color: ${theme.colors.grayscale.base};\n      }\n    }\n  `}\n`;\nconst Title = styled.p`\n  ${({ theme, size }) => css`\n    font-size: ${size === 'large' ?\ntheme.typography.sizes.l :\ntheme.typography.sizes.m}px;\n    color: ${theme.colors.grayscale.light1};\n    margin-top: ${size === 'large' ? theme.gridUnit * 4 : theme.gridUnit * 2}px;\n    font-weight: ${theme.typography.weights.bold};\n  `}\n`;\nconst Description = styled.p`\n  ${({ theme, size }) => css`\n    font-size: ${size === 'large' ?\ntheme.typography.sizes.m :\ntheme.typography.sizes.s}px;\n    color: ${theme.colors.grayscale.light1};\n    margin-top: ${theme.gridUnit * 2}px;\n  `}\n`;\nconst ActionButton = styled(Button)`\n  ${({ theme }) => css`\n    margin-top: ${theme.gridUnit * 4}px;\n    z-index: 1;\n  `}\n`;\nconst getImageHeight = (size) => {\n  switch (size) {\n    case 'small':\n      return { height: '50px' };\n    case 'medium':\n      return { height: '80px' };\n    case 'large':\n      return { height: '150px' };\n    default:\n      return { height: '80px' };\n  }\n};\nconst ImageContainer = ({ image, size }) => {\n  if (!image)\n  return null;\n  const mappedImage = typeof image === 'string' ?\n  imageMap[image] :\n  image;\n  return _jsx(\"div\", { role: \"img\", \"aria-label\": \"empty\", children:\n    _jsx(Empty, { description: false, image: mappedImage, imageStyle: getImageHeight(size) }) }\n  );\n};\nconst handleMouseDown = (e) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\nexport const EmptyState = ({ title = t('No results'), description = t('There is currently no information to display.'), image = 'empty.svg', buttonText, buttonAction, size = 'medium', children }) => _jsxs(EmptyStateContainer, { children: [\n  image && _jsx(ImageContainer, { image: image, size: size }),\n  _jsxs(\"div\", { css: (theme) => css`\n        max-width: ${size === 'large' ?\n    theme.gridUnit * 150 :\n    theme.gridUnit * 100}px;\n      `, children: [\n    title && _jsx(Title, { size: size, children: title }),\n    description && _jsx(Description, { size: size, className: \"ant-empty-description\", children:\n      description }\n    ),\n    buttonText && buttonAction && _jsx(ActionButton, { buttonStyle: \"primary\", onClick: buttonAction, onMouseDown: handleMouseDown, children:\n      buttonText }\n    ),\n    children] }\n  )] }\n);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}