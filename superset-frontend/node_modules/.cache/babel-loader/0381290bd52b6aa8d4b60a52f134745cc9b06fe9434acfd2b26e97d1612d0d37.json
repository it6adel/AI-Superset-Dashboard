{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent, Fragment } from 'react';\nimport { withTheme } from '@emotion/react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { addAlpha, css, styled, t } from '@superset-ui/core';\nimport { EmptyState } from 'src/components/EmptyState';\nimport Icons from 'src/components/Icons';\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport { Droppable } from './dnd/DragDroppable';\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';\nimport { TAB_TYPE } from '../util/componentTypes';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool,\n  gridComponent: componentShape,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  dashboardId: PropTypes.number\n};\n\nconst defaultProps = {};\n\nconst renderDraggableContent = (dropProps) =>\ndropProps.dropIndicatorProps && _jsx(\"div\", { ...dropProps.dropIndicatorProps });\n\nconst DashboardEmptyStateContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst GridContent = styled.div`\n  ${({ theme, editMode }) => css`\n    display: flex;\n    flex-direction: column;\n    /* gutters between rows */\n    & > div:not(:last-child):not(.empty-droptarget) {\n      ${!editMode && `margin-bottom: ${theme.gridUnit * 4}px`};\n    }\n\n    .empty-droptarget {\n      width: 100%;\n      height: ${theme.gridUnit * 4}px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: ${theme.gridUnit}px;\n      overflow: hidden;\n\n      &:before {\n        content: '';\n        display: block;\n        width: calc(100% - ${theme.gridUnit * 2}px);\n        height: calc(100% - ${theme.gridUnit * 2}px);\n        border: 1px dashed transparent;\n        border-radius: ${theme.gridUnit}px;\n        opacity: 0.5;\n      }\n    }\n\n    & > .empty-droptarget:first-child {\n      height: ${theme.gridUnit * 4}px;\n      margin-top: ${theme.gridUnit * -4}px;\n    }\n\n    & > .empty-droptarget:last-child {\n      height: ${theme.gridUnit * 24}px;\n    }\n\n    & > .empty-droptarget.empty-droptarget--full:only-child {\n      height: 80vh;\n    }\n  `}\n`;\n\nconst GridColumnGuide = styled.div`\n  ${({ theme }) => css`\n    // /* Editing guides */\n    &.grid-column-guide {\n      position: absolute;\n      top: 0;\n      min-height: 100%;\n      background-color: ${addAlpha(\n  theme.colors.primary.base,\n  parseFloat(theme.opacity.light) / 100\n)};\n      pointer-events: none;\n      box-shadow: inset 0 0 0 1px\n        ${addAlpha(\n  theme.colors.primary.base,\n  parseFloat(theme.opacity.mediumHeavy) / 100\n)};\n    }\n  `};\n`;\n\nclass DashboardGrid extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false\n    };\n    this.theme = this;\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2);\n\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart() {\n    this.setState(() => ({\n      isResizing: true\n    }));\n  }\n\n  handleResizeStop(_event, _direction, _elementRef, delta, id) {\n    this.props.resizeComponent({\n      id,\n      width: delta.width,\n      height: delta.height\n    });\n\n    this.setState(() => ({\n      isResizing: false\n    }));\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0\n        }\n      });\n    }\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {var _gridComponent$childr, _gridComponent$childr2, _gridComponent$childr3, _gridComponent$childr4;\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      width,\n      isComponentVisible,\n      editMode,\n      canEdit,\n      setEditMode,\n      dashboardId,\n      theme\n    } = this.props;\n    const columnPlusGutterWidth =\n    (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing } = this.state;\n\n    const shouldDisplayEmptyState = (gridComponent == null ? void 0 : (_gridComponent$childr = gridComponent.children) == null ? void 0 : _gridComponent$childr.length) === 0;\n    const shouldDisplayTopLevelTabEmptyState =\n    shouldDisplayEmptyState && gridComponent.type === TAB_TYPE;\n\n    const dashboardEmptyState = editMode &&\n    _jsx(EmptyState, {\n      title: t('Drag and drop components and charts to the dashboard'),\n      description: t(\n        'You can create a new chart or use existing ones from the panel on the right'\n      ),\n      size: \"large\",\n      buttonText:\n      _jsxs(_Fragment, { children: [\n        _jsx(Icons.PlusOutlined, {\n          iconSize: \"m\",\n          iconColor: theme.colors.primary.light5 }\n        ),\n        t('Create a new chart')] }\n      ),\n\n      buttonAction: () => {\n        window.open(\n          `/chart/add?dashboard_id=${dashboardId}`,\n          '_blank',\n          'noopener noreferrer'\n        );\n      },\n      image: \"chart.svg\" }\n    );\n\n\n    const topLevelTabEmptyState = editMode ?\n    _jsx(EmptyState, {\n      title: t('Drag and drop components to this tab'),\n      size: \"large\",\n      description: t(\n        `You can create a new chart or use existing ones from the panel on the right`\n      ),\n      buttonText:\n      _jsxs(_Fragment, { children: [\n        _jsx(Icons.PlusOutlined, {\n          iconSize: \"m\",\n          iconColor: theme.colors.primary.light5 }\n        ),\n        t('Create a new chart')] }\n      ),\n\n      buttonAction: () => {\n        window.open(\n          `/chart/add?dashboard_id=${dashboardId}`,\n          '_blank',\n          'noopener noreferrer'\n        );\n      },\n      image: \"chart.svg\" }\n    ) :\n\n    _jsx(EmptyState, {\n      title: t('There are no components added to this tab'),\n      size: \"large\",\n      description:\n      canEdit && t('You can add the components in the edit mode.'),\n\n      buttonText: canEdit && t('Edit the dashboard'),\n      buttonAction:\n      canEdit && (\n      () => {\n        setEditMode(true);\n      }),\n\n      image: \"chart.svg\" }\n    );\n\n\n    return width < 100 ? null :\n    _jsxs(_Fragment, { children: [\n      shouldDisplayEmptyState &&\n      _jsx(DashboardEmptyStateContainer, { children:\n        shouldDisplayTopLevelTabEmptyState ?\n        topLevelTabEmptyState :\n        dashboardEmptyState }\n      ),\n\n      _jsx(\"div\", { className: \"dashboard-grid\", ref: this.setGridRef, children:\n        _jsxs(GridContent, {\n          className: \"grid-content\",\n\n          editMode: editMode, children: [\n\n\n          editMode &&\n          _jsx(Droppable, {\n            component: gridComponent,\n            depth: depth,\n            parentComponent: null,\n            index: 0,\n            orientation: \"column\",\n            onDrop: this.handleTopDropTargetDrop,\n            className: classNames({\n              'empty-droptarget': true,\n              'empty-droptarget--full':\n              (gridComponent == null ? void 0 : (_gridComponent$childr2 = gridComponent.children) == null ? void 0 : _gridComponent$childr2.length) === 0\n            }),\n            editMode: true,\n            dropToChild: (gridComponent == null ? void 0 : (_gridComponent$childr3 = gridComponent.children) == null ? void 0 : _gridComponent$childr3.length) === 0, children:\n\n            renderDraggableContent }\n          ),\n\n          gridComponent == null ? void 0 : (_gridComponent$childr4 = gridComponent.children) == null ? void 0 : _gridComponent$childr4.map((id, index) =>\n          _jsxs(Fragment, { children: [\n            _jsx(DashboardComponent, {\n              id: id,\n              parentId: gridComponent.id,\n              depth: depth + 1,\n              index: index,\n              availableColumnCount: GRID_COLUMN_COUNT,\n              columnWidth: columnWidth,\n              isComponentVisible: isComponentVisible,\n              onResizeStart: this.handleResizeStart,\n              onResize: this.handleResize,\n              onResizeStop: this.handleResizeStop,\n              onChangeTab: this.handleChangeTab }\n            ),\n\n            editMode &&\n            _jsx(Droppable, {\n              component: gridComponent,\n              depth: depth,\n              parentComponent: null,\n              index: index + 1,\n              orientation: \"column\",\n              onDrop: handleComponentDrop,\n              className: \"empty-droptarget\",\n              editMode: true, children:\n\n              renderDraggableContent }\n            )] }, id\n\n          )\n          ),\n          isResizing &&\n          Array(GRID_COLUMN_COUNT).\n          fill(null).\n          map((_, i) =>\n          _jsx(GridColumnGuide, {\n\n            className: \"grid-column-guide\",\n            style: {\n              left: i * GRID_GUTTER_SIZE + i * columnWidth,\n              width: columnWidth\n            } }, `grid-column-${i}`\n          )\n          )] }\n        ) }\n      )] }\n    );\n\n  }\n}\n\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;\n\nexport default withTheme(DashboardGrid);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}