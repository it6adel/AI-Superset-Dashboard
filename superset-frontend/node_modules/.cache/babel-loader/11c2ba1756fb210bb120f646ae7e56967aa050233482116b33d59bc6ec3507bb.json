{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { JSONTree } from 'react-json-tree';\nimport { css, styled, t } from '@superset-ui/core';\nimport { useJsonTreeTheme } from 'src/hooks/useJsonTreeTheme';\nimport Collapse from 'src/components/Collapse';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledUl = styled.ul`\n  padding-left: ${({ theme }) => theme.gridUnit * 5}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nconst collapseStyle = (theme) => css`\n  .ant-collapse-arrow {\n    left: 0px !important;\n  }\n  .ant-collapse-header {\n    padding-left: ${theme.gridUnit * 4}px !important;\n  }\n  .ant-collapse-content-box {\n    padding: 0px !important;\n  }\n`;\nconst extractInvalidValues = (messages, payload) => {\n  const invalidValues = [];\n  const recursiveExtract = (messages, payload) => {\n    Object.keys(messages).forEach((key) => {\n      const value = payload[key];\n      const message = messages[key];\n      if (Array.isArray(message)) {\n        message.forEach((errorMessage) => {\n          invalidValues.push(`${errorMessage}: ${value}`);\n        });\n      } else\n      {\n        recursiveExtract(message, value);\n      }\n    });\n  };\n  recursiveExtract(messages, payload);\n  return invalidValues;\n};\nexport default function MarshmallowErrorMessage({ error,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  source = 'crud', subtitle }) {\n  const jsonTreeTheme = useJsonTreeTheme();\n  const { extra, message } = error;\n  return _jsxs(\"div\", { children: [\n    subtitle && _jsx(\"h4\", { children: subtitle }),\n\n    message,\n\n    _jsx(StyledUl, { children:\n      extractInvalidValues(extra.messages, extra.payload).map((value, index) => _jsx(\"li\", { children: value }, index)) }\n    ),\n\n    _jsx(Collapse, { ghost: true, css: collapseStyle, children:\n      _jsx(Collapse.Panel, { header: t('Details'), css: collapseStyle, children:\n        _jsx(JSONTree, { data: extra.messages, shouldExpandNode: () => true, hideRoot: true, theme: jsonTreeTheme }) }, \"details\"\n      ) }\n    )] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}