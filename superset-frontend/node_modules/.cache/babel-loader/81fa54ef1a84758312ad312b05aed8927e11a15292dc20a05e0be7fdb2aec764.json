{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport ErrorAlert from './ErrorAlert';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\nconst ImportModelsModal = ({ resourceName, resourceLabel, passwordsNeededMessage, confirmOverwriteMessage, onModelImport, show, onHide, passwordFields = [], setPasswordFields = () => {}, sshTunnelPasswordFields = [], setSSHTunnelPasswordFields = () => {}, sshTunnelPrivateKeyFields = [], setSSHTunnelPrivateKeyFields = () => {}, sshTunnelPrivateKeyPasswordFields = [], setSSHTunnelPrivateKeyPasswordFields = () => {} }) => {\n  const [isHidden, setIsHidden] = useState(true);\n  const [passwords, setPasswords] = useState({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] = useState(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState(false);\n  const [fileList, setFileList] = useState([]);\n  const [importingModel, setImportingModel] = useState(false);\n  const [errorMessage, setErrorMessage] = useState();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] = useState({});\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n  const handleErrorMsg = (msg) => {\n    setErrorMessage(msg);\n  };\n  const { state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded }, importResource } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n  const onUpload = () => {var _fileList$;\n    if (!(((_fileList$ = fileList[0]) == null ? void 0 : _fileList$.originFileObj) instanceof File)) {\n      return;\n    }\n    setImportingModel(true);\n    importResource(fileList[0].originFileObj, passwords, sshTunnelPasswords, sshTunnelPrivateKeys, sshTunnelPrivateKeyPasswords, confirmedOverwrite).then((result) => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n  const changeFile = (info) => {\n    setFileList([\n    {\n      ...info.file,\n      status: 'done'\n    }]\n    );\n  };\n  const removeFile = (removedFile) => {\n    setFileList(fileList.filter((file) => file.uid !== removedFile.uid));\n    return false;\n  };\n  const confirmOverwrite = (event) => {var _event$currentTarget$, _event$currentTarget;\n    const targetValue = (_event$currentTarget$ = (_event$currentTarget = event.currentTarget) == null ? void 0 : _event$currentTarget.value) != null ? _event$currentTarget$ : '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0 &&\n    sshTunnelPasswordFields.length === 0 &&\n    sshTunnelPrivateKeyFields.length === 0 &&\n    sshTunnelPrivateKeyPasswordFields.length === 0) {\n      return null;\n    }\n    const files = [\n    ...new Set([\n    ...passwordFields,\n    ...sshTunnelPasswordFields,\n    ...sshTunnelPrivateKeyFields,\n    ...sshTunnelPrivateKeyPasswordFields]\n    )];\n\n    return _jsxs(_Fragment, { children: [\n      _jsx(\"h5\", { children: t('Database passwords') }),\n      _jsx(HelperMessage, { children: passwordsNeededMessage }),\n      files.map((fileName) => _jsxs(_Fragment, { children: [\n        (passwordFields == null ? void 0 : passwordFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s PASSWORD', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"input\", { name: `password-${fileName}`, autoComplete: `password-${fileName}`, type: \"password\", value: passwords[fileName], onChange: (event) => setPasswords({\n              ...passwords,\n              [fileName]: event.target.value\n            }) })] }, `password-for-${fileName}`\n        ),\n        (sshTunnelPasswordFields == null ? void 0 : sshTunnelPasswordFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s SSH TUNNEL PASSWORD', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"input\", { name: `ssh_tunnel_password-${fileName}`, autoComplete: `ssh_tunnel_password-${fileName}`, type: \"password\", value: sshTunnelPasswords[fileName], onChange: (event) => setSSHTunnelPasswords({\n              ...sshTunnelPasswords,\n              [fileName]: event.target.value\n            }) })] }, `ssh_tunnel_password-for-${fileName}`\n        ),\n        (sshTunnelPrivateKeyFields == null ? void 0 : sshTunnelPrivateKeyFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"textarea\", { name: `ssh_tunnel_private_key-${fileName}`, autoComplete: `ssh_tunnel_private_key-${fileName}`, value: sshTunnelPrivateKeys[fileName], onChange: (event) => setSSHTunnelPrivateKeys({\n              ...sshTunnelPrivateKeys,\n              [fileName]: event.target.value\n            }) })] }, `ssh_tunnel_private_key-for-${fileName}`\n        ),\n        (sshTunnelPrivateKeyPasswordFields == null ? void 0 : sshTunnelPrivateKeyPasswordFields.indexOf(fileName)) >= 0 && _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10)),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"input\", { name: `ssh_tunnel_private_key_password-${fileName}`, autoComplete: `ssh_tunnel_private_key_password-${fileName}`, type: \"password\", value: sshTunnelPrivateKeyPasswords[fileName], onChange: (event) => setSSHTunnelPrivateKeyPasswords({\n              ...sshTunnelPrivateKeyPasswords,\n              [fileName]: event.target.value\n            }) })] }, `ssh_tunnel_private_key_password-for-${fileName}`\n        )] }\n      ))] }\n    );\n  };\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n    return _jsx(_Fragment, { children:\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"confirm-overwrite\", children: confirmOverwriteMessage }),\n        _jsx(\"div\", { className: \"control-label\", children:\n          t('Type \"%s\" to confirm', t('OVERWRITE')) }\n        ),\n        _jsx(\"input\", { id: \"overwrite\", type: \"text\", onChange: confirmOverwrite })] }\n      ) }\n    );\n  };\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return _jsxs(Modal, { name: \"model\", className: \"import-model-modal\", disablePrimaryButton: fileList.length === 0 ||\n    needsOverwriteConfirm && !confirmedOverwrite ||\n    importingModel, onHandledPrimaryAction: onUpload, onHide: hide, primaryButtonName: needsOverwriteConfirm ? t('Overwrite') : t('Import'), primaryButtonType: needsOverwriteConfirm ? 'danger' : 'primary', width: \"750px\", show: show, title: _jsx(\"h4\", { children: t('Import %s', resourceLabel) }), children: [\n    _jsx(StyledInputContainer, { children:\n      _jsx(Upload, { name: \"modelFile\", id: \"modelFile\", accept: \".yaml,.json,.yml,.zip\", fileList: fileList, onChange: changeFile, onRemove: removeFile\n        // upload is handled by hook\n        , customRequest: () => {}, disabled: importingModel, children:\n        _jsx(Button, { loading: importingModel, children: t('Select file') }) }\n      ) }\n    ),\n    errorMessage && _jsx(ErrorAlert, { errorMessage: errorMessage, showDbInstallInstructions: passwordFields.length > 0 ||\n      sshTunnelPasswordFields.length > 0 ||\n      sshTunnelPrivateKeyFields.length > 0 ||\n      sshTunnelPrivateKeyPasswordFields.length > 0 }),\n    renderPasswordFields(),\n    renderOverwriteConfirmation()] }\n  );\n};\nexport default ImportModelsModal;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}