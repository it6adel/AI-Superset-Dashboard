{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getDatabaseDocumentationLinks } from 'src/views/CRUD/hooks';\nimport { t } from '@superset-ui/core';\nimport { EditHeaderTitle, EditHeaderSubtitle, StyledFormHeader, StyledStickyHeader } from './styles';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst supersetTextDocs = getDatabaseDocumentationLinks();\nexport const DOCUMENTATION_LINK = supersetTextDocs ?\nsupersetTextDocs.support :\n'https://superset.apache.org/docs/configuration/databases#installing-database-drivers';\nconst irregularDocumentationLinks = {\n  postgresql: 'https://superset.apache.org',\n  mssql: 'https://superset.apache.org/docs/databases/sql-server',\n  gsheets: 'https://superset.apache.org/docs/databases/google-sheets'\n};\nconst documentationLink = (engine) => {\n  if (!engine)\n  return null;\n  if (supersetTextDocs) {\n    // override doc link for superset_txt yml\n    return supersetTextDocs[engine] || supersetTextDocs.default;\n  }\n  if (!irregularDocumentationLinks[engine]) {\n    return `https://superset.apache.org/docs/databases/${engine}`;\n  }\n  return irregularDocumentationLinks[engine];\n};\nconst ModalHeader = ({ isLoading, isEditMode, useSqlAlchemyForm, hasConnectedDb, db, dbName, dbModel, editNewDb, fileList }) => {\n  const fileCheck = fileList && (fileList == null ? void 0 : fileList.length) > 0;\n  const isEditHeader = _jsxs(StyledFormHeader, { children: [\n    _jsx(EditHeaderTitle, { children: db == null ? void 0 : db.backend }),\n    _jsx(EditHeaderSubtitle, { children: dbName })] }\n  );\n  const useSqlAlchemyFormHeader = _jsxs(StyledFormHeader, { children: [\n    _jsx(\"p\", { className: \"helper-top\", children:\n      t('STEP %(stepCurr)s OF %(stepLast)s', {\n        stepCurr: 2,\n        stepLast: 2\n      }) }\n    ),\n    _jsx(\"h4\", { children: t('Enter Primary Credentials') }),\n    _jsxs(\"p\", { className: \"helper-bottom\", children: [\n      t('Need help? Learn how to connect your database'), ' ',\n      _jsx(\"a\", { href: (supersetTextDocs == null ? void 0 : supersetTextDocs.default) || DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\", children:\n        t('here') }\n      ), \".\"] }\n\n    )] }\n  );\n  const hasConnectedDbHeader = _jsx(StyledStickyHeader, { children:\n    _jsxs(StyledFormHeader, { children: [\n      _jsx(\"p\", { className: \"helper-top\", children:\n        t('STEP %(stepCurr)s OF %(stepLast)s', {\n          stepCurr: 3,\n          stepLast: 3\n        }) }\n      ),\n      _jsx(\"h4\", { className: \"step-3-text\", children: t('Database connected') }),\n      _jsx(\"p\", { className: \"subheader-text\", children:\n        t(`Create a dataset to begin visualizing your data as a chart or go to\n          SQL Lab to query your data.`) }\n      )] }\n    ) }\n  );\n  const hasDbHeader = _jsx(StyledStickyHeader, { children:\n    _jsxs(StyledFormHeader, { children: [\n      _jsx(\"p\", { className: \"helper-top\", children:\n        t('STEP %(stepCurr)s OF %(stepLast)s', {\n          stepCurr: 2,\n          stepLast: 3\n        }) }\n      ),\n      _jsx(\"h4\", { children:\n        t('Enter the required %(dbModelName)s credentials', {\n          dbModelName: dbModel.name\n        }) }\n      ),\n      _jsxs(\"p\", { className: \"helper-bottom\", children: [\n        t('Need help? Learn more about'), ' ',\n        _jsxs(\"a\", { href: documentationLink(db == null ? void 0 : db.engine), target: \"_blank\", rel: \"noopener noreferrer\", children: [\n          t('connecting to %(dbModelName)s', { dbModelName: dbModel.name }), \".\"] }\n        )] }\n      )] }\n    ) }\n  );\n  const noDbHeader = _jsx(StyledFormHeader, { children:\n    _jsxs(\"div\", { className: \"select-db\", children: [\n      _jsx(\"p\", { className: \"helper-top\", children:\n        t('STEP %(stepCurr)s OF %(stepLast)s', {\n          stepCurr: 1,\n          stepLast: 3\n        }) }\n      ),\n      _jsx(\"h4\", { children: t('Select a database to connect') })] }\n    ) }\n  );\n  const importDbHeader = _jsx(StyledStickyHeader, { children:\n    _jsxs(StyledFormHeader, { children: [\n      _jsx(\"p\", { className: \"helper-top\", children:\n        t('STEP %(stepCurr)s OF %(stepLast)s', {\n          stepCurr: 2,\n          stepLast: 2\n        }) }\n      ),\n      _jsx(\"h4\", { children:\n        t('Enter the required %(dbModelName)s credentials', {\n          dbModelName: dbModel.name\n        }) }\n      ),\n      _jsx(\"p\", { className: \"helper-bottom\", children: fileCheck ? fileList[0].name : '' })] }\n    ) }\n  );\n  if (fileCheck)\n  return importDbHeader;\n  if (isLoading)\n  return _jsx(_Fragment, {});\n  if (isEditMode)\n  return isEditHeader;\n  if (useSqlAlchemyForm)\n  return useSqlAlchemyFormHeader;\n  if (hasConnectedDb && !editNewDb)\n  return hasConnectedDbHeader;\n  if (db || editNewDb)\n  return hasDbHeader;\n  return noDbHeader;\n};\nexport default ModalHeader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}