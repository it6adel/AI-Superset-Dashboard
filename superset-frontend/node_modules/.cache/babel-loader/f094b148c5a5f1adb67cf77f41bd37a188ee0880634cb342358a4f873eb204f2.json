{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useReducer, useCallback, useMemo } from 'react';\nimport { t, getClientErrorObject, VizType } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addReport, editReport } from 'src/features/reports/ReportModal/actions';\nimport Alert from 'src/components/Alert';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport LabeledErrorBoundInput from 'src/components/Form/LabeledErrorBoundInput';\nimport Icons from 'src/components/Icons';\nimport { Radio } from 'src/components/Radio';\nimport { Input } from 'src/components/Input';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { NotificationFormats } from 'src/features/reports/types';\nimport { reportSelector } from 'src/views/CRUD/hooks';\nimport { StyledInputContainer } from 'src/features/alerts/AlertReportModal';\nimport { CreationMethod } from './HeaderReportDropdown';\nimport { antDErrorAlertStyles, CustomWidthHeaderStyle, StyledModal, StyledTopSection, StyledBottomSection, StyledIconWrapper, StyledScheduleTitle, StyledCronPicker, StyledCronError, noBottomMargin, StyledFooterButton, TimezoneHeaderStyle, SectionHeaderStyle, StyledMessageContentTitle } from './styles';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst TEXT_BASED_VISUALIZATION_TYPES = [\nVizType.PivotTable,\n'table',\nVizType.PairedTTest];\n\nconst INITIAL_STATE = {\n  crontab: '0 12 * * 1'\n};\n// Same instance to be used in useEffects\nconst EMPTY_OBJECT = {};\nfunction ReportModal({ onHide, show = false, dashboardId, chart, userId, userEmail, ccEmail, bccEmail, creationMethod, dashboardName, chartName }) {var _chart$sliceFormData;\n  const vizType = chart == null ? void 0 : (_chart$sliceFormData = chart.sliceFormData) == null ? void 0 : _chart$sliceFormData.viz_type;\n  const isChart = !!chart;\n  const isTextBasedChart = isChart && vizType && TEXT_BASED_VISUALIZATION_TYPES.includes(vizType);\n  const defaultNotificationFormat = isTextBasedChart ?\n  NotificationFormats.Text :\n  NotificationFormats.PNG;\n  const entityName = dashboardName || chartName;\n  const initialState = useMemo(() => ({\n    ...INITIAL_STATE,\n    name: entityName ?\n    t('Weekly Report for %s', entityName) :\n    t('Weekly Report')\n  }), [entityName]);\n  const reportReducer = useCallback((state, action) => {\n    if (action === 'reset') {\n      return initialState;\n    }\n    return {\n      ...state,\n      ...action\n    };\n  }, [initialState]);\n  const [currentReport, setCurrentReport] = useReducer(reportReducer, initialState);\n  const [cronError, setCronError] = useState();\n  const dispatch = useDispatch();\n  // Report fetch logic\n  const report = useSelector((state) => {\n    const resourceType = dashboardId ?\n    CreationMethod.Dashboards :\n    CreationMethod.Charts;\n    return reportSelector(state, resourceType, dashboardId || (chart == null ? void 0 : chart.id)) ||\n    EMPTY_OBJECT;\n  });\n  const isEditMode = report && Object.keys(report).length;\n  useEffect(() => {\n    if (isEditMode) {\n      setCurrentReport(report);\n    } else\n    {\n      setCurrentReport('reset');\n    }\n  }, [isEditMode, report]);\n  const onSave = async () => {\n    // Create new Report\n    const newReportValues = {\n      type: 'Report',\n      active: true,\n      force_screenshot: false,\n      custom_width: currentReport.custom_width,\n      creation_method: creationMethod,\n      dashboard: dashboardId,\n      chart: chart == null ? void 0 : chart.id,\n      owners: [userId],\n      recipients: [\n      {\n        recipient_config_json: {\n          target: userEmail,\n          ccTarget: ccEmail,\n          bccTarget: bccEmail\n        },\n        type: 'Email'\n      }],\n\n      name: currentReport.name,\n      description: currentReport.description,\n      crontab: currentReport.crontab,\n      report_format: currentReport.report_format || defaultNotificationFormat,\n      timezone: currentReport.timezone\n    };\n    setCurrentReport({ isSubmitting: true, error: undefined });\n    try {\n      if (isEditMode) {\n        await dispatch(editReport(currentReport.id, newReportValues));\n      } else\n      {\n        await dispatch(addReport(newReportValues));\n      }\n      onHide();\n    }\n    catch (e) {\n      const { error } = await getClientErrorObject(e);\n      setCurrentReport({ error });\n    }\n    setCurrentReport({ isSubmitting: false });\n  };\n  const wrappedTitle = _jsxs(StyledIconWrapper, { children: [\n    _jsx(Icons.CalendarOutlined, {}),\n    _jsx(\"span\", { className: \"text\", children:\n      isEditMode ? t('Edit email report') : t('Schedule a new email report') }\n    )] }\n  );\n  const renderModalFooter = _jsxs(_Fragment, { children: [\n    _jsx(StyledFooterButton, { onClick: onHide, children:\n      t('Cancel') }, \"back\"\n    ),\n    _jsx(StyledFooterButton, { buttonStyle: \"primary\", onClick: onSave, disabled: !currentReport.name, loading: currentReport.isSubmitting, children:\n      isEditMode ? t('Save') : t('Add') }, \"submit\"\n    )] }\n  );\n  const renderMessageContentSection = _jsxs(_Fragment, { children: [\n    _jsx(StyledMessageContentTitle, { children:\n      _jsx(\"h4\", { children: t('Message content') }) }\n    ),\n    _jsx(\"div\", { className: \"inline-container\", children:\n      _jsx(Radio.GroupWrapper, { spaceConfig: {\n          direction: 'vertical',\n          size: 'middle',\n          align: 'start',\n          wrap: false\n        }, onChange: (event) => {\n          setCurrentReport({ report_format: event.target.value });\n        }, value: currentReport.report_format || defaultNotificationFormat, options: [\n        {\n          label: t('Text embedded in email'),\n          value: NotificationFormats.Text\n        },\n        {\n          label: t('Image (PNG) embedded in email'),\n          value: NotificationFormats.PNG\n        },\n        {\n          label: t('Formatted CSV attached in email'),\n          value: NotificationFormats.CSV\n        }] }\n      ) }\n    )] }\n  );\n  const renderCustomWidthSection = _jsxs(StyledInputContainer, { children: [\n    _jsx(\"div\", { className: \"control-label\", css: CustomWidthHeaderStyle, children:\n      t('Screenshot width') }\n    ),\n    _jsx(\"div\", { className: \"input-container\", children:\n      _jsx(Input, { type: \"number\", name: \"custom_width\", value: (currentReport == null ? void 0 : currentReport.custom_width) || '', placeholder: t('Input custom width in pixels'), onChange: (event) => {\n          setCurrentReport({\n            custom_width: parseInt(event.target.value, 10) || null\n          });\n        } }) }\n    )] }\n  );\n  return _jsxs(StyledModal, { show: show, onHide: onHide, title: wrappedTitle, footer: renderModalFooter, width: \"432\", centered: true, children: [\n    _jsxs(StyledTopSection, { children: [\n      _jsx(LabeledErrorBoundInput, { id: \"name\", name: \"name\", value: currentReport.name || '', placeholder: initialState.name, required: true, validationMethods: {\n          onChange: ({ target }) => setCurrentReport({ name: target.value })\n        }, label: t('Report Name') }),\n      _jsx(LabeledErrorBoundInput, { id: \"description\", name: \"description\", value: (currentReport == null ? void 0 : currentReport.description) || '', validationMethods: {\n          onChange: ({ target }) => {\n            setCurrentReport({ description: target.value });\n          }\n        }, label: t('Description'), placeholder: t('Include a description that will be sent with your report'), css: noBottomMargin })] }\n    ),\n\n    _jsxs(StyledBottomSection, { children: [\n      _jsxs(StyledScheduleTitle, { children: [\n        _jsx(\"h4\", { css: (theme) => SectionHeaderStyle(theme), children:\n          t('Schedule') }\n        ),\n        _jsx(\"p\", { children: t('The report will be sent to your email at') })] }\n      ),\n\n      _jsx(StyledCronPicker, { clearButton: false, value: currentReport.crontab || '0 12 * * 1', setValue: (newValue) => {\n          setCurrentReport({ crontab: newValue });\n        }, onError: setCronError }),\n      _jsx(StyledCronError, { children: cronError }),\n      _jsx(\"div\", { className: \"control-label\", css: (theme) => TimezoneHeaderStyle(theme), children:\n        t('Timezone') }\n      ),\n      _jsx(TimezoneSelector, { timezone: currentReport.timezone, onTimezoneChange: (value) => {\n          setCurrentReport({ timezone: value });\n        } }),\n      isChart && renderMessageContentSection,\n      (!isChart || !isTextBasedChart) && renderCustomWidthSection] }\n    ),\n    currentReport.error && _jsx(Alert, { type: \"error\", css: (theme) => antDErrorAlertStyles(theme), message: isEditMode ?\n      t('Failed to update report') :\n      t('Failed to create report'), description: currentReport.error })] }\n  );\n}\nexport default withToasts(ReportModal);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}