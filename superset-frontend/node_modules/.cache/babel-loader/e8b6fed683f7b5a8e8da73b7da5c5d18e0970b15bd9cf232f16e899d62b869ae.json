{"ast":null,"code":"import _pick from \"lodash/pick\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\n\nimport { EditableTabs } from 'src/components/Tabs';\nimport { connect } from 'react-redux';\nimport URI from 'urijs';\nimport { FeatureFlag, styled, t, isFeatureEnabled, css } from '@superset-ui/core';\nimport { Logger } from 'src/logger/LogUtils';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { detectOS } from 'src/utils/common';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\nimport { EmptyState } from 'src/components/EmptyState';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { locationContext } from 'src/pages/SqlLab/LocationContext';\nimport Icons from 'src/components/Icons';\nimport SqlEditor from '../SqlEditor';\nimport SqlEditorTabHeader from '../SqlEditorTabHeader';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DEFAULT_PROPS = {\n  queryEditors: [],\n  offline: false,\n  saveQueryWarning: null,\n  scheduleQueryWarning: null\n};\nconst StyledEditableTabs = styled(EditableTabs)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledTab = styled.span`\n  line-height: 24px;\n`;\nconst TabTitle = styled.span`\n  margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  text-transform: none;\n`;\n// Get the user's OS\nconst userOS = detectOS();\nconst SQL_LAB_URL = '/sqllab';\nclass TabbedSqlEditors extends PureComponent {\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    onTabClicked = () => {var _this$props$queryEdit;\n      Logger.markTimeOrigin();\n      const noQueryEditors = ((_this$props$queryEdit = this.props.queryEditors) == null ? void 0 : _this$props$queryEdit.length) === 0;\n      if (noQueryEditors) {\n        this.newQueryEditor();\n      }\n    };this.removeQueryEditor = this.removeQueryEditor.bind(this);this.handleSelect = this.handleSelect.bind(this);this.handleEdit = this.handleEdit.bind(this);}componentDidMount() {var _path$match; // merge post form data with GET search params\n    // Hack: this data should be coming from getInitialState\n    // but for some reason this data isn't being passed properly through\n    // the reducer.\n    const bootstrapData = getBootstrapData();const queryParameters = URI(window.location).search(true);const path = URI(window.location).path();const { id, name, sql, savedQueryId, datasourceKey, queryId, dbid, dbname, catalog, schema, autorun, new: isNewQuery, ...urlParams } = { ...this.context.requestedQuery, ...bootstrapData.requested_query, ...queryParameters };const permalink = (_path$match = path.match(/\\/p\\/\\w+/)) == null ? void 0 : _path$match[0].slice(3); // Popping a new tab based on the querystring\n    if (permalink || id || sql || savedQueryId || datasourceKey || queryId) {if (permalink) {this.props.actions.popPermalink(permalink);} else if (id) {this.props.actions.popStoredQuery(id);} else if (savedQueryId) {this.props.actions.popSavedQuery(savedQueryId);} else if (queryId) {this.props.actions.popQuery(queryId);} else if (datasourceKey) {this.props.actions.popDatasourceQuery(datasourceKey, sql);} else if (sql) {let databaseId = dbid;if (databaseId) {databaseId = parseInt(databaseId, 10);} else {const { databases } = this.props;const databaseName = dbname;if (databaseName) {Object.keys(databases).forEach((db) => {if (databases[db].database_name === databaseName) {databaseId = databases[db].id;}});}}const newQueryEditor = { name, dbId: databaseId, catalog, schema, autorun, sql };this.props.actions.addQueryEditor(newQueryEditor);}this.popNewTab(_pick(urlParams, Object.keys(queryParameters != null ? queryParameters : {})));} else if (isNewQuery || this.props.queryEditors.length === 0) {this.newQueryEditor();if (isNewQuery) {window.history.replaceState({}, document.title, SQL_LAB_URL);}} else {const qe = this.activeQueryEditor();const latestQuery = this.props.queries[(qe == null ? void 0 : qe.latestQueryId) || ''];if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) && latestQuery && latestQuery.resultsKey) {// when results are not stored in localStorage they need to be\n        // fetched from the results backend (if configured)\n        this.props.actions.fetchQueryResults(latestQuery, this.props.displayLimit);}}}popNewTab(urlParams) {// Clean the url in browser history\n    const updatedUrl = `${URI(SQL_LAB_URL).query(urlParams)}`;window.history.replaceState({}, document.title, updatedUrl);}activeQueryEditor() {if (this.props.tabHistory.length === 0) {return this.props.queryEditors[0];}const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];return this.props.queryEditors.find((qe) => qe.id === qeid) || null;}newQueryEditor() {this.props.actions.addNewQueryEditor();}handleSelect(key) {const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];if (key !== qeid) {const queryEditor = this.props.queryEditors.find((qe) => qe.id === key);if (!queryEditor) {return;}this.props.actions.setActiveQueryEditor(queryEditor);}}handleEdit(key, action) {if (action === 'remove') {const qe = this.props.queryEditors.find((qe) => qe.id === key);if (qe) {this.removeQueryEditor(qe);}}if (action === 'add') {Logger.markTimeOrigin();this.newQueryEditor();}}removeQueryEditor(qe) {this.props.actions.removeQueryEditor(qe);}render() {var _this$props$queryEdit2, _this$props$queryEdit3;const noQueryEditors = ((_this$props$queryEdit2 = this.props.queryEditors) == null ? void 0 : _this$props$queryEdit2.length) === 0;const editors = (_this$props$queryEdit3 = this.props.queryEditors) == null ? void 0 : _this$props$queryEdit3.map((qe) => _jsx(EditableTabs.TabPane, { tab: _jsx(SqlEditorTabHeader, { queryEditor: qe }) // for tests - key prop isn't handled by enzyme well bcs it's a react keyword\n        , \"data-key\": qe.id, children: _jsx(SqlEditor, { queryEditor: qe, defaultQueryLimit: this.props.defaultQueryLimit, maxRow: this.props.maxRow, displayLimit: this.props.displayLimit, saveQueryWarning: this.props.saveQueryWarning, scheduleQueryWarning: this.props.scheduleQueryWarning }) }, qe.id));const emptyTab = _jsxs(StyledTab, { children: [_jsx(TabTitle, { children: t('Add a new tab') }),\n        _jsx(Tooltip, { id: \"add-tab\", placement: \"bottom\", title: userOS === 'Windows' ?\n          t('New tab (Ctrl + q)') :\n          t('New tab (Ctrl + t)'), children:\n          _jsx(Icons.PlusCircleOutlined, { iconSize: \"s\", css: css`\n              vertical-align: middle;\n            ` }) }\n        )] }\n    );\n    const emptyTabState = _jsx(EditableTabs.TabPane, { \"data-key\": 0, tab: emptyTab, closable: false, children:\n      _jsx(EmptyState, { image: \"empty_sql_chart.svg\", size: \"large\", description: t('Add a new tab to create SQL Query') }) }, 0\n    );\n    return _jsxs(StyledEditableTabs, { activeKey: this.props.tabHistory[this.props.tabHistory.length - 1], id: \"a11y-query-editor-tabs\", className: \"SqlEditorTabs\", onChange: this.handleSelect, fullWidth: false, hideAdd: this.props.offline, onTabClick: this.onTabClicked, onEdit: this.handleEdit, type: noQueryEditors ? 'card' : 'editable-card', addIcon: _jsx(Tooltip, { id: \"add-tab\", placement: \"bottom\", title: userOS === 'Windows' ?\n        t('New tab (Ctrl + q)') :\n        t('New tab (Ctrl + t)'), children:\n        _jsx(Icons.PlusCircleOutlined, { iconSize: \"l\", css: css`\n                vertical-align: middle;\n              ` }) }\n      ), children: [\n      editors,\n      noQueryEditors && emptyTabState] }\n    );\n  }\n}\nTabbedSqlEditors.contextType = locationContext;\nexport function mapStateToProps({ sqlLab, common }) {var _sqlLab$queryEditors, _sqlLab$offline, _common$conf$SQLLAB_S, _common$conf$SQLLAB_S2;\n  return {\n    databases: sqlLab.databases,\n    queryEditors: (_sqlLab$queryEditors = sqlLab.queryEditors) != null ? _sqlLab$queryEditors : DEFAULT_PROPS.queryEditors,\n    queries: sqlLab.queries,\n    tabHistory: sqlLab.tabHistory,\n    defaultDbId: common.conf.SQLLAB_DEFAULT_DBID,\n    displayLimit: common.conf.DISPLAY_MAX_ROW,\n    offline: (_sqlLab$offline = sqlLab.offline) != null ? _sqlLab$offline : DEFAULT_PROPS.offline,\n    defaultQueryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    maxRow: common.conf.SQL_MAX_ROW,\n    saveQueryWarning: (_common$conf$SQLLAB_S = common.conf.SQLLAB_SAVE_WARNING_MESSAGE) != null ? _common$conf$SQLLAB_S : DEFAULT_PROPS.saveQueryWarning,\n    scheduleQueryWarning: (_common$conf$SQLLAB_S2 = common.conf.SQLLAB_SCHEDULE_WARNING_MESSAGE) != null ? _common$conf$SQLLAB_S2 :\n    DEFAULT_PROPS.scheduleQueryWarning\n  };\n}\nconst mapDispatchToProps = {\n  ...Actions\n};\nfunction mergeProps(stateProps, dispatchProps) {\n  return {\n    ...stateProps,\n    actions: dispatchProps\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(TabbedSqlEditors);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}