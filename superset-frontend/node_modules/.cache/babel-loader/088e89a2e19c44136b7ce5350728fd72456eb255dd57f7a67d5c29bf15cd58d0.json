{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useMemo } from 'react';\nimport { Select } from 'src/components';\nimport { css, styled, t, useTheme } from '@superset-ui/core';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { getColumnKeywords } from 'src/explore/controlUtils/getColumnKeywords';\nimport { Clauses, ExpressionTypes } from '../types';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledSelect = styled(Select)`\n  ${({ theme }) => `\n    width: ${theme.gridUnit * 30}px;\n    marginRight: ${theme.gridUnit}px;\n  `}\n`;\nexport default function AdhocFilterEditPopoverSqlTabContent({ adhocFilter, onChange, options, height }) {\n  const aceEditorRef = useRef(null);\n  const theme = useTheme();\n  useEffect(() => {var _aceEditorRef$current;\n    // @ts-ignore\n    aceEditorRef == null ? void 0 : (_aceEditorRef$current = aceEditorRef.current) == null ? void 0 : _aceEditorRef$current.editor.resize();\n  }, [adhocFilter]);\n  const onSqlExpressionClauseChange = (clause) => {\n    onChange(adhocFilter.duplicateWith({\n      clause,\n      expressionType: ExpressionTypes.Sql\n    }));\n  };\n  const onSqlExpressionChange = (sqlExpression) => {\n    onChange(adhocFilter.duplicateWith({\n      sqlExpression,\n      expressionType: ExpressionTypes.Sql\n    }));\n  };\n  const keywords = useMemo(() => sqlKeywords.concat(getColumnKeywords(options.filter((option) => typeof option === 'object' &&\n  option !== null &&\n  'column_name' in option &&\n  typeof option.column_name === 'string' &&\n  'type' in option))), [sqlKeywords]);\n  const selectOptions = useMemo(() => Object.values(Clauses).map((clause) => ({\n    label: clause,\n    value: clause\n  })), [Clauses]);\n  return _jsxs(\"span\", { children: [\n    _jsxs(\"div\", { className: \"filter-edit-clause-section\", children: [\n      _jsx(\"div\", { children:\n        _jsx(StyledSelect, { options: selectOptions, ariaLabel: t('Select column'), placeholder: t('choose WHERE or HAVING...'), value: adhocFilter.clause, onChange: onSqlExpressionClauseChange }) }\n      ),\n      _jsxs(\"span\", { className: \"filter-edit-clause-info\", children: [\n        _jsx(\"strong\", { children: \"WHERE\" }), \" \", t('Filters by columns'),\n        _jsx(\"br\", {}),\n        _jsx(\"strong\", { children: \"HAVING\" }), \" \", t('Filters by metrics')] }\n      )] }\n    ),\n    _jsx(\"div\", { css: css`\n          margin-top: ${theme.gridUnit * 4}px;\n        `, children:\n      _jsx(SQLEditor, { ref: aceEditorRef, keywords: keywords, height: `${height - 130}px`, onChange: onSqlExpressionChange, width: \"100%\", showGutter: false, value: adhocFilter.sqlExpression || adhocFilter.translateToSql(), editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, className: \"filter-sql-editor\", wrapEnabled: true }) }\n    )] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}