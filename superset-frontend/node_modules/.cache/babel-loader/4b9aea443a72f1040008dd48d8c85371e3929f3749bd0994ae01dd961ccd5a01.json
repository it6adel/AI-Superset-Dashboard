{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isAdhocMetricSimple, isAdhocMetricSQL, isSavedMetric, isSimpleAdhocFilter } from '@superset-ui/core';\n\nconst isControlValueCompatibleWithDatasource = (datasource, controlState, value) => {\n  // A datasource might have been deleted, in which case we can't validate\n  // only using the control state since it might have been hydrated with\n  // the wrong options or columns (empty arrays).\n  if (controlState.options && typeof value === 'string') {\n    if (!_isEmpty(controlState.options) &&\n    controlState.options.some((option) => Array.isArray(option) ?\n    option[0] === value :\n    option.column_name === value) ||\n    !_isEmpty(datasource == null ? void 0 : datasource.columns)) {\n      return datasource.columns.some((column) => column.column_name === value);\n    }\n  }\n  if (controlState.savedMetrics &&\n  isSavedMetric(value) && (\n  controlState.savedMetrics.some((savedMetric) => savedMetric.metric_name === value) ||\n  !_isEmpty(datasource == null ? void 0 : datasource.metrics))) {\n    return datasource.metrics.some((metric) => metric.metric_name === value);\n  }\n  if (controlState.columns && (\n  isAdhocMetricSimple(value) || isSimpleAdhocFilter(value)) && (\n  !_isEmpty(controlState.columns) &&\n  controlState.columns.some((column) => {var _value$column;return column.column_name === ((_value$column = value.column) == null ? void 0 : _value$column.column_name) ||\n    column.column_name === value.subject;}) ||\n  !_isEmpty(datasource == null ? void 0 : datasource.columns))) {\n    return datasource.columns.some((column) => {var _value$column2;return column.column_name === ((_value$column2 = value.column) == null ? void 0 : _value$column2.column_name) ||\n      column.column_name === value.subject;});\n  }\n  if (isAdhocMetricSQL(value)) {\n    Object.assign(value, { datasourceWarning: true });\n    return true;\n  }\n  return false;\n};\nexport const getControlValuesCompatibleWithDatasource = (datasource, controlState, value) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    const compatibleValues = value.filter((val) => isControlValueCompatibleWithDatasource(datasource, controlState, val));\n    return compatibleValues.length > 0 ?\n    compatibleValues :\n    controlState.default;\n  }\n  return isControlValueCompatibleWithDatasource(datasource, controlState, value) ?\n  value :\n  controlState.default;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}