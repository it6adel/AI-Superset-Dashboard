{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Fragment, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { styled, t } from '@superset-ui/core';\n\nimport { EmptyState } from 'src/components/EmptyState';\nimport EditableTitle from 'src/components/EditableTitle';\nimport { setEditMode } from 'src/dashboard/actions/dashboardState';\nimport DashboardComponent from 'src/dashboard/containers/DashboardComponent';\nimport AnchorLink from 'src/dashboard/components/AnchorLink';\nimport {\n  DragDroppable,\n  Droppable } from\n'src/dashboard/components/dnd/DragDroppable';\nimport { componentShape } from 'src/dashboard/util/propShapes';\nimport { TAB_TYPE } from 'src/dashboard/util/componentTypes';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nexport const RENDER_TAB = 'RENDER_TAB';\nexport const RENDER_TAB_CONTENT = 'RENDER_TAB_CONTENT';\n\nconst propTypes = {\n  dashboardId: PropTypes.number.isRequired,\n  id: PropTypes.string.isRequired,\n  parentId: PropTypes.string.isRequired,\n  component: componentShape.isRequired,\n  parentComponent: componentShape.isRequired,\n  index: PropTypes.number.isRequired,\n  depth: PropTypes.number.isRequired,\n  renderType: PropTypes.oneOf([RENDER_TAB, RENDER_TAB_CONTENT]).isRequired,\n  onDropOnTab: PropTypes.func,\n  onDropPositionChange: PropTypes.func,\n  onDragTab: PropTypes.func,\n  onHoverTab: PropTypes.func,\n  editMode: PropTypes.bool.isRequired,\n  embeddedMode: PropTypes.bool,\n\n  // grid related\n  availableColumnCount: PropTypes.number,\n  columnWidth: PropTypes.number,\n  onResizeStart: PropTypes.func,\n  onResize: PropTypes.func,\n  onResizeStop: PropTypes.func,\n\n  // redux\n  handleComponentDrop: PropTypes.func.isRequired,\n  updateComponents: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n  availableColumnCount: 0,\n  columnWidth: 0,\n  onDropOnTab() {},\n  onDropPositionChange() {},\n  onDragTab() {},\n  onHoverTab() {},\n  onResizeStart() {},\n  onResize() {},\n  onResizeStop() {}\n};\n\nconst TabTitleContainer = styled.div`\n  ${({ isHighlighted, theme: { gridUnit, colors } }) => `\n    padding: ${gridUnit}px ${gridUnit * 2}px;\n    margin: ${-gridUnit}px ${gridUnit * -2}px;\n    transition: box-shadow 0.2s ease-in-out;\n    ${\nisHighlighted && `box-shadow: 0 0 ${gridUnit}px ${colors.primary.light1};`}\n  `}\n`;\n\n\nconst TitleDropIndicator = styled.div`\n  &.drop-indicator {\n    position: absolute;\n    top: 0;\n    border-radius: 4px;\n  }\n`;\n\nconst renderDraggableContent = (dropProps) =>\ndropProps.dropIndicatorProps && _jsx(\"div\", { ...dropProps.dropIndicatorProps });\n\nconst Tab = (props) => {\n  const dispatch = useDispatch();\n  const canEdit = useSelector((state) => state.dashboardInfo.dash_edit_perm);\n  const handleChangeTab = useCallback(\n    ({ pathToTabIndex }) => {\n      props.setDirectPathToChild(pathToTabIndex);\n    },\n    [props.setDirectPathToChild]\n  );\n\n  const handleChangeText = useCallback(\n    (nextTabText) => {\n      const { updateComponents, component } = props;\n      if (nextTabText && nextTabText !== component.meta.text) {\n        updateComponents({\n          [component.id]: {\n            ...component,\n            meta: {\n              ...component.meta,\n              text: nextTabText\n            }\n          }\n        });\n      }\n    },\n    [props.updateComponents, props.component]\n  );\n\n  const handleDrop = useCallback(\n    (dropResult) => {\n      props.handleComponentDrop(dropResult);\n      props.onDropOnTab(dropResult);\n    },\n    [props.handleComponentDrop, props.onDropOnTab]\n  );\n\n  const handleHoverTab = useCallback(() => {\n    props.onHoverTab == null ? void 0 : props.onHoverTab();\n  }, [props.onHoverTab]);\n\n  const handleTopDropTargetDrop = useCallback(\n    (dropResult) => {\n      if (dropResult) {\n        props.handleComponentDrop({\n          ...dropResult,\n          destination: {\n            ...dropResult.destination,\n            // force appending as the first child if top drop target\n            index: 0\n          }\n        });\n      }\n    },\n    [props.handleComponentDrop]\n  );\n\n  const shouldDropToChild = useCallback((item) => item.type !== TAB_TYPE, []);\n\n  const renderTabContent = useCallback(() => {\n    const {\n      component: tabComponent,\n      depth,\n      availableColumnCount,\n      columnWidth,\n      onResizeStart,\n      onResize,\n      onResizeStop,\n      editMode,\n      isComponentVisible,\n      dashboardId\n    } = props;\n\n    const shouldDisplayEmptyState = tabComponent.children.length === 0;\n    return (\n      _jsxs(\"div\", { className: \"dashboard-component-tabs-content\", children: [\n\n        editMode &&\n        _jsx(Droppable, {\n          component: tabComponent,\n          orientation: \"column\",\n          index: 0,\n          depth: depth,\n          onDrop:\n          tabComponent.children.length === 0 ?\n          handleTopDropTargetDrop :\n          handleDrop,\n\n          editMode: true,\n          className: classNames({\n            'empty-droptarget': true,\n            'empty-droptarget--full': tabComponent.children.length === 0\n          }),\n          dropToChild: tabComponent.children.length === 0, children:\n\n          renderDraggableContent }\n        ),\n\n        shouldDisplayEmptyState &&\n        _jsx(EmptyState, {\n          title:\n          editMode ?\n          t('Drag and drop components to this tab') :\n          t('There are no components added to this tab'),\n\n          description:\n          canEdit && (\n          editMode ?\n          _jsxs(\"span\", { children: [\n            t('You can'), ' ',\n            _jsx(\"a\", {\n              href: `/chart/add?dashboard_id=${dashboardId}`,\n              rel: \"noopener noreferrer\",\n              target: \"_blank\", children:\n\n              t('create a new chart') }\n            ), ' ',\n            t('or use existing ones from the panel on the right')] }\n          ) :\n\n          _jsxs(\"span\", { children: [\n            t('You can add the components in the'), ' ',\n            _jsx(\"span\", {\n              role: \"button\",\n              tabIndex: 0,\n              onClick: () => dispatch(setEditMode(true)), children:\n\n              t('edit mode') }\n            )] }\n          )),\n\n\n          image: \"chart.svg\" }\n        ),\n\n        tabComponent.children.map((componentId, componentIndex) =>\n        _jsxs(Fragment, { children: [\n          _jsx(DashboardComponent, {\n            id: componentId,\n            parentId: tabComponent.id,\n            depth: depth // see isValidChild.js for why tabs don't increment child depth\n            , index: componentIndex,\n            onDrop: handleDrop,\n            onHover: handleHoverTab,\n            availableColumnCount: availableColumnCount,\n            columnWidth: columnWidth,\n            onResizeStart: onResizeStart,\n            onResize: onResize,\n            onResizeStop: onResizeStop,\n            isComponentVisible: isComponentVisible,\n            onChangeTab: handleChangeTab }\n          ),\n\n          editMode &&\n          _jsx(Droppable, {\n            component: tabComponent,\n            orientation: \"column\",\n            index: componentIndex + 1,\n            depth: depth,\n            onDrop: handleDrop,\n            editMode: true,\n            className: \"empty-droptarget\", children:\n\n            renderDraggableContent }\n          )] }, componentId\n\n        )\n        )] }\n      ));\n\n  }, [\n  dispatch,\n  props.component,\n  props.depth,\n  props.availableColumnCount,\n  props.columnWidth,\n  props.onResizeStart,\n  props.onResize,\n  props.onResizeStop,\n  props.editMode,\n  props.isComponentVisible,\n  props.dashboardId,\n  props.handleComponentDrop,\n  props.onDropOnTab,\n  props.setDirectPathToChild,\n  props.updateComponents,\n  handleHoverTab,\n  canEdit,\n  handleChangeTab,\n  handleChangeText,\n  handleDrop,\n  handleTopDropTargetDrop,\n  shouldDropToChild]\n  );\n\n  const renderTabChild = useCallback(\n    ({ dropIndicatorProps, dragSourceRef, draggingTabOnTab }) => {\n      const {\n        component,\n        index,\n        editMode,\n        isFocused,\n        isHighlighted,\n        dashboardId,\n        embeddedMode\n      } = props;\n      return (\n        _jsxs(TabTitleContainer, {\n          isHighlighted: isHighlighted,\n          className: \"dragdroppable-tab\",\n          ref: dragSourceRef, children: [\n\n          _jsx(EditableTitle, {\n            title: component.meta.text,\n            defaultTitle: component.meta.defaultText,\n            placeholder: component.meta.placeholder,\n            canEdit: editMode && isFocused,\n            onSaveTitle: handleChangeText,\n            showTooltip: false,\n            editing: editMode && isFocused }\n          ),\n          !editMode && !embeddedMode &&\n          _jsx(AnchorLink, {\n            id: component.id,\n            dashboardId: dashboardId,\n            placement: index >= 5 ? 'left' : 'right' }\n          ),\n\n\n          dropIndicatorProps && !draggingTabOnTab &&\n          _jsx(TitleDropIndicator, {\n            className: dropIndicatorProps.className }\n\n          )] }\n\n        ));\n\n    },\n    [\n    props.component,\n    props.index,\n    props.editMode,\n    props.isFocused,\n    props.isHighlighted,\n    props.dashboardId,\n    handleChangeText]\n\n  );\n\n  const renderTab = useCallback(() => {\n    const {\n      component,\n      parentComponent,\n      index,\n      depth,\n      editMode,\n      onDropPositionChange,\n      onDragTab\n    } = props;\n\n    return (\n      _jsx(DragDroppable, {\n        component: component,\n        parentComponent: parentComponent,\n        orientation: \"column\",\n        index: index,\n        depth: depth,\n        onDrop: handleDrop,\n        onHover: handleHoverTab,\n        onDropIndicatorChange: onDropPositionChange,\n        onDragTab: onDragTab,\n        editMode: editMode,\n        dropToChild: shouldDropToChild, children:\n\n        renderTabChild }\n      ));\n\n  }, [\n  props.component,\n  props.parentComponent,\n  props.index,\n  props.depth,\n  props.editMode,\n  handleDrop,\n  handleHoverTab,\n  shouldDropToChild,\n  renderTabChild]\n  );\n\n  return props.renderType === RENDER_TAB ? renderTab() : renderTabContent();\n};\n\nTab.propTypes = propTypes;\nTab.defaultProps = defaultProps;\n\nexport default /*#__PURE__*/memo(Tab);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}