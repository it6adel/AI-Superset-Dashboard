{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { utcFormat, timeFormat, timeFormatLocale } from 'd3-time-format';\nimport { isRequired } from '../../utils';\nimport TimeFormatter from '../TimeFormatter';\nimport { LOCAL_PREFIX } from '../TimeFormats';\nexport default function createD3TimeFormatter(config) {\n  const { description, formatString = isRequired('formatString'), label, locale, useLocalTime = false } = config;\n  const id = useLocalTime ? `${LOCAL_PREFIX}${formatString}` : formatString;\n  let formatFunc;\n  if (typeof locale === 'undefined') {\n    const format = useLocalTime ? timeFormat : utcFormat;\n    formatFunc = format(formatString);\n  } else\n  {\n    const localeObject = timeFormatLocale(locale);\n    formatFunc = useLocalTime ?\n    localeObject.format(formatString) :\n    localeObject.utcFormat(formatString);\n  }\n  return new TimeFormatter({\n    description,\n    formatFunc,\n    id,\n    label,\n    useLocalTime\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}