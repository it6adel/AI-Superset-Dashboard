{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Util for drag and drop related operations.\n */\n/**\n * Handle drop of flat antd tree.\n *\n * Functionality is roughly based on antd tree examples:\n * https://ant.design/components/tree/\n *\n * @param info The argument of the onDrop callback.\n * @param treeData The list of DataNodes on which the drop event occurred.\n * @returns A copy of the list with the new sorting.\n */\nexport const handleDrop = (info, treeData) => {\n  if (info === undefined) {\n    return [...treeData];\n  }\n  const dropKey = info.node.key;\n  const dragKey = info.dragNode.key;\n  const dropPos = info.node.pos.split('-');\n  const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n  const data = [...treeData];\n  const dragObjIndex = data.findIndex((d) => d.key === dragKey);\n  const dragObj = data[dragObjIndex];\n  data.splice(dragObjIndex, 1);\n  const dropObjIndex = data.findIndex((d) => d.key === dropKey);\n  if (dropPosition === -1) {\n    data.splice(dropObjIndex, 0, dragObj);\n  } else\n  {\n    data.splice(dropObjIndex + 1, 0, dragObj);\n  }\n  return data;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}