{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getExtensionsRegistry, styled, SupersetClient, useTheme, css, t } from '@superset-ui/core';\nimport { useState, useMemo, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { DatasetTypeLabel } from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/features/home/SubMenu';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\nimport { PAGE_SIZE, SORT_BY, PASSWORDS_NEEDED_MESSAGE, CONFIRM_OVERWRITE_MESSAGE } from 'src/features/datasets/constants';\nimport DuplicateDatasetModal from 'src/features/datasets/DuplicateDatasetModal';\nimport { useSelector } from 'react-redux';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatasetDeleteRelatedExtension = extensionsRegistry.get('dataset.delete.related');\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst Actions = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.grayscale.base};\n\n    .disabled {\n      svg,\n      i {\n        &:hover {\n          path {\n            fill: ${theme.colors.grayscale.light1};\n          }\n        }\n      }\n      color: ${theme.colors.grayscale.light1};\n      .antd5-menu-item:hover {\n        cursor: default;\n      }\n      &::after {\n        color: ${theme.colors.grayscale.light1};\n      }\n    }\n  `}\n`;\nconst DatasetList = ({ addDangerToast, addSuccessToast, user }) => {\n  const history = useHistory();\n  const theme = useTheme();\n  const { state: { loading, resourceCount: datasetCount, resourceCollection: datasets, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dataset', t('dataset'), addDangerToast);\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState(null);\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] = useState(null);\n  const [datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating] = useState(null);\n  const [importingDataset, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET = useSelector((state) => {var _state$common, _state$common$conf;return ((_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET) || false;});\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canDuplicate = hasPerm('can_duplicate');\n  const canExport = hasPerm('can_export');\n  const initialSort = SORT_BY;\n  const openDatasetEditModal = useCallback(({ id }) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${id}`\n    }).\n    then(({ json = {} }) => {\n      const addCertificationFields = json.result.columns.map((column) => {\n        const { certification: { details = '', certified_by = '' } = {} } = JSON.parse(column.extra || '{}') || {};\n        return {\n          ...column,\n          certification_details: details || '',\n          certified_by: certified_by || '',\n          is_certified: details || certified_by\n        };\n      });\n      // eslint-disable-next-line no-param-reassign\n      json.result.columns = [...addCertificationFields];\n      setDatasetCurrentlyEditing(json.result);\n    }).\n    catch(() => {\n      addDangerToast(t('An error occurred while fetching dataset related data'));\n    });\n  }, [addDangerToast]);\n  const openDatasetDeleteModal = (dataset) => SupersetClient.get({\n    endpoint: `/api/v1/dataset/${dataset.id}/related_objects`\n  }).\n  then(({ json = {} }) => {\n    setDatasetCurrentlyDeleting({\n      ...dataset,\n      charts: json.charts,\n      dashboards: json.dashboards\n    });\n  }).\n  catch(createErrorHandler((errMsg) => t('An error occurred while fetching dataset related data: %s', errMsg)));\n  const openDatasetDuplicateModal = (dataset) => {\n    setDatasetCurrentlyDuplicating(dataset);\n  };\n  const handleBulkDatasetExport = (datasetsToExport) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { kind } } }) => null,\n    accessor: 'kind_icon',\n    disableSortBy: true,\n    size: 'xs',\n    id: 'id'\n  },\n  {\n    Cell: ({ row: { original: { extra, table_name: datasetTitle, description, explore_url: exploreURL } } }) => {\n      let titleLink;\n      if (PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET) {\n        titleLink = _jsx(Link, { to: exploreURL, children:\n          datasetTitle }\n        );\n      } else\n      {\n        titleLink =\n        // exploreUrl can be a link to Explore or an external link\n        // in the first case use SPA routing, else use HTML anchor\n        _jsx(GenericLink, { to: exploreURL, children: datasetTitle });\n      }\n      try {\n        const parsedExtra = JSON.parse(extra);\n        return _jsxs(FlexRowContainer, { children: [\n          (parsedExtra == null ? void 0 : parsedExtra.certification) && _jsx(CertifiedBadge, { certifiedBy: parsedExtra.certification.certified_by, details: parsedExtra.certification.details, size: \"l\" }),\n          (parsedExtra == null ? void 0 : parsedExtra.warning_markdown) && _jsx(WarningIconWithTooltip, { warningMarkdown: parsedExtra.warning_markdown, size: \"l\" }),\n          titleLink,\n          description && _jsx(InfoTooltip, { tooltip: description })] }\n        );\n      }\n      catch {\n        return titleLink;\n      }\n    },\n    Header: t('Name'),\n    accessor: 'table_name'\n  },\n  {\n    Cell: ({ row: { original: { kind } } }) => _jsx(DatasetTypeLabel, { datasetType: kind }),\n    Header: t('Type'),\n    accessor: 'kind',\n    disableSortBy: true,\n    size: 'md'\n  },\n  {\n    Header: t('Database'),\n    accessor: 'database.database_name',\n    size: 'lg'\n  },\n  {\n    Header: t('Schema'),\n    accessor: 'schema',\n    size: 'lg'\n  },\n  {\n    accessor: 'database',\n    disableSortBy: true,\n    hidden: true\n  },\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => _jsx(FacePile, { users: owners }),\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true,\n    size: 'lg'\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => _jsx(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    accessor: 'sql',\n    hidden: true,\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      // Verify owner or isAdmin\n      const allowEdit = original.owners.map((o) => o.id).includes(user.userId) ||\n      isUserAdmin(user);\n      const handleEdit = () => openDatasetEditModal(original);\n      const handleDelete = () => openDatasetDeleteModal(original);\n      const handleExport = () => handleBulkDatasetExport([original]);\n      const handleDuplicate = () => openDatasetDuplicateModal(original);\n      if (!canEdit && !canDelete && !canExport && !canDuplicate) {\n        return null;\n      }\n      return _jsxs(Actions, { className: \"actions\", children: [\n        canDelete && _jsx(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDelete, children:\n            _jsx(Icons.DeleteOutlined, { iconSize: \"l\" }) }\n          ) }\n        ),\n        canExport && _jsx(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport, children:\n            _jsx(Icons.UploadOutlined, { iconSize: \"l\" }) }\n          ) }\n        ),\n        canEdit && _jsx(Tooltip, { id: \"edit-action-tooltip\", title: allowEdit ?\n          t('Edit') :\n          t('You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.'), placement: \"bottomRight\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: allowEdit ? 'action-button' : 'disabled', onClick: allowEdit ? handleEdit : undefined, children:\n            _jsx(Icons.EditOutlined, { iconSize: \"l\" }) }\n          ) }\n        ),\n        canDuplicate && original.kind === 'virtual' && _jsx(Tooltip, { id: \"duplicate-action-tooltip\", title: t('Duplicate'), placement: \"bottom\", children:\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDuplicate, children:\n            _jsx(Icons.CopyOutlined, {}) }\n          ) }\n        )] }\n      );\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete && !canDuplicate,\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [canEdit, canDelete, canExport, openDatasetEditModal, canDuplicate, user]);\n  const filterTypes = useMemo(() => [\n  {\n    Header: t('Name'),\n    key: 'search',\n    id: 'table_name',\n    input: 'search',\n    operator: FilterOperator.Contains\n  },\n  {\n    Header: t('Type'),\n    key: 'sql',\n    id: 'sql',\n    input: 'select',\n    operator: FilterOperator.DatasetIsNullOrEmpty,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: t('Virtual'), value: false },\n    { label: t('Physical'), value: true }]\n\n  },\n  {\n    Header: t('Database'),\n    key: 'database',\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'database', createErrorHandler((errMsg) => t('An error occurred while fetching datasets: %s', errMsg))),\n    paginate: true\n  },\n  {\n    Header: t('Schema'),\n    key: 'schema',\n    id: 'schema',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('dataset', 'schema', createErrorHandler((errMsg) => t('An error occurred while fetching schema values: %s', errMsg))),\n    paginate: true\n  },\n  {\n    Header: t('Owner'),\n    key: 'owner',\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.RelationManyMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'owners', createErrorHandler((errMsg) => t('An error occurred while fetching dataset owner values: %s', errMsg)), user),\n    paginate: true\n  },\n  {\n    Header: t('Certified'),\n    key: 'certified',\n    id: 'id',\n    urlDisplay: 'certified',\n    input: 'select',\n    operator: FilterOperator.DatasetIsCertified,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }]\n\n  },\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('dataset', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  [user]);\n  const menuData = {\n    activeChild: 'Datasets',\n    name: t('Datasets')\n  };\n  const buttonArr = [];\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary'\n    });\n  }\n  if (canCreate) {\n    buttonArr.push({\n      name: _jsxs(_Fragment, { children: [\n        _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n              vertical-align: text-top;\n            ` }),\n        t('Dataset')] }\n      ),\n      onClick: () => {\n        history.push('/dataset/add/');\n      },\n      buttonStyle: 'primary'\n    });\n    buttonArr.push({\n      name: _jsx(Tooltip, { id: \"import-tooltip\", title: t('Import datasets'), placement: \"bottomRight\", children:\n        _jsx(Icons.DownloadOutlined, { iconColor: theme.colors.primary.dark1 }) }\n      ),\n      buttonStyle: 'link',\n      onClick: openDatasetImportModal\n    });\n  }\n  menuData.buttons = buttonArr;\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n  const closeDatasetDuplicateModal = () => {\n    setDatasetCurrentlyDuplicating(null);\n  };\n  const handleDatasetDelete = ({ id, table_name: tableName }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`\n    }).then(() => {\n      refreshData();\n      setDatasetCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', tableName));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', tableName, errMsg))));\n  };\n  const handleBulkDatasetDelete = (datasetsToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(datasetsToDelete.map(({ id }) => id))}`\n    }).then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected datasets: %s', errMsg))));\n  };\n  const handleDatasetDuplicate = (newDatasetName) => {\n    if (datasetCurrentlyDuplicating === null) {\n      addDangerToast(t('There was an issue duplicating the dataset.'));\n    }\n    SupersetClient.post({\n      endpoint: `/api/v1/dataset/duplicate`,\n      jsonPayload: {\n        base_model_id: datasetCurrentlyDuplicating == null ? void 0 : datasetCurrentlyDuplicating.id,\n        table_name: newDatasetName\n      }\n    }).then(() => {\n      setDatasetCurrentlyDuplicating(null);\n      refreshData();\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue duplicating the selected datasets: %s', errMsg))));\n  };\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { ...menuData }),\n    datasetCurrentlyDeleting && _jsx(DeleteModal, { description: _jsxs(_Fragment, { children: [\n        _jsxs(\"p\", { children: [\n          t('The dataset'),\n          _jsxs(\"b\", { children: [\" \", datasetCurrentlyDeleting.table_name, \" \"] }),\n          t('is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.', datasetCurrentlyDeleting.charts.count, datasetCurrentlyDeleting.dashboards.count)] }\n        ),\n        datasetCurrentlyDeleting.dashboards.count >= 1 && _jsxs(_Fragment, { children: [\n          _jsx(\"h4\", { children: t('Affected Dashboards') }),\n          _jsxs(\"ul\", { children: [\n            datasetCurrentlyDeleting.dashboards.result.\n            slice(0, 10).\n            map((result, index) => _jsx(\"li\", { children:\n              _jsx(\"a\", { href: `/superset/dashboard/${result.id}`, target: \"_atRiskItem\", children:\n                result.title }\n              ) }, result.id\n            )),\n            datasetCurrentlyDeleting.dashboards.result.length > 10 && _jsx(\"li\", { children:\n              t('... and %s others', datasetCurrentlyDeleting.dashboards.result.length -\n              10) }\n            )] }\n          )] }\n        ),\n        datasetCurrentlyDeleting.charts.count >= 1 && _jsxs(_Fragment, { children: [\n          _jsx(\"h4\", { children: t('Affected Charts') }),\n          _jsxs(\"ul\", { children: [\n            datasetCurrentlyDeleting.charts.result.slice(0, 10).map((result, index) => _jsx(\"li\", { children:\n              _jsx(\"a\", { href: `/explore/?slice_id=${result.id}`, target: \"_atRiskItem\", children:\n                result.slice_name }\n              ) }, result.id\n            )),\n            datasetCurrentlyDeleting.charts.result.length > 10 && _jsx(\"li\", { children:\n              t('... and %s others', datasetCurrentlyDeleting.charts.result.length - 10) }\n            )] }\n          )] }\n        ),\n        DatasetDeleteRelatedExtension && _jsx(DatasetDeleteRelatedExtension, { dataset: datasetCurrentlyDeleting })] }\n      ), onConfirm: () => {\n        if (datasetCurrentlyDeleting) {\n          handleDatasetDelete(datasetCurrentlyDeleting);\n        }\n      }, onHide: closeDatasetDeleteModal, open: true, title: t('Delete Dataset?') }),\n    datasetCurrentlyEditing && _jsx(DatasourceModal, { datasource: datasetCurrentlyEditing, onDatasourceSave: refreshData, onHide: closeDatasetEditModal, show: true }),\n    _jsx(DuplicateDatasetModal, { dataset: datasetCurrentlyDuplicating, onHide: closeDatasetDuplicateModal, onDuplicate: handleDatasetDuplicate }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected datasets?'), onConfirm: handleBulkDatasetDelete, children:\n      (confirmDelete) => {\n        const bulkActions = [];\n        if (canDelete) {\n          bulkActions.push({\n            key: 'delete',\n            name: t('Delete'),\n            onSelect: confirmDelete,\n            type: 'danger'\n          });\n        }\n        if (canExport) {\n          bulkActions.push({\n            key: 'export',\n            name: t('Export'),\n            type: 'primary',\n            onSelect: handleBulkDatasetExport\n          });\n        }\n        return _jsx(ListView, { className: \"dataset-list-view\", columns: columns, data: datasets, count: datasetCount, pageSize: PAGE_SIZE, fetchData: fetchData, filters: filterTypes, loading: loading, initialSort: initialSort, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: refreshData, renderBulkSelectCopy: (selected) => {\n            const { virtualCount, physicalCount } = selected.reduce((acc, e) => {\n              if (e.original.kind === 'physical')\n              acc.physicalCount += 1;else\n              if (e.original.kind === 'virtual') {\n                acc.virtualCount += 1;\n              }\n              return acc;\n            }, { virtualCount: 0, physicalCount: 0 });\n            if (!selected.length) {\n              return t('0 Selected');\n            }\n            if (virtualCount && !physicalCount) {\n              return t('%s Selected (Virtual)', selected.length, virtualCount);\n            }\n            if (physicalCount && !virtualCount) {\n              return t('%s Selected (Physical)', selected.length, physicalCount);\n            }\n            return t('%s Selected (%s Physical, %s Virtual)', selected.length, physicalCount, virtualCount);\n          } });\n      } }\n    ),\n\n    _jsx(ImportModelsModal, { resourceName: \"dataset\", resourceLabel: t('dataset'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDatasetImport, show: importingDataset, onHide: closeDatasetImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n    preparingExport && _jsx(Loading, {})] }\n  );\n};\nexport default withToasts(DatasetList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}