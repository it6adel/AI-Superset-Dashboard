{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { t, styled, useTheme } from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst TitleLabel = styled.span`\n  display: inline-block;\n  padding: 2px 0;\n`;\nconst StyledInput = styled(Input)`\n  border-radius: ${({ theme }) => theme.borderRadius};\n  height: 26px;\n  padding-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n`;\nconst AdhocMetricEditPopoverTitle = ({ title, isEditDisabled, onChange }) => {\n  const theme = useTheme();\n  const [isHovered, setIsHovered] = useState(false);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const defaultLabel = t('My metric');\n  const handleMouseOver = useCallback(() => setIsHovered(true), []);\n  const handleMouseOut = useCallback(() => setIsHovered(false), []);\n  const handleClick = useCallback(() => setIsEditMode(true), []);\n  const handleBlur = useCallback(() => setIsEditMode(false), []);\n  const handleKeyPress = useCallback((ev) => {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }, [handleBlur]);\n  const handleInputBlur = useCallback((e) => {\n    if (e.target.value === '') {\n      onChange(e);\n    }\n    handleBlur();\n  }, [onChange, handleBlur]);\n  if (isEditDisabled) {\n    return _jsx(\"span\", { children: (title == null ? void 0 : title.label) || defaultLabel });\n  }\n  if (isEditMode) {\n    return _jsx(StyledInput, { type: \"text\", placeholder: title == null ? void 0 : title.label, value: title != null && title.hasCustomLabel ? title.label : '', autoFocus: true, onChange: onChange, onBlur: handleInputBlur, onKeyPress: handleKeyPress });\n  }\n  return _jsx(Tooltip, { placement: \"top\", title: t('Click to edit label'), children:\n    _jsxs(\"span\", { className: \"AdhocMetricEditPopoverTitle inline-editable\", onMouseOver: handleMouseOver, onMouseOut: handleMouseOut, onClick: handleClick, onBlur: handleBlur, role: \"button\", tabIndex: 0, children: [\n      _jsx(TitleLabel, { children: (title == null ? void 0 : title.label) || defaultLabel }), \"\\xA0\",\n\n      _jsx(Icons.EditOutlined, { iconColor: isHovered ? theme.colors.primary.base : theme.colors.grayscale.base, iconSize: \"m\" })] }\n    ) }\n  );\n};\nexport default AdhocMetricEditPopoverTitle;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}