{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { css, t, useTheme } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport MetadataBar from 'src/components/MetadataBar';\nimport { MetadataType } from 'src/components/MetadataBar/ContentType';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const useDatasetMetadataBar = ({ dataset: datasetProps, datasetId }) => {\n  const theme = useTheme();\n  const [result, setResult] = useState();\n  const [status, setStatus] = useState(datasetProps ? ResourceStatus.Complete : ResourceStatus.Loading);\n  useEffect(() => {\n    if (!datasetProps && datasetId) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}`\n      }).\n      then(({ json: { result } }) => {\n        setResult(result);\n        setStatus(ResourceStatus.Complete);\n      }).\n      catch(() => {\n        setStatus(ResourceStatus.Error);\n      });\n    }\n  }, [datasetId, datasetProps]);\n  const metadataBar = useMemo(() => {\n    const items = [];\n    const dataset = datasetProps || result;\n    if (dataset) {var _created_by$first_nam, _created_by$last_name;\n      const { changed_on_humanized, created_on_humanized, description, table_name, changed_by, created_by, owners } = dataset;\n      const notAvailable = t('Not available');\n      const createdBy = `${(_created_by$first_nam = created_by == null ? void 0 : created_by.first_name) != null ? _created_by$first_nam : ''} ${(_created_by$last_name = created_by == null ? void 0 : created_by.last_name) != null ? _created_by$last_name : ''}`.trim() || notAvailable;\n      const modifiedBy = changed_by ?\n      `${changed_by.first_name} ${changed_by.last_name}` :\n      notAvailable;\n      const formattedOwners = (owners == null ? void 0 : owners.length) > 0 ?\n      owners.map((owner) => `${owner.first_name} ${owner.last_name}`) :\n      [notAvailable];\n      items.push({\n        type: MetadataType.Table,\n        title: table_name\n      });\n      items.push({\n        type: MetadataType.LastModified,\n        value: changed_on_humanized,\n        modifiedBy\n      });\n      items.push({\n        type: MetadataType.Owner,\n        createdBy,\n        owners: formattedOwners,\n        createdOn: created_on_humanized\n      });\n      if (description) {\n        items.push({\n          type: MetadataType.Description,\n          value: description\n        });\n      }\n    }\n    return _jsxs(\"div\", { css: css`\n          display: flex;\n          margin-bottom: ${theme.gridUnit * 4}px;\n        `, children: [\n      status === ResourceStatus.Complete && _jsx(MetadataBar, { items: items, tooltipPlacement: \"bottom\" }),\n      status === ResourceStatus.Error && _jsx(Alert, { type: \"error\", message: t('There was an error loading the dataset metadata') })] }\n    );\n  }, [datasetProps, result, status, theme.gridUnit]);\n  return {\n    metadataBar,\n    status\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}