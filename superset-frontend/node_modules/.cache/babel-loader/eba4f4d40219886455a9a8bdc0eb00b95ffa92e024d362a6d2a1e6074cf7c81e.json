{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isSafari } from './common';\n// Use the new Clipboard API if the browser supports it\nconst copyTextWithClipboardApi = async (getText) => {\n  // Safari (WebKit) does not support delayed generation of clipboard.\n  // This means that writing to the clipboard, from the moment the user\n  // interacts with the app, must be instantaneous.\n  // However, neither writeText nor write accepts a Promise, so\n  // we need to create a ClipboardItem that accepts said Promise to\n  // delay the text generation, as needed.\n  // Source: https://bugs.webkit.org/show_bug.cgi?id=222262P\n  if (isSafari()) {\n    try {\n      const clipboardItem = new ClipboardItem({\n        'text/plain': getText()\n      });\n      await navigator.clipboard.write([clipboardItem]);\n    }\n    catch {\n      // Fallback to default clipboard API implementation\n      const text = await getText();\n      await navigator.clipboard.writeText(text);\n    }\n  } else\n  {\n    // For Blink, the above method won't work, but we can use the\n    // default (intended) API, since the delayed generation of the\n    // clipboard is now supported.\n    // Source: https://bugs.chromium.org/p/chromium/issues/detail?id=1014310\n    const text = await getText();\n    await navigator.clipboard.writeText(text);\n  }\n};\nconst copyTextToClipboard = (getText) => copyTextWithClipboardApi(getText)\n// If the Clipboard API is not supported, fallback to the older method.\n.catch(() => getText().then((text) => new Promise((resolve, reject) => {\n  const selection = document.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n    const range = document.createRange();\n    const span = document.createElement('span');\n    span.textContent = text;\n    span.style.position = 'fixed';\n    span.style.top = '0';\n    span.style.clip = 'rect(0, 0, 0, 0)';\n    span.style.whiteSpace = 'pre';\n    document.body.appendChild(span);\n    range.selectNode(span);\n    selection.addRange(range);\n    try {\n      if (!document.execCommand('copy')) {\n        reject();\n      }\n    }\n    catch (err) {\n      reject();\n    }\n    document.body.removeChild(span);\n    if (selection.removeRange) {\n      selection.removeRange(range);\n    } else\n    {\n      selection.removeAllRanges();\n    }\n  }\n  resolve();\n})));\nexport default copyTextToClipboard;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}