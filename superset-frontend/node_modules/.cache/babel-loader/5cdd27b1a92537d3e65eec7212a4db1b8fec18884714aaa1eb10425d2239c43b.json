{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport cloudLayout from 'd3-cloud';\nimport { createEncoderFactory } from 'encodable';\nimport { withTheme, seed, CategoricalColorNamespace } from '@superset-ui/core';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst seedRandom = seed('superset-ui');\nexport const ROTATION = {\n  flat: () => 0,\n  // this calculates a random rotation between -90 and 90 degrees.\n  random: () => Math.floor(seedRandom() * 6 - 3) * 30,\n  square: () => Math.floor(seedRandom() * 2) * 90\n};\nconst defaultProps = {\n  encoding: {},\n  rotation: 'flat'\n};\nconst SCALE_FACTOR_STEP = 0.5;\nconst MAX_SCALE_FACTOR = 3;\n// Percentage of top results that will always be displayed.\n// Needed to avoid clutter when shrinking a chart with many records.\nconst TOP_RESULTS_PERCENTAGE = 0.1;\nclass WordCloud extends PureComponent {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props); // Cannot name it isMounted because of conflict\n    // with React's component function name\n    this.isComponentMounted = false;this.wordCloudEncoderFactory = createEncoderFactory({ channelTypes: { color: 'Color', fontFamily: 'Category', fontSize: 'Numeric', fontWeight: 'Category', text: 'Text' }, defaultEncoding: { color: { value: this.props.theme.colors.grayscale.dark2 }, fontFamily: { value: this.props.theme.typography.families.sansSerif }, fontSize: { value: 20 }, fontWeight: { value: 'bold' }, text: { value: '' } } });this.createEncoder = (encoding) => {const selector = this.wordCloudEncoderFactory.createSelector(); // @ts-ignore\n      return selector(encoding);};this.state = { words: [], scaleFactor: 1\n    };\n    this.setWords = this.setWords.bind(this);\n  }\n  componentDidMount() {\n    this.isComponentMounted = true;\n    this.update();\n  }\n  componentDidUpdate(prevProps) {\n    const { data, encoding, width, height, rotation } = this.props;\n    if (!_isEqual(prevProps.data, data) ||\n    !_isEqual(prevProps.encoding, encoding) ||\n    prevProps.width !== width ||\n    prevProps.height !== height ||\n    prevProps.rotation !== rotation) {\n      this.update();\n    }\n  }\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n  setWords(words) {\n    if (this.isComponentMounted) {\n      this.setState({ words });\n    }\n  }\n  update() {\n    const { data, encoding } = this.props;\n    const encoder = this.createEncoder(encoding);\n    encoder.setDomainFromDataset(data);\n    const sortedData = [...data].sort((a, b) => encoder.channels.fontSize.encodeDatum(b, 0) -\n    encoder.channels.fontSize.encodeDatum(a, 0));\n    const topResultsCount = Math.max(sortedData.length * TOP_RESULTS_PERCENTAGE, 10);\n    const topResults = sortedData.slice(0, topResultsCount);\n    // Ensure top results are always included in the final word cloud by scaling chart down if needed\n    this.generateCloud(encoder, 1, (words) => topResults.every((d) => words.find(({ text }) => encoder.channels.text.getValueFromDatum(d) === text)));\n  }\n  generateCloud(encoder, scaleFactor, isValid) {\n    const { data, width, height, rotation } = this.props;\n    cloudLayout().\n    size([width * scaleFactor, height * scaleFactor])\n    // clone the data because cloudLayout mutates input\n    .words(data.map((d) => ({ ...d }))).\n    padding(5).\n    rotate(ROTATION[rotation] || ROTATION.flat).\n    text((d) => encoder.channels.text.getValueFromDatum(d)).\n    font((d) => encoder.channels.fontFamily.encodeDatum(d, this.props.theme.typography.families.sansSerif)).\n    fontWeight((d) => encoder.channels.fontWeight.encodeDatum(d, 'normal')).\n    fontSize((d) => encoder.channels.fontSize.encodeDatum(d, 0)).\n    on('end', (words) => {\n      if (isValid(words) || scaleFactor > MAX_SCALE_FACTOR) {\n        if (this.isComponentMounted) {\n          this.setState({ words, scaleFactor });\n        }\n      } else\n      {\n        this.generateCloud(encoder, scaleFactor + SCALE_FACTOR_STEP, isValid);\n      }\n    }).\n    start();\n  }\n  render() {\n    const { scaleFactor } = this.state;\n    const { width, height, encoding, sliceId, colorScheme } = this.props;\n    const { words } = this.state;\n    // @ts-ignore\n    const encoder = this.createEncoder(encoding);\n    encoder.channels.color.setDomainFromDataset(words);\n    const { getValueFromDatum } = encoder.channels.color;\n    const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n    const viewBoxWidth = width * scaleFactor;\n    const viewBoxHeight = height * scaleFactor;\n    return _jsx(\"svg\", { width: width, height: height, viewBox: `-${viewBoxWidth / 2} -${viewBoxHeight / 2} ${viewBoxWidth} ${viewBoxHeight}`, children:\n      _jsx(\"g\", { children:\n        words.map((w) => _jsx(\"text\", { fontSize: `${w.size}px`, fontWeight: w.weight, fontFamily: w.font, fill: colorFn(getValueFromDatum(w), sliceId), textAnchor: \"middle\", transform: `translate(${w.x}, ${w.y}) rotate(${w.rotate})`, children:\n          w.text }, w.text\n        )) }\n      ) }\n    );\n  }\n}WordCloud.defaultProps = defaultProps;\nexport default withTheme(WordCloud);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}