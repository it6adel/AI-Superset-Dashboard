{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo } from 'react';\nimport cx from 'classnames';\nimport { styled } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const Table = styled.table`\n  ${({ theme }) => `\n    background-color: ${theme.colors.grayscale.light5};\n    border-collapse: separate;\n    border-radius: ${theme.borderRadius}px;\n\n    thead > tr > th {\n      border: 0;\n    }\n\n    tbody {\n      tr:first-of-type > td {\n        border-top: 0;\n      }\n    }\n    th {\n      background: ${theme.colors.grayscale.light5};\n      position: sticky;\n      top: 0;\n\n      &:first-of-type {\n        padding-left: ${theme.gridUnit * 4}px;\n      }\n\n      &.xs {\n        min-width: 25px;\n      }\n      &.sm {\n        min-width: 50px;\n      }\n      &.md {\n        min-width: 75px;\n      }\n      &.lg {\n        min-width: 100px;\n      }\n      &.xl {\n        min-width: 150px;\n      }\n      &.xxl {\n        min-width: 200px;\n      }\n\n      span {\n        white-space: nowrap;\n        display: flex;\n        align-items: center;\n        line-height: 2;\n      }\n\n      svg {\n        display: inline-block;\n        position: relative;\n      }\n    }\n\n    td {\n      &.xs {\n        width: 25px;\n      }\n      &.sm {\n        width: 50px;\n      }\n      &.md {\n        width: 75px;\n      }\n      &.lg {\n        width: 100px;\n      }\n      &.xl {\n        width: 150px;\n      }\n      &.xxl {\n        width: 200px;\n      }\n    }\n\n    .table-cell-loader {\n      position: relative;\n\n      .loading-bar {\n        background-color: ${theme.colors.secondary.light4};\n        border-radius: 7px;\n\n        span {\n          visibility: hidden;\n        }\n      }\n\n      .empty-loading-bar {\n        display: inline-block;\n        width: 100%;\n        height: 1.2em;\n      }\n    }\n\n    .actions {\n      white-space: nowrap;\n      min-width: 100px;\n\n      svg,\n      i {\n        margin-right: 8px;\n\n        &:hover {\n          path {\n            fill: ${theme.colors.primary.base};\n          }\n        }\n      }\n    }\n\n    .table-row {\n      .actions {\n        opacity: 0;\n        font-size: ${theme.typography.sizes.xl}px;\n        display: flex;\n      }\n\n      &:hover {\n        background-color: ${theme.colors.secondary.light5};\n\n        .actions {\n          opacity: 1;\n          transition: opacity ease-in ${theme.transitionTiming}s;\n        }\n      }\n    }\n\n    .table-row-selected {\n      background-color: ${theme.colors.secondary.light4};\n\n      &:hover {\n        background-color: ${theme.colors.secondary.light4};\n      }\n    }\n\n    .table-cell {\n      font-feature-settings: 'tnum' 1;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      max-width: 320px;\n      line-height: 1;\n      vertical-align: middle;\n      &:first-of-type {\n        padding-left: ${theme.gridUnit * 4}px;\n      }\n      &__wrap {\n        white-space: normal;\n      }\n      &__nowrap {\n        white-space: nowrap;\n      }\n    }\n\n    @keyframes loading-shimmer {\n      40% {\n        background-position: 100% 0;\n      }\n\n      100% {\n        background-position: 100% 0;\n      }\n    }\n  `}\n`;\nTable.displayName = 'table';\nexport default /*#__PURE__*/memo(({ getTableProps, getTableBodyProps, prepareRow, headerGroups, columns, rows, loading, highlightRowId, columnsForWrapText }) => _jsxs(Table, { ...getTableProps(), className: \"table table-hover\", children: [\n  _jsx(\"thead\", { children:\n    headerGroups.map((headerGroup) => _jsx(\"tr\", { ...headerGroup.getHeaderGroupProps(), children:\n      headerGroup.headers.map((column) => {\n        let sortIcon = _jsx(Icons.Sort, {});\n        if (column.isSorted && column.isSortedDesc) {\n          sortIcon = _jsx(Icons.SortDesc, {});\n        } else\n        if (column.isSorted && !column.isSortedDesc) {\n          sortIcon = _jsx(Icons.SortAsc, {});\n        }\n        return column.hidden ? null : _jsx(\"th\", { ...column.getHeaderProps(column.canSort ? column.getSortByToggleProps() : {}), className: cx({\n            [column.size || '']: column.size\n          }), children:\n          _jsxs(\"span\", { children: [\n            column.render('Header'),\n            column.canSort && sortIcon] }\n          ) }\n        );\n      }) }\n    )) }\n  ),\n  _jsxs(\"tbody\", { ...getTableBodyProps(), children: [\n    loading &&\n    rows.length === 0 &&\n    [...new Array(12)].map((_, i) => _jsx(\"tr\", { children:\n      columns.map((column, i2) => {\n        if (column.hidden)\n        return null;\n        return _jsx(\"td\", { className: cx('table-cell', {\n            'table-cell-loader': loading\n          }), children:\n          _jsx(\"span\", { className: \"loading-bar empty-loading-bar\", role: \"progressbar\", \"aria-label\": \"loading\" }) }, i2\n        );\n      }) }, i\n    )),\n    rows.length > 0 &&\n    rows.map((row) => {\n      prepareRow(row);\n      // @ts-ignore\n      const rowId = row.original.id;\n      return _jsx(\"tr\", { ...row.getRowProps(), className: cx('table-row', {\n          'table-row-selected': row.isSelected ||\n          typeof rowId !== 'undefined' && rowId === highlightRowId\n        }), children:\n        row.cells.map((cell) => {\n          if (cell.column.hidden)\n          return null;\n          const columnCellProps = cell.column.cellProps || {};\n          const isWrapText = columnsForWrapText == null ? void 0 : columnsForWrapText.includes(cell.column.Header);\n          return _jsx(\"td\", { className: cx(`table-cell table-cell__${isWrapText ? 'wrap' : 'nowrap'}`, {\n              'table-cell-loader': loading,\n              [cell.column.size || '']: cell.column.size\n            }), ...cell.getCellProps(), ...columnCellProps, children:\n            _jsx(\"span\", { className: cx({ 'loading-bar': loading }), role: loading ? 'progressbar' : undefined, children:\n              _jsx(\"span\", { children: cell.render('Cell') }) }\n            ) }\n          );\n        }) }\n      );\n    })] }\n  )] }\n));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}