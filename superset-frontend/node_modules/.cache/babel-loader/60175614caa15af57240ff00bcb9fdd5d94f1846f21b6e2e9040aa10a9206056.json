{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport Alert from 'src/components/Alert';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Pagination from 'src/components/Pagination';\nimport TableCollection from 'src/components/TableCollection';\nimport BulkTagModal from 'src/features/tags/BulkTagModal';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport { ListViewError, useListViewState } from './utils';\nimport { EmptyState } from '../EmptyState';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${({ theme }) => theme.gridUnit * 4}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n      & .controls {\n        display: flex;\n        flex-wrap: wrap;\n        column-gap: ${({ theme }) => theme.gridUnit * 6}px;\n        row-gap: ${({ theme }) => theme.gridUnit * 4}px;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .antd5-empty {\n      .antd5-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\nconst BulkSelectWrapper = styled(Alert)`\n  ${({ theme }) => `\n    border-radius: 0;\n    margin-bottom: 0;\n    color: ${theme.colors.grayscale.dark1};\n    background-color: ${theme.colors.primary.light4};\n\n    .selectedCopy {\n      display: inline-block;\n      padding: ${theme.gridUnit * 2}px 0;\n    }\n\n    .deselect-all, .tag-btn {\n      color: ${theme.colors.primary.base};\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .divider {\n      margin: ${`${-theme.gridUnit * 2}px 0 ${-theme.gridUnit * 2}px ${theme.gridUnit * 4}px`};\n      width: 1px;\n      height: ${theme.gridUnit * 8}px;\n      box-shadow: inset -1px 0px 0px ${theme.colors.grayscale.light2};\n      display: inline-flex;\n      vertical-align: middle;\n      position: relative;\n    }\n\n    .ant-alert-close-icon {\n      margin-top: ${theme.gridUnit * 1.5}px;\n    }\n  `}\n`;\nconst bulkSelectColumnConfig = {\n  Cell: ({ row }) => _jsx(IndeterminateCheckbox, { ...row.getToggleRowSelectedProps(), id: row.id }),\n  Header: ({ getToggleAllRowsSelectedProps }) => _jsx(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps(), id: \"header-toggle-all\" }),\n  id: 'selection',\n  size: 'sm'\n};\nconst ViewModeContainer = styled.div`\n  padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n  margin-top: ${({ theme }) => theme.gridUnit * 5 + 1}px;\n  white-space: nowrap;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${({ theme }) => theme.gridUnit / 2}px;\n    padding: ${({ theme }) => theme.gridUnit}px;\n    padding-bottom: ${({ theme }) => theme.gridUnit * 0.5}px;\n\n    &:first-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  .active {\n    background-color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      color: ${({ theme }) => theme.colors.grayscale.light5};\n    }\n  }\n`;\nconst EmptyWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 40}px 0;\n\n  &.table {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n  }\n`;\nconst ViewModeToggle = ({ mode, setMode }) => _jsxs(ViewModeContainer, { children: [\n  _jsx(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n      e.currentTarget.blur();\n      setMode('card');\n    }, className: cx('toggle-button', { active: mode === 'card' }), children:\n    _jsx(Icons.AppstoreOutlined, { iconSize: \"xl\" }) }\n  ),\n  _jsx(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n      e.currentTarget.blur();\n      setMode('table');\n    }, className: cx('toggle-button', { active: mode === 'table' }), children:\n    _jsx(Icons.UnorderedListOutlined, { iconSize: \"xl\" }) }\n  )] }\n);\nfunction ListView({ columns, data, count, pageSize: initialPageSize, fetchData, refreshData, loading, initialSort = [], className = '', filters = [], bulkActions = [], bulkSelectEnabled = false, disableBulkSelect = () => {}, renderBulkSelectCopy = (selected) => t('%s Selected', selected.length), renderCard, showThumbnails, cardSortSelectOptions, defaultViewMode = 'card', highlightRowId, emptyState, columnsForWrapText, enableBulkTag = false, bulkTagResourceName, addSuccessToast, addDangerToast }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, setSortBy, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, sortBy, viewMode }, query } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode\n  });\n  const allowBulkTagActions = bulkTagResourceName && enableBulkTag;\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = columns.reduce((acc, col) => ({ ...acc, [col.id || col.accessor]: true }), {});\n    filters.forEach((f) => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(`Invalid filter config, ${f.id} is not present in columns`);\n      }\n    });\n  }\n  const filterControlsRef = useRef(null);\n  const handleClearFilterControls = useCallback(() => {\n    if (query.filters) {var _filterControlsRef$cu;\n      (_filterControlsRef$cu = filterControlsRef.current) == null ? void 0 : _filterControlsRef$cu.clearFilters();\n    }\n  }, [query.filters]);\n  const cardViewEnabled = Boolean(renderCard);\n  const [showBulkTagModal, setShowBulkTagModal] = useState(false);\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled)\n    toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n  useEffect(() => {\n    if (!loading && pageIndex > pageCount - 1 && pageCount > 0) {\n      gotoPage(0);\n    }\n  }, [gotoPage, loading, pageCount, pageIndex]);\n  return _jsxs(ListViewStyles, { children: [\n    allowBulkTagActions && _jsx(BulkTagModal, { show: showBulkTagModal, selected: selectedFlatRows, refreshData: refreshData, resourceName: bulkTagResourceName, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, onHide: () => setShowBulkTagModal(false) }),\n    _jsxs(\"div\", { className: `superset-list-view ${className}`, children: [\n      _jsxs(\"div\", { className: \"header\", children: [\n        cardViewEnabled && _jsx(ViewModeToggle, { mode: viewMode, setMode: setViewMode }),\n        _jsxs(\"div\", { className: \"controls\", children: [\n          filterable && _jsx(FilterControls, { ref: filterControlsRef, filters: filters, internalFilters: internalFilters, updateFilterValue: applyFilterValue }),\n          viewMode === 'card' && cardSortSelectOptions && _jsx(CardSortSelect, { initialSort: sortBy, onChange: (value) => setSortBy(value), options: cardSortSelectOptions })] }\n        )] }\n      ),\n      _jsxs(\"div\", { className: `body ${rows.length === 0 ? 'empty' : ''}`, children: [\n        bulkSelectEnabled && _jsx(BulkSelectWrapper, { type: \"info\", closable: true, showIcon: false, onClose: disableBulkSelect, message: _jsxs(_Fragment, { children: [\n            _jsx(\"div\", { className: \"selectedCopy\", children:\n              renderBulkSelectCopy(selectedFlatRows) }\n            ),\n            Boolean(selectedFlatRows.length) && _jsxs(_Fragment, { children: [\n              _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"deselect-all\", onClick: () => toggleAllRowsSelected(false), children:\n                t('Deselect all') }\n              ),\n              _jsx(\"div\", { className: \"divider\" }),\n              bulkActions.map((action) => _jsx(Button, { buttonStyle: action.type, cta: true, onClick: () => action.onSelect(selectedFlatRows.map((r) => r.original)), children:\n                action.name }, action.key\n              )),\n              enableBulkTag && _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"tag-btn\", onClick: () => setShowBulkTagModal(true), children:\n                t('Add Tag') }\n              )] }\n            )] }\n          ) }),\n        viewMode === 'card' && _jsx(CardCollection, { bulkSelectEnabled: bulkSelectEnabled, prepareRow: prepareRow, renderCard: renderCard, rows: rows, loading: loading, showThumbnails: showThumbnails }),\n        viewMode === 'table' && _jsx(TableCollection, { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, prepareRow: prepareRow, headerGroups: headerGroups, rows: rows, columns: columns, loading: loading, highlightRowId: highlightRowId, columnsForWrapText: columnsForWrapText }),\n        !loading && rows.length === 0 && _jsx(EmptyWrapper, { className: viewMode, children:\n          query.filters ? _jsx(EmptyState, { title: t('No results match your filter criteria'), description: t('Try different criteria to display results.'), size: \"large\", image: \"filter-results.svg\", buttonAction: () => handleClearFilterControls(), buttonText: t('clear all filters') }) : _jsx(EmptyState, { ...emptyState, title: (emptyState == null ? void 0 : emptyState.title) || t('No Data'), size: \"large\", image: (emptyState == null ? void 0 : emptyState.image) || 'filter-results.svg' }) }\n        )] }\n      )] }\n    ),\n    rows.length > 0 && _jsxs(\"div\", { className: \"pagination-container\", children: [\n      _jsx(Pagination, { totalPages: pageCount || 0, currentPage: pageCount && pageIndex < pageCount ? pageIndex + 1 : 0, onChange: (p) => gotoPage(p - 1), hideFirstAndLastPageLinks: true }),\n      _jsx(\"div\", { className: \"row-count-container\", children:\n        !loading &&\n        t('%s-%s of %s', pageSize * pageIndex + (rows.length && 1), pageSize * pageIndex + rows.length, count) }\n      )] }\n    )] }\n  );\n}\nexport default ListView;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}