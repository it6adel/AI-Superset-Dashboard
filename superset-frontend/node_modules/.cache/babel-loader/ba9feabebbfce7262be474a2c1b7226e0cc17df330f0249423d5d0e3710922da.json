{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef, useEffect, useMemo, forwardRef, useImperativeHandle, useLayoutEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { styled } from '@superset-ui/core';\nimport { use, init, registerLocale } from 'echarts/core';\nimport { SankeyChart, PieChart, BarChart, FunnelChart, GaugeChart, GraphChart, LineChart, ScatterChart, RadarChart, BoxplotChart, TreeChart, TreemapChart, HeatmapChart, SunburstChart } from 'echarts/charts';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { TooltipComponent, GridComponent, VisualMapComponent, LegendComponent, DataZoomComponent, ToolboxComponent, GraphicComponent, AriaComponent, MarkAreaComponent, MarkLineComponent } from 'echarts/components';\nimport { LabelLayout } from 'echarts/features';\nimport { DEFAULT_LOCALE } from '../constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst Styles = styled.div`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\nuse([\nCanvasRenderer,\nBarChart,\nBoxplotChart,\nFunnelChart,\nGaugeChart,\nGraphChart,\nHeatmapChart,\nLineChart,\nPieChart,\nRadarChart,\nSankeyChart,\nScatterChart,\nSunburstChart,\nTreeChart,\nTreemapChart,\nAriaComponent,\nDataZoomComponent,\nGraphicComponent,\nGridComponent,\nMarkAreaComponent,\nMarkLineComponent,\nLegendComponent,\nToolboxComponent,\nTooltipComponent,\nVisualMapComponent,\nLabelLayout]\n);\nfunction Echart({ width, height, echartOptions, eventHandlers, zrEventHandlers, selectedValues = {}, refs }, ref) {\n  const divRef = useRef(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef();\n  const currentSelection = useMemo(() => Object.keys(selectedValues) || [], [selectedValues]);\n  const previousSelection = useRef([]);\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current\n  }));\n  const locale = useSelector((state) => {var _state$common$locale, _state$common;return (_state$common$locale = state == null ? void 0 : (_state$common = state.common) == null ? void 0 : _state$common.locale) != null ? _state$common$locale : DEFAULT_LOCALE;}).toUpperCase();\n  const handleSizeChange = useCallback(({ width, height }) => {\n    if (chartRef.current) {\n      chartRef.current.resize({ width, height });\n    }\n  }, []);\n  useEffect(() => {\n    const loadLocaleAndInitChart = async () => {\n      if (!divRef.current)\n      return;\n      const lang = await import(`echarts/lib/i18n/lang${locale}`).catch((e) => {\n        console.error(`Locale ${locale} not supported in ECharts`, e);\n      });\n      if (lang != null && lang.default) {\n        registerLocale(locale, lang.default);\n      }\n      if (!chartRef.current) {\n        chartRef.current = init(divRef.current, null, { locale });\n      }\n      Object.entries(eventHandlers || {}).forEach(([name, handler]) => {var _chartRef$current, _chartRef$current2;\n        (_chartRef$current = chartRef.current) == null ? void 0 : _chartRef$current.off(name);\n        (_chartRef$current2 = chartRef.current) == null ? void 0 : _chartRef$current2.on(name, handler);\n      });\n      Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {var _chartRef$current3, _chartRef$current4;\n        (_chartRef$current3 = chartRef.current) == null ? void 0 : _chartRef$current3.getZr().off(name);\n        (_chartRef$current4 = chartRef.current) == null ? void 0 : _chartRef$current4.getZr().on(name, handler);\n      });\n      chartRef.current.setOption(echartOptions, true);\n      // did mount\n      handleSizeChange({ width, height });\n    };\n    loadLocaleAndInitChart();\n  }, [echartOptions, eventHandlers, zrEventHandlers, locale]);\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current)\n    return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter((value) => !currentSelection.includes(value))\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection, chartRef.current]);\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n  return _jsx(Styles, { ref: divRef, height: height, width: width });\n}\nexport default /*#__PURE__*/forwardRef(Echart);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}