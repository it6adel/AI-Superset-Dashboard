{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { css, styled, t } from '@superset-ui/core';\nimport { Input, TextArea } from 'src/components/Input';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { URL_PARAMS } from 'src/constants';\nimport { getChartPermalink } from 'src/utils/urlUtils';\nimport { CopyButton } from './DataTableControl';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nconst CopyButtonEmbedCode = styled(CopyButton)`\n  && {\n    margin: 0 0 ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst EmbedCodeContent = ({ formData, addDangerToast }) => {\n  const [height, setHeight] = useState('400');\n  const [width, setWidth] = useState('600');\n  const [url, setUrl] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = useCallback((e) => {\n    const { value, name } = e.currentTarget;\n    if (name === 'width') {\n      setWidth(value);\n    }\n    if (name === 'height') {\n      setHeight(value);\n    }\n  }, []);\n\n  const updateUrl = useCallback(() => {\n    setUrl('');\n    getChartPermalink(formData).\n    then((url) => {\n      setUrl(url);\n      setErrorMessage('');\n    }).\n    catch(() => {\n      setErrorMessage(t('Error'));\n      addDangerToast(t('Sorry, something went wrong. Try again later.'));\n    });\n  }, [addDangerToast, formData]);\n\n  useEffect(() => {\n    updateUrl();\n  }, []);\n\n  const html = useMemo(() => {\n    if (!url) return '';\n    const srcLink = `${url}?${URL_PARAMS.standalone.name}=1&height=${height}`;\n    return (\n      '<iframe\\n' +\n      `  width=\"${width}\"\\n` +\n      `  height=\"${height}\"\\n` +\n      '  seamless\\n' +\n      '  frameBorder=\"0\"\\n' +\n      '  scrolling=\"no\"\\n' +\n      `  src=\"${srcLink}\"\\n` +\n      '>\\n' +\n      '</iframe>');\n\n  }, [height, url, width]);\n\n  const text = errorMessage || html || t('Generating link, please wait..');\n  return (\n    _jsxs(\"div\", { id: \"embed-code-popover\", children: [\n      _jsxs(\"div\", {\n        css: css`\n          display: flex;\n          flex-direction: column;\n        `, children: [\n\n        _jsx(CopyToClipboard, {\n          shouldShowText: false,\n          text: html,\n          copyNode:\n          _jsx(CopyButtonEmbedCode, { buttonSize: \"xsmall\", children:\n\n\n            _jsx(\"i\", { className: \"fa fa-clipboard\" }) }\n          ) }\n\n        ),\n        _jsx(TextArea, {\n\n          name: \"embedCode\",\n          disabled: !html,\n          value: text,\n          rows: \"4\",\n          readOnly: true,\n          css: (theme) => css`\n            resize: vertical;\n            padding: ${theme.gridUnit * 2}px;\n            font-size: ${theme.typography.sizes.s}px;\n            border-radius: 4px;\n            background-color: ${theme.colors.secondary.light5};\n          ` }\n        )] }\n      ),\n      _jsxs(\"div\", {\n        css: (theme) => css`\n          display: flex;\n          margin-top: ${theme.gridUnit * 4}px;\n          & > div {\n            margin-right: ${theme.gridUnit * 2}px;\n          }\n          & > div:last-of-type {\n            margin-right: 0;\n            margin-left: ${theme.gridUnit * 2}px;\n          }\n        `, children: [\n\n        _jsxs(\"div\", { children: [\n          _jsx(\"label\", { htmlFor: \"embed-height\", children: t('Chart height') }),\n          _jsx(Input, {\n            type: \"text\",\n            defaultValue: height,\n            name: \"height\",\n            onChange: handleInputChange }\n          )] }\n        ),\n        _jsxs(\"div\", { children: [\n          _jsx(\"label\", { htmlFor: \"embed-width\", children: t('Chart width') }),\n          _jsx(Input, {\n            type: \"text\",\n            defaultValue: width,\n            name: \"width\",\n            onChange: handleInputChange,\n            id: \"embed-width\" }\n          )] }\n        )] }\n      )] }\n    ));\n\n};\n\nexport default EmbedCodeContent;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}