{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport Tag from './Tag';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst TagsDiv = styled.div`\n  max-width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\nconst TagsList = ({ tags, editable = false, onDelete, maxTags }) => {\n  const [tempMaxTags, setTempMaxTags] = useState(maxTags);\n  const handleDelete = (index) => {\n    onDelete == null ? void 0 : onDelete(index);\n  };\n  const expand = () => setTempMaxTags(undefined);\n  const collapse = () => setTempMaxTags(maxTags);\n  const tagsIsLong = useMemo(() => tempMaxTags ? tags.length > tempMaxTags : null, [tags.length, tempMaxTags]);\n  const extraTags = useMemo(() => typeof tempMaxTags === 'number' ? tags.length - tempMaxTags + 1 : null, [tagsIsLong, tags.length, tempMaxTags]);\n  return _jsx(TagsDiv, { className: \"tag-list\", children:\n    tagsIsLong && typeof tempMaxTags === 'number' ? _jsxs(_Fragment, { children: [\n      tags.slice(0, tempMaxTags - 1).map((tag, index) => _jsx(Tag, { id: tag.id, name: tag.name, index: index, onDelete: handleDelete, editable: editable }, tag.id)),\n      tags.length > tempMaxTags ? _jsx(Tag, { name: `+${extraTags}...`, onClick: expand, toolTipTitle: tags.map((t) => t.name).join(', ') }) : null] }\n    ) : _jsxs(_Fragment, { children: [\n      tags.map((tag, index) => _jsx(Tag, { id: tag.id, name: tag.name, index: index, onDelete: handleDelete, editable: editable }, tag.id)),\n      maxTags ? tags.length > maxTags ? _jsx(Tag, { name: \"...\", onClick: collapse }) : null : null] }\n    ) }\n  );\n};\nexport default TagsList;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}