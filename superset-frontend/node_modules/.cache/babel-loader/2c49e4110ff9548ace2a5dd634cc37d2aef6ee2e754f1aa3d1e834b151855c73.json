{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { DTTM_ALIAS, AxisType, getTimeFormatter, getColumnLabel, getNumberFormatter, ensureIsArray } from '@superset-ui/core';\nimport Echart from '../components/Echart';\nimport { formatSeriesName } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst TIMER_DURATION = 300;\nexport default function EchartsTimeseries({ formData, height, width, echartOptions, groupby, labelMap, selectedValues, setDataMask, setControlValue, legendData = [], onContextMenu, onLegendStateChanged, onFocusedSeries, xValueFormatter, xAxis, refs, emitCrossFilters, coltypeMapping }) {\n  const { stack } = formData;\n  const echartRef = useRef(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const clickTimer = useRef();\n  const extraControlRef = useRef(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {var _extraControlRef$curr;\n    const updatedHeight = ((_extraControlRef$curr = extraControlRef.current) == null ? void 0 : _extraControlRef$curr.offsetHeight) || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n  const hasDimensions = ensureIsArray(groupby).length > 0;\n  const getModelInfo = (target, globalModel) => {\n    let el = target;\n    let model = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n  const getCrossFilterDataMask = useCallback((value) => {\n    const selected = Object.values(selectedValues);\n    let values;\n    if (selected.includes(value)) {\n      values = selected.filter((v) => v !== value);\n    } else\n    {\n      values = [value];\n    }\n    const groupbyValues = values.map((value) => labelMap[value]);\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length === 0 ?\n          [] :\n          groupby.map((col, idx) => {\n            const val = groupbyValues.map((v) => v[idx]);\n            if (val === null || val === undefined)\n            return {\n              col,\n              op: 'IS NULL'\n            };\n            return {\n              col,\n              op: 'IN',\n              val: val\n            };\n          })\n        },\n        filterState: {\n          label: groupbyValues.length ? groupbyValues : undefined,\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null\n        }\n      },\n      isCurrentValueSelected: selected.includes(value)\n    };\n  }, [groupby, labelMap, selectedValues]);\n  const handleChange = useCallback((value) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    setDataMask(getCrossFilterDataMask(value).dataMask);\n  }, [emitCrossFilters, setDataMask, getCrossFilterDataMask]);\n  const eventHandlers = {\n    click: (props) => {\n      if (!hasDimensions) {\n        return;\n      }\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        handleChange(name);\n      }, TIMER_DURATION);\n    },\n    mouseout: () => {\n      onFocusedSeries(null);\n    },\n    mouseover: (params) => {\n      onFocusedSeries(params.seriesName);\n    },\n    legendselectchanged: (payload) => {\n      onLegendStateChanged == null ? void 0 : onLegendStateChanged(payload.selected);\n    },\n    legendselectall: (payload) => {\n      onLegendStateChanged == null ? void 0 : onLegendStateChanged(payload.selected);\n    },\n    legendinverseselect: (payload) => {\n      onLegendStateChanged == null ? void 0 : onLegendStateChanged(payload.selected);\n    },\n    contextmenu: async (eventParams) => {\n      if (onContextMenu) {var _labelMap$seriesName;\n        eventParams.event.stop();\n        const { data, seriesName } = eventParams;\n        const drillToDetailFilters = [];\n        const drillByFilters = [];\n        const pointerEvent = eventParams.event.event;\n        const values = [\n        ...(eventParams.name ? [eventParams.name] : []),\n        ...((_labelMap$seriesName = labelMap[seriesName]) != null ? _labelMap$seriesName : [])];\n\n        const groupBy = ensureIsArray(formData.groupby);\n        if (data && xAxis.type === AxisType.Time) {\n          drillToDetailFilters.push({\n            col:\n            // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n            xAxis.label === DTTM_ALIAS ?\n            formData.granularitySqla :\n            xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0])\n          });\n        }\n        [\n        ...(xAxis.type === AxisType.Category && data ? [xAxis.label] : []),\n        ...groupBy].\n        forEach((dimension, i) => drillToDetailFilters.push({\n          col: dimension,\n          op: '==',\n          val: values[i],\n          formattedVal: String(values[i])\n        }));\n        groupBy.forEach((dimension, i) => {\n          const val = labelMap[seriesName][i];\n          drillByFilters.push({\n            col: dimension,\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(dimension)]\n            })\n          });\n        });\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' },\n          crossFilter: hasDimensions ?\n          getCrossFilterDataMask(seriesName) :\n          undefined\n        });\n      }\n    }\n  };\n  const zrEventHandlers = {\n    dblclick: (params) => {var _echartRef$current;\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = (_echartRef$current = echartRef.current) == null ? void 0 : _echartRef$current.getEchartInstance();\n      if (echartInstance != null && echartInstance.containPixel('grid', pointInPixel)) {var _params$target;\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && ((_params$target = params.target) == null ? void 0 : _params$target.type) === 'ec-polygon')\n        return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        if (model) {\n          const { name } = model;\n          const legendState = legendData.reduce((previous, datum) => ({\n            ...previous,\n            [datum]: datum === name\n          }), {});\n          onLegendStateChanged == null ? void 0 : onLegendStateChanged(legendState);\n        }\n      }\n    }\n  };\n  return _jsxs(_Fragment, { children: [\n    _jsx(\"div\", { ref: extraControlRef, children:\n      _jsx(ExtraControls, { formData: formData, setControlValue: setControlValue }) }\n    ),\n    _jsx(Echart, { ref: echartRef, refs: refs, height: height - extraControlHeight, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers, zrEventHandlers: zrEventHandlers, selectedValues: selectedValues })] }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}