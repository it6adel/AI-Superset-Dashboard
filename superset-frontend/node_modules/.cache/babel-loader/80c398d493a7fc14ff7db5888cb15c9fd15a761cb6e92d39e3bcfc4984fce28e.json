{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { sharedControlComponents } from '@superset-ui/chart-controls';\nimport { AreaChartStackControlOptions } from '../constants';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { RadioButtonControl } = sharedControlComponents;\nconst ExtraControlsWrapper = styled.div`\n  text-align: center;\n`;\nexport function useExtraControl({ formData, setControlValue }) {\n  const { stack, area } = formData;\n  const [extraValue, setExtraValue] = useState(stack != null ? stack : undefined);\n  useEffect(() => {\n    setExtraValue(stack);\n  }, [stack]);\n  const extraControlsOptions = useMemo(() => {\n    if (area) {\n      return AreaChartStackControlOptions;\n    }\n    return [];\n  }, [area]);\n  const extraControlsHandler = useCallback((value) => {\n    if (area) {\n      if (setControlValue) {\n        setControlValue('stack', value);\n        setExtraValue(value);\n      }\n    }\n  }, [area, setControlValue]);\n  return {\n    extraControlsOptions,\n    extraControlsHandler,\n    extraValue\n  };\n}\nexport function ExtraControls({ formData, setControlValue }) {\n  const { extraControlsOptions, extraControlsHandler, extraValue } = useExtraControl({\n    formData,\n    setControlValue\n  });\n  if (!formData.showExtraControls) {\n    return null;\n  }\n  return _jsx(ExtraControlsWrapper, { children:\n    _jsx(RadioButtonControl, { options: extraControlsOptions, onChange: extraControlsHandler, value: extraValue }) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}