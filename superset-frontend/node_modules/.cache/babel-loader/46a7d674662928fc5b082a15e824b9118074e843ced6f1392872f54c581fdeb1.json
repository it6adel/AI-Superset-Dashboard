{"ast":null,"code":"import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";import _mapValues from \"lodash/fp/mapValues\";import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey } from\n'./getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId, filters) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(filters || activeFilters).filter(\n      ([, { scope: chartIds }]) => chartIds.includes(chartId)\n    );\n    appliedFilterValuesByChart[chartId] = _flow(\n      _keyBy(\n        ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column\n      ),\n      _mapValues(([, { values }]) => values)\n    )(applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\n/**\n * @deprecated Please use src/dashboard/util/getChartIdsInFilterScope instead\n */\nexport function getChartIdsInFilterScope({ filterScope }) {\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n    component.type === CHART_TYPE &&\n    component.meta &&\n    component.meta.chartId &&\n    !immuneChartIds.includes(component.meta.chartId))\n    {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach((child) =>\n      traverse(chartIds, allComponents[child], immuneChartIds)\n      );\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } =\n  filterScope || DASHBOARD_FILTER_SCOPE_GLOBAL;\n  scopeComponentIds.forEach((componentId) =>\n  traverse(chartIds, allComponents[componentId], immuneChartIds)\n  );\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  // clear cache\n  if (!_isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach((column) => {\n      if (\n      Array.isArray(columns[column]) ?\n      columns[column].length :\n      columns[column] !== undefined)\n      {\n        // remove filter itself\n        const scope = getChartIdsInFilterScope({\n          filterScope: scopes[column]\n        }).filter((id) => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope\n        };\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters\n    };\n  }, {});\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}