{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, isAdhocColumn, isPhysicalColumn, t, validateNonEmpty } from '@superset-ui/core';\nimport { D3_FORMAT_DOCS, D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_OPTIONS, sections, getStandardizedControls, getTemporalColumns, sharedControls } from '@superset-ui/chart-controls';\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['columns'],\n    [\n    {\n      name: 'time_grain_sqla',\n      config: {\n        ...sharedControls.time_grain_sqla,\n        visibility: ({ controls }) => {var _controls$columns;\n          const dttmLookup = Object.fromEntries(ensureIsArray(controls == null ? void 0 : (_controls$columns = controls.columns) == null ? void 0 : _controls$columns.options).map((option) => [\n          option.column_name,\n          option.is_dttm]\n          ));\n          return ensureIsArray(controls == null ? void 0 : controls.columns.value).\n          map((selection) => {\n            if (isAdhocColumn(selection)) {\n              return true;\n            }\n            if (isPhysicalColumn(selection)) {\n              return !!dttmLookup[selection];\n            }\n            return false;\n          }).\n          some(Boolean);\n        }\n      }\n    },\n    'temporal_columns_lookup'],\n\n    ['groupby'],\n    ['metrics'],\n    ['adhoc_filters'],\n    ['series_limit'],\n    ['series_limit_metric'],\n    [\n    {\n      name: 'whiskerOptions',\n      config: {\n        clearable: false,\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Whisker/outlier options'),\n        default: 'Tukey',\n        description: t('Determines how whiskers and outliers are calculated.'),\n        choices: [\n        ['Tukey', t('Tukey')],\n        ['Min/max (no outliers)', t('Min/max (no outliers)')],\n        ['2/98 percentiles', t('2/98 percentiles')],\n        ['5/95 percentiles', t('5/95 percentiles')],\n        ['9/91 percentiles', t('9/91 percentiles')],\n        ['10/90 percentiles', t('10/90 percentiles')]]\n\n      }\n    }]]\n\n\n  },\n  sections.titleControls,\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [\n    {\n      name: 'x_ticks_layout',\n      config: {\n        type: 'SelectControl',\n        label: t('X Tick Layout'),\n        choices: [\n        ['auto', t('auto')],\n        ['flat', t('flat')],\n        ['45째', '45째'],\n        ['90째', '90째'],\n        ['staggered', t('staggered')]],\n\n        default: 'auto',\n        clearable: false,\n        renderTrigger: true,\n        description: t('The way the ticks are laid out on the X-axis')\n      }\n    }],\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: 'SMART_NUMBER',\n        choices: D3_FORMAT_OPTIONS,\n        description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`\n      }\n    }],\n\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        default: 'smart_date',\n        description: D3_FORMAT_DOCS\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    groupby: {\n      label: t('Dimensions'),\n      description: t('Categories to group by on the x-axis.')\n    },\n    columns: {\n      label: t('Distribute across'),\n      multi: true,\n      description: t('Columns to calculate distribution across.'),\n      initialValue: (control, state) => {\n        if (state && (\n        !(control != null && control.value) ||\n        Array.isArray(control == null ? void 0 : control.value) && control.value.length === 0)) {\n          return [getTemporalColumns(state.datasource).defaultTemporalColumn];\n        }\n        return control.value;\n      },\n      validators: [validateNonEmpty]\n    }\n  },\n  formDataOverrides: (formData) => {\n    const groupby = getStandardizedControls().controls.columns.filter((col) => !ensureIsArray(formData.columns).includes(col));\n    getStandardizedControls().controls.columns =\n    getStandardizedControls().controls.columns.filter((col) => !groupby.includes(col));\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      groupby\n    };\n  }\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}