{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { store } from '../views/store';\nimport { getDashboardPermalink as getDashboardPermalinkUtil } from '../utils/urlUtils';\nconst bootstrapData = getBootstrapData();\nconst getScrollSize = () => ({\n  width: document.body.scrollWidth,\n  height: document.body.scrollHeight\n});\nconst getDashboardPermalink = async ({ anchor }) => {var _state$dashboardInfo, _state$dashboardState;\n  const state = store == null ? void 0 : store.getState();\n  const { dashboardId, dataMask, activeTabs } = {\n    dashboardId: (state == null ? void 0 : (_state$dashboardInfo = state.dashboardInfo) == null ? void 0 : _state$dashboardInfo.id) || (bootstrapData == null ? void 0 : bootstrapData.embedded.dashboard_id),\n    dataMask: state == null ? void 0 : state.dataMask,\n    activeTabs: (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.activeTabs\n  };\n  return getDashboardPermalinkUtil({\n    dashboardId,\n    dataMask,\n    activeTabs,\n    anchor\n  });\n};\nconst getActiveTabs = () => {var _store$getState, _store$getState$dashb;return (store == null ? void 0 : (_store$getState = store.getState()) == null ? void 0 : (_store$getState$dashb = _store$getState.dashboardState) == null ? void 0 : _store$getState$dashb.activeTabs) || [];};\nexport const embeddedApi = {\n  getScrollSize,\n  getDashboardPermalink,\n  getActiveTabs\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}