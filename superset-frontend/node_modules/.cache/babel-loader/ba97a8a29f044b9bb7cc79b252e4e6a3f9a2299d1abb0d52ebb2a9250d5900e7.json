{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport JSONbig from 'json-bigint';\nimport { JSONTree } from 'react-json-tree';\nimport { useJsonTreeTheme } from 'src/hooks/useJsonTreeTheme';\nimport Button from '../Button';\nimport CopyToClipboard from '../CopyToClipboard';\nimport ModalTrigger from '../ModalTrigger';import { Fragment as _Fragment, jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport function safeJsonObjectParse(data) {\n  // First perform a cheap proxy to avoid calling JSON.parse on data that is clearly not a\n  // JSON object or array\n  if (typeof data !== 'string' ||\n  ['{', '['].indexOf(data.substring(0, 1)) === -1) {\n    return null;\n  }\n  // We know `data` is a string starting with '{' or '[', so try to parse it as a valid object\n  try {\n    const jsonData = JSONbig({ storeAsString: true }).parse(data);\n    if (jsonData && typeof jsonData === 'object') {\n      return jsonData;\n    }\n    return null;\n  }\n  catch (_) {\n    return null;\n  }\n}\nexport function convertBigIntStrToNumber(value) {\n  if (typeof value === 'string' && /^\"-?\\d+\"$/.test(value)) {\n    return value.substring(1, value.length - 1);\n  }\n  return value;\n}\nfunction renderBigIntStrToNumber(value) {\n  return _jsx(_Fragment, { children: convertBigIntStrToNumber(value) });\n}\nexport const JsonModal = ({ modalTitle, jsonObject, jsonValue }) => {\n  const jsonTreeTheme = useJsonTreeTheme();\n  return _jsx(ModalTrigger, { modalBody: _jsx(JSONTree, { data: jsonObject, theme: jsonTreeTheme, valueRenderer: renderBigIntStrToNumber }), modalFooter: _jsx(Button, { children:\n      _jsx(CopyToClipboard, { shouldShowText: false, text: jsonValue }) }\n    ), modalTitle: modalTitle, triggerNode: _jsx(_Fragment, { children: jsonValue }) });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}