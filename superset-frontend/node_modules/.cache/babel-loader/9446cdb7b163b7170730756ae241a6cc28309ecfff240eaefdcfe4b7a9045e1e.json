{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useHistory } from 'react-router-dom';\nimport Button from 'src/components/Button';\nimport { t } from '@superset-ui/core';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport { logEvent } from 'src/logger/actions';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { LOG_ACTIONS_DATASET_CREATION_EMPTY_CANCELLATION, LOG_ACTIONS_DATASET_CREATION_DATABASE_CANCELLATION, LOG_ACTIONS_DATASET_CREATION_SCHEMA_CANCELLATION, LOG_ACTIONS_DATASET_CREATION_TABLE_CANCELLATION, LOG_ACTIONS_DATASET_CREATION_SUCCESS } from 'src/logger/LogUtils';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst INPUT_FIELDS = ['db', 'schema', 'table_name'];\nconst LOG_ACTIONS = [\nLOG_ACTIONS_DATASET_CREATION_EMPTY_CANCELLATION,\nLOG_ACTIONS_DATASET_CREATION_DATABASE_CANCELLATION,\nLOG_ACTIONS_DATASET_CREATION_SCHEMA_CANCELLATION,\nLOG_ACTIONS_DATASET_CREATION_TABLE_CANCELLATION];\n\nfunction Footer({ datasetObject, addDangerToast, hasColumns = false, datasets }) {\n  const history = useHistory();\n  const { createResource } = useSingleViewResource('dataset', t('dataset'), addDangerToast);\n  const createLogAction = (dataset) => {\n    let totalCount = 0;\n    const value = Object.keys(dataset).reduce((total, key) => {\n      if (INPUT_FIELDS.includes(key) && dataset[key]) {\n        totalCount += 1;\n      }\n      return totalCount;\n    }, 0);\n    return LOG_ACTIONS[value];\n  };\n  const cancelButtonOnClick = () => {\n    if (!datasetObject) {\n      logEvent(LOG_ACTIONS_DATASET_CREATION_EMPTY_CANCELLATION, {});\n    } else\n    {\n      const logAction = createLogAction(datasetObject);\n      logEvent(logAction, datasetObject);\n    }\n    history.goBack();\n  };\n  const tooltipText = t('Select a database table.');\n  const onSave = () => {\n    if (datasetObject) {var _datasetObject$db;\n      const data = {\n        database: (_datasetObject$db = datasetObject.db) == null ? void 0 : _datasetObject$db.id,\n        catalog: datasetObject.catalog,\n        schema: datasetObject.schema,\n        table_name: datasetObject.table_name\n      };\n      createResource(data).then((response) => {\n        if (!response) {\n          return;\n        }\n        if (typeof response === 'number') {\n          logEvent(LOG_ACTIONS_DATASET_CREATION_SUCCESS, datasetObject);\n          // When a dataset is created the response we get is its ID number\n          history.push(`/chart/add/?dataset=${datasetObject.table_name}`);\n        }\n      });\n    }\n  };\n  const CREATE_DATASET_TEXT = t('Create dataset and create chart');\n  const disabledCheck = !(datasetObject != null && datasetObject.table_name) ||\n  !hasColumns || (\n  datasets == null ? void 0 : datasets.includes(datasetObject == null ? void 0 : datasetObject.table_name));\n  return _jsxs(_Fragment, { children: [\n    _jsx(Button, { onClick: cancelButtonOnClick, children: t('Cancel') }),\n    _jsx(Button, { buttonStyle: \"primary\", disabled: disabledCheck, tooltip: !(datasetObject != null && datasetObject.table_name) ? tooltipText : undefined, onClick: onSave, children:\n      CREATE_DATASET_TEXT }\n    )] }\n  );\n}\nexport default withToasts(Footer);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}