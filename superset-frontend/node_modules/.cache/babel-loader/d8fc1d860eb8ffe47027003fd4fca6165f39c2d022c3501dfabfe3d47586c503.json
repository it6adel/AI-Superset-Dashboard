{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo } from 'react';\nimport { isFilterDivider } from '@superset-ui/core';\nimport FilterControl from './FilterControls/FilterControl';\nimport { useFilters } from './state';\nimport FilterDivider from './FilterControls/FilterDivider';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const useFilterControlFactory = (dataMaskSelected, onFilterSelectionChange) => {\n  const filters = useFilters();\n  const filterValues = useMemo(() => Object.values(filters), [filters]);\n  const filtersWithValues = useMemo(() => filterValues.map((filter) => ({\n    ...filter,\n    dataMask: dataMaskSelected[filter.id]\n  })), [filterValues, dataMaskSelected]);\n  const filterControlFactory = useCallback((index, filterBarOrientation, overflow) => {\n    const filter = filtersWithValues[index];\n    if (isFilterDivider(filter)) {\n      return _jsx(FilterDivider, { title: filter.title, description: filter.description, orientation: filterBarOrientation, overflow: overflow });\n    }\n    return _jsx(FilterControl, { dataMaskSelected: dataMaskSelected, filter: filter, onFilterSelectionChange: onFilterSelectionChange, inView: false, orientation: filterBarOrientation, overflow: overflow });\n  }, [filtersWithValues, dataMaskSelected, onFilterSelectionChange]);\n  return { filterControlFactory, filtersWithValues };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}