{"ast":null,"code":"import _kebabCase from \"lodash/kebabCase\";import domToPdf from 'dom-to-pdf';\n\nimport { logging, t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description, date = new Date()) => `${_kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsPdf(selector, description, isExactSelector = false) {\n  return (event) => {\n    const elementToPrint = isExactSelector ?\n    document.querySelector(selector) :\n    event.currentTarget.closest(selector);\n    if (!elementToPrint) {\n      return addWarningToast(t('PDF download failed, please refresh and try again.'));\n    }\n    const options = {\n      margin: 10,\n      filename: `${generateFileStem(description)}.pdf`,\n      image: { type: 'jpeg', quality: 1 },\n      html2canvas: { scale: 2 },\n      excludeClassNames: ['header-controls']\n    };\n    return domToPdf(elementToPrint, options).\n    then(() => {\n\n      // nothing to be done\n    }).catch((e) => {\n      logging.error('PDF generation failed', e);\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}