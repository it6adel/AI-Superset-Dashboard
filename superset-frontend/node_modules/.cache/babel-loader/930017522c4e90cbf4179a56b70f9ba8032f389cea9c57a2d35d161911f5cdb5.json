{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isAppliedCrossFilterType, isAppliedNativeFilterType, isNativeFilter } from '@superset-ui/core';\nfunction isGlobalScope(scope, slices) {\n  return scope.length === Object.keys(slices).length;\n}\nfunction getRelatedChartsForSelectFilter(slices, chartsInScope) {\n  // all have been selected, always apply\n  if (isGlobalScope(chartsInScope, slices)) {\n    return Object.keys(slices).map(Number);\n  }\n  const chartsInScopeSet = new Set(chartsInScope);\n  return Object.values(slices).reduce((result, slice) => {\n    if (chartsInScopeSet.has(slice.slice_id)) {\n      result.push(slice.slice_id);\n    }\n    return result;\n  }, []);\n}\nfunction getRelatedChartsForCrossFilter(filterKey, slices, scope) {\n  const sourceSlice = slices[filterKey];\n  if (!sourceSlice)\n  return [];\n  const fullScope = [\n  ...scope.filter((s) => String(s) !== filterKey),\n  Number(filterKey)];\n\n  const scopeSet = new Set(scope);\n  return Object.values(slices).reduce((result, slice) => {\n    if (slice.slice_id === Number(filterKey)) {\n      return result;\n    }\n    // Check if it's in the global scope\n    if (isGlobalScope(fullScope, slices)) {\n      result.push(slice.slice_id);\n      return result;\n    }\n    // Check if it's hand-picked in scope\n    if (scopeSet.has(slice.slice_id)) {\n      result.push(slice.slice_id);\n    }\n    return result;\n  }, []);\n}\nexport function getRelatedCharts(filterKey, filter, slices) {var _filter$chartsInScope;\n  let related = [];\n  const isCrossFilter = Object.keys(slices).includes(filterKey) && isAppliedCrossFilterType(filter);\n  const chartsInScope = Array.isArray(filter.scope) ?\n  filter.scope : (_filter$chartsInScope =\n  filter.chartsInScope) != null ? _filter$chartsInScope : [];\n  if (isCrossFilter) {\n    related = getRelatedChartsForCrossFilter(filterKey, slices, chartsInScope);\n  }\n  const nativeFilter = filter;\n  // on highlight, a standard native filter is passed\n  // on apply, an applied native filter is passed\n  if (!isCrossFilter ||\n  isAppliedNativeFilterType(nativeFilter) ||\n  isNativeFilter(nativeFilter)) {\n    related = getRelatedChartsForSelectFilter(slices, chartsInScope);\n  }\n  return related;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}