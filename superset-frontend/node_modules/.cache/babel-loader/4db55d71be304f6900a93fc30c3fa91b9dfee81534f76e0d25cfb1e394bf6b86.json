{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Remove fa-icon\n/* eslint-disable icons/no-fa-icons-usage */\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { css, getExtensionsRegistry, SafeMarkdown, styled, t } from '@superset-ui/core';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport Icons from 'src/components/Icons';\nimport { Skeleton, AntdBreadcrumb as Breadcrumb, Button } from 'src/components';\nimport { Dropdown } from 'src/components/Dropdown';\nimport FilterableTable from 'src/components/FilterableTable';\nimport Tabs from 'src/components/Tabs';\nimport { tableApiUtil, useTableExtendedMetadataQuery, useTableMetadataQuery } from 'src/hooks/apiResources';\nimport { runTablePreviewQuery } from 'src/SqlLab/actions/sqlLab';\nimport Alert from 'src/components/Alert';\nimport { Menu } from 'src/components/Menu';\nimport Card from 'src/components/Card';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport ResultSet from '../ResultSet';\nimport ShowSQL from '../ShowSQL';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst COLUMN_KEYS = ['column_name', 'column_type', 'keys', 'comment'];\n// TODO: Remove fa-icon\nconst MENUS = [\n{\n  key: 'refresh-table',\n  label: t('Refresh table schema'),\n  icon: _jsx(Icons.SyncOutlined, { iconSize: \"s\", \"aria-hidden\": true })\n},\n{\n  key: 'copy-select-statement',\n  label: t('Copy SELECT statement'),\n  icon: _jsx(Icons.CopyOutlined, { iconSize: \"s\", \"aria-hidden\": true })\n},\n{\n  key: 'show-create-view-statement',\n  label: t('Show CREATE VIEW statement'),\n  icon: _jsx(Icons.EyeOutlined, { iconSize: \"s\", \"aria-hidden\": true })\n}];\n\nconst TAB_HEADER_HEIGHT = 80;\nconst PREVIEW_TOP_ACTION_HEIGHT = 30;\nconst PREVIEW_QUERY_LIMIT = 100;\nconst Title = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n  font-size: ${({ theme }) => theme.typography.sizes.l}px;\n  font-weight: ${({ theme }) => theme.typography.weights.bold};\n`;\nconst renderWell = (partitions) => {\n  if (!partitions) {\n    return null;\n  }\n  const { partitionQuery } = partitions;\n  let partitionClipBoard;\n  if (partitionQuery) {\n    const tt = t('Copy partition query to clipboard');\n    partitionClipBoard = _jsx(CopyToClipboard, { text: partitionQuery, shouldShowText: false, tooltipText: tt, copyNode: _jsx(Icons.CopyOutlined, { iconSize: \"s\" }) });\n  }\n  const latest = Object.entries(partitions.latest || []).\n  map(([key, value]) => `${key}=${value}`).\n  join('/');\n  return _jsx(Card, { size: \"small\", children:\n    _jsxs(\"div\", { children: [\n      _jsxs(\"small\", { children: [\n        t('latest partition:'), \" \", latest] }\n      ), ' ',\n      partitionClipBoard] }\n    ) }\n  );\n};\nconst TablePreview = ({ dbId, catalog, schema, tableName }) => {var _extensionsRegistry$g, _extensionsRegistry$g2;\n  const dispatch = useDispatch();\n  const [databaseName, backend, disableDataPreview] = useSelector(({ sqlLab: { databases } }) => {var _databases$dbId, _databases$dbId2, _databases$dbId3;return [(_databases$dbId =\n    databases[dbId]) == null ? void 0 : _databases$dbId.database_name, (_databases$dbId2 =\n    databases[dbId]) == null ? void 0 : _databases$dbId2.backend, (_databases$dbId3 =\n    databases[dbId]) == null ? void 0 : _databases$dbId3.disable_data_preview];},\n  shallowEqual);\n  const copyStatementActionRef = useRef(null);\n  const showViewStatementActionRef = useRef(null);\n  const [previewQueryId, setPreviewQueryId] = useState();\n  const { currentData: tableMetadata, isLoading: isMetadataLoading, isFetching: isMetadataRefreshing, isError: hasMetadataError, error: metadataError } = useTableMetadataQuery({\n    dbId,\n    catalog,\n    schema: schema != null ? schema : '',\n    table: tableName != null ? tableName : ''\n  }, { skip: !dbId || !schema || !tableName });\n  const { currentData: tableExtendedMetadata, error: metadataExtrError } = useTableExtendedMetadataQuery({\n    dbId,\n    catalog,\n    schema: schema != null ? schema : '',\n    table: tableName != null ? tableName : ''\n  }, { skip: !dbId || !schema || !tableName });\n  const data = useMemo(() => {var _tableMetadata$column;return ((_tableMetadata$column = tableMetadata == null ? void 0 : tableMetadata.columns.length) != null ? _tableMetadata$column : 0) > 0 ?\n    tableMetadata == null ? void 0 : tableMetadata.columns.map(({ name, type, longType, keys, comment }) => ({\n      column_name: name,\n      column_type: longType || type,\n      keys,\n      comment\n    })) :\n    undefined;}, [tableMetadata]);\n  const hasKeys = useMemo(() => data == null ? void 0 : data.some(({ keys }) => Boolean(keys == null ? void 0 : keys.length)), [data]);\n  const columns = useMemo(() => hasKeys ? COLUMN_KEYS : COLUMN_KEYS.filter((name) => name !== 'keys'), [hasKeys]);\n  const tableData = {\n    dataPreviewQueryId: previewQueryId,\n    ...tableMetadata,\n    ...tableExtendedMetadata\n  };\n  const refreshTableMetadata = () => {\n    dispatch(tableApiUtil.invalidateTags([{ type: 'TableMetadatas', id: tableName }]));\n  };\n  const ResultTable = (_extensionsRegistry$g = extensionsRegistry.get('sqleditor.extension.resultTable')) != null ? _extensionsRegistry$g :\n  FilterableTable;\n  const customTabs = (_extensionsRegistry$g2 = extensionsRegistry.get('sqleditor.extension.tablePreview')) != null ? _extensionsRegistry$g2 : [];\n  const onTabSwitch = useCallback((activeKey) => {\n    if (activeKey === 'sample' && !previewQueryId) {\n      const queryId = nanoid(11);\n      dispatch(runTablePreviewQuery({\n        previewQueryId: queryId,\n        dbId,\n        catalog,\n        schema,\n        name: tableName,\n        selectStar: tableData.selectStar\n      }, true));\n      setPreviewQueryId(queryId);\n    }\n  }, [\n  previewQueryId,\n  dbId,\n  catalog,\n  schema,\n  tableName,\n  tableData.selectStar,\n  dispatch]\n  );\n  const dropdownMenu = useMemo(() => {\n    let menus = [...MENUS];\n    if (!tableData.selectStar) {\n      menus = menus.filter(({ key }) => key !== 'copy-select-statement');\n    }\n    if (!tableData.view) {\n      menus = menus.filter(({ key }) => key !== 'show-create-view-statement');\n    }\n    return menus;\n  }, [tableData.view, tableData.selectStar]);\n  if (isMetadataLoading) {\n    return _jsx(Skeleton, { active: true });\n  }\n  if (hasMetadataError || metadataExtrError) {var _ref;\n    return _jsx(Alert, { type: \"warning\", message: (_ref = metadataError || metadataExtrError) == null ? void 0 : _ref.error });\n  }\n  if (!data) {\n    return _jsx(Alert, { type: \"warning\", message: t('Cannot find the table (%s) metadata.', tableName), closable: false });\n  }\n  return _jsxs(\"div\", { css: css`\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      `, children: [\n    _jsxs(Breadcrumb, { separator: \">\", children: [\n      _jsx(Breadcrumb.Item, { children: backend }),\n      _jsx(Breadcrumb.Item, { children: databaseName }),\n      catalog && _jsx(Breadcrumb.Item, { children: catalog }),\n      schema && _jsx(Breadcrumb.Item, { children: schema }),\n      _jsx(Breadcrumb.Item, { children: \" \" })] }\n    ),\n    _jsxs(\"div\", { style: { display: 'none' }, children: [\n      _jsx(CopyToClipboard, { copyNode: _jsx(\"button\", { type: \"button\", ref: copyStatementActionRef, children: \"invisible button\" }\n\n        ), text: tableData.selectStar, shouldShowText: false }),\n      tableData.view && _jsx(ShowSQL, { sql: tableData.view, tooltipText: t('Show CREATE VIEW statement'), title: t('CREATE VIEW statement'), triggerNode: _jsx(\"button\", { type: \"button\", ref: showViewStatementActionRef, children: \"invisible button\" }\n\n        ) })] }\n    ),\n    _jsxs(Title, { children: [\n      _jsx(Icons.InsertRowAboveOutlined, { iconSize: \"l\" }),\n      tableName,\n      _jsx(Dropdown, { dropdownRender: () => _jsx(Menu, { onClick: ({ key }) => {\n            if (key === 'refresh-table') {\n              refreshTableMetadata();\n            }\n            if (key === 'copy-select-statement') {var _copyStatementActionR;\n              (_copyStatementActionR = copyStatementActionRef.current) == null ? void 0 : _copyStatementActionR.click();\n            }\n            if (key === 'show-create-view-statement') {var _showViewStatementAct;\n              (_showViewStatementAct = showViewStatementActionRef.current) == null ? void 0 : _showViewStatementAct.click();\n            }\n          }, items: dropdownMenu }), trigger: ['click'], children:\n        _jsx(Button, { buttonSize: \"xsmall\", type: \"link\", children:\n          _jsx(Icons.DownSquareOutlined, { iconSize: \"m\", style: { marginTop: 2, marginLeft: 4 }, \"aria-label\": t('Table actions') }) }\n        ) }\n      )] }\n    ),\n    isMetadataRefreshing ? _jsx(Skeleton, { active: true }) : _jsxs(_Fragment, { children: [\n      tableData.comment && _jsx(SafeMarkdown, { source: tableData.comment }),\n      renderWell(tableData.partitions),\n      _jsx(\"div\", { css: css`\n              flex: 1 1 auto;\n            `, children:\n        _jsx(AutoSizer, { disableWidth: true, children:\n          ({ height }) => _jsxs(Tabs, { fullWidth: false, onTabClick: onTabSwitch, css: css`\n                    height: ${height}px;\n                  `, children: [\n            _jsx(Tabs.TabPane, { tab: t('Columns (%s)', data.length), children:\n              _jsx(ResultTable, { queryId: \"table-columns\", height: height - TAB_HEADER_HEIGHT, data: data, orderedColumnKeys: columns }) }, \"columns\"\n            ),\n            (tableData == null ? void 0 : tableData.selectStar) && !disableDataPreview && _jsx(Tabs.TabPane, { tab: t('Data preview'), children:\n              previewQueryId && _jsx(ResultSet, { queryId: previewQueryId, visualize: false, csv: false, cache: true, height: height -\n                TAB_HEADER_HEIGHT -\n                PREVIEW_TOP_ACTION_HEIGHT, displayLimit: PREVIEW_QUERY_LIMIT, defaultQueryLimit: PREVIEW_QUERY_LIMIT }) }, \"sample\"\n            ),\n            (tableData == null ? void 0 : tableData.indexes) && tableData.indexes.length > 0 && _jsx(Tabs.TabPane, { tab: t('Indexes (%s)', tableData.indexes.length), children:\n              tableData.indexes.map((ix, i) => _jsx(\"pre\", { className: \"code\", children:\n                JSON.stringify(ix, null, '  ') }, i\n              )) }, \"indexes\"\n            ),\n            (tableData == null ? void 0 : tableData.metadata) && _jsx(Tabs.TabPane, { tab: t('Metadata'), children:\n              _jsx(ResultTable, { queryId: \"table-metadata\", height: height - TAB_HEADER_HEIGHT, data: Object.entries(tableData.metadata).map(([name, value]) => ({ name, value })), orderedColumnKeys: ['name', 'value'] }) }, \"metadata\"\n            ),\n            customTabs.map(([title, ExtComponent]) => _jsx(Tabs.TabPane, { tab: title, children:\n              _jsx(ExtComponent, { dbId: Number(dbId), schema: schema != null ? schema : '', tableName: tableName }) }, title\n            ))] }\n          ) }\n        ) }\n      )] }\n    )] }\n  );\n};\nexport default TablePreview;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}