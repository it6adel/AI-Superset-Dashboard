{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { useFilters, usePagination, useRowSelect, useRowState, useSortBy, useTable } from 'react-table';\nimport { NumberParam, StringParam, useQueryParams } from 'use-query-params';\nimport rison from 'rison';\n\n// Define custom RisonParam for proper encoding/decoding; note that\n// %, &, +, and # must be encoded to avoid breaking the url\nconst RisonParam = {\n  encode: (data) => data === undefined ?\n  undefined :\n  rison.\n  encode(data).\n  replace(/%/g, '%25').\n  replace(/&/g, '%26').\n  replace(/\\+/g, '%2B').\n  replace(/#/g, '%23'),\n  decode: (dataStr) => dataStr === undefined || Array.isArray(dataStr) ?\n  undefined :\n  rison.decode(dataStr)\n};\nexport const SELECT_WIDTH = 200;\nexport class ListViewError extends Error {constructor(...args) {super(...args);this.\n    name = 'ListViewError';}\n}\n// removes element from a list, returns new list\nexport function removeFromList(list, index) {\n  return list.filter((_, i) => index !== i);\n}\n// apply update to elements of object list, returns new list\nfunction updateInList(list, index, update) {\n  const element = list.find((_, i) => index === i);\n  return [\n  ...list.slice(0, index),\n  { ...element, ...update },\n  ...list.slice(index + 1)];\n\n}\nfunction mergeCreateFilterValues(list, updateObj) {\n  return list.map(({ id, urlDisplay, operator }) => {\n    const currentFilterId = urlDisplay || id;\n    const update = updateObj[currentFilterId];\n    return { id, urlDisplay, operator, value: update };\n  });\n}\n// convert filters from UI objects to data objects\nexport function convertFilters(fts) {\n  return fts.\n  filter((f) => !(typeof f.value === 'undefined' ||\n  Array.isArray(f.value) && !f.value.length)).\n  map(({ value, operator, id }) => {\n    // handle between filter using 2 api filters\n    if (operator === 'between' && Array.isArray(value)) {\n      return [\n      {\n        value: value[0],\n        operator: 'gt',\n        id\n      },\n      {\n        value: value[1],\n        operator: 'lt',\n        id\n      }];\n\n    }\n    return {\n      value,\n      operator,\n      id\n    };\n  }).\n  flat();\n}\n// convertFilters but to handle new decoded rison format\nexport function convertFiltersRison(filterObj, list) {\n  const filters = [];\n  const refs = {};\n  Object.keys(filterObj).forEach((id) => {\n    const filter = {\n      id,\n      value: filterObj[id]\n      // operator: filterObj[id][1], // TODO: can probably get rid of this\n    };\n    refs[id] = filter;\n    filters.push(filter);\n  });\n  // Add operators from filter list\n  list.forEach((value) => {\n    const currentFilterId = value.urlDisplay || value.id;\n    const filter = refs[currentFilterId];\n    if (filter) {\n      filter.operator = value.operator;\n      filter.id = value.id;\n    }\n  });\n  return filters;\n}\nexport function extractInputValue(inputType, event) {\n  if (!inputType || inputType === 'text') {\n    return event.currentTarget.value;\n  }\n  if (inputType === 'checkbox') {\n    return event.currentTarget.checked;\n  }\n  return null;\n}\nexport function useListViewState({ fetchData, columns, data, count, initialPageSize, initialFilters = [], initialSort = [], bulkSelectMode = false, bulkSelectColumnConfig, renderCard = false, defaultViewMode = 'card' }) {\n  const [query, setQuery] = useQueryParams({\n    filters: RisonParam,\n    pageIndex: NumberParam,\n    sortColumn: StringParam,\n    sortOrder: StringParam,\n    viewMode: StringParam\n  });\n  const initialSortBy = useMemo(() => query.sortColumn && query.sortOrder ?\n  [{ id: query.sortColumn, desc: query.sortOrder === 'desc' }] :\n  initialSort, [initialSort, query.sortColumn, query.sortOrder]);\n  const initialState = {\n    filters: query.filters ?\n    convertFiltersRison(query.filters, initialFilters) :\n    [],\n    pageIndex: query.pageIndex || 0,\n    pageSize: initialPageSize,\n    sortBy: initialSortBy\n  };\n  const [viewMode, setViewMode] = useState(query.viewMode || (\n  renderCard ? defaultViewMode : 'table'));\n  const columnsWithSelect = useMemo(() => {\n    // add exact filter type so filters with falsy values are not filtered out\n    const columnsWithFilter = columns.map((f) => ({ ...f, filter: 'exact' }));\n    return bulkSelectMode ?\n    [bulkSelectColumnConfig, ...columnsWithFilter] :\n    columnsWithFilter;\n  }, [bulkSelectMode, columns]);\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, canPreviousPage, canNextPage, pageCount, gotoPage, setAllFilters, setSortBy, selectedFlatRows, toggleAllRowsSelected, state: { pageIndex, pageSize, sortBy, filters } } = useTable({\n    columns: columnsWithSelect,\n    count,\n    data,\n    disableFilters: true,\n    disableSortRemove: true,\n    initialState,\n    manualFilters: true,\n    manualPagination: true,\n    manualSortBy: true,\n    autoResetFilters: false,\n    pageCount: Math.ceil(count / initialPageSize)\n  }, useFilters, useSortBy, usePagination, useRowState, useRowSelect);\n  const [internalFilters, setInternalFilters] = useState(query.filters && initialFilters.length ?\n  mergeCreateFilterValues(initialFilters, query.filters) :\n  []);\n  useEffect(() => {\n    if (initialFilters.length) {\n      setInternalFilters(mergeCreateFilterValues(initialFilters, query.filters ? query.filters : {}));\n    }\n  }, [initialFilters]);\n  useEffect(() => {\n    // From internalFilters, produce a simplified obj\n    const filterObj = {};\n    internalFilters.forEach((filter) => {\n      if (filter.value !== undefined && (\n      typeof filter.value !== 'string' || filter.value.length > 0)) {\n        const currentFilterId = filter.urlDisplay || filter.id;\n        filterObj[currentFilterId] = filter.value;\n      }\n    });\n    const queryParams = {\n      filters: Object.keys(filterObj).length ? filterObj : undefined,\n      pageIndex\n    };\n    if (sortBy[0]) {\n      queryParams.sortColumn = sortBy[0].id;\n      queryParams.sortOrder = sortBy[0].desc ? 'desc' : 'asc';\n    }\n    if (renderCard) {\n      queryParams.viewMode = viewMode;\n    }\n    const method = typeof query.pageIndex !== 'undefined' &&\n    queryParams.pageIndex !== query.pageIndex ?\n    'push' :\n    'replace';\n    setQuery(queryParams, method);\n    fetchData({ pageIndex, pageSize, sortBy, filters });\n  }, [fetchData, pageIndex, pageSize, sortBy, filters]);\n  useEffect(() => {\n    if (!_isEqual(initialState.pageIndex, pageIndex)) {\n      gotoPage(initialState.pageIndex);\n    }\n  }, [query]);\n  const applyFilterValue = (index, value) => {\n    setInternalFilters((currentInternalFilters) => {\n      // skip redundant updates\n      if (currentInternalFilters[index].value === value) {\n        return currentInternalFilters;\n      }\n      const update = { ...currentInternalFilters[index], value };\n      const updatedFilters = updateInList(currentInternalFilters, index, update);\n      setAllFilters(convertFilters(updatedFilters));\n      gotoPage(0); // clear pagination on filter\n      return updatedFilters;\n    });\n  };\n  return {\n    canNextPage,\n    canPreviousPage,\n    getTableBodyProps,\n    getTableProps,\n    gotoPage,\n    headerGroups,\n    pageCount,\n    prepareRow,\n    rows,\n    selectedFlatRows,\n    setAllFilters,\n    setSortBy,\n    state: { pageIndex, pageSize, sortBy, filters, internalFilters, viewMode },\n    toggleAllRowsSelected,\n    applyFilterValue,\n    setViewMode,\n    query\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}