{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { isQueryFormMetric } from './types';\nimport processFilters from './processFilters';\nimport extractExtras from './extractExtras';\nimport extractQueryFields from './extractQueryFields';\nimport { overrideExtraFormData } from './processExtraFormData';\nimport { isDefined } from '../utils';\n/**\n * Build the common segments of all query objects (e.g. the granularity field derived from\n * SQLAlchemy). The segments specific to each viz type is constructed in the\n * buildQuery method for each viz type (see `wordcloud/buildQuery.ts` for an example).\n * Note the type of the formData argument passed in here is the type of the formData for a\n * specific viz, which is a subtype of the generic formData shared among all viz types.\n */\nexport default function buildQueryObject(formData, queryFields) {var _ref, _normalizeSeriesLimit;\n  const { annotation_layers = [], extra_form_data, time_range, since, until, row_limit, row_offset, order_desc, limit, timeseries_limit_metric, granularity, url_params = {}, custom_params = {}, series_columns, series_limit, series_limit_metric, ...residualFormData } = formData;\n  const { adhoc_filters: appendAdhocFilters = [], filters: appendFilters = [], custom_form_data = {}, ...overrides } = extra_form_data || {};\n  const numericRowLimit = Number(row_limit);\n  const numericRowOffset = Number(row_offset);\n  const { metrics, columns, orderby } = extractQueryFields(residualFormData, queryFields);\n  // collect all filters for conversion to simple filters/freeform clauses\n  const extras = extractExtras(formData);\n  const { filters: extraFilters } = extras;\n  const filterFormData = {\n    filters: [...extraFilters, ...appendFilters],\n    adhoc_filters: [...(formData.adhoc_filters || []), ...appendAdhocFilters]\n  };\n  const extrasAndfilters = processFilters({\n    ...formData,\n    ...extras,\n    ...filterFormData\n  });\n  const normalizeSeriesLimitMetric = (metric) => {\n    if (isQueryFormMetric(metric)) {\n      return metric;\n    }\n    return undefined;\n  };\n  let queryObject = {\n    // fallback `null` to `undefined` so they won't be sent to the backend\n    // (JSON.stringify will ignore `undefined`.)\n    time_range: time_range || undefined,\n    since: since || undefined,\n    until: until || undefined,\n    granularity: granularity || undefined,\n    ...extras,\n    ...extrasAndfilters,\n    columns,\n    metrics,\n    orderby,\n    annotation_layers,\n    row_limit: row_limit == null || Number.isNaN(numericRowLimit) ?\n    undefined :\n    numericRowLimit,\n    row_offset: row_offset == null || Number.isNaN(numericRowOffset) ?\n    undefined :\n    numericRowOffset,\n    series_columns,\n    series_limit: series_limit != null ? series_limit : isDefined(limit) ? Number(limit) : 0,\n    series_limit_metric: (_ref = (_normalizeSeriesLimit = normalizeSeriesLimitMetric(series_limit_metric)) != null ? _normalizeSeriesLimit :\n    timeseries_limit_metric) != null ? _ref :\n    undefined,\n    order_desc: typeof order_desc === 'undefined' ? true : order_desc,\n    url_params: url_params || undefined,\n    custom_params\n  };\n  // override extra form data used by native and cross filters\n  queryObject = overrideExtraFormData(queryObject, overrides);\n  return { ...queryObject, custom_form_data };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}