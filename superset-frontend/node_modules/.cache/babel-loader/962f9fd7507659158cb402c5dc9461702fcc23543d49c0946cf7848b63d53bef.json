{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { styled, SupersetClient, t, useTheme, css } from '@superset-ui/core';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport { LoadingCards } from 'src/pages/Home';\nimport { TableTab } from 'src/views/CRUD/types';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Menu } from 'src/components/Menu';\nimport { copyQueryLink, useListViewResource } from 'src/views/CRUD/hooks';\nimport ListViewCard from 'src/components/ListViewCard';\nimport DeleteModal from 'src/components/DeleteModal';\nimport Icons from 'src/components/Icons';\nimport { CardContainer, createErrorHandler, getFilterValues, PAGE_SIZE, shortenSQL } from 'src/views/CRUD/utils';\nimport { Button } from 'src/components';\nimport SubMenu from './SubMenu';\nimport EmptyState from './EmptyState';\nimport { WelcomeTable } from './types';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nSyntaxHighlighter.registerLanguage('sql', sql);\nexport const CardStyles = styled.div`\n  cursor: pointer;\n  a {\n    text-decoration: none;\n  }\n  .antd5-card-cover {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    & > div {\n      height: 171px;\n    }\n  }\n  .gradient-container > div {\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-color: ${({ theme }) => theme.colors.secondary.light3};\n    display: inline-block;\n    width: 100%;\n    height: 179px;\n    background-repeat: no-repeat;\n    vertical-align: middle;\n  }\n`;\nconst QueryData = styled.div`\n  svg {\n    margin-left: ${({ theme }) => theme.gridUnit * 10}px;\n  }\n  .query-title {\n    padding: ${({ theme }) => theme.gridUnit * 2 + 2}px;\n    font-size: ${({ theme }) => theme.typography.sizes.l}px;\n  }\n`;\nconst QueryContainer = styled.div`\n  pre {\n    height: ${({ theme }) => theme.gridUnit * 40}px;\n    border: none !important;\n    background-color: ${({ theme }) => theme.colors.grayscale.light5} !important;\n    overflow: hidden;\n    padding: ${({ theme }) => theme.gridUnit * 4}px !important;\n  }\n`;\nconst SavedQueries = ({ user, addDangerToast, addSuccessToast, mine, showThumbnails, featureFlag }) => {\n  const { state: { loading, resourceCollection: queries }, hasPerm, fetchData, refreshData } = useListViewResource('saved_query', t('query'), addDangerToast, true, mine, [], false);\n  const [activeTab, setActiveTab] = useState(TableTab.Mine);\n  const [queryDeleteModal, setQueryDeleteModal] = useState(false);\n  const [currentlyEdited, setCurrentlyEdited] = useState({});\n  const [ifMine, setMine] = useState(true);\n  const canEdit = hasPerm('can_edit');\n  const canDelete = hasPerm('can_delete');\n  const theme = useTheme();\n  const handleQueryDelete = ({ id, label }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`\n    }).then(() => {\n      const queryParams = {\n        filters: getFilterValues(TableTab.Created, WelcomeTable.SavedQueries, user),\n        pageSize: PAGE_SIZE,\n        sortBy: [\n        {\n          id: 'changed_on_delta_humanized',\n          desc: true\n        }],\n\n        pageIndex: 0\n      };\n      // if mine is default there refresh data with current filters\n      const filter = ifMine ? queryParams : undefined;\n      refreshData(filter);\n      setMine(false);\n      setQueryDeleteModal(false);\n      addSuccessToast(t('Deleted: %s', label));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', label, errMsg))));\n  };\n  const getData = (tab) => fetchData({\n    pageIndex: 0,\n    pageSize: PAGE_SIZE,\n    sortBy: [\n    {\n      id: 'changed_on_delta_humanized',\n      desc: true\n    }],\n\n    filters: getFilterValues(tab, WelcomeTable.SavedQueries, user)\n  });\n  const renderMenu = useCallback((query) => _jsxs(Menu, { children: [\n    canEdit && _jsx(Menu.Item, { children:\n      _jsx(Link, { to: `/sqllab?savedQueryId=${query.id}`, children: t('Edit') }) }\n    ),\n    _jsxs(Menu.Item, { onClick: () => {\n        if (query.id) {\n          copyQueryLink(query.id, addDangerToast, addSuccessToast);\n        }\n      }, children: [\n      _jsx(Icons.UploadOutlined, { iconSize: \"l\", css: css`\n              margin-right: ${theme.gridUnit}px;\n              vertical-align: baseline;\n            ` }),\n      t('Share')] }\n    ),\n    canDelete && _jsx(Menu.Item, { onClick: () => {\n        setQueryDeleteModal(true);\n        setCurrentlyEdited(query);\n      }, children:\n      t('Delete') }\n    )] }\n  ), []);\n  if (loading)\n  return _jsx(LoadingCards, { cover: showThumbnails });\n  return _jsxs(_Fragment, { children: [\n    queryDeleteModal && _jsx(DeleteModal, { description: t('This action will permanently delete the saved query.'), onConfirm: () => {\n        if (queryDeleteModal) {\n          handleQueryDelete(currentlyEdited);\n        }\n      }, onHide: () => {\n        setQueryDeleteModal(false);\n      }, open: true, title: t('Delete Query?') }),\n    _jsx(SubMenu, { activeChild: activeTab, tabs: [\n      {\n        name: TableTab.Mine,\n        label: t('Mine'),\n        onClick: () => getData(TableTab.Mine).then(() => setActiveTab(TableTab.Mine))\n      }],\n      buttons: [\n      {\n        name: _jsxs(Link, { to: \"/sqllab?new=true\", css: css`\n                  &:hover {\n                    color: currentColor;\n                    text-decoration: none;\n                  }\n                `, children: [\n          _jsx(Icons.PlusOutlined, { css: css`\n                    margin: auto ${theme.gridUnit * 2}px auto 0;\n                    vertical-align: text-top;\n                  `, iconSize: \"m\", iconColor: theme.colors.primary.dark1 }),\n          t('SQL Query')] }\n        ),\n        buttonStyle: 'tertiary'\n      },\n      {\n        name: t('View All Â»'),\n        buttonStyle: 'link',\n        onClick: () => {\n          window.location.href = '/savedqueryview/list';\n        }\n      }] }\n    ),\n    queries.length > 0 ? _jsx(CardContainer, { showThumbnails: showThumbnails, children:\n      queries.map((q) => {var _q$sql, _q$sql2;return _jsx(CardStyles, { children:\n          _jsx(ListViewCard, { imgURL: \"\", url: `/sqllab?savedQueryId=${q.id}`, title: q.label, imgFallbackURL: \"/static/assets/images/empty-query.svg\", description: t('Modified %s', q.changed_on_delta_humanized), cover: q != null && (_q$sql = q.sql) != null && _q$sql.length && showThumbnails && featureFlag ? _jsx(QueryContainer, { children:\n              _jsx(SyntaxHighlighter, { language: \"sql\", lineProps: {\n                  style: {\n                    color: theme.colors.grayscale.dark2,\n                    wordBreak: 'break-all',\n                    whiteSpace: 'pre-wrap'\n                  }\n                }, style: github, wrapLines: true, lineNumberStyle: {\n                  display: 'none'\n                }, showLineNumbers: false, children:\n                shortenSQL(q.sql, 25) }\n              ) }\n            ) : showThumbnails && !(q != null && (_q$sql2 = q.sql) != null && _q$sql2.length) ? false : _jsx(_Fragment, {}), actions: _jsx(QueryData, { children:\n              _jsx(ListViewCard.Actions, { onClick: (e) => {\n                  e.stopPropagation();\n                  e.preventDefault();\n                }, children:\n                _jsx(Dropdown, { dropdownRender: () => renderMenu(q), trigger: ['click', 'hover'], children:\n                  _jsx(Button, { buttonSize: \"xsmall\", type: \"link\", children:\n                    _jsx(Icons.MoreOutlined, { iconSize: \"xl\" }) }\n                  ) }\n                ) }\n              ) }\n            ) }) }, q.id\n        );}) }\n    ) : _jsx(EmptyState, { tableName: WelcomeTable.SavedQueries, tab: activeTab })] }\n  );\n};\nexport default withToasts(SavedQueries);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}