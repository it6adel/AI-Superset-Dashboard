{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, useTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nfunction getStatusColor(status, isReportEnabled, theme) {\n  switch (status) {\n    case AlertState.Working:\n      return theme.colors.primary.base;\n    case AlertState.Error:\n      return theme.colors.error.base;\n    case AlertState.Success:\n      return isReportEnabled ?\n      theme.colors.success.base :\n      theme.colors.warning.base;\n    case AlertState.Noop:\n      return theme.colors.success.base;\n    case AlertState.Grace:\n      return theme.colors.warning.base;\n    default:\n      return theme.colors.grayscale.base;\n  }\n}\nexport default function AlertStatusIcon({ state, isReportEnabled = false }) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.CheckOutlined,\n    label: '',\n    status: ''\n  };\n  switch (state) {\n    case AlertState.Success:\n      lastStateConfig.icon = isReportEnabled ?\n      Icons.CheckOutlined :\n      Icons.WarningOutlined;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sent') :\n      t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.Success;\n      break;\n    case AlertState.Working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sending') :\n      t('Alert running');\n      lastStateConfig.status = AlertState.Working;\n      break;\n    case AlertState.Error:\n      lastStateConfig.icon = Icons.CloseOutlined;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report failed') :\n      t('Alert failed');\n      lastStateConfig.status = AlertState.Error;\n      break;\n    case AlertState.Noop:\n      lastStateConfig.icon = Icons.CheckOutlined;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n      break;\n    case AlertState.Grace:\n      lastStateConfig.icon = Icons.WarningOutlined;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.Grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.CheckOutlined;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n  }\n  const Icon = lastStateConfig.icon;\n  return _jsx(Tooltip, { title: lastStateConfig.label, placement: \"bottomLeft\", children:\n    _jsx(Icon, { iconSize: \"m\", iconColor: getStatusColor(lastStateConfig.status, isReportEnabled, theme) }) }\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}