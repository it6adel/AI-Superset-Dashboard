{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CurrencyFormatter, ensureIsArray, getNumberFormatter, isSavedMetric } from '@superset-ui/core';\nexport const buildCustomFormatters = (metrics, savedCurrencyFormats, savedColumnFormats, d3Format, currencyFormat) => {\n  const metricsArray = ensureIsArray(metrics);\n  return metricsArray.reduce((acc, metric) => {\n    if (isSavedMetric(metric)) {\n      const actualD3Format = d3Format != null ? d3Format : savedColumnFormats[metric];\n      const actualCurrencyFormat = currencyFormat != null && currencyFormat.symbol ?\n      currencyFormat :\n      savedCurrencyFormats[metric];\n      return actualCurrencyFormat ?\n      {\n        ...acc,\n        [metric]: new CurrencyFormatter({\n          d3Format: actualD3Format,\n          currency: actualCurrencyFormat\n        })\n      } :\n      {\n        ...acc,\n        [metric]: getNumberFormatter(actualD3Format)\n      };\n    }\n    return acc;\n  }, {});\n};\nexport const getCustomFormatter = (customFormatters, metrics, key) => {\n  const metricsArray = ensureIsArray(metrics);\n  if (metricsArray.length === 1 && isSavedMetric(metricsArray[0])) {\n    return customFormatters[metricsArray[0]];\n  }\n  return key ? customFormatters[key] : undefined;\n};\nexport const getValueFormatter = (metrics, savedCurrencyFormats, savedColumnFormats, d3Format, currencyFormat, key) => {\n  const customFormatter = getCustomFormatter(buildCustomFormatters(metrics, savedCurrencyFormats, savedColumnFormats, d3Format, currencyFormat), metrics, key);\n  if (customFormatter) {\n    return customFormatter;\n  }\n  if (currencyFormat != null && currencyFormat.symbol) {\n    return new CurrencyFormatter({ currency: currencyFormat, d3Format });\n  }\n  return getNumberFormatter(d3Format);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}