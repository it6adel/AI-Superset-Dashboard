{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, useContext, useEffect, useRef, useState } from 'react';\nimport { css, getExtensionsRegistry, styled, t } from '@superset-ui/core';\nimport { useUiConfig } from 'src/components/UiConfigContext';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useSelector } from 'react-redux';\nimport EditableTitle from 'src/components/EditableTitle';\nimport SliceHeaderControls from 'src/dashboard/components/SliceHeaderControls';\nimport FiltersBadge from 'src/dashboard/components/FiltersBadge';\nimport Icons from 'src/components/Icons';\nimport { getSliceHeaderTooltip } from 'src/dashboard/util/getSliceHeaderTooltip';\nimport { DashboardPageIdContext } from 'src/dashboard/containers/DashboardPage';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst annotationsLoading = t('Annotation layers are still loading.');\nconst annotationsError = t('One or more annotation layers failed loading.');\nconst CrossFilterIcon = styled(Icons.ApartmentOutlined)`\n  ${({ theme }) => `\n    cursor: default;\n    color: ${theme.colors.primary.base};\n    line-height: 1.8;\n  `}\n`;\nconst ChartHeaderStyles = styled.div`\n  ${({ theme }) => css`\n    font-size: ${theme.typography.sizes.l}px;\n    font-weight: ${theme.typography.weights.bold};\n    margin-bottom: ${theme.gridUnit}px;\n    display: flex;\n    max-width: 100%;\n    align-items: flex-start;\n    min-height: 0;\n\n    & > .header-title {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      max-width: 100%;\n      flex-grow: 1;\n      display: -webkit-box;\n      -webkit-line-clamp: 2;\n      -webkit-box-orient: vertical;\n\n      & > span.antd5-tooltip-open {\n        display: inline;\n      }\n    }\n\n    & > .header-controls {\n      display: flex;\n      align-items: center;\n      height: 24px;\n    }\n\n    .dropdown.btn-group {\n      pointer-events: none;\n      vertical-align: top;\n      & > * {\n        pointer-events: auto;\n      }\n    }\n\n    .dropdown-toggle.btn.btn-default {\n      background: none;\n      border: none;\n      box-shadow: none;\n    }\n\n    .dropdown-menu.dropdown-menu-right {\n      top: ${theme.gridUnit * 5}px;\n    }\n\n    .divider {\n      margin: ${theme.gridUnit}px 0;\n    }\n\n    .refresh-tooltip {\n      display: block;\n      height: ${theme.gridUnit * 4}px;\n      margin: ${theme.gridUnit}px 0;\n      color: ${theme.colors.text.label};\n    }\n  `}\n`;\nconst SliceHeader = /*#__PURE__*/forwardRef(({ forceRefresh = () => ({}), updateSliceName = () => ({}), toggleExpandSlice = () => ({}), logExploreChart = () => ({}), logEvent, exportCSV = () => ({}), exportXLSX = () => ({}), editMode = false, annotationQuery = {}, annotationError = {}, cachedDttm = null, updatedDttm = null, isCached = [], isExpanded = false, sliceName = '', supersetCanExplore = false, supersetCanShare = false, supersetCanCSV = false, exportPivotCSV, exportFullCSV, exportFullXLSX, slice, componentId, dashboardId, addSuccessToast, addDangerToast, handleToggleFullSize, isFullSize, chartStatus, formData, width, height }, ref) => {\n  const SliceHeaderExtension = extensionsRegistry.get('dashboard.slice.header');\n  const uiConfig = useUiConfig();\n  const dashboardPageId = useContext(DashboardPageIdContext);\n  const [headerTooltip, setHeaderTooltip] = useState(null);\n  const headerRef = useRef(null);\n  // TODO: change to indicator field after it will be implemented\n  const crossFilterValue = useSelector((state) => {var _state$dataMask$slice, _state$dataMask$slice2;return (_state$dataMask$slice = state.dataMask[slice == null ? void 0 : slice.slice_id]) == null ? void 0 : (_state$dataMask$slice2 = _state$dataMask$slice.filterState) == null ? void 0 : _state$dataMask$slice2.value;});\n  const isCrossFiltersEnabled = useSelector(({ dashboardInfo }) => dashboardInfo.crossFiltersEnabled);\n  const canExplore = !editMode && supersetCanExplore;\n  useEffect(() => {\n    const headerElement = headerRef.current;\n    if (canExplore) {\n      setHeaderTooltip(getSliceHeaderTooltip(sliceName));\n    } else\n    if (headerElement && (\n    headerElement.scrollWidth > headerElement.offsetWidth ||\n    headerElement.scrollHeight > headerElement.offsetHeight)) {\n      setHeaderTooltip(sliceName != null ? sliceName : null);\n    } else\n    {\n      setHeaderTooltip(null);\n    }\n  }, [sliceName, width, height, canExplore]);\n  const exploreUrl = `/explore/?dashboard_page_id=${dashboardPageId}&slice_id=${slice.slice_id}`;\n  return _jsxs(ChartHeaderStyles, { ref: ref, children: [\n    _jsxs(\"div\", { className: \"header-title\", ref: headerRef, children: [\n      _jsx(Tooltip, { title: headerTooltip, children:\n        _jsx(EditableTitle, { title: sliceName || (\n          editMode ?\n          '---' // this makes an empty title clickable\n          : ''), canEdit: editMode, onSaveTitle: updateSliceName, showTooltip: false, url: canExplore ? exploreUrl : undefined }) }\n      ),\n      !!Object.values(annotationQuery).length && _jsx(Tooltip, { id: \"annotations-loading-tooltip\", placement: \"top\", title: annotationsLoading, children:\n\n\n        _jsx(\"i\", { role: \"img\", \"aria-label\": annotationsLoading, className: \"fa fa-refresh warning\" }) }\n      ),\n      !!Object.values(annotationError).length && _jsx(Tooltip, { id: \"annotation-errors-tooltip\", placement: \"top\", title: annotationsError, children:\n\n\n        _jsx(\"i\", { role: \"img\", \"aria-label\": annotationsError, className: \"fa fa-exclamation-circle danger\" }) }\n      )] }\n    ),\n    _jsx(\"div\", { className: \"header-controls\", children:\n      !editMode && _jsxs(_Fragment, { children: [\n        SliceHeaderExtension && _jsx(SliceHeaderExtension, { sliceId: slice.slice_id, dashboardId: dashboardId }),\n        crossFilterValue && _jsx(Tooltip, { placement: \"top\", title: t('This chart applies cross-filters to charts whose datasets contain columns with the same name.'), children:\n          _jsx(CrossFilterIcon, { iconSize: \"m\" }) }\n        ),\n        !uiConfig.hideChartControls && _jsx(FiltersBadge, { chartId: slice.slice_id }),\n        !uiConfig.hideChartControls && _jsx(SliceHeaderControls, { slice: slice, isCached: isCached, isExpanded: isExpanded, cachedDttm: cachedDttm, updatedDttm: updatedDttm, toggleExpandSlice: toggleExpandSlice, forceRefresh: forceRefresh, logExploreChart: logExploreChart, logEvent: logEvent, exportCSV: exportCSV, exportPivotCSV: exportPivotCSV, exportFullCSV: exportFullCSV, exportXLSX: exportXLSX, exportFullXLSX: exportFullXLSX, supersetCanExplore: supersetCanExplore, supersetCanShare: supersetCanShare, supersetCanCSV: supersetCanCSV, componentId: componentId, dashboardId: dashboardId, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, handleToggleFullSize: handleToggleFullSize, isFullSize: isFullSize, isDescriptionExpanded: isExpanded, chartStatus: chartStatus, formData: formData, exploreUrl: exploreUrl, crossFiltersEnabled: isCrossFiltersEnabled })] }\n      ) }\n    )] }\n  );\n});\nexport default SliceHeader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}