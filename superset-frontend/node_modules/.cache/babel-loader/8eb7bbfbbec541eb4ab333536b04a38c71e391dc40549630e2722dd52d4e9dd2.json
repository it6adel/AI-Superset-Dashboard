{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { extendedDayjs } from 'src/utils/dates';\nimport { Behavior, css, isFeatureEnabled, FeatureFlag, getChartMetadataRegistry, styled, t, VizType } from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport { Menu } from 'src/components/Menu';\nimport { NoAnimationDropdown } from 'src/components/Dropdown';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport { getSliceHeaderTooltip } from 'src/dashboard/util/getSliceHeaderTooltip';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport ViewQueryModal from 'src/explore/components/controls/ViewQueryModal';\nimport { ResultsPaneOnDashboard } from 'src/explore/components/DataTablesPane';\nimport { DrillDetailMenuItems } from 'src/components/Chart/DrillDetail';\nimport { LOG_ACTIONS_CHART_DOWNLOAD_AS_IMAGE } from 'src/logger/LogUtils';\nimport { MenuKeys } from 'src/dashboard/types';\nimport DrillDetailModal from 'src/components/Chart/DrillDetail/DrillDetailModal';\nimport { usePermissions } from 'src/hooks/usePermissions';\nimport Button from 'src/components/Button';\nimport { useCrossFiltersScopingModal } from '../nativeFilters/FilterBar/CrossFilters/ScopingModal/useCrossFiltersScopingModal';\nimport { ViewResultsModalTrigger } from './ViewResultsModalTrigger';\n// TODO: replace 3 dots with an icon\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";const VerticalDotsContainer = styled.div`\n  padding: ${({ theme }) => theme.gridUnit / 4}px\n    ${({ theme }) => theme.gridUnit * 1.5}px;\n\n  .dot {\n    display: block;\n\n    height: ${({ theme }) => theme.gridUnit}px;\n    width: ${({ theme }) => theme.gridUnit}px;\n    border-radius: 50%;\n    margin: ${({ theme }) => theme.gridUnit / 2}px 0;\n\n    background-color: ${({ theme }) => theme.colors.text.label};\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\nconst RefreshTooltip = styled.div`\n  height: auto;\n  margin: ${({ theme }) => theme.gridUnit}px 0;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  line-height: 21px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\nconst getScreenshotNodeSelector = (chartId) => `.dashboard-chart-id-${chartId}`;\nconst VerticalDotsTrigger = () => _jsxs(VerticalDotsContainer, { children: [\n  _jsx(\"span\", { className: \"dot\" }),\n  _jsx(\"span\", { className: \"dot\" }),\n  _jsx(\"span\", { className: \"dot\" })] }\n);\nconst dropdownIconsStyles = css`\n  &&.anticon > .anticon:first-child {\n    margin-right: 0;\n    vertical-align: 0;\n  }\n`;\nconst SliceHeaderControls = (props) => {var _getChartMetadataRegi, _getChartMetadataRegi2;\n  const [drillModalIsOpen, setDrillModalIsOpen] = useState(false);\n  // setting openKeys undefined falls back to uncontrolled behaviour\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const [openScopingModal, scopingModal] = useCrossFiltersScopingModal(props.slice.slice_id);\n  const history = useHistory();\n  const queryMenuRef = useRef(null);\n  const resultsMenuRef = useRef(null);\n  const [modalFilters, setFilters] = useState([]);\n  const canEditCrossFilters = useSelector(({ dashboardInfo }) => dashboardInfo.dash_edit_perm) && ((_getChartMetadataRegi =\n  getChartMetadataRegistry().\n  get(props.slice.viz_type)) == null ? void 0 : (_getChartMetadataRegi2 = _getChartMetadataRegi.\n  behaviors) == null ? void 0 : _getChartMetadataRegi2.includes(Behavior.InteractiveChart));\n  const canExplore = props.supersetCanExplore;\n  const { canDrillToDetail, canViewQuery, canViewTable } = usePermissions();\n  const refreshChart = () => {\n    if (props.updatedDttm) {\n      props.forceRefresh(props.slice.slice_id, props.dashboardId);\n    }\n  };\n  const handleMenuClick = ({ key, domEvent }) => {\n    switch (key) {\n      case MenuKeys.ForceRefresh:\n        refreshChart();\n        props.addSuccessToast(t('Data refreshed'));\n        break;\n      case MenuKeys.ToggleChartDescription:\n        // eslint-disable-next-line no-unused-expressions\n        props.toggleExpandSlice == null ? void 0 : props.toggleExpandSlice(props.slice.slice_id);\n        break;\n      case MenuKeys.ExploreChart:\n        // eslint-disable-next-line no-unused-expressions\n        props.logExploreChart == null ? void 0 : props.logExploreChart(props.slice.slice_id);\n        if (domEvent.metaKey || domEvent.ctrlKey) {\n          domEvent.preventDefault();\n          window.open(props.exploreUrl, '_blank');\n        } else\n        {\n          history.push(props.exploreUrl);\n        }\n        break;\n      case MenuKeys.ExportCsv:\n        // eslint-disable-next-line no-unused-expressions\n        props.exportCSV == null ? void 0 : props.exportCSV(props.slice.slice_id);\n        break;\n      case MenuKeys.ExportPivotCsv:\n        // eslint-disable-next-line no-unused-expressions\n        props.exportPivotCSV == null ? void 0 : props.exportPivotCSV(props.slice.slice_id);\n        break;\n      case MenuKeys.Fullscreen:\n        props.handleToggleFullSize();\n        break;\n      case MenuKeys.ExportFullCsv:\n        // eslint-disable-next-line no-unused-expressions\n        props.exportFullCSV == null ? void 0 : props.exportFullCSV(props.slice.slice_id);\n        break;\n      case MenuKeys.ExportFullXlsx:\n        // eslint-disable-next-line no-unused-expressions\n        props.exportFullXLSX == null ? void 0 : props.exportFullXLSX(props.slice.slice_id);\n        break;\n      case MenuKeys.ExportXlsx:\n        // eslint-disable-next-line no-unused-expressions\n        props.exportXLSX == null ? void 0 : props.exportXLSX(props.slice.slice_id);\n        break;\n      case MenuKeys.DownloadAsImage:{\n          // menu closes with a delay, we need to hide it manually,\n          // so that we don't capture it on the screenshot\n          const menu = document.querySelector('.antd5-dropdown:not(.antd5-dropdown-hidden)');\n          if (menu) {\n            menu.style.visibility = 'hidden';\n          }\n          downloadAsImage(getScreenshotNodeSelector(props.slice.slice_id), props.slice.slice_name, true)(domEvent).then(() => {\n            if (menu) {\n              menu.style.visibility = 'visible';\n            }\n          });\n          props.logEvent == null ? void 0 : props.logEvent(LOG_ACTIONS_CHART_DOWNLOAD_AS_IMAGE, {\n            chartId: props.slice.slice_id\n          });\n          break;\n        }\n      case MenuKeys.CrossFilterScoping:{\n          openScopingModal();\n          break;\n        }\n      case MenuKeys.ViewResults:{\n          if (resultsMenuRef.current && !resultsMenuRef.current.showModal) {\n            resultsMenuRef.current.open(domEvent);\n          }\n          break;\n        }\n      case MenuKeys.DrillToDetail:{\n          setDrillModalIsOpen(!drillModalIsOpen);\n          break;\n        }\n      case MenuKeys.ViewQuery:{\n          if (queryMenuRef.current && !queryMenuRef.current.showModal) {\n            queryMenuRef.current.open(domEvent);\n          }\n          break;\n        }\n      default:\n        break;\n    }\n    setIsDropdownVisible(false);\n  };\n  const { componentId, dashboardId, slice, isFullSize, cachedDttm = [], updatedDttm = null, addSuccessToast = () => {}, addDangerToast = () => {}, supersetCanShare = false, isCached = [] } = props;\n  const isTable = slice.viz_type === VizType.Table;\n  const isPivotTable = slice.viz_type === VizType.PivotTable;\n  const cachedWhen = (cachedDttm || []).map((itemCachedDttm) => extendedDayjs.utc(itemCachedDttm).fromNow());\n  const updatedWhen = updatedDttm ?\n  extendedDayjs.utc(updatedDttm).fromNow() :\n  '';\n  const getCachedTitle = (itemCached) => {\n    if (itemCached) {\n      return t('Cached %s', cachedWhen);\n    }\n    if (updatedWhen) {\n      return t('Fetched %s', updatedWhen);\n    }\n    return '';\n  };\n  const refreshTooltipData = [...new Set(isCached.map(getCachedTitle) || '')];\n  // If all queries have same cache time we can unit them to one\n  const refreshTooltip = refreshTooltipData.map((item, index) => _jsx(\"div\", { children:\n    refreshTooltipData.length > 1 ?\n    t('Query %s: %s', index + 1, item) :\n    item }, `tooltip-${index}`\n  ));\n  const fullscreenLabel = isFullSize ?\n  t('Exit fullscreen') :\n  t('Enter fullscreen');\n  // @z-index-below-dashboard-header (100) - 1 = 99 for !isFullSize and 101 for isFullSize\n  const dropdownOverlayStyle = {\n    zIndex: isFullSize ? 101 : 99,\n    animationDuration: '0s'\n  };\n  const menu = _jsxs(Menu, { onClick: handleMenuClick, id: `slice_${slice.slice_id}-menu`, selectable: false, children: [\n    _jsxs(Menu.Item, { disabled: props.chartStatus === 'loading', style: { height: 'auto', lineHeight: 'initial' }, children: [\n      t('Force refresh'),\n      _jsx(RefreshTooltip, { children:\n        refreshTooltip }\n      )] }, MenuKeys.ForceRefresh\n    ),\n\n    _jsx(Menu.Item, { children: fullscreenLabel }, MenuKeys.Fullscreen),\n\n    _jsx(Menu.Divider, {}),\n\n    slice.description && _jsx(Menu.Item, { children:\n      props.isDescriptionExpanded ?\n      t('Hide chart description') :\n      t('Show chart description') }, MenuKeys.ToggleChartDescription\n    ),\n\n    canExplore && _jsx(Menu.Item, { \"data-test-edit-chart-name\": slice.slice_name, children:\n      _jsx(Tooltip, { title: getSliceHeaderTooltip(props.slice.slice_name), children:\n        t('Edit chart') }\n      ) }, MenuKeys.ExploreChart\n    ),\n\n    canEditCrossFilters && _jsx(Menu.Item, { children:\n      t('Cross-filtering scoping') }, MenuKeys.CrossFilterScoping\n    ),\n\n    (canExplore || canEditCrossFilters) && _jsx(Menu.Divider, {}),\n\n    (canExplore || canViewQuery) && _jsx(Menu.Item, { children:\n      _jsx(ModalTrigger, { triggerNode: _jsx(\"div\", { children: t('View query') }), modalTitle: t('View query'), modalBody: _jsx(ViewQueryModal, { latestQueryFormData: props.formData }), draggable: true, resizable: true, responsive: true, ref: queryMenuRef }) }, MenuKeys.ViewQuery\n    ),\n\n    (canExplore || canViewTable) && _jsx(Menu.Item, { children:\n      _jsx(ViewResultsModalTrigger, { canExplore: props.supersetCanExplore, exploreUrl: props.exploreUrl, triggerNode: _jsx(\"div\", { children: t('View as table') }), modalRef: resultsMenuRef, modalTitle: t('Chart Data: %s', slice.slice_name), modalBody: _jsx(ResultsPaneOnDashboard, { queryFormData: props.formData, queryForce: false, dataSize: 20, isRequest: true, isVisible: true, canDownload: !!props.supersetCanCSV }) }) }, MenuKeys.ViewResults\n    ),\n\n    isFeatureEnabled(FeatureFlag.DrillToDetail) && canDrillToDetail && _jsx(DrillDetailMenuItems, { setFilters: setFilters, filters: modalFilters, formData: props.formData, setShowModal: setDrillModalIsOpen }, MenuKeys.DrillToDetail),\n\n    (slice.description || canExplore) && _jsx(Menu.Divider, {}),\n\n    supersetCanShare && _jsx(ShareMenuItems, { dashboardId: dashboardId, dashboardComponentId: componentId, copyMenuItemTitle: t('Copy permalink to clipboard'), emailMenuItemTitle: t('Share chart by email'), emailSubject: t('Superset chart'), emailBody: t('Check out this chart: '), addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, title: t('Share') }),\n\n    props.supersetCanCSV && _jsxs(Menu.SubMenu, { title: t('Download'), children: [\n      _jsx(Menu.Item, { icon: _jsx(Icons.FileOutlined, { css: dropdownIconsStyles }), children:\n        t('Export to .CSV') }, MenuKeys.ExportCsv\n      ),\n      isPivotTable && _jsx(Menu.Item, { icon: _jsx(Icons.FileOutlined, { css: dropdownIconsStyles }), children:\n        t('Export to Pivoted .CSV') }, MenuKeys.ExportPivotCsv\n      ),\n      _jsx(Menu.Item, { icon: _jsx(Icons.FileOutlined, { css: dropdownIconsStyles }), children:\n        t('Export to Excel') }, MenuKeys.ExportXlsx\n      ),\n\n      isFeatureEnabled(FeatureFlag.AllowFullCsvExport) &&\n      props.supersetCanCSV &&\n      isTable && _jsxs(_Fragment, { children: [\n        _jsx(Menu.Item, { icon: _jsx(Icons.FileOutlined, { css: dropdownIconsStyles }), children:\n          t('Export to full .CSV') }, MenuKeys.ExportFullCsv\n        ),\n        _jsx(Menu.Item, { icon: _jsx(Icons.FileOutlined, { css: dropdownIconsStyles }), children:\n          t('Export to full Excel') }, MenuKeys.ExportFullXlsx\n        )] }\n      ),\n\n      _jsx(Menu.Item, { icon: _jsx(Icons.FileImageOutlined, { css: dropdownIconsStyles }), children:\n        t('Download as image') }, MenuKeys.DownloadAsImage\n      )] }, MenuKeys.Download\n    )] }\n  );\n  return _jsxs(_Fragment, { children: [\n    isFullSize && _jsx(Icons.FullscreenExitOutlined, { style: { fontSize: 22 }, onClick: () => {\n        props.handleToggleFullSize();\n      } }),\n    _jsx(NoAnimationDropdown, { dropdownRender: () => menu, overlayStyle: dropdownOverlayStyle, trigger: ['click'], placement: \"bottomRight\", open: isDropdownVisible, onOpenChange: (visible) => setIsDropdownVisible(visible), children:\n      _jsx(Button, { type: \"link\", id: `slice_${slice.slice_id}-controls`, \"aria-label\": \"More Options\", \"aria-haspopup\": \"true\", children:\n        _jsx(VerticalDotsTrigger, {}) }\n      ) }\n    ),\n    _jsx(DrillDetailModal, { formData: props.formData, initialFilters: [], onHideModal: () => {\n        setDrillModalIsOpen(false);\n      }, chartId: slice.slice_id, showModal: drillModalIsOpen }),\n\n    canEditCrossFilters && scopingModal] }\n  );\n};\nexport default SliceHeaderControls;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}