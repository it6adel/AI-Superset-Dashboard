{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport { css, useTheme, useTruncation } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { useFilterConfigModal } from 'src/dashboard/components/nativeFilters/FilterBar/FilterConfigurationLink/useFilterConfigModal';\nimport { Row, FilterName, InternalRow } from './Styles';\nimport { FilterConfigurationLink } from '../FilterBar/FilterConfigurationLink';\nimport { TooltipWithTruncation } from './TooltipWithTruncation';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const NameRow = ({ filter, hidePopover }) => {\n  const theme = useTheme();\n  const [filterNameRef,, elementsTruncated] = useTruncation();\n  const dashboardId = useSelector(({ dashboardInfo }) => dashboardInfo.id);\n  const canEdit = useSelector(({ dashboardInfo }) => dashboardInfo.dash_edit_perm);\n  const { FilterConfigModalComponent, openFilterConfigModal } = useFilterConfigModal({\n    dashboardId,\n    initialFilterId: filter.id\n  });\n  return _jsxs(Row, { css: (theme) => css`\n        margin-bottom: ${theme.gridUnit * 3}px;\n        justify-content: space-between;\n      `, children: [\n    _jsxs(InternalRow, { children: [\n      _jsx(Icons.FilterOutlined, { iconSize: \"s\", css: (theme) => css`\n            margin-right: ${theme.gridUnit}px;\n          ` }),\n      _jsx(TooltipWithTruncation, { title: elementsTruncated ? filter.name : null, children:\n        _jsx(FilterName, { ref: filterNameRef, children: filter.name }) }\n      )] }\n    ),\n    canEdit && _jsx(FilterConfigurationLink, { onClick: () => {\n        openFilterConfigModal();\n        hidePopover();\n      }, children:\n      _jsx(Icons.EditOutlined, { iconSize: \"l\", iconColor: theme.colors.grayscale.light1, css: () => css`\n              cursor: pointer;\n            ` }) }\n    ),\n    FilterConfigModalComponent] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}