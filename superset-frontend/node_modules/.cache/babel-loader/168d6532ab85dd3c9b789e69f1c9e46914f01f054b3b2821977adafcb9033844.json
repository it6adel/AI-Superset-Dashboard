{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createDurationFormatter, getNumberFormatter, getNumberFormatterRegistry, NumberFormats, getTimeFormatterRegistry, SMART_DATE_ID, SMART_DATE_DETAILED_ID, SMART_DATE_VERBOSE_ID, createSmartDateFormatter, createSmartDateVerboseFormatter, createSmartDateDetailedFormatter, createMemoryFormatter } from '@superset-ui/core';\nexport default function setupFormatters(d3NumberFormat, d3TimeFormat) {\n  getNumberFormatterRegistry().\n  setD3Format(d3NumberFormat)\n  // Add shims for format strings that are deprecated or common typos.\n  // Temporary solution until performing a db migration to fix this.\n  .registerValue(',0', getNumberFormatter(',.4~f')).\n  registerValue('null', getNumberFormatter(',.4~f')).\n  registerValue('%', getNumberFormatter('.0%')).\n  registerValue('.', getNumberFormatter('.4~f')).\n  registerValue(',f', getNumberFormatter(',d')).\n  registerValue(',r', getNumberFormatter(',.4f')).\n  registerValue('0f', getNumberFormatter(',d')).\n  registerValue(',#', getNumberFormatter(',.4~f')).\n  registerValue('$,f', getNumberFormatter('$,d')).\n  registerValue('0%', getNumberFormatter('.0%')).\n  registerValue('f', getNumberFormatter(',d')).\n  registerValue(',.', getNumberFormatter(',.4~f')).\n  registerValue('.1%f', getNumberFormatter('.1%')).\n  registerValue('1%', getNumberFormatter('.0%')).\n  registerValue('3%', getNumberFormatter('.0%')).\n  registerValue(',%', getNumberFormatter(',.0%')).\n  registerValue('.r', getNumberFormatter('.4~f')).\n  registerValue('$,.0', getNumberFormatter('$,d')).\n  registerValue('$,.1', getNumberFormatter('$,.1~f')).\n  registerValue(',0s', getNumberFormatter(',.4~f')).\n  registerValue('%%%', getNumberFormatter('.0%')).\n  registerValue(',0f', getNumberFormatter(',d')).\n  registerValue('+,%', getNumberFormatter('+,.0%')).\n  registerValue('$f', getNumberFormatter('$,d')).\n  registerValue('+,', getNumberFormatter(NumberFormats.INTEGER_SIGNED)).\n  registerValue(',2f', getNumberFormatter(',.4~f')).\n  registerValue(',g', getNumberFormatter(',.4~f')).\n  registerValue('int', getNumberFormatter(NumberFormats.INTEGER)).\n  registerValue('.0%f', getNumberFormatter('.1%')).\n  registerValue('$,0', getNumberFormatter('$,.4f')).\n  registerValue('$,0f', getNumberFormatter('$,.4f')).\n  registerValue('$,.f', getNumberFormatter('$,.4f')).\n  registerValue('DURATION', createDurationFormatter()).\n  registerValue('DURATION_SUB', createDurationFormatter({ formatSubMilliseconds: true })).\n  registerValue('DURATION_COL', createDurationFormatter({ colonNotation: true })).\n  registerValue('MEMORY_DECIMAL', createMemoryFormatter({ binary: false })).\n  registerValue('MEMORY_BINARY', createMemoryFormatter({ binary: true })).\n  registerValue('MEMORY_TRANSFER_RATE_DECIMAL', createMemoryFormatter({ binary: false, transfer: true })).\n  registerValue('MEMORY_TRANSFER_RATE_BINARY', createMemoryFormatter({ binary: true, transfer: true }));\n  const timeFormatterRegistry = getTimeFormatterRegistry();\n  timeFormatterRegistry.\n  setD3Format(d3TimeFormat).\n  registerValue(SMART_DATE_ID, createSmartDateFormatter(timeFormatterRegistry.d3Format)).\n  registerValue(SMART_DATE_VERBOSE_ID, createSmartDateVerboseFormatter(timeFormatterRegistry.d3Format)).\n  registerValue(SMART_DATE_DETAILED_ID, createSmartDateDetailedFormatter(timeFormatterRegistry.d3Format)).\n  setDefaultKey(SMART_DATE_ID);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}