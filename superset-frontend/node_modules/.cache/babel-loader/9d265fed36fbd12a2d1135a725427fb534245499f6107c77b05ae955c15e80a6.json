{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { getExtentFromFeatures } from './geometryUtil';\n// default map extent of world if no features are found\n// TODO: move to generic config file or plugin configuration\n// TODO: adapt to CRS other than Web Mercator\nconst defaultExtent = [-16000000, -7279000, 20500000, 11000000];\n/**\n * Fits map to the spatial extent of provided charts.\n *\n * @param olMap The OpenLayers map\n * @param chartConfigs The chart configuration\n */\nexport const fitMapToCharts = (olMap, chartConfigs) => {\n  const view = olMap.getView();\n  const features = new GeoJSON().readFeatures(chartConfigs, {\n    // TODO: adapt to map projection\n    featureProjection: 'EPSG:3857'\n  });\n  const extent = getExtentFromFeatures(features) || defaultExtent;\n  view.fit(extent, {\n    // tested for a desktop size monitor\n    size: [250, 250]\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}