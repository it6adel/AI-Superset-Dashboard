{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_TIME_FORMAT_DOCS, getStandardizedControls, sections, sharedControls } from '@superset-ui/chart-controls';\nimport { EchartsTimeseriesSeriesType } from '../../types';\nimport { DEFAULT_FORM_DATA, TIME_SERIES_DESCRIPTION_TEXT } from '../constants';\nimport { legendSection, minorTicks, richTooltipSection, seriesOrderSection, showValueSection, truncateXAxis, xAxisBounds, xAxisLabelRotation } from '../../controls';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst { area, logAxis, markerEnabled, markerSize, minorSplitLine, opacity, rowLimit, truncateYAxis, yAxisBounds, zoomable } = DEFAULT_FORM_DATA;\nconst config = {\n  controlPanelSections: [\n  sections.echartsTimeSeriesQueryWithXAxisSort,\n  sections.advancedAnalyticsControls,\n  sections.annotationsAndLayersControls,\n  sections.forecastIntervalControls,\n  sections.titleControls,\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ...seriesOrderSection,\n    ['color_scheme'],\n    ['time_shift_color'],\n    [\n    {\n      name: 'seriesType',\n      config: {\n        type: 'SelectControl',\n        label: t('Step type'),\n        renderTrigger: true,\n        default: EchartsTimeseriesSeriesType.Start,\n        choices: [\n        [EchartsTimeseriesSeriesType.Start, t('Start')],\n        [EchartsTimeseriesSeriesType.Middle, t('Middle')],\n        [EchartsTimeseriesSeriesType.End, t('End')]],\n\n        description: t('Defines whether the step should appear at the beginning, middle or end between two data points')\n      }\n    }],\n\n    ...showValueSection,\n    [\n    {\n      name: 'area',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Area Chart'),\n        renderTrigger: true,\n        default: area,\n        description: t('Draw area under curves. Only applicable for line types.')\n      }\n    }],\n\n    [\n    {\n      name: 'opacity',\n      config: {\n        type: 'SliderControl',\n        label: t('Area chart opacity'),\n        renderTrigger: true,\n        min: 0,\n        max: 1,\n        step: 0.1,\n        default: opacity,\n        description: t('Opacity of Area Chart. Also applies to confidence band.'),\n        visibility: ({ controls }) => {var _controls$area;return Boolean(controls == null ? void 0 : (_controls$area = controls.area) == null ? void 0 : _controls$area.value);}\n      }\n    }],\n\n    [\n    {\n      name: 'markerEnabled',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Marker'),\n        renderTrigger: true,\n        default: markerEnabled,\n        description: t('Draw a marker on data points. Only applicable for line types.')\n      }\n    }],\n\n    [\n    {\n      name: 'markerSize',\n      config: {\n        type: 'SliderControl',\n        label: t('Marker Size'),\n        renderTrigger: true,\n        min: 0,\n        max: 20,\n        default: markerSize,\n        description: t('Size of marker. Also applies to forecast observations.'),\n        visibility: ({ controls }) => {var _controls$markerEnabl;return Boolean(controls == null ? void 0 : (_controls$markerEnabl = controls.markerEnabled) == null ? void 0 : _controls$markerEnabl.value);}\n      }\n    }],\n\n    [\n    {\n      name: 'zoomable',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Data Zoom'),\n        default: zoomable,\n        renderTrigger: true,\n        description: t('Enable data zooming controls')\n      }\n    }],\n\n    [minorTicks],\n    ...legendSection,\n    [_jsx(ControlSubSectionHeader, { children: t('X Axis') })],\n    [\n    {\n      name: 'x_axis_time_format',\n      config: {\n        ...sharedControls.x_axis_time_format,\n        default: 'smart_date',\n        description: `${D3_TIME_FORMAT_DOCS}. ${TIME_SERIES_DESCRIPTION_TEXT}`\n      }\n    }],\n\n    [xAxisLabelRotation],\n    ...richTooltipSection,\n    // eslint-disable-next-line react/jsx-key\n    [_jsx(ControlSubSectionHeader, { children: t('Y Axis') })],\n    ['y_axis_format'],\n    ['currency_format'],\n    [\n    {\n      name: 'logAxis',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Logarithmic y-axis'),\n        renderTrigger: true,\n        default: logAxis,\n        description: t('Logarithmic y-axis')\n      }\n    }],\n\n    [\n    {\n      name: 'minorSplitLine',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Minor Split Line'),\n        renderTrigger: true,\n        default: minorSplitLine,\n        description: t('Draw split lines for minor y-axis ticks')\n      }\n    }],\n\n    [truncateXAxis],\n    [xAxisBounds],\n    [\n    {\n      name: 'truncateYAxis',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Truncate Y Axis'),\n        default: truncateYAxis,\n        renderTrigger: true,\n        description: t('Truncate Y Axis. Can be overridden by specifying a min or max bound.')\n      }\n    }],\n\n    [\n    {\n      name: 'y_axis_bounds',\n      config: {\n        type: 'BoundsControl',\n        label: t('Y Axis Bounds'),\n        renderTrigger: true,\n        default: yAxisBounds,\n        description: t('Bounds for the Y-axis. When left empty, the bounds are ' +\n        'dynamically defined based on the min/max of the data. Note that ' +\n        \"this feature will only expand the axis range. It won't \" +\n        \"narrow the data's extent.\"),\n        visibility: ({ controls }) => {var _controls$truncateYAx;return Boolean(controls == null ? void 0 : (_controls$truncateYAx = controls.truncateYAxis) == null ? void 0 : _controls$truncateYAx.value);}\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    row_limit: {\n      default: rowLimit\n    }\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}