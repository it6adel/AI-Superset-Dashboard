{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createContext, lazy, useEffect, useMemo, useRef } from 'react';\nimport { Global } from '@emotion/react';\nimport { useHistory } from 'react-router-dom';\nimport { t, useTheme } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport { useDashboard, useDashboardCharts, useDashboardDatasets } from 'src/hooks/apiResources';\nimport { hydrateDashboard } from 'src/dashboard/actions/hydrate';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { getAllActiveFilters, getRelevantDataMask } from 'src/dashboard/util/activeAllDashboardFilters';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { setDatasetsStatus } from 'src/dashboard/actions/dashboardState';\nimport { getFilterValue, getPermalinkValue } from 'src/dashboard/components/nativeFilters/FilterBar/keyValue';\nimport DashboardContainer from 'src/dashboard/containers/Dashboard';\nimport { nanoid } from 'nanoid';\nimport { chartContextMenuStyles, filterCardPopoverStyle, focusStyle, headerStyles, chartHeaderStyles } from '../styles';\nimport SyncDashboardState, { getDashboardContextLocalStorage } from '../components/SyncDashboardState';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const DashboardPageIdContext = /*#__PURE__*/createContext('');\nconst DashboardBuilder = /*#__PURE__*/lazy(() => import(\n  /* webpackChunkName: \"DashboardContainer\" */\n  /* webpackPreload: true */\n  'src/dashboard/components/DashboardBuilder/DashboardBuilder'));\nconst originalDocumentTitle = document.title;\n// TODO: move to Dashboard.jsx when it's refactored to functional component\nconst selectRelevantDatamask = createSelector((state) => state.dataMask, // the first argument accesses relevant data from global state\n// the first argument accesses relevant data from global state\n(dataMask) => getRelevantDataMask(dataMask, 'ownState'));\nconst selectChartConfiguration = (state) => {var _state$dashboardInfo$;return (_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.chart_configuration;};\nconst selectNativeFilters = (state) => state.nativeFilters.filters;\nconst selectDataMask = (state) => state.dataMask;\nconst selectAllSliceIds = (state) => state.dashboardState.sliceIds;\n// TODO: move to Dashboard.jsx when it's refactored to functional component\nconst selectActiveFilters = createSelector([\nselectChartConfiguration,\nselectNativeFilters,\nselectDataMask,\nselectAllSliceIds],\n(chartConfiguration, nativeFilters, dataMask, allSliceIds) => ({\n  ...getActiveFilters(),\n  ...getAllActiveFilters({\n    // eslint-disable-next-line camelcase\n    chartConfiguration,\n    nativeFilters,\n    dataMask,\n    allSliceIds\n  })\n}));\nexport const DashboardPage = ({ idOrSlug }) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const dashboardPageId = useMemo(() => nanoid(), []);\n  const hasDashboardInfoInitiated = useSelector(({ dashboardInfo }) => dashboardInfo && Object.keys(dashboardInfo).length > 0);\n  const { addDangerToast } = useToasts();\n  const { result: dashboard, error: dashboardApiError } = useDashboard(idOrSlug);\n  const { result: charts, error: chartsApiError } = useDashboardCharts(idOrSlug);\n  const { result: datasets, error: datasetsApiError, status } = useDashboardDatasets(idOrSlug);\n  const isDashboardHydrated = useRef(false);\n  const error = dashboardApiError || chartsApiError;\n  const readyToRender = Boolean(dashboard && charts);\n  const { dashboard_title, css, id = 0 } = dashboard || {};\n  useEffect(() => {\n    // mark tab id as redundant when user closes browser tab - a new id will be\n    // generated next time user opens a dashboard and the old one won't be reused\n    const handleTabClose = () => {\n      const dashboardsContexts = getDashboardContextLocalStorage();\n      setItem(LocalStorageKeys.DashboardExploreContext, {\n        ...dashboardsContexts,\n        [dashboardPageId]: {\n          ...dashboardsContexts[dashboardPageId],\n          isRedundant: true\n        }\n      });\n    };\n    window.addEventListener('beforeunload', handleTabClose);\n    return () => {\n      window.removeEventListener('beforeunload', handleTabClose);\n    };\n  }, [dashboardPageId]);\n  useEffect(() => {\n    dispatch(setDatasetsStatus(status));\n  }, [dispatch, status]);\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    async function getDataMaskApplied() {\n      const permalinkKey = getUrlParam(URL_PARAMS.permalinkKey);\n      const nativeFilterKeyValue = getUrlParam(URL_PARAMS.nativeFiltersKey);\n      const isOldRison = getUrlParam(URL_PARAMS.nativeFilters);\n      let dataMask = nativeFilterKeyValue || {};\n      // activeTabs is initialized with undefined so that it doesn't override\n      // the currently stored value when hydrating\n      let activeTabs;\n      if (permalinkKey) {\n        const permalinkValue = await getPermalinkValue(permalinkKey);\n        if (permalinkValue) {\n          ({ dataMask, activeTabs } = permalinkValue.state);\n        }\n      } else\n      if (nativeFilterKeyValue) {\n        dataMask = await getFilterValue(id, nativeFilterKeyValue);\n      }\n      if (isOldRison) {\n        dataMask = isOldRison;\n      }\n      if (readyToRender) {\n        if (!isDashboardHydrated.current) {\n          isDashboardHydrated.current = true;\n        }\n        dispatch(hydrateDashboard({\n          history,\n          dashboard,\n          charts,\n          activeTabs,\n          dataMask\n        }));\n      }\n      return null;\n    }\n    if (id)\n    getDataMaskApplied();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [readyToRender]);\n  useEffect(() => {\n    if (dashboard_title) {\n      document.title = dashboard_title;\n    }\n    return () => {\n      document.title = originalDocumentTitle;\n    };\n  }, [dashboard_title]);\n  useEffect(() => {\n    if (typeof css === 'string') {\n      // returning will clean up custom css\n      // when dashboard unmounts or changes\n      return injectCustomCss(css);\n    }\n    return () => {};\n  }, [css]);\n  useEffect(() => {\n    if (datasetsApiError) {\n      addDangerToast(t('Error loading chart datasources. Filters may not work correctly.'));\n    } else\n    {\n      dispatch(setDatasources(datasets));\n    }\n  }, [addDangerToast, datasets, datasetsApiError, dispatch]);\n  const relevantDataMask = useSelector(selectRelevantDatamask);\n  const activeFilters = useSelector(selectActiveFilters);\n  if (error)\n  throw error; // caught in error boundary\n  const globalStyles = useMemo(() => [\n  filterCardPopoverStyle(theme),\n  headerStyles(theme),\n  chartContextMenuStyles(theme),\n  focusStyle(theme),\n  chartHeaderStyles(theme)],\n  [theme]);\n  if (error)\n  throw error; // caught in error boundary\n  const DashboardBuilderComponent = useMemo(() => _jsx(DashboardBuilder, {}), []);\n  return _jsxs(_Fragment, { children: [\n    _jsx(Global, { styles: globalStyles }),\n    readyToRender && hasDashboardInfoInitiated ? _jsxs(_Fragment, { children: [\n      _jsx(SyncDashboardState, { dashboardPageId: dashboardPageId }),\n      _jsx(DashboardPageIdContext.Provider, { value: dashboardPageId, children:\n        _jsx(DashboardContainer, { activeFilters: activeFilters, ownDataCharts: relevantDataMask, children:\n          DashboardBuilderComponent }\n        ) }\n      )] }\n    ) : _jsx(Loading, {})] }\n  );\n};\nexport default DashboardPage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}