{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo } from 'react';\nimport { Row, Col } from 'src/components';\nimport { Input, TextArea } from 'src/components/Input';\nimport { t, styled } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport { Menu } from 'src/components/Menu';\nimport { Form, FormItem } from 'src/components/Form';\nimport Modal from 'src/components/Modal';\nimport SaveDatasetActionButton from 'src/SqlLab/components/SaveDatasetActionButton';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport useLogAction from 'src/logger/useLogAction';\nimport { LOG_ACTIONS_SQLLAB_CREATE_CHART, LOG_ACTIONS_SQLLAB_SAVE_QUERY } from 'src/logger/LogUtils';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst Styles = styled.span`\n  span[role='img']:not([aria-label='down']) {\n    display: flex;\n    margin: 0;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      vertical-align: -${({ theme }) => theme.gridUnit * 1.25}px;\n      margin: 0;\n    }\n  }\n`;\nconst SaveQuery = ({ queryEditorId, onSave = () => {}, onUpdate, saveQueryWarning, database, columns }) => {\n  const queryEditor = useQueryEditor(queryEditorId, [\n  'autorun',\n  'name',\n  'description',\n  'remoteId',\n  'dbId',\n  'latestQueryId',\n  'queryLimit',\n  'catalog',\n  'schema',\n  'selectedText',\n  'sql',\n  'templateParams']\n  );\n  const query = useMemo(() => ({\n    ...queryEditor,\n    columns\n  }), [queryEditor, columns]);\n  const logAction = useLogAction({ queryEditorId });\n  const defaultLabel = query.name || query.description || t('Undefined');\n  const [description, setDescription] = useState(query.description || '');\n  const [label, setLabel] = useState(defaultLabel);\n  const [showSave, setShowSave] = useState(false);\n  const [showSaveDatasetModal, setShowSaveDatasetModal] = useState(false);\n  const isSaved = !!query.remoteId;\n  const canExploreDatabase = !!(database != null && database.allows_virtual_table_explore);\n  const shouldShowSaveButton = (database == null ? void 0 : database.allows_virtual_table_explore) !== undefined;\n  const overlayMenu = _jsx(Menu, { children:\n    _jsx(Menu.Item, { onClick: () => {\n        logAction(LOG_ACTIONS_SQLLAB_CREATE_CHART, {});\n        setShowSaveDatasetModal(true);\n      }, children:\n      t('Save dataset') }\n    ) }\n  );\n  const queryPayload = () => {var _query$dbId;return {\n      name: label,\n      description,\n      dbId: (_query$dbId = query.dbId) != null ? _query$dbId : 0,\n      sql: query.sql,\n      catalog: query.catalog,\n      schema: query.schema,\n      templateParams: query.templateParams,\n      remoteId: (query == null ? void 0 : query.remoteId) || undefined\n    };};\n  useEffect(() => {\n    if (!isSaved)\n    setLabel(defaultLabel);\n  }, [defaultLabel]);\n  const close = () => setShowSave(false);\n  const onSaveWrapper = () => {\n    logAction(LOG_ACTIONS_SQLLAB_SAVE_QUERY, {});\n    onSave(queryPayload(), query.id);\n    close();\n  };\n  const onUpdateWrapper = () => {\n    onUpdate(queryPayload(), query.id);\n    close();\n  };\n  const onLabelChange = (e) => {\n    setLabel(e.target.value);\n  };\n  const onDescriptionChange = (e) => {\n    setDescription(e.target.value);\n  };\n  const renderModalBody = () => _jsxs(Form, { layout: \"vertical\", children: [\n    _jsx(Row, { children:\n      _jsx(Col, { xs: 24, children:\n        _jsx(FormItem, { label: t('Name'), children:\n          _jsx(Input, { type: \"text\", value: label, onChange: onLabelChange }) }\n        ) }\n      ) }\n    ),\n    _jsx(\"br\", {}),\n    _jsx(Row, { children:\n      _jsx(Col, { xs: 24, children:\n        _jsx(FormItem, { label: t('Description'), children:\n          _jsx(TextArea, { rows: 4, value: description, onChange: onDescriptionChange }) }\n        ) }\n      ) }\n    ),\n    saveQueryWarning && _jsxs(_Fragment, { children: [\n      _jsx(\"br\", {}),\n      _jsxs(\"div\", { children: [\n        _jsx(Row, { children:\n          _jsx(Col, { xs: 24, children:\n            _jsx(\"small\", { children: saveQueryWarning }) }\n          ) }\n        ),\n        _jsx(\"br\", {})] }\n      )] }\n    )] }\n  );\n  return _jsxs(Styles, { className: \"SaveQuery\", children: [\n    shouldShowSaveButton && _jsx(SaveDatasetActionButton, { setShowSave: setShowSave, overlayMenu: canExploreDatabase ? overlayMenu : null }),\n    _jsx(SaveDatasetModal, { visible: showSaveDatasetModal, onHide: () => setShowSaveDatasetModal(false), buttonTextOnSave: t('Save & Explore'), buttonTextOnOverwrite: t('Overwrite & Explore'), datasource: getDatasourceAsSaveableDataset(query) }),\n    _jsx(Modal, { className: \"save-query-modal\", onHandledPrimaryAction: onSaveWrapper, onHide: close, primaryButtonName: isSaved ? t('Save') : t('Save as'), width: \"620px\", show: showSave, title: _jsx(\"h4\", { children: t('Save query') }), footer: _jsxs(_Fragment, { children: [\n        _jsx(Button, { onClick: close, cta: true, children:\n          t('Cancel') }\n        ),\n        _jsx(Button, { buttonStyle: isSaved ? undefined : 'primary', onClick: onSaveWrapper, className: \"m-r-3\", cta: true, children:\n          isSaved ? t('Save as new') : t('Save') }\n        ),\n        isSaved && _jsx(Button, { buttonStyle: \"primary\", onClick: onUpdateWrapper, className: \"m-r-3\", cta: true, children:\n          t('Update') }\n        )] }\n      ), children:\n      renderModalBody() }\n    )] }\n  );\n};\nexport default SaveQuery;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}