{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ArcLayer } from '@deck.gl/layers';\nimport { t } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport { createCategoricalDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nfunction getPoints(data) {\n  const points = [];\n  data.forEach((d) => {\n    points.push(d.sourcePosition);\n    points.push(d.targetPosition);\n  });\n  return points;\n}\nfunction setTooltipContent(formData) {\n  return (o) => {var _o$object, _o$object$sourcePosit, _o$object2, _o$object2$sourcePosi, _o$object3, _o$object3$targetPosi, _o$object4, _o$object4$targetPosi, _o$object5;return _jsxs(\"div\", { className: \"deckgl-tooltip\", children: [\n      _jsx(TooltipRow, { label: t('Start (Longitude, Latitude): '), value: `${(_o$object = o.object) == null ? void 0 : (_o$object$sourcePosit = _o$object.sourcePosition) == null ? void 0 : _o$object$sourcePosit[0]}, ${(_o$object2 = o.object) == null ? void 0 : (_o$object2$sourcePosi = _o$object2.sourcePosition) == null ? void 0 : _o$object2$sourcePosi[1]}` }),\n      _jsx(TooltipRow, { label: t('End (Longitude, Latitude): '), value: `${(_o$object3 = o.object) == null ? void 0 : (_o$object3$targetPosi = _o$object3.targetPosition) == null ? void 0 : _o$object3$targetPosi[0]}, ${(_o$object4 = o.object) == null ? void 0 : (_o$object4$targetPosi = _o$object4.targetPosition) == null ? void 0 : _o$object4$targetPosi[1]}` }),\n      formData.dimension && _jsx(TooltipRow, { label: `${formData == null ? void 0 : formData.dimension}: `, value: `${(_o$object5 = o.object) == null ? void 0 : _o$object5.cat_color}` })] }\n    );};\n}\nexport function getLayer(fd, payload, onAddFilter, setTooltip) {\n  const data = payload.data.features;\n  const sc = fd.color_picker;\n  const tc = fd.target_color_picker;\n  return new ArcLayer({\n    data,\n    getSourceColor: (d) => d.sourceColor || d.color || [sc.r, sc.g, sc.b, 255 * sc.a],\n    getTargetColor: (d) => d.targetColor || d.color || [tc.r, tc.g, tc.b, 255 * tc.a],\n    id: `path-layer-${fd.slice_id}`,\n    strokeWidth: fd.stroke_width ? fd.stroke_width : 3,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent(fd))\n  });\n}\nexport default createCategoricalDeckGLComponent(getLayer, getPoints);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}