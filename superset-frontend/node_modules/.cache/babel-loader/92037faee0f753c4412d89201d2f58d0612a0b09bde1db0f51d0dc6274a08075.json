{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getColumnLabel, getMetricLabel, getNumberFormatter, getValueFormatter, NumberFormats, tooltipHtml, VizType } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA as DEFAULT_FUNNEL_FORM_DATA, EchartsFunnelLabelTypeType, PercentCalcType } from './types';\nimport { extractGroupbyLabel, getChartPadding, getColtypesMapping, getLegendProps, sanitizeHtml } from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { DEFAULT_LEGEND_FORM_DATA, OpacityEnum } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\nexport function parseParams({ params, numberFormatter, percentCalculationType = PercentCalcType.FirstStep, sanitizeName = false }) {\n  const { name: rawName = '', value, percent: totalPercent, data } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value);\n  const { firstStepPercent, prevStepPercent } = data;\n  let percent;\n  if (percentCalculationType === PercentCalcType.Total) {\n    percent = (totalPercent != null ? totalPercent : 0) / 100;\n  } else\n  if (percentCalculationType === PercentCalcType.PreviousStep) {\n    percent = prevStepPercent != null ? prevStepPercent : 0;\n  } else\n  {\n    percent = firstStepPercent != null ? firstStepPercent : 0;\n  }\n  const formattedPercent = percentFormatter(percent);\n  return [name, formattedValue, formattedPercent];\n}\nexport default function transformProps(chartProps) {\n  const { formData, height, hooks, filterState, queriesData, width, theme, emitCrossFilters, datasource } = chartProps;\n  const data = queriesData[0].data || [];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { colorScheme, groupby, orient, sort, gap, labelLine, labelType, tooltipLabelType, legendMargin, legendOrientation, legendType, metric = '', numberFormat, currencyFormat, showLabels, inContextMenu, showTooltipLabels, showLegend, sliceId, percentCalculationType } = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_FUNNEL_FORM_DATA,\n    ...formData\n  };\n  const { currencyFormats = {}, columnFormats = {} } = datasource;\n  const refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const keys = data.map((datum) => extractGroupbyLabel({ datum, groupby: groupbyLabels, coltypeMapping: {} }));\n  const labelMap = data.reduce((acc, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {}\n    });\n    return {\n      ...acc,\n      [label]: groupbyLabels.map((col) => datum[col])\n    };\n  }, {});\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, numberFormat, currencyFormat);\n  const transformedData = data.map((datum, index) => {\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {}\n    });\n    const value = datum[metricLabel];\n    const isFiltered = filterState.selectedValues && !filterState.selectedValues.includes(name);\n    const firstStepPercent = value / data[0][metricLabel];\n    const prevStepPercent = index === 0 ? 1 : value / data[index - 1][metricLabel];\n    return {\n      value,\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered ?\n        OpacityEnum.SemiTransparent :\n        OpacityEnum.NonTransparent\n      },\n      firstStepPercent,\n      prevStepPercent\n    };\n  });\n  const selectedValues = (filterState.selectedValues || []).reduce((acc, selectedValue) => {\n    const index = transformedData.findIndex(({ name }) => name === selectedValue);\n    return {\n      ...acc,\n      [index]: selectedValue\n    };\n  }, {});\n  const formatter = (params) => {\n    const [name, formattedValue, formattedPercent] = parseParams({\n      params,\n      numberFormatter,\n      percentCalculationType\n    });\n    switch (labelType) {\n      case EchartsFunnelLabelTypeType.Key:\n        return name;\n      case EchartsFunnelLabelTypeType.Value:\n        return formattedValue;\n      case EchartsFunnelLabelTypeType.Percent:\n        return formattedPercent;\n      case EchartsFunnelLabelTypeType.KeyValue:\n        return `${name}: ${formattedValue}`;\n      case EchartsFunnelLabelTypeType.KeyValuePercent:\n        return `${name}: ${formattedValue} (${formattedPercent})`;\n      case EchartsFunnelLabelTypeType.KeyPercent:\n        return `${name}: ${formattedPercent}`;\n      case EchartsFunnelLabelTypeType.ValuePercent:\n        return `${formattedValue} (${formattedPercent})`;\n      default:\n        return name;\n    }\n  };\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2\n  };\n  const series = [\n  {\n    type: VizType.Funnel,\n    ...getChartPadding(showLegend, legendOrientation, legendMargin),\n    animation: true,\n    minSize: '0%',\n    maxSize: '100%',\n    sort,\n    orient,\n    gap,\n    funnelAlign: 'center',\n    labelLine: { show: !!labelLine },\n    label: {\n      ...defaultLabel,\n      position: labelLine ? 'outer' : 'inner',\n      textBorderColor: 'transparent'\n    },\n    emphasis: {\n      label: {\n        show: true,\n        fontWeight: 'bold'\n      }\n    },\n    // @ts-ignore\n    data: transformedData\n  }];\n\n  const echartOptions = {\n    grid: {\n      ...defaultGrid\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu && showTooltipLabels,\n      trigger: 'item',\n      formatter: (params) => {\n        const [name, formattedValue, formattedPercent] = parseParams({\n          params,\n          numberFormatter,\n          percentCalculationType\n        });\n        const row = [];\n        const enumName = EchartsFunnelLabelTypeType[tooltipLabelType];\n        const title = enumName.includes('Key') ? name : undefined;\n        if (enumName.includes('Value') || enumName.includes('Percent')) {\n          row.push(metricLabel);\n        }\n        if (enumName.includes('Value')) {\n          row.push(formattedValue);\n        }\n        if (enumName.includes('Percent')) {\n          row.push(formattedPercent);\n        }\n        return tooltipHtml([row], title);\n      }\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys\n    },\n    series\n  };\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    coltypeMapping\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}