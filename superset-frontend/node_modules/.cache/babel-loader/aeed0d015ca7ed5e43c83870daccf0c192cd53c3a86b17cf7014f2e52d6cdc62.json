{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css, useTheme, useCSSTextTruncation, truncationCSS } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FilterBarOrientation } from 'src/dashboard/types';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst VerticalDivider = ({ title, description }) => _jsxs(\"div\", { children: [\n  _jsx(\"h3\", { children: title }),\n  description ? _jsx(\"p\", { children: description }) : null] }\n);\nconst HorizontalDivider = ({ title, description }) => {\n  const theme = useTheme();\n  const [titleRef, titleIsTruncated] = useCSSTextTruncation();\n  return _jsxs(\"div\", { css: css`\n        display: flex;\n        align-items: center;\n        height: ${6 * theme.gridUnit}px;\n        border-left: 1px solid ${theme.colors.grayscale.light2};\n        padding-left: ${4 * theme.gridUnit}px;\n\n        .filter-item-wrapper:first-child & {\n          border-left: none;\n          padding-left: 0;\n        }\n      `, children: [\n    _jsx(Tooltip, { overlay: titleIsTruncated ? title : null, children:\n      _jsx(\"h3\", { ref: titleRef, css: css`\n            ${truncationCSS};\n            max-width: ${theme.gridUnit * 32.5}px;\n            font-size: ${theme.typography.sizes.m}px;\n            font-weight: ${theme.typography.weights.normal};\n            margin: 0;\n            color: ${theme.colors.grayscale.dark1};\n          `, children:\n        title }\n      ) }\n    ),\n    description ? _jsx(Tooltip, { overlay: description, children:\n      _jsx(Icons.BookOutlined, { iconSize: \"l\", css: css`\n              margin: 0 ${theme.gridUnit * 1.5}px;\n              vertical-align: unset;\n              line-height: unset;\n            ` }) }\n    ) : null] }\n  );\n};\nconst HorizontalOverflowDivider = ({ title, description }) => {\n  const theme = useTheme();\n  const [titleRef, titleIsTruncated] = useCSSTextTruncation();\n  const [descriptionRef, descriptionIsTruncated] = useCSSTextTruncation();\n  return _jsxs(\"div\", { css: css`\n        border-top: 1px solid ${theme.colors.grayscale.light2};\n        padding-top: ${theme.gridUnit * 4}px;\n        margin-bottom: ${theme.gridUnit * 4}px;\n      `, children: [\n    _jsx(Tooltip, { overlay: titleIsTruncated ? _jsx(\"strong\", { children: title }) : null, children:\n      _jsx(\"h3\", { ref: titleRef, css: css`\n            ${truncationCSS};\n            display: block;\n            color: ${theme.colors.grayscale.dark1};\n            font-weight: ${theme.typography.weights.normal};\n            font-size: ${theme.typography.sizes.m}px;\n            margin: 0 0 ${theme.gridUnit}px 0;\n          `, children:\n        title }\n      ) }\n    ),\n    description ? _jsx(Tooltip, { overlay: descriptionIsTruncated ? description : null, children:\n      _jsx(\"p\", { ref: descriptionRef, css: css`\n              ${truncationCSS};\n              display: block;\n              font-size: ${theme.typography.sizes.s}px;\n              color: ${theme.colors.grayscale.base};\n              margin: ${theme.gridUnit}px 0 0 0;\n            `, children:\n        description }\n      ) }\n    ) : null] }\n  );\n};\nconst FilterDivider = ({ title, description, orientation = FilterBarOrientation.Vertical, overflow = false }) => {\n  if (orientation === FilterBarOrientation.Horizontal) {\n    if (overflow) {\n      return _jsx(HorizontalOverflowDivider, { title: title, description: description });\n    }\n    return _jsx(HorizontalDivider, { title: title, description: description });\n  }\n  return _jsx(VerticalDivider, { title: title, description: description });\n};\nexport default FilterDivider;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}