{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\nimport { ensureIsArray, styled, t, getChartMetadataRegistry, getClientErrorObject } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyState } from 'src/components/EmptyState';\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport { SingleQueryResultPane } from './SingleQueryResultPane';\nimport { TableControls } from './DataTableControls';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\nconst cache = new WeakMap();\nexport const useResultsPane = ({ isRequest, queryFormData, queryForce, ownState, errorMessage, actions, isVisible, dataSize = 50, canDownload }) => {var _metadata$queryObject;\n  const metadata = getChartMetadataRegistry().get((queryFormData == null ? void 0 : queryFormData.viz_type) || (queryFormData == null ? void 0 : queryFormData.vizType));\n  const [resultResp, setResultResp] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [responseError, setResponseError] = useState('');\n  const queryCount = (_metadata$queryObject = metadata == null ? void 0 : metadata.queryObjectCount) != null ? _metadata$queryObject : 1;\n  useEffect(() => {\n    // it's an invalid formData when gets a errorMessage\n    if (errorMessage)\n    return;\n    if (isRequest && cache.has(queryFormData)) {\n      setResultResp(ensureIsArray(cache.get(queryFormData)));\n      setResponseError('');\n      if (queryForce && actions) {\n        actions.setForceQuery(false);\n      }\n      setIsLoading(false);\n    }\n    if (isRequest && !cache.has(queryFormData)) {\n      setIsLoading(true);\n      getChartDataRequest({\n        formData: queryFormData,\n        force: queryForce,\n        resultFormat: 'json',\n        resultType: 'results',\n        ownState\n      }).\n      then(({ json }) => {\n        setResultResp(ensureIsArray(json.result));\n        setResponseError('');\n        cache.set(queryFormData, json.result);\n        if (queryForce && actions) {\n          actions.setForceQuery(false);\n        }\n      }).\n      catch((response) => {\n        getClientErrorObject(response).then(({ error, message }) => {\n          setResponseError(error || message || t('Sorry, an error occurred'));\n        });\n      }).\n      finally(() => {\n        setIsLoading(false);\n      });\n    }\n  }, [queryFormData, isRequest]);\n  useEffect(() => {\n    if (errorMessage) {\n      setIsLoading(false);\n    }\n  }, [errorMessage]);\n  if (isLoading) {\n    return Array(queryCount).fill(_jsx(Loading, {}));\n  }\n  if (errorMessage) {\n    const title = t('Run a query to display results');\n    return Array(queryCount).fill(_jsx(EmptyState, { image: \"document.svg\", title: title }));\n  }\n  if (responseError) {\n    const err = _jsxs(_Fragment, { children: [\n      _jsx(TableControls, { data: [], columnNames: [], columnTypes: [], rowcount: 0, datasourceId: queryFormData.datasource, onInputChange: () => {}, isLoading: false, canDownload: canDownload }),\n      _jsx(Error, { children: responseError })] }\n    );\n    return Array(queryCount).fill(err);\n  }\n  if (resultResp.length === 0) {\n    const title = t('No results were returned for this query');\n    return Array(queryCount).fill(_jsx(EmptyState, { image: \"document.svg\", title: title }));\n  }\n  return resultResp.\n  slice(0, queryCount).\n  map((result, idx) => _jsx(SingleQueryResultPane, { data: result.data, colnames: result.colnames, coltypes: result.coltypes, rowcount: result.rowcount, dataSize: dataSize, datasourceId: queryFormData.datasource, isVisible: isVisible, canDownload: canDownload }, idx));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}