{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isDefined, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\n\nimport { RESERVED_CHART_URL_PARAMS, RESERVED_DASHBOARD_URL_PARAMS, URL_PARAMS } from '../constants';\nimport { getActiveFilters } from '../dashboard/util/activeDashboardFilters';\nimport serializeActiveFilterValues from '../dashboard/util/serializeActiveFilterValues';\nexport function getUrlParam({ name, type }) {\n  const urlParam = new URLSearchParams(window.location.search).get(name);\n  switch (type) {\n    case 'number':\n      if (!urlParam) {\n        return null;\n      }\n      if (urlParam.toLowerCase() === 'true') {\n        return 1;\n      }\n      if (urlParam.toLowerCase() === 'false') {\n        return 0;\n      }\n      if (!Number.isNaN(Number(urlParam))) {\n        return Number(urlParam);\n      }\n      return null;\n    case 'object':\n      if (!urlParam) {\n        return null;\n      }\n      return JSON.parse(urlParam);\n    case 'boolean':\n      if (!urlParam) {\n        return null;\n      }\n      return urlParam.toLowerCase() !== 'false' && urlParam !== '0';\n    case 'rison':\n      if (!urlParam) {\n        return null;\n      }\n      try {\n        return rison.decode(urlParam);\n      }\n      catch {\n        return urlParam;\n      }\n    default:\n      return urlParam;\n  }\n}\nfunction getUrlParams(excludedParams) {\n  const urlParams = new URLSearchParams();\n  const currentParams = new URLSearchParams(window.location.search);\n  currentParams.forEach((value, key) => {\n    if (!excludedParams.includes(key))\n    urlParams.append(key, value);\n  });\n  return urlParams;\n}\nfunction getUrlParamEntries(urlParams) {\n  const urlEntries = [];\n  urlParams.forEach((value, key) => urlEntries.push([key, value]));\n  return urlEntries;\n}\nfunction getChartUrlParams(excludedUrlParams) {\n  const excludedParams = excludedUrlParams || RESERVED_CHART_URL_PARAMS;\n  const urlParams = getUrlParams(excludedParams);\n  const filterBoxFilters = getActiveFilters();\n  if (!_isEmpty(filterBoxFilters) &&\n  !excludedParams.includes(URL_PARAMS.preselectFilters.name))\n  urlParams.append(URL_PARAMS.preselectFilters.name, JSON.stringify(serializeActiveFilterValues(getActiveFilters())));\n  return getUrlParamEntries(urlParams);\n}\nexport function getDashboardUrlParams(extraExcludedParams = []) {\n  const urlParams = getUrlParams([\n  ...RESERVED_DASHBOARD_URL_PARAMS,\n  ...extraExcludedParams]\n  );\n  const filterBoxFilters = getActiveFilters();\n  if (!_isEmpty(filterBoxFilters))\n  urlParams.append(URL_PARAMS.preselectFilters.name, JSON.stringify(serializeActiveFilterValues(getActiveFilters())));\n  return getUrlParamEntries(urlParams);\n}\nfunction getPermalink(endpoint, jsonPayload) {\n  return SupersetClient.post({\n    endpoint,\n    jsonPayload\n  }).then((result) => result.json.url);\n}\nexport function getChartPermalink(formData, excludedUrlParams) {\n  return getPermalink('/api/v1/explore/permalink', {\n    formData,\n    urlParams: getChartUrlParams(excludedUrlParams)\n  });\n}\nexport function getDashboardPermalink({ dashboardId, dataMask, activeTabs, anchor // the anchor part of the link which corresponds to the tab/chart id\n}) {\n  // only encode filter state if non-empty\n  return getPermalink(`/api/v1/dashboard/${dashboardId}/permalink`, {\n    urlParams: getDashboardUrlParams(),\n    dataMask,\n    activeTabs,\n    anchor\n  });\n}\nconst externalUrlRegex = /^([^:/?#]+:)?(?:(\\/\\/)?([^/?#]*))?([^?#]+)?(\\?[^#]*)?(#.*)?/;\n// group 1 matches protocol\n// group 2 matches '//'\n// group 3 matches hostname\nexport function isUrlExternal(url) {\n  const match = url.match(externalUrlRegex) || [];\n  return typeof match[1] === 'string' && match[1].length > 0 ||\n  match[2] === '//' ||\n  typeof match[3] === 'string' && match[3].length > 0;\n}\nexport function parseUrl(url) {\n  const match = url.match(externalUrlRegex) || [];\n  // if url is external but start with protocol or '//',\n  // it can't be used correctly with <a> element\n  // in such case, add '//' prefix\n  if (isUrlExternal(url) && !isDefined(match[1]) && !url.startsWith('//')) {\n    return `//${url}`;\n  }\n  return url;\n}\nexport function toQueryString(params) {\n  const queryParts = [];\n  Object.keys(params).forEach((key) => {\n    const value = params[key];\n    if (value !== null && value !== undefined) {\n      queryParts.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n    }\n  });\n  return queryParts.length > 0 ? `?${queryParts.join('&')}` : '';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}