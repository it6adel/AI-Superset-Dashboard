{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FeatureFlag, isFeatureEnabled, styled, SupersetClient, t, css, useTheme } from '@superset-ui/core';\nimport { useCallback, useMemo, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport { createErrorHandler, createFetchDistinct, createFetchRelated } from 'src/views/CRUD/utils';\nimport { useSelector } from 'react-redux';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu from 'src/features/home/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport { TagsList } from 'src/components/Tags';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { loadTags } from 'src/components/Tags/utils';\nimport Icons from 'src/components/Icons';\nimport SavedQueryPreviewModal from 'src/features/queries/SavedQueryPreviewModal';\nimport { findPermission } from 'src/utils/findPermission';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the saved queries. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more saved queries that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\nfunction SavedQueryList({ addDangerToast, addSuccessToast, user }) {\n  const theme = useTheme();\n  const { state: { loading, resourceCount: queryCount, resourceCollection: queries, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('saved_query', t('Saved queries'), addDangerToast);\n  const { roles } = useSelector((state) => state.user);\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] = useState(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] = useState(null);\n  const [importingSavedQuery, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const history = useHistory();\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Query imported'));\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n  const handleSavedQueryPreview = useCallback((id) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${id}`\n    }).then(({ json = {} }) => {\n      setSavedQueryCurrentlyPreviewing({ ...json.result });\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue previewing the selected query %s', errMsg))));\n  }, [addDangerToast]);\n  const menuData = {\n    activeChild: 'Saved queries',\n    ...commonMenuData\n  };\n  const subMenuButtons = [];\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary'\n    });\n  }\n  subMenuButtons.push({\n    name: _jsxs(Link, { to: \"/sqllab?new=true\", css: css`\n          display: flex;\n          &:hover {\n            color: currentColor;\n            text-decoration: none;\n          }\n        `, children: [\n      _jsx(Icons.PlusOutlined, { iconColor: theme.colors.primary.light5, iconSize: \"m\", css: css`\n            margin: auto ${theme.gridUnit * 2}px auto 0;\n          ` }),\n      t('Query')] }\n    ),\n    buttonStyle: 'primary'\n  });\n  if (canCreate) {\n    subMenuButtons.push({\n      name: _jsx(Tooltip, { id: \"import-tooltip\", title: t('Import queries'), placement: \"bottomRight\", children:\n        _jsx(Icons.DownloadOutlined, {}) }\n      ),\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal\n\n    });\n  }\n  menuData.buttons = subMenuButtons;\n  // Action methods\n  const openInSqlLab = (id, openInNewWindow) => {\n    if (openInNewWindow) {\n      window.open(`/sqllab?savedQueryId=${id}`);\n    } else\n    {\n      history.push(`/sqllab?savedQueryId=${id}`);\n    }\n  };\n  const copyQueryLink = useCallback(async (savedQuery) => {\n    try {\n      const payload = {\n        dbId: savedQuery.db_id,\n        name: savedQuery.label,\n        schema: savedQuery.schema,\n        catalog: savedQuery.catalog,\n        sql: savedQuery.sql,\n        autorun: false,\n        templateParams: null\n      };\n      const response = await SupersetClient.post({\n        endpoint: '/api/v1/sqllab/permalink',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n      const { url: permalink } = response.json;\n      await navigator.clipboard.writeText(permalink);\n      addSuccessToast(t('Link Copied!'));\n    }\n    catch (error) {\n      addDangerToast(t('There was an error generating the permalink.'));\n    }\n  }, [addDangerToast, addSuccessToast]);\n  const handleQueryDelete = ({ id, label }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`\n    }).then(() => {\n      refreshData();\n      setQueryCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', label));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', label, errMsg))));\n  };\n  const handleBulkSavedQueryExport = (savedQueriesToExport) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const handleBulkQueryDelete = (queriesToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(queriesToDelete.map(({ id }) => id))}`\n    }).then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected queries: %s', errMsg))));\n  };\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'label',\n    Header: t('Name'),\n    Cell: ({ row: { original: { id, label } } }) => _jsx(Link, { to: `/sqllab?savedQueryId=${id}`, children: label })\n  },\n  {\n    accessor: 'description',\n    Header: t('Description')\n  },\n  {\n    accessor: 'database.database_name',\n    Header: t('Database'),\n    size: 'xl'\n  },\n  {\n    accessor: 'database',\n    hidden: true,\n    disableSortBy: true\n  },\n  {\n    accessor: 'schema',\n    Header: t('Schema'),\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original: { sql_tables: tables = [] } } }) => {\n      const names = tables.map((table) => table.table);\n      const main = (names == null ? void 0 : names.shift()) || '';\n      if (names.length) {\n        return _jsxs(StyledTableLabel, { children: [\n          _jsx(\"span\", { children: main }),\n          _jsx(Popover, { placement: \"right\", title: t('TABLES'), trigger: \"click\", content: _jsx(_Fragment, { children:\n              names.map((name) => _jsx(StyledPopoverItem, { children: name }, name)) }\n            ), children:\n            _jsxs(\"span\", { className: \"count\", children: [\"(+\", names.length, \")\"] }) }\n          )] }\n        );\n      }\n      return main;\n    },\n    accessor: 'sql_tables',\n    Header: t('Tables'),\n    size: 'xl',\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original: { tags = [] } } }) =>\n    // Only show custom type tags\n    _jsx(TagsList, { tags: tags.filter((tag) => tag.type === 1) }),\n    Header: t('Tags'),\n    accessor: 'tags',\n    disableSortBy: true,\n    hidden: !isFeatureEnabled(FeatureFlag.TaggingSystem)\n  },\n  {\n    Cell: ({ row: { original: { changed_by: changedBy, changed_on_delta_humanized: changedOn } } }) => _jsx(ModifiedInfo, { user: changedBy, date: changedOn }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handlePreview = () => {\n        handleSavedQueryPreview(original.id);\n      };\n      const handleEdit = ({ metaKey }) => openInSqlLab(original.id, Boolean(metaKey));\n      const handleCopy = () => copyQueryLink(original);\n      const handleExport = () => handleBulkSavedQueryExport([original]);\n      const handleDelete = () => setQueryCurrentlyDeleting(original);\n      const actions = [\n      {\n        label: 'preview-action',\n        tooltip: t('Query preview'),\n        placement: 'bottom',\n        icon: 'Binoculars',\n        onClick: handlePreview\n      },\n      canEdit && {\n        label: 'edit-action',\n        tooltip: t('Edit query'),\n        placement: 'bottom',\n        icon: 'EditOutlined',\n        onClick: handleEdit\n      },\n      {\n        label: 'copy-action',\n        tooltip: t('Copy query URL'),\n        placement: 'bottom',\n        icon: 'CopyOutlined',\n        onClick: handleCopy\n      },\n      canExport && {\n        label: 'export-action',\n        tooltip: t('Export query'),\n        placement: 'bottom',\n        icon: 'UploadOutlined',\n        onClick: handleExport\n      },\n      canDelete && {\n        label: 'delete-action',\n        tooltip: t('Delete query'),\n        placement: 'bottom',\n        icon: 'DeleteOutlined',\n        onClick: handleDelete\n      }].\n      filter((item) => !!item);\n      return _jsx(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Search'),\n    id: 'label',\n    key: 'search',\n    input: 'search',\n    operator: FilterOperator.AllText,\n    toolTipDescription: 'Searches all text fields: Name, Description, Database & Schema'\n  },\n  {\n    Header: t('Database'),\n    key: 'database',\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('saved_query', 'database', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dataset datasource values: %s', errMsg)))),\n    paginate: true\n  },\n  {\n    Header: t('Schema'),\n    id: 'schema',\n    key: 'schema',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('saved_query', 'schema', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching schema values: %s', errMsg)))),\n    paginate: true\n  },\n  ...(isFeatureEnabled(FeatureFlag.TaggingSystem) && canReadTag ?\n  [\n  {\n    Header: t('Tag'),\n    id: 'tags',\n    key: 'tags',\n    input: 'select',\n    operator: FilterOperator.SavedQueryTagById,\n    fetchSelects: loadTags\n  }] :\n\n  []),\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('saved_query', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  [addDangerToast]);\n  return _jsxs(_Fragment, { children: [\n    _jsx(SubMenu, { ...menuData }),\n    queryCurrentlyDeleting && _jsx(DeleteModal, { description: t('This action will permanently delete the saved query.'), onConfirm: () => {\n        if (queryCurrentlyDeleting) {\n          handleQueryDelete(queryCurrentlyDeleting);\n        }\n      }, onHide: () => setQueryCurrentlyDeleting(null), open: true, title: t('Delete Query?') }),\n    savedQueryCurrentlyPreviewing && _jsx(SavedQueryPreviewModal, { fetchData: handleSavedQueryPreview, onHide: () => setSavedQueryCurrentlyPreviewing(null), savedQuery: savedQueryCurrentlyPreviewing, queries: queries, openInSqlLab: openInSqlLab, show: true }),\n    _jsx(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected queries?'), onConfirm: handleBulkQueryDelete, children:\n      (confirmDelete) => {\n        const bulkActions = [];\n        if (canDelete) {\n          bulkActions.push({\n            key: 'delete',\n            name: t('Delete'),\n            onSelect: confirmDelete,\n            type: 'danger'\n          });\n        }\n        if (canExport) {\n          bulkActions.push({\n            key: 'export',\n            name: t('Export'),\n            type: 'primary',\n            onSelect: handleBulkSavedQueryExport\n          });\n        }\n        return _jsx(ListView, { className: \"saved_query-list-view\", columns: columns, count: queryCount, data: queries, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, bulkActions: bulkActions, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, highlightRowId: savedQueryCurrentlyPreviewing == null ? void 0 : savedQueryCurrentlyPreviewing.id, enableBulkTag: true, bulkTagResourceName: \"query\", refreshData: refreshData });\n      } }\n    ),\n\n    _jsx(ImportModelsModal, { resourceName: \"saved_query\", resourceLabel: t('queries'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleSavedQueryImport, show: importingSavedQuery, onHide: closeSavedQueryImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n    preparingExport && _jsx(Loading, {})] }\n  );\n}\nexport default withToasts(SavedQueryList);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}