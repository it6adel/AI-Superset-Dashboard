{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { ColorSchemeEnum } from '@superset-ui/plugin-chart-table';\nimport { Comparator, MultipleValueComparators } from '@superset-ui/chart-controls';\nimport { Form, FormItem } from 'src/components/Form';\nimport Select from 'src/components/Select/Select';\nimport { Col, Row } from 'src/components';\nimport { InputNumber } from 'src/components/Input';\nimport Button from 'src/components/Button';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst FullWidthInputNumber = styled(InputNumber)`\n  width: 100%;\n`;\nconst JustifyEnd = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\nconst colorSchemeOptions = (theme) => [\n{ value: theme.colors.success.light1, label: t('success') },\n{ value: theme.colors.warning.light1, label: t('alert') },\n{ value: theme.colors.error.light1, label: t('error') },\n{ value: theme.colors.success.dark1, label: t('success dark') },\n{ value: theme.colors.warning.dark1, label: t('alert dark') },\n{ value: theme.colors.error.dark1, label: t('error dark') }];\n\nconst operatorOptions = [\n{ value: Comparator.None, label: t('None') },\n{ value: Comparator.GreaterThan, label: '>' },\n{ value: Comparator.LessThan, label: '<' },\n{ value: Comparator.GreaterOrEqual, label: '≥' },\n{ value: Comparator.LessOrEqual, label: '≤' },\n{ value: Comparator.Equal, label: '=' },\n{ value: Comparator.NotEqual, label: '≠' },\n{ value: Comparator.Between, label: '< x <' },\n{ value: Comparator.BetweenOrEqual, label: '≤ x ≤' },\n{ value: Comparator.BetweenOrLeftEqual, label: '≤ x <' },\n{ value: Comparator.BetweenOrRightEqual, label: '< x ≤' }];\n\nconst targetValueValidator = (compare, rejectMessage) => (targetValue) => (_, compareValue) => {\n  if (!targetValue ||\n  !compareValue ||\n  compare(Number(targetValue), Number(compareValue))) {\n    return Promise.resolve();\n  }\n  return Promise.reject(new Error(rejectMessage));\n};\nconst targetValueLeftValidator = targetValueValidator((target, val) => target > val, t('This value should be smaller than the right target value'));\nconst targetValueRightValidator = targetValueValidator((target, val) => target < val, t('This value should be greater than the left target value'));\nconst isOperatorMultiValue = (operator) => operator && MultipleValueComparators.includes(operator);\nconst isOperatorNone = (operator) => !operator || operator === Comparator.None;\nconst rulesRequired = [{ required: true, message: t('Required') }];\nconst rulesTargetValueLeft = [\n{ required: true, message: t('Required') },\n({ getFieldValue }) => ({\n  validator: targetValueLeftValidator(getFieldValue('targetValueRight'))\n})];\n\nconst rulesTargetValueRight = [\n{ required: true, message: t('Required') },\n({ getFieldValue }) => ({\n  validator: targetValueRightValidator(getFieldValue('targetValueLeft'))\n})];\n\nconst targetValueLeftDeps = ['targetValueRight'];\nconst targetValueRightDeps = ['targetValueLeft'];\nconst shouldFormItemUpdate = (prevValues, currentValues) => isOperatorNone(prevValues.operator) !==\nisOperatorNone(currentValues.operator) ||\nisOperatorMultiValue(prevValues.operator) !==\nisOperatorMultiValue(currentValues.operator);\nconst renderOperator = ({ showOnlyNone } = {}) => _jsx(FormItem, { name: \"operator\", label: t('Operator'), rules: rulesRequired, initialValue: operatorOptions[0].value, children:\n  _jsx(Select, { ariaLabel: t('Operator'), options: showOnlyNone ? [operatorOptions[0]] : operatorOptions }) }\n);\nconst renderOperatorFields = ({ getFieldValue }) => isOperatorNone(getFieldValue('operator')) ? _jsx(Row, { gutter: 12, children:\n  _jsx(Col, { span: 6, children: renderOperator() }) }\n) : isOperatorMultiValue(getFieldValue('operator')) ? _jsxs(Row, { gutter: 12, children: [\n  _jsx(Col, { span: 9, children:\n    _jsx(FormItem, { name: \"targetValueLeft\", label: t('Left value'), rules: rulesTargetValueLeft, dependencies: targetValueLeftDeps, validateTrigger: \"onBlur\", trigger: \"onBlur\", children:\n      _jsx(FullWidthInputNumber, {}) }\n    ) }\n  ),\n  _jsx(Col, { span: 6, children: renderOperator() }),\n  _jsx(Col, { span: 9, children:\n    _jsx(FormItem, { name: \"targetValueRight\", label: t('Right value'), rules: rulesTargetValueRight, dependencies: targetValueRightDeps, validateTrigger: \"onBlur\", trigger: \"onBlur\", children:\n      _jsx(FullWidthInputNumber, {}) }\n    ) }\n  )] }\n) : _jsxs(Row, { gutter: 12, children: [\n  _jsx(Col, { span: 6, children: renderOperator() }),\n  _jsx(Col, { span: 18, children:\n    _jsx(FormItem, { name: \"targetValue\", label: t('Target value'), rules: rulesRequired, children:\n      _jsx(FullWidthInputNumber, {}) }\n    ) }\n  )] }\n);\nexport const FormattingPopoverContent = ({ config, onChange, columns = [], extraColorChoices = [] }) => {var _columns$;\n  const theme = useTheme();\n  const colorScheme = colorSchemeOptions(theme);\n  const [showOperatorFields, setShowOperatorFields] = useState(config === undefined ||\n  (config == null ? void 0 : config.colorScheme) !== ColorSchemeEnum.Green &&\n  (config == null ? void 0 : config.colorScheme) !== ColorSchemeEnum.Red);\n  const handleChange = (event) => {\n    setShowOperatorFields(!(event === ColorSchemeEnum.Green || event === ColorSchemeEnum.Red));\n  };\n  return _jsxs(Form, { onFinish: onChange, initialValues: config, requiredMark: \"optional\", layout: \"vertical\", children: [\n    _jsxs(Row, { gutter: 12, children: [\n      _jsx(Col, { span: 12, children:\n        _jsx(FormItem, { name: \"column\", label: t('Column'), rules: rulesRequired, initialValue: (_columns$ = columns[0]) == null ? void 0 : _columns$.value, children:\n          _jsx(Select, { ariaLabel: t('Select column'), options: columns }) }\n        ) }\n      ),\n      _jsx(Col, { span: 12, children:\n        _jsx(FormItem, { name: \"colorScheme\", label: t('Color scheme'), rules: rulesRequired, initialValue: colorScheme[0].value, children:\n          _jsx(Select, { onChange: (event) => handleChange(event), ariaLabel: t('Color scheme'), options: [...colorScheme, ...extraColorChoices] }) }\n        ) }\n      )] }\n    ),\n    _jsx(FormItem, { noStyle: true, shouldUpdate: shouldFormItemUpdate, children:\n      showOperatorFields ? renderOperatorFields : _jsx(Row, { gutter: 12, children:\n        _jsx(Col, { span: 6, children: renderOperator({ showOnlyNone: true }) }) }\n      ) }\n    ),\n    _jsx(FormItem, { children:\n      _jsx(JustifyEnd, { children:\n        _jsx(Button, { htmlType: \"submit\", buttonStyle: \"primary\", children:\n          t('Apply') }\n        ) }\n      ) }\n    )] }\n  );\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}