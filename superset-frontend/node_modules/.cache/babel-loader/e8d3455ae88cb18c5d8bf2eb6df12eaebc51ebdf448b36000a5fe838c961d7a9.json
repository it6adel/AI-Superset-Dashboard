{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useLayoutEffect, useRef, useState } from 'react';\n/**\n * This hook encapsulates logic to support truncation of child HTML\n * elements contained in a fixed-width parent HTML element.  Given\n * a ref to the parent element and optionally a ref to the \"+x\"\n * component that shows the number of truncated items, this hook\n * will return the number of elements that are not fully visible\n * (including those completely hidden) and whether any elements\n * are completely hidden.\n */\nconst useChildElementTruncation = () => {\n  const [elementsTruncated, setElementsTruncated] = useState(0);\n  const [hasHiddenElements, setHasHiddenElements] = useState(false);\n  const elementRef = useRef(null);\n  const plusRef = useRef(null);\n  useLayoutEffect(() => {var _elementRef$current;\n    const onResize = () => {\n      const currentElement = elementRef.current;\n      if (!currentElement) {\n        return;\n      }\n      const plusRefElement = plusRef.current;\n      const { scrollWidth, clientWidth, childNodes } = currentElement;\n      if (scrollWidth > clientWidth) {\n        // \"...\" is around 6px wide\n        const truncationWidth = 6;\n        const plusSize = (plusRefElement == null ? void 0 : plusRefElement.offsetWidth) || 0;\n        const maxWidth = clientWidth - truncationWidth;\n        const elementsCount = childNodes.length;\n        let width = 0;\n        let hiddenElements = 0;\n        for (let i = 0; i < elementsCount; i += 1) {\n          const itemWidth = childNodes[i].offsetWidth;\n          const remainingWidth = maxWidth - width - plusSize;\n          // assures it shows +{number} only when the item is not visible\n          if (remainingWidth <= 0) {\n            hiddenElements += 1;\n          }\n          width += itemWidth;\n        }\n        if (elementsCount > 1 && hiddenElements) {\n          setHasHiddenElements(true);\n          setElementsTruncated(hiddenElements);\n        } else\n        {\n          setHasHiddenElements(false);\n          setElementsTruncated(1);\n        }\n      } else\n      {\n        setHasHiddenElements(false);\n        setElementsTruncated(0);\n      }\n    };\n    const obs = new ResizeObserver(onResize);\n    const element = (_elementRef$current = elementRef.current) == null ? void 0 : _elementRef$current.parentElement;\n    if (element) {\n      obs.observe(element);\n    }\n    onResize();\n    return () => {\n      obs.disconnect();\n    };\n  }, [plusRef.current]); // plus is rendered dynamically - the component rerenders the hook when plus appears, this makes sure that useLayoutEffect is rerun\n  return [elementRef, plusRef, elementsTruncated, hasHiddenElements];\n};\nexport default useChildElementTruncation;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}