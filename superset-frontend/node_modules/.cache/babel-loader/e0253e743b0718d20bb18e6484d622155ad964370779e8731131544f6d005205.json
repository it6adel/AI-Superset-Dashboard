{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { t } from '@superset-ui/core';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from './componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse({\n  currentNode = {},\n  components = {},\n  filterFields = [],\n  selectedChartId\n}) {\n  if (!currentNode) {\n    return null;\n  }\n\n  const { type } = currentNode;\n  if (\n  CHART_TYPE === type &&\n  currentNode &&\n  currentNode.meta &&\n  currentNode.meta.chartId)\n  {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n      currentNode.meta.sliceName || `${type} ${currentNode.meta.chartId}`,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId\n    };\n\n    return {\n      ...chartNode,\n      children: []\n    };\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {\n    currentNode.children.forEach((child) => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId\n      });\n\n      const childType = components[child].type;\n      if (FILTER_SCOPE_CONTAINER_TYPES.includes(childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = children.concat(childNodeTree);\n      }\n    });\n  }\n\n  if (FILTER_SCOPE_CONTAINER_TYPES.includes(type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n      currentNode.meta && currentNode.meta.text ?\n      currentNode.meta.text :\n      `${type} ${currentNode.id}`;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children\n    };\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree({\n  components = {},\n  filterFields = [],\n  selectedChartId\n}) {\n  if (_isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId\n  });\n  return [\n  {\n    ...root\n  }];\n\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}