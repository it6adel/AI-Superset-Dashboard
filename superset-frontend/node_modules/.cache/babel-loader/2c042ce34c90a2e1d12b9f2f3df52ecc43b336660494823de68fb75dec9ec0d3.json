{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// These are control configurations that are shared ONLY within the DeckGL viz plugin repo.\n\nimport {\n  FeatureFlag,\n  isFeatureEnabled,\n  t,\n  validateNonEmpty,\n  validateMapboxStylesUrl } from\n'@superset-ui/core';\nimport { D3_FORMAT_OPTIONS, sharedControls } from '@superset-ui/chart-controls';\nimport { columnChoices, PRIMARY_COLOR } from './controls';import { jsxs as _jsxs, jsx as _jsx } from \"@emotion/react/jsx-runtime\";\n\nconst DEFAULT_VIEWPORT = {\n  longitude: 6.85236157047845,\n  latitude: 31.222656842808707,\n  zoom: 1,\n  bearing: 0,\n  pitch: 0\n};\n\nconst sandboxUrl =\n'https://github.com/apache/superset/' +\n'blob/master/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/sandbox.ts';\nconst jsFunctionInfo =\n_jsxs(\"div\", { children: [\n  t(\n    'For more information about objects are in context in the scope of this function, refer to the'\n  ),\n  _jsxs(\"a\", { href: sandboxUrl, children: [t(\" source code of Superset's sandboxed parser\"), \".\"] }), \".\"] }\n\n);\n\n\nfunction jsFunctionControl(\nlabel,\ndescription,\nextraDescr = null,\nheight = 100,\ndefaultText = '')\n{\n  return {\n    type: 'TextAreaControl',\n    language: 'javascript',\n    label,\n    description,\n    height,\n    default: defaultText,\n    aboveEditorSection:\n    _jsxs(\"div\", { children: [\n      _jsx(\"p\", { children: description }),\n      _jsx(\"p\", { children: jsFunctionInfo }),\n      extraDescr] }\n    ),\n\n    warning: !isFeatureEnabled(FeatureFlag.EnableJavascriptControls) ?\n    t(\n      'This functionality is disabled in your environment for security reasons.'\n    ) :\n    null,\n    readOnly: !isFeatureEnabled(FeatureFlag.EnableJavascriptControls)\n  };\n}\n\nexport const filterNulls = {\n  name: 'filter_nulls',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Ignore null locations'),\n    default: true,\n    description: t('Whether to ignore locations that are null')\n  }\n};\n\nexport const autozoom = {\n  name: 'autozoom',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Auto Zoom'),\n    default: true,\n    renderTrigger: true,\n    description: t(\n      'When checked, the map will zoom to your data after each query'\n    )\n  }\n};\n\nexport const dimension = {\n  name: 'dimension',\n  config: {\n    ...sharedControls.groupby,\n    label: t('Dimension'),\n    description: t('Select a dimension'),\n    multi: false,\n    default: null\n  }\n};\n\nexport const jsColumns = {\n  name: 'js_columns',\n  config: {\n    ...sharedControls.groupby,\n    label: t('Extra data for JS'),\n    default: [],\n    description: t(\n      'List of extra columns made available in JavaScript functions'\n    )\n  }\n};\n\nexport const jsDataMutator = {\n  name: 'js_data_mutator',\n  config: jsFunctionControl(\n    t('JavaScript data interceptor'),\n    t(\n      'Define a javascript function that receives the data array used in the visualization ' +\n      'and is expected to return a modified version of that array. This can be used ' +\n      'to alter properties of the data, filter, or enrich the array.'\n    )\n  )\n};\n\nexport const jsTooltip = {\n  name: 'js_tooltip',\n  config: jsFunctionControl(\n    t('JavaScript tooltip generator'),\n    t(\n      'Define a function that receives the input and outputs the content for a tooltip'\n    )\n  )\n};\n\nexport const jsOnclickHref = {\n  name: 'js_onclick_href',\n  config: jsFunctionControl(\n    t('JavaScript onClick href'),\n    t('Define a function that returns a URL to navigate to when user clicks')\n  )\n};\n\nexport const legendFormat = {\n  name: 'legend_format',\n  config: {\n    label: t('Legend Format'),\n    description: t('Choose the format for legend values'),\n    type: 'SelectControl',\n    clearable: false,\n    default: D3_FORMAT_OPTIONS[0][0],\n    choices: D3_FORMAT_OPTIONS,\n    renderTrigger: true,\n    freeForm: true\n  }\n};\n\nexport const legendPosition = {\n  name: 'legend_position',\n  config: {\n    label: t('Legend Position'),\n    description: t('Choose the position of the legend'),\n    type: 'SelectControl',\n    clearable: false,\n    default: 'tr',\n    choices: [\n    [null, t('None')],\n    ['tl', t('Top left')],\n    ['tr', t('Top right')],\n    ['bl', t('Bottom left')],\n    ['br', t('Bottom right')]],\n\n    renderTrigger: true\n  }\n};\n\nexport const lineColumn = {\n  name: 'line_column',\n  config: {\n    type: 'SelectControl',\n    label: t('Lines column'),\n    default: null,\n    description: t('The database columns that contains lines information'),\n    mapStateToProps: (state) => ({\n      choices: columnChoices(state.datasource)\n    }),\n    validators: [validateNonEmpty]\n  }\n};\n\nexport const lineWidth = {\n  name: 'line_width',\n  config: {\n    type: 'TextControl',\n    label: t('Line width'),\n    renderTrigger: true,\n    isInt: true,\n    default: 1,\n    description: t('The width of the lines')\n  }\n};\n\nexport const fillColorPicker = {\n  name: 'fill_color_picker',\n  config: {\n    label: t('Fill Color'),\n    description: t(\n      ' Set the opacity to 0 if you do not want to override the color specified in the GeoJSON'\n    ),\n    type: 'ColorPickerControl',\n    default: PRIMARY_COLOR,\n    renderTrigger: true\n  }\n};\n\nexport const strokeColorPicker = {\n  name: 'stroke_color_picker',\n  config: {\n    label: t('Stroke Color'),\n    description: t(\n      ' Set the opacity to 0 if you do not want to override the color specified in the GeoJSON'\n    ),\n    type: 'ColorPickerControl',\n    default: PRIMARY_COLOR,\n    renderTrigger: true\n  }\n};\n\nexport const filled = {\n  name: 'filled',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Filled'),\n    renderTrigger: true,\n    description: t('Whether to fill the objects'),\n    default: true\n  }\n};\n\nexport const stroked = {\n  name: 'stroked',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Stroked'),\n    renderTrigger: true,\n    description: t('Whether to display the stroke'),\n    default: false\n  }\n};\n\nexport const extruded = {\n  name: 'extruded',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Extruded'),\n    renderTrigger: true,\n    default: true,\n    description: t('Whether to make the grid 3D')\n  }\n};\n\nexport const gridSize = {\n  name: 'grid_size',\n  config: {\n    type: 'TextControl',\n    label: t('Grid Size'),\n    renderTrigger: true,\n    default: 20,\n    isInt: true,\n    description: t('Defines the grid size in pixels')\n  }\n};\n\nexport const viewport = {\n  name: 'viewport',\n  config: {\n    type: 'ViewportControl',\n    label: t('Viewport'),\n    renderTrigger: false,\n    description: t('Parameters related to the view and perspective on the map'),\n    // default is whole world mostly centered\n    default: DEFAULT_VIEWPORT,\n    // Viewport changes shouldn't prompt user to re-run query\n    dontRefreshOnChange: true\n  }\n};\n\nexport const spatial = {\n  name: 'spatial',\n  config: {\n    type: 'SpatialControl',\n    label: t('Longitude & Latitude'),\n    validators: [validateNonEmpty],\n    description: t('Point to your spatial columns'),\n    mapStateToProps: (state) => ({\n      choices: columnChoices(state.datasource)\n    })\n  }\n};\n\nexport const pointRadiusFixed = {\n  name: 'point_radius_fixed',\n  config: {\n    type: 'FixedOrMetricControl',\n    label: t('Point Size'),\n    default: { type: 'fix', value: 1000 },\n    description: t('Fixed point radius'),\n    mapStateToProps: (state) => ({\n      datasource: state.datasource\n    })\n  }\n};\n\nexport const multiplier = {\n  name: 'multiplier',\n  config: {\n    type: 'TextControl',\n    label: t('Multiplier'),\n    isFloat: true,\n    renderTrigger: true,\n    default: 1,\n    description: t('Factor to multiply the metric by')\n  }\n};\n\nexport const lineType = {\n  name: 'line_type',\n  config: {\n    type: 'SelectControl',\n    label: t('Lines encoding'),\n    clearable: false,\n    default: 'json',\n    description: t('The encoding format of the lines'),\n    choices: [\n    ['polyline', t('Polyline')],\n    ['json', t('JSON')],\n    ['geohash', t('geohash (square)')]]\n\n  }\n};\n\nexport const reverseLongLat = {\n  name: 'reverse_long_lat',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Reverse Lat & Long'),\n    default: false\n  }\n};\n\nexport const mapboxStyle = {\n  name: 'mapbox_style',\n  config: {\n    type: 'SelectControl',\n    label: t('Map Style'),\n    clearable: false,\n    renderTrigger: true,\n    freeForm: true,\n    validators: [validateMapboxStylesUrl],\n    choices: [\n    ['mapbox://styles/mapbox/streets-v9', t('Streets')],\n    ['mapbox://styles/mapbox/dark-v9', t('Dark')],\n    ['mapbox://styles/mapbox/light-v9', t('Light')],\n    ['mapbox://styles/mapbox/satellite-streets-v9', t('Satellite Streets')],\n    ['mapbox://styles/mapbox/satellite-v9', t('Satellite')],\n    ['mapbox://styles/mapbox/outdoors-v9', t('Outdoors')]],\n\n    default: 'mapbox://styles/mapbox/light-v9',\n    description: t(\n      'Base layer map style. See Mapbox documentation: %s',\n      'https://docs.mapbox.com/help/glossary/style-url/'\n    )\n  }\n};\n\nexport const geojsonColumn = {\n  name: 'geojson',\n  config: {\n    type: 'SelectControl',\n    label: t('GeoJson Column'),\n    validators: [validateNonEmpty],\n    description: t('Select the geojson column'),\n    mapStateToProps: (state) => ({\n      choices: columnChoices(state.datasource)\n    })\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}