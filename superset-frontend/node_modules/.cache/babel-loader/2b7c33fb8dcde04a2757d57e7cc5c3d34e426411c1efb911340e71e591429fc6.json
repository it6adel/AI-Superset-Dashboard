{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, ensureIsArray, isPhysicalColumn } from '@superset-ui/core';\nexport default function buildQuery(formData) {\n  const { groupbyColumns = [], groupbyRows = [], extra_form_data } = formData;\n  const time_grain_sqla = (extra_form_data == null ? void 0 : extra_form_data.time_grain_sqla) || formData.time_grain_sqla;\n  // TODO: add deduping of AdhocColumns\n  const columns = Array.from(new Set([\n  ...ensureIsArray(groupbyColumns),\n  ...ensureIsArray(groupbyRows)]\n  )).map((col) => {var _formData$temporal_co;\n    if (isPhysicalColumn(col) &&\n    time_grain_sqla && (\n    formData != null && (_formData$temporal_co = formData.temporal_columns_lookup) != null && _formData$temporal_co[col] ||\n    formData.granularity_sqla === col)) {\n      return {\n        timeGrain: time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        sqlExpression: col,\n        label: col,\n        expressionType: 'SQL'\n      };\n    }\n    return col;\n  });\n  return buildQueryContext(formData, (baseQueryObject) => {\n    const { series_limit_metric, metrics, order_desc } = baseQueryObject;\n    let orderBy;\n    if (series_limit_metric) {\n      orderBy = [[series_limit_metric, !order_desc]];\n    } else\n    if (Array.isArray(metrics) && metrics[0]) {\n      orderBy = [[metrics[0], !order_desc]];\n    }\n    return [\n    {\n      ...baseQueryObject,\n      orderby: orderBy,\n      columns\n    }];\n\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}