{"ast":null,"code":"import { makeApi, t, getErrorText } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { onSave } from './dashboardState';\nexport const DASHBOARD_INFO_UPDATED = 'DASHBOARD_INFO_UPDATED';\nexport const DASHBOARD_INFO_FILTERS_CHANGED = 'DASHBOARD_INFO_FILTERS_CHANGED';\n// updates partially changed dashboard info\nexport function dashboardInfoChanged(newInfo) {\n  return { type: DASHBOARD_INFO_UPDATED, newInfo };\n}\nexport function nativeFiltersConfigChanged(newInfo) {\n  return { type: DASHBOARD_INFO_FILTERS_CHANGED, newInfo };\n}\nexport const SAVE_CHART_CONFIG_BEGIN = 'SAVE_CHART_CONFIG_BEGIN';\nexport const SAVE_CHART_CONFIG_COMPLETE = 'SAVE_CHART_CONFIG_COMPLETE';\nexport const SAVE_CHART_CONFIG_FAIL = 'SAVE_CHART_CONFIG_FAIL';\nexport const saveChartConfiguration = ({ chartConfiguration, globalChartConfiguration }) => async (dispatch, getState) => {\n  dispatch({\n    type: SAVE_CHART_CONFIG_BEGIN,\n    chartConfiguration,\n    globalChartConfiguration\n  });\n  const { id, metadata } = getState().dashboardInfo;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}`\n  });\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        chart_configuration: chartConfiguration != null ? chartConfiguration : metadata.chart_configuration,\n        global_chart_configuration: globalChartConfiguration != null ? globalChartConfiguration : metadata.global_chart_configuration\n      })\n    });\n    dispatch(dashboardInfoChanged({\n      metadata: JSON.parse(response.result.json_metadata)\n    }));\n    dispatch({\n      type: SAVE_CHART_CONFIG_COMPLETE,\n      chartConfiguration,\n      globalChartConfiguration\n    });\n  }\n  catch (err) {\n    dispatch({\n      type: SAVE_CHART_CONFIG_FAIL,\n      chartConfiguration,\n      globalChartConfiguration\n    });\n    dispatch(addDangerToast(t('Failed to save cross-filter scoping')));\n  }\n};\nexport const SET_FILTER_BAR_ORIENTATION = 'SET_FILTER_BAR_ORIENTATION';\nexport function setFilterBarOrientation(filterBarOrientation) {\n  return { type: SET_FILTER_BAR_ORIENTATION, filterBarOrientation };\n}\nexport const SET_CROSS_FILTERS_ENABLED = 'SET_CROSS_FILTERS_ENABLED';\nexport function setCrossFiltersEnabled(crossFiltersEnabled) {\n  return { type: SET_CROSS_FILTERS_ENABLED, crossFiltersEnabled };\n}\nexport function saveFilterBarOrientation(orientation) {\n  return async (dispatch, getState) => {\n    const { id, metadata } = getState().dashboardInfo;\n    const updateDashboard = makeApi({\n      method: 'PUT',\n      endpoint: `/api/v1/dashboard/${id}`\n    });\n    try {\n      const response = await updateDashboard({\n        json_metadata: JSON.stringify({\n          ...metadata,\n          filter_bar_orientation: orientation\n        })\n      });\n      const updatedDashboard = response.result;\n      const lastModifiedTime = response.last_modified_time;\n      if (updatedDashboard.json_metadata) {\n        const metadata = JSON.parse(updatedDashboard.json_metadata);\n        if (metadata.filter_bar_orientation) {\n          dispatch(setFilterBarOrientation(metadata.filter_bar_orientation));\n        }\n      }\n      if (lastModifiedTime) {\n        dispatch(onSave(lastModifiedTime));\n      }\n    }\n    catch (errorObject) {\n      const errorText = await getErrorText(errorObject, 'dashboard');\n      dispatch(addDangerToast(errorText));\n      throw errorObject;\n    }\n  };\n}\nexport function saveCrossFiltersSetting(crossFiltersEnabled) {\n  return async (dispatch, getState) => {\n    const { id, metadata } = getState().dashboardInfo;\n    const updateDashboard = makeApi({\n      method: 'PUT',\n      endpoint: `/api/v1/dashboard/${id}`\n    });\n    try {\n      const response = await updateDashboard({\n        json_metadata: JSON.stringify({\n          ...metadata,\n          cross_filters_enabled: crossFiltersEnabled\n        })\n      });\n      const updatedDashboard = response.result;\n      const lastModifiedTime = response.last_modified_time;\n      if (updatedDashboard.json_metadata) {\n        const metadata = JSON.parse(updatedDashboard.json_metadata);\n        dispatch(setCrossFiltersEnabled(metadata.cross_filters_enabled));\n      }\n      if (lastModifiedTime) {\n        dispatch(onSave(lastModifiedTime));\n      }\n    }\n    catch (errorObject) {\n      const errorText = await getErrorText(errorObject, 'dashboard');\n      dispatch(addDangerToast(errorText));\n      throw errorObject;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}