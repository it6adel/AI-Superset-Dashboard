{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nconst TAB_ID_CHANNEL_NAME = 'tab_id_channel';\nconst channel = new BroadcastChannel(TAB_ID_CHANNEL_NAME);\nexport function useTabId() {\n  const [tabId, setTabId] = useState();\n  function isStorageAvailable() {\n    try {\n      return window.localStorage && window.sessionStorage;\n    }\n    catch (error) {\n      return false;\n    }\n  }\n  useEffect(() => {\n    if (!isStorageAvailable()) {\n      if (!tabId) {\n        setTabId(nanoid());\n      }\n      return;\n    }\n    const updateTabId = () => {\n      let lastTabId;\n      try {\n        lastTabId = window.localStorage.getItem('last_tab_id');\n      }\n      catch (error) {\n\n        // continue regardless of error\n      }const newTabId = String(lastTabId ? Number.parseInt(lastTabId, 10) + 1 : 1);\n      try {\n        window.sessionStorage.setItem('tab_id', newTabId);\n        window.localStorage.setItem('last_tab_id', newTabId);\n      }\n      catch (error) {\n\n        // continue regardless of error\n      }setTabId(newTabId);\n    };\n    let storedTabId;\n    try {\n      storedTabId = window.sessionStorage.getItem('tab_id');\n    }\n    catch (error) {\n\n      // continue regardless of error\n    }if (storedTabId) {\n      channel.postMessage({\n        type: 'REQUESTING_TAB_ID',\n        tabId: storedTabId\n      });\n      setTabId(storedTabId);\n    } else\n    {\n      updateTabId();\n    }\n    channel.onmessage = (messageEvent) => {\n      if (messageEvent.data.tabId === tabId) {\n        if (messageEvent.data.type === 'REQUESTING_TAB_ID') {\n          const message = {\n            type: 'TAB_ID_DENIED',\n            tabId: messageEvent.data.tabId\n          };\n          channel.postMessage(message);\n        } else\n        if (messageEvent.data.type === 'TAB_ID_DENIED') {\n          updateTabId();\n        }\n      }\n    };\n  }, [tabId]);\n  return tabId;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}