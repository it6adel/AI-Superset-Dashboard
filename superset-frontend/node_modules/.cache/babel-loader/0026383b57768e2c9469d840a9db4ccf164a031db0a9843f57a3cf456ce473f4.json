{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { init as echartsInit } from 'echarts';\nimport { createRef, useEffect } from 'react';\nimport { createDragGraphicOptions, dataToZoomConfigs, MAX_ZOOM_LEVEL, MIN_ZOOM_LEVEL, zoomConfigsToData } from './zoomUtil';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const ZoomConfigsChart = ({ value, onChange = () => {} }) => {\n  const ref = /*#__PURE__*/createRef();\n  useEffect(() => {\n    if (!ref.current) {\n      return undefined;\n    }\n    // TODO check if this can be applied here\n    if (value === null || value === undefined) {\n      return undefined;\n    }\n    let timer;\n    const barWidth = 15;\n    const data = zoomConfigsToData(value.values);\n    const chart = echartsInit(ref.current);\n    const option = {\n      xAxis: {\n        min: 0,\n        name: t('Size in pixels'),\n        nameLocation: 'center',\n        nameGap: 25\n      },\n      yAxis: {\n        type: 'category',\n        min: MIN_ZOOM_LEVEL,\n        max: MAX_ZOOM_LEVEL,\n        name: t('Zoom level'),\n        nameLocation: 'center',\n        nameRotate: 90,\n        nameGap: 25\n      },\n      dataset: {\n        dimensions: ['width', 'height', 'zoom'],\n        source: data\n      },\n      grid: {\n        top: 12,\n        left: 40\n      },\n      series: [\n      {\n        id: 'width',\n        name: 'width',\n        type: 'bar',\n        animation: false,\n        showBackground: true,\n        barWidth,\n        barGap: '0%',\n        label: {\n          show: true,\n          formatter: '{a}: {@width}'\n        },\n        encode: {\n          x: 'width',\n          y: 'zoom'\n        }\n      },\n      {\n        id: 'height',\n        name: 'height',\n        type: 'bar',\n        animation: false,\n        showBackground: true,\n        barWidth,\n        barGap: '0%',\n        label: {\n          show: true,\n          formatter: '{a}: {@height}'\n        },\n        encode: {\n          x: 'height',\n          y: 'zoom'\n        }\n      }]\n\n    };\n    chart.setOption(option);\n    const onDrag = function (dataIndex, itemIndex) {\n      if (dataIndex === undefined) {\n        return;\n      }\n      // eslint-disable-next-line react/no-this-in-sfc\n      const newPosition = chart.convertFromPixel('grid', [this.x, this.y]);\n      if (typeof newPosition === 'number') {\n        return;\n      }\n      const roundedPosition = Math.round(newPosition[0]);\n      const newRoundedPosition = roundedPosition < 0 ? 0 : roundedPosition;\n      data[dataIndex][itemIndex] = newRoundedPosition;\n      chart.setOption({\n        dataset: {\n          source: data\n        }\n      });\n      if (timer !== undefined) {\n        clearTimeout(timer);\n      }\n      timer = window.setTimeout(() => {\n        const newValues = dataToZoomConfigs(data);\n        onChange({ ...value, values: newValues });\n      }, 200);\n    };\n    const onWidthDrag = function (dataIndex) {\n      onDrag.call(this, dataIndex, 0);\n    };\n    const onHeightDrag = function (dataIndex) {\n      onDrag.call(this, dataIndex, 1);\n    };\n    // TODO listen to resize event and redraw chart\n    // TODO rearrange the draghandlers when the chart range changes\n    chart.setOption({\n      graphic: createDragGraphicOptions({\n        data,\n        onWidthDrag,\n        onHeightDrag,\n        barWidth,\n        chart\n      })\n    });\n    // chart.on('click', 'series', (params) => {\n    //   const clickedData: number[] = params.data as number[];\n    //   const zoomLevel: number = clickedData[2];\n    //   // TODO we have to set a flag on value that indicates, which zoomLevel should be active\n    //   // TODO maybe it's better to add a callback to the map that triggers when the zoom\n    //   //      in the map changes. This can then be displayed on the zoom chart.\n    // });\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value]);\n  return _jsx(\"div\", { ref: ref, style: { height: '1300px', width: '100%' } });\n};\nexport default ZoomConfigsChart;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}