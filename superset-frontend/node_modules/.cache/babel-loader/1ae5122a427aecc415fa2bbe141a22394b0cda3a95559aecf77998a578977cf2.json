{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Supercluster from 'supercluster';\nimport { DEFAULT_POINT_RADIUS, DEFAULT_MAX_ZOOM } from './MapBox';\n\nconst NOOP = () => {};\n\nexport default function transformProps(chartProps) {\n  const { width, height, formData, hooks, queriesData } = chartProps;\n  const { onError = NOOP, setControlValue = NOOP } = hooks;\n  const { bounds, geoJSON, hasCustomMetric, mapboxApiKey } =\n  queriesData[0].data;\n  const {\n    clusteringRadius,\n    globalOpacity,\n    mapboxColor,\n    mapboxStyle,\n    pandasAggfunc,\n    pointRadius,\n    pointRadiusUnit,\n    renderWhileDragging\n  } = formData;\n\n  // Validate mapbox color\n  const rgb = /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/.exec(mapboxColor);\n  if (rgb === null) {\n    onError(\"Color field must be of form 'rgb(%d, %d, %d)'\");\n\n    return {};\n  }\n\n  const opts = {\n    maxZoom: DEFAULT_MAX_ZOOM,\n    radius: clusteringRadius\n  };\n  if (hasCustomMetric) {\n    opts.initial = () => ({\n      sum: 0,\n      squaredSum: 0,\n      min: Infinity,\n      max: -Infinity\n    });\n    opts.map = (prop) => ({\n      sum: prop.metric,\n      squaredSum: prop.metric ** 2,\n      min: prop.metric,\n      max: prop.metric\n    });\n    opts.reduce = (accu, prop) => {\n      // Temporarily disable param-reassignment linting to work with supercluster's api\n      /* eslint-disable no-param-reassign */\n      accu.sum += prop.sum;\n      accu.squaredSum += prop.squaredSum;\n      accu.min = Math.min(accu.min, prop.min);\n      accu.max = Math.max(accu.max, prop.max);\n      /* eslint-enable no-param-reassign */\n    };\n  }\n  const clusterer = new Supercluster(opts);\n  clusterer.load(geoJSON.features);\n\n  return {\n    width,\n    height,\n    aggregatorName: pandasAggfunc,\n    bounds,\n    clusterer,\n    globalOpacity,\n    hasCustomMetric,\n    mapboxApiKey,\n    mapStyle: mapboxStyle,\n    onViewportChange({ latitude, longitude, zoom }) {\n      setControlValue('viewport_longitude', longitude);\n      setControlValue('viewport_latitude', latitude);\n      setControlValue('viewport_zoom', zoom);\n    },\n    pointRadius: pointRadius === 'Auto' ? DEFAULT_POINT_RADIUS : pointRadius,\n    pointRadiusUnit,\n    renderWhileDragging,\n    rgb\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}