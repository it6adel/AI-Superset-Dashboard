{"ast":null,"code":"function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Component, cloneElement } from 'react';\nimport { t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport copyTextToClipboard from 'src/utils/copy';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst defaultProps = {\n  copyNode: _jsx(\"span\", { children: t('Copy') }),\n  onCopyEnd: () => {},\n  shouldShowText: true,\n  wrapped: true,\n  tooltipText: t('Copy to clipboard'),\n  hideTooltip: false\n};var _ref = process.env.NODE_ENV === \"production\" ? { name: \"8irbms\", styles: \"display:inline-flex;align-items:center\" } : { name: \"mx2pbj-CopyToClipboard\", styles: \"display:inline-flex;align-items:center;label:CopyToClipboard;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FkZWwvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvQ29weVRvQ2xpcGJvYXJkL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4RXNCIiwiZmlsZSI6Ii9ob21lL2FkZWwvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvQ29weVRvQ2xpcGJvYXJkL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdCB9IGZyb20gJ0BzdXBlcnNldC11aS9jb3JlJztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Ub29sdGlwJztcbmltcG9ydCB3aXRoVG9hc3RzIGZyb20gJ3NyYy9jb21wb25lbnRzL01lc3NhZ2VUb2FzdHMvd2l0aFRvYXN0cyc7XG5pbXBvcnQgY29weVRleHRUb0NsaXBib2FyZCBmcm9tICdzcmMvdXRpbHMvY29weSc7XG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgY29weU5vZGU6IDxzcGFuPnt0KCdDb3B5Jyl9PC9zcGFuPixcbiAgICBvbkNvcHlFbmQ6ICgpID0+IHsgfSxcbiAgICBzaG91bGRTaG93VGV4dDogdHJ1ZSxcbiAgICB3cmFwcGVkOiB0cnVlLFxuICAgIHRvb2x0aXBUZXh0OiB0KCdDb3B5IHRvIGNsaXBib2FyZCcpLFxuICAgIGhpZGVUb29sdGlwOiBmYWxzZSxcbn07XG5jbGFzcyBDb3B5VG9DbGlwYm9hcmQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLmNvcHlUb0NsaXBib2FyZCA9IHRoaXMuY29weVRvQ2xpcGJvYXJkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBvbkNsaWNrKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5nZXRUZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmdldFRleHQoKGQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvcHlUb0NsaXBib2FyZChQcm9taXNlLnJlc29sdmUoZCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvcHlUb0NsaXBib2FyZChQcm9taXNlLnJlc29sdmUodGhpcy5wcm9wcy50ZXh0IHx8ICcnKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RGVjb3JhdGVkQ29weU5vZGUoKSB7XG4gICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jb3B5Tm9kZSwge1xuICAgICAgICAgICAgc3R5bGU6IHsgY3Vyc29yOiAncG9pbnRlcicgfSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25DbGljayxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvcHlUb0NsaXBib2FyZCh0ZXh0VG9Db3B5KSB7XG4gICAgICAgIGNvcHlUZXh0VG9DbGlwYm9hcmQoKCkgPT4gdGV4dFRvQ29weSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuYWRkU3VjY2Vzc1RvYXN0KHQoJ0NvcGllZCB0byBjbGlwYm9hcmQhJykpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuYWRkRGFuZ2VyVG9hc3QodCgnU29ycnksIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGNvcHlpbmcuIFVzZSBDdHJsIC8gQ21kICsgQyEnKSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNvcHlFbmQpXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNvcHlFbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbmRlclRvb2x0aXAoY3Vyc29yKSB7XG4gICAgICAgIHJldHVybiAoPD5cbiAgICAgICAgeyF0aGlzLnByb3BzLmhpZGVUb29sdGlwID8gKDxUb29sdGlwIGlkPVwiY29weS10by1jbGlwYm9hcmQtdG9vbHRpcFwiIHBsYWNlbWVudD1cInRvcFJpZ2h0XCIgc3R5bGU9e3sgY3Vyc29yIH19IHRpdGxlPXt0aGlzLnByb3BzLnRvb2x0aXBUZXh0IHx8ICcnfSB0cmlnZ2VyPXtbJ2hvdmVyJ119IGFycm93PXt7IHBvaW50QXRDZW50ZXI6IHRydWUgfX0+XG4gICAgICAgICAgICB7dGhpcy5nZXREZWNvcmF0ZWRDb3B5Tm9kZSgpfVxuICAgICAgICAgIDwvVG9vbHRpcD4pIDogKHRoaXMuZ2V0RGVjb3JhdGVkQ29weU5vZGUoKSl9XG4gICAgICA8Lz4pO1xuICAgIH1cbiAgICByZW5kZXJOb3RXcmFwcGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJUb29sdGlwKCdwb2ludGVyJyk7XG4gICAgfVxuICAgIHJlbmRlckxpbmsoKSB7XG4gICAgICAgIHJldHVybiAoPHNwYW4gY3NzPXt7IGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19PlxuICAgICAgICB7dGhpcy5wcm9wcy5zaG91bGRTaG93VGV4dCAmJiB0aGlzLnByb3BzLnRleHQgJiYgKDxzcGFuIGNsYXNzTmFtZT1cIm0tci01XCIgZGF0YS10ZXN0PVwic2hvcnQtdXJsXCI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy50ZXh0fVxuICAgICAgICAgIDwvc3Bhbj4pfVxuICAgICAgICB7dGhpcy5yZW5kZXJUb29sdGlwKCdwb2ludGVyJyl9XG4gICAgICA8L3NwYW4+KTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHdyYXBwZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmICghd3JhcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTm90V3JhcHBlZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckxpbmsoKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCB3aXRoVG9hc3RzKENvcHlUb0NsaXBib2FyZCk7XG4iXX0= */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nclass CopyToClipboard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.copyToClipboard = this.copyToClipboard.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n  onClick() {\n    if (this.props.getText) {\n      this.props.getText((d) => {\n        this.copyToClipboard(Promise.resolve(d));\n      });\n    } else\n    {\n      this.copyToClipboard(Promise.resolve(this.props.text || ''));\n    }\n  }\n  getDecoratedCopyNode() {\n    return /*#__PURE__*/cloneElement(this.props.copyNode, {\n      style: { cursor: 'pointer' },\n      onClick: this.onClick\n    });\n  }\n  copyToClipboard(textToCopy) {\n    copyTextToClipboard(() => textToCopy).\n    then(() => {\n      this.props.addSuccessToast(t('Copied to clipboard!'));\n    }).\n    catch(() => {\n      this.props.addDangerToast(t('Sorry, your browser does not support copying. Use Ctrl / Cmd + C!'));\n    }).\n    finally(() => {\n      if (this.props.onCopyEnd)\n      this.props.onCopyEnd();\n    });\n  }\n  renderTooltip(cursor) {\n    return _jsx(_Fragment, { children:\n      !this.props.hideTooltip ? _jsx(Tooltip, { id: \"copy-to-clipboard-tooltip\", placement: \"topRight\", style: { cursor }, title: this.props.tooltipText || '', trigger: ['hover'], arrow: { pointAtCenter: true }, children:\n        this.getDecoratedCopyNode() }\n      ) : this.getDecoratedCopyNode() }\n    );\n  }\n  renderNotWrapped() {\n    return this.renderTooltip('pointer');\n  }\n  renderLink() {\n    return _jsxs(\"span\", { css: _ref, children: [\n      this.props.shouldShowText && this.props.text && _jsx(\"span\", { className: \"m-r-5\", children:\n        this.props.text }\n      ),\n      this.renderTooltip('pointer')] }\n    );\n  }\n  render() {\n    const { wrapped } = this.props;\n    if (!wrapped) {\n      return this.renderNotWrapped();\n    }\n    return this.renderLink();\n  }\n}CopyToClipboard.defaultProps = defaultProps;\nexport default withToasts(CopyToClipboard);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}