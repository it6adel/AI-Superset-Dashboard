{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useRef } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { css, styled, usePrevious, useTheme } from '@superset-ui/core';\nimport { Global } from '@emotion/react';\nimport { SQL_EDITOR_LEFTBAR_WIDTH } from 'src/SqlLab/constants';\nimport { queryEditorSetSelectedText } from 'src/SqlLab/actions/sqlLab';\nimport { FullSQLEditor as AceEditor } from 'src/components/AsyncAceEditor';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { useAnnotations } from './useAnnotations';\nimport { useKeywords } from './useKeywords';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledAceEditor = styled(AceEditor)`\n  ${({ theme }) => css`\n    && {\n      // double class is better than !important\n      border: 1px solid ${theme.colors.grayscale.light2};\n      font-feature-settings:\n        'liga' off,\n        'calt' off;\n    }\n  `}\n`;\nconst AceEditorWrapper = ({ autocomplete, onBlur = () => {}, onChange = () => {}, queryEditorId, onCursorPositionChange, height, hotkeys }) => {var _queryEditor$sql;\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n  'id',\n  'dbId',\n  'sql',\n  'catalog',\n  'schema',\n  'templateParams']\n  );\n  // Prevent a maximum update depth exceeded error\n  // by skipping access the unsaved query editor state\n  const cursorPosition = useSelector(({ sqlLab: { queryEditors } }) => {\n    const { cursorPosition } = {\n      ...queryEditors.find(({ id }) => id === queryEditorId)\n    };\n    return cursorPosition != null ? cursorPosition : { row: 0, column: 0 };\n  }, shallowEqual);\n  const currentSql = (_queryEditor$sql = queryEditor.sql) != null ? _queryEditor$sql : '';\n  const [sql, setSql] = useState(currentSql);\n  // The editor changeSelection is called multiple times in a row,\n  // faster than React reconciliation process, so the selected text\n  // needs to be stored out of the state to ensure changes to it\n  // get saved immediately\n  const currentSelectionCache = useRef('');\n  useEffect(() => {\n    // Making sure no text is selected from previous mount\n    dispatch(queryEditorSetSelectedText(queryEditor, null));\n  }, []);\n  const prevSql = usePrevious(currentSql);\n  useEffect(() => {\n    if (currentSql !== prevSql) {\n      setSql(currentSql);\n    }\n  }, [currentSql]);\n  const onBlurSql = () => {\n    onBlur(sql);\n  };\n  const onAltEnter = () => {\n    onBlur(sql);\n  };\n  const onEditorLoad = (editor) => {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        onAltEnter();\n      }\n    });\n    hotkeys.forEach((keyConfig) => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func\n      });\n    });\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n      // Backspace trigger 1 character selection, ignoring\n      if (selectedText !== currentSelectionCache.current &&\n      selectedText.length !== 1) {\n        dispatch(queryEditorSetSelectedText(queryEditor, selectedText));\n      }\n      currentSelectionCache.current = selectedText;\n    });\n    editor.selection.on('changeCursor', () => {\n      const cursor = editor.getCursorPosition();\n      onCursorPositionChange(cursor);\n    });\n    const { row, column } = cursorPosition;\n    editor.moveCursorToPosition({ row, column });\n    editor.focus();\n    editor.scrollToLine(row, true, true);\n  };\n  const onChangeText = (text) => {\n    if (text !== sql) {\n      setSql(text);\n      onChange(text);\n    }\n  };\n  const { data: annotations } = useAnnotations({\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema,\n    sql: currentSql,\n    templateParams: queryEditor.templateParams\n  });\n  const keywords = useKeywords({\n    queryEditorId,\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema\n  }, !autocomplete);\n  const theme = useTheme();\n  return _jsxs(_Fragment, { children: [\n    _jsx(Global, { styles: css`\n          .ace_text-layer {\n            width: 100% !important;\n          }\n\n          .ace_autocomplete {\n            // Use !important because Ace Editor applies extra CSS at the last second\n            // when opening the autocomplete.\n            width: ${theme.gridUnit * 130}px !important;\n          }\n\n          .ace_tooltip {\n            max-width: ${SQL_EDITOR_LEFTBAR_WIDTH}px;\n          }\n\n          .ace_scroller {\n            background-color: ${theme.colors.grayscale.light4};\n          }\n        ` }),\n    _jsx(StyledAceEditor, { keywords: keywords, onLoad: onEditorLoad, onBlur: onBlurSql, height: height, onChange: onChangeText, width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: autocomplete, value: sql, annotations: annotations })] }\n  );\n};\nexport default AceEditorWrapper;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}